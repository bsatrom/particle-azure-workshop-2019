
/Users/bsatrom/Development/particle/workshops/thatconf-workshop-2019/labs/lab3/target/lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015aa8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000e9ac0  000e9ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00029cb0  2**0
                  CONTENTS
  4 .data         000001bc  2003bd74  000e9ac8  0001bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000028c0  2003bf30  2003bf30  0002bf30  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000e9c84  000e9c84  00029c84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e9cac  000e9cac  00029cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001586e0  00000000  00000000  00029cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d399  00000000  00000000  00182390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004db6a  00000000  00000000  0019f729  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003e70  00000000  00000000  001ed293  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006a80  00000000  00000000  001f1103  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00046495  00000000  00000000  001f7b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00048bda  00000000  00000000  0023e018  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00123a9b  00000000  00000000  00286bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00011ba0  00000000  00000000  003aa690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	a0 6d 0e 00                                         .m..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f012 fd8a 	bl	e6b46 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f012 fdaa 	bl	e6b92 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003bd74 	.word	0x2003bd74
   d4048:	000e9ac8 	.word	0x000e9ac8
   d404c:	2003bf30 	.word	0x2003bf30
   d4050:	2003bf30 	.word	0x2003bf30
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f011 fcc9 	bl	e59f0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000e9ab8 	.word	0x000e9ab8
   d4080:	000e9a60 	.word	0x000e9a60

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9bc 	b.w	d4400 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 facd 	bl	d4628 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f011 bc7b 	b.w	e598c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f00f bf87 	b.w	e3fa8 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f00f bf85 	b.w	e3fa8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f00f bf8b 	b.w	e3fb8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f00f bf89 	b.w	e3fb8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN6IotHubD1Ev>:
static int (*__callbackDirectMethod)(char *, uint8_t *, unsigned int);

class IotHub;
static IotHub *__iotHubInstance;

class IotHub : SasToken
   d40b6:	b538      	push	{r3, r4, r5, lr}
   d40b8:	4604      	mov	r4, r0

  bool wasConnected = false;
  MQTT *client;
  String endPoint;

  struct topics
   d40ba:	f500 75fe 	add.w	r5, r0, #508	; 0x1fc
   d40be:	f500 700b 	add.w	r0, r0, #556	; 0x22c
   d40c2:	f010 fea5 	bl	e4e10 <_ZN6StringD1Ev>
   d40c6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
   d40ca:	f010 fea1 	bl	e4e10 <_ZN6StringD1Ev>
   d40ce:	f504 7003 	add.w	r0, r4, #524	; 0x20c
   d40d2:	f010 fe9d 	bl	e4e10 <_ZN6StringD1Ev>
   d40d6:	4628      	mov	r0, r5
   d40d8:	f010 fe9a 	bl	e4e10 <_ZN6StringD1Ev>
static int (*__callbackDirectMethod)(char *, uint8_t *, unsigned int);

class IotHub;
static IotHub *__iotHubInstance;

class IotHub : SasToken
   d40dc:	f504 70f6 	add.w	r0, r4, #492	; 0x1ec
   d40e0:	f010 fe96 	bl	e4e10 <_ZN6StringD1Ev>
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd38      	pop	{r3, r4, r5, pc}

000d40e8 <_Z9toggleLed6String>:
    }
  }
}

int toggleLed(String args)
{
   d40e8:	b510      	push	{r4, lr}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40ea:	4c10      	ldr	r4, [pc, #64]	; (d412c <_Z9toggleLed6String+0x44>)
    }
  }
}

int toggleLed(String args)
{
   d40ec:	ed2d 8b02 	vpush	{d8}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40f0:	ed9f 8a0f 	vldr	s16, [pc, #60]	; d4130 <_Z9toggleLed6String+0x48>
   d40f4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
   d40f8:	eeb0 0a48 	vmov.f32	s0, s16
   d40fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   d4100:	2100      	movs	r1, #0
   d4102:	4620      	mov	r0, r4
   d4104:	f000 fd48 	bl	d4b98 <_ZN12ChainableLED11setColorHSBEhfff>

  delay(1000);
   d4108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d410c:	f00f ffdd 	bl	e40ca <delay>

  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d4110:	eeb0 1a48 	vmov.f32	s2, s16
   d4114:	eef0 0a48 	vmov.f32	s1, s16
   d4118:	eeb0 0a48 	vmov.f32	s0, s16
   d411c:	4620      	mov	r0, r4
   d411e:	2100      	movs	r1, #0
   d4120:	f000 fd3a 	bl	d4b98 <_ZN12ChainableLED11setColorHSBEhfff>

  return 1;
}
   d4124:	ecbd 8b02 	vpop	{d8}
   d4128:	2001      	movs	r0, #1
   d412a:	bd10      	pop	{r4, pc}
   d412c:	2003bf34 	.word	0x2003bf34
   d4130:	00000000 	.word	0x00000000

000d4134 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d4134:	b510      	push	{r4, lr}
   d4136:	4b03      	ldr	r3, [pc, #12]	; (d4144 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d4138:	6003      	str	r3, [r0, #0]
   d413a:	4604      	mov	r4, r0
   d413c:	f000 ff5c 	bl	d4ff8 <_ZN10JsonWriterD1Ev>
   d4140:	4620      	mov	r0, r4
   d4142:	bd10      	pop	{r4, pc}
   d4144:	000e6dbc 	.word	0x000e6dbc

000d4148 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d4148:	b510      	push	{r4, lr}
   d414a:	4604      	mov	r4, r0
   d414c:	f7ff fff2 	bl	d4134 <_ZN16JsonWriterStaticILj256EED1Ev>
   d4150:	4620      	mov	r0, r4
   d4152:	f44f 7198 	mov.w	r1, #304	; 0x130
   d4156:	f011 fd12 	bl	e5b7e <_ZdlPvj>
   d415a:	4620      	mov	r0, r4
   d415c:	bd10      	pop	{r4, pc}
	...

000d4160 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil>:
{
public:
  IotHub(const char *connectionString,
   d4160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4164:	b091      	sub	sp, #68	; 0x44
  }

protected:
  bool generateSasToken();

  struct security
   d4166:	2500      	movs	r5, #0
   d4168:	9303      	str	r3, [sp, #12]
   d416a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d416e:	e880 0028 	stmia.w	r0, {r3, r5}
   d4172:	4604      	mov	r4, r0
   d4174:	9202      	str	r2, [sp, #8]
   d4176:	468a      	mov	sl, r1
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4178:	f00f fcb2 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
         void (*callbackCloud2Device)(char *, uint8_t *, unsigned int) = NULL,
         int (*callbackDirectMethod)(char *, uint8_t *, unsigned int) = NULL,
         int maxBufferSize = 500,
         time_t sasExpiryPeriodInSeconds = 3600) // default to 60 minute sas token expiry
  {
   d417c:	f884 51e4 	strb.w	r5, [r4, #484]	; 0x1e4
   d4180:	f504 75f6 	add.w	r5, r4, #492	; 0x1ec

class SasToken
{
public:
  SasToken()
  {
   d4184:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
   d4188:	495b      	ldr	r1, [pc, #364]	; (d42f8 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x198>)
   d418a:	4628      	mov	r0, r5

  bool wasConnected = false;
  MQTT *client;
  String endPoint;

  struct topics
   d418c:	f504 79fe 	add.w	r9, r4, #508	; 0x1fc
  IotHub(const char *connectionString,
         void (*callbackCloud2Device)(char *, uint8_t *, unsigned int) = NULL,
         int (*callbackDirectMethod)(char *, uint8_t *, unsigned int) = NULL,
         int maxBufferSize = 500,
         time_t sasExpiryPeriodInSeconds = 3600) // default to 60 minute sas token expiry
  {
   d4190:	f010 fe85 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>

  bool wasConnected = false;
  MQTT *client;
  String endPoint;

  struct topics
   d4194:	f504 7803 	add.w	r8, r4, #524	; 0x20c
   d4198:	4957      	ldr	r1, [pc, #348]	; (d42f8 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x198>)
   d419a:	4648      	mov	r0, r9
   d419c:	f010 fe7f 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d41a0:	f504 7707 	add.w	r7, r4, #540	; 0x21c
   d41a4:	4954      	ldr	r1, [pc, #336]	; (d42f8 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x198>)
   d41a6:	4640      	mov	r0, r8
   d41a8:	f010 fe79 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d41ac:	f504 760b 	add.w	r6, r4, #556	; 0x22c
   d41b0:	4951      	ldr	r1, [pc, #324]	; (d42f8 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x198>)
   d41b2:	4638      	mov	r0, r7
   d41b4:	f010 fe73 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d41b8:	494f      	ldr	r1, [pc, #316]	; (d42f8 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x198>)
   d41ba:	4630      	mov	r0, r6
   d41bc:	f010 fe6f 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
  IotHub(const char *connectionString,
         void (*callbackCloud2Device)(char *, uint8_t *, unsigned int) = NULL,
         int (*callbackDirectMethod)(char *, uint8_t *, unsigned int) = NULL,
         int maxBufferSize = 500,
         time_t sasExpiryPeriodInSeconds = 3600) // default to 60 minute sas token expiry
  {
   d41c0:	4b4e      	ldr	r3, [pc, #312]	; (d42fc <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x19c>)
   d41c2:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

    if (NULL != __iotHubInstance)
   d41c6:	4b4e      	ldr	r3, [pc, #312]	; (d4300 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1a0>)
   d41c8:	681a      	ldr	r2, [r3, #0]
   d41ca:	469b      	mov	fp, r3
   d41cc:	2a00      	cmp	r2, #0
   d41ce:	f040 808e 	bne.w	d42ee <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x18e>
    {
      return;
    }

    // because connection string gets tokenised with strtok the cs needs to be in memory
    device.connectionString = (char *)malloc(strlen(connectionString) + 1);
   d41d2:	4650      	mov	r0, sl
   d41d4:	f012 fd49 	bl	e6c6a <strlen>
   d41d8:	3001      	adds	r0, #1
   d41da:	f00f fee5 	bl	e3fa8 <malloc>
    strcpy(this->device.connectionString, connectionString);
   d41de:	4651      	mov	r1, sl
    {
      return;
    }

    // because connection string gets tokenised with strtok the cs needs to be in memory
    device.connectionString = (char *)malloc(strlen(connectionString) + 1);
   d41e0:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    strcpy(this->device.connectionString, connectionString);
   d41e4:	f012 fd1e 	bl	e6c24 <strcpy>

    tokeniseConnectionString(device.connectionString);
   d41e8:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
   d41ec:	4620      	mov	r0, r4
   d41ee:	f001 f95f 	bl	d54b0 <_ZN6IotHub24tokeniseConnectionStringEPc>

    sas.expiryPeriodInSeconds = sasExpiryPeriodInSeconds;
   d41f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d41f4:	6023      	str	r3, [r4, #0]

    __callbackCloud2Device = callbackCloud2Device;
   d41f6:	4b43      	ldr	r3, [pc, #268]	; (d4304 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1a4>)
   d41f8:	9a02      	ldr	r2, [sp, #8]
   d41fa:	601a      	str	r2, [r3, #0]
    __callbackDirectMethod = callbackDirectMethod;
   d41fc:	4b42      	ldr	r3, [pc, #264]	; (d4308 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1a8>)
   d41fe:	9a03      	ldr	r2, [sp, #12]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4200:	4942      	ldr	r1, [pc, #264]	; (d430c <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1ac>)
   d4202:	601a      	str	r2, [r3, #0]
   d4204:	a808      	add	r0, sp, #32
   d4206:	f010 fe4a 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>

    topic.messagePublish = "devices/" + String(device.deviceId) + "/messages/events/";
   d420a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   d420e:	a80c      	add	r0, sp, #48	; 0x30
   d4210:	f010 fe45 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d4214:	a90c      	add	r1, sp, #48	; 0x30
   d4216:	a808      	add	r0, sp, #32
   d4218:	f010 febc 	bl	e4f94 <_ZplRK15StringSumHelperRK6String>
   d421c:	493c      	ldr	r1, [pc, #240]	; (d4310 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1b0>)
   d421e:	f010 fec5 	bl	e4fac <_ZplRK15StringSumHelperPKc>
   d4222:	4601      	mov	r1, r0
   d4224:	4648      	mov	r0, r9
   d4226:	f010 fe4d 	bl	e4ec4 <_ZN6StringaSERKS_>
   d422a:	a80c      	add	r0, sp, #48	; 0x30
   d422c:	f010 fdf0 	bl	e4e10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4230:	a808      	add	r0, sp, #32
   d4232:	f010 fded 	bl	e4e10 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4236:	4935      	ldr	r1, [pc, #212]	; (d430c <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1ac>)
   d4238:	a808      	add	r0, sp, #32
   d423a:	f010 fe30 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
    topic.messageSubscribe = "devices/" + String(device.deviceId) + "/messages/devicebound/#";
   d423e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   d4242:	a80c      	add	r0, sp, #48	; 0x30
   d4244:	f010 fe2b 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d4248:	a90c      	add	r1, sp, #48	; 0x30
   d424a:	a808      	add	r0, sp, #32
   d424c:	f010 fea2 	bl	e4f94 <_ZplRK15StringSumHelperRK6String>
   d4250:	4930      	ldr	r1, [pc, #192]	; (d4314 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1b4>)
   d4252:	f010 feab 	bl	e4fac <_ZplRK15StringSumHelperPKc>
   d4256:	4601      	mov	r1, r0
   d4258:	4640      	mov	r0, r8
   d425a:	f010 fe33 	bl	e4ec4 <_ZN6StringaSERKS_>
   d425e:	a80c      	add	r0, sp, #48	; 0x30
   d4260:	f010 fdd6 	bl	e4e10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4264:	a808      	add	r0, sp, #32
   d4266:	f010 fdd3 	bl	e4e10 <_ZN6StringD1Ev>
    topic.directMethodSubscribe = "$iothub/methods/POST/#";
   d426a:	492b      	ldr	r1, [pc, #172]	; (d4318 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1b8>)
   d426c:	4638      	mov	r0, r7
   d426e:	f010 fe43 	bl	e4ef8 <_ZN6StringaSEPKc>
    topic.directMethodResponse = "$iothub/methods/res/";
   d4272:	492a      	ldr	r1, [pc, #168]	; (d431c <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1bc>)
   d4274:	4630      	mov	r0, r6
   d4276:	f010 fe3f 	bl	e4ef8 <_ZN6StringaSEPKc>

    endPoint = String(device.host) + "/" + String(device.deviceId) + "/api-version=2016-11-14";
   d427a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   d427e:	a808      	add	r0, sp, #32
   d4280:	f010 fe0d 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4284:	a908      	add	r1, sp, #32
   d4286:	a804      	add	r0, sp, #16
   d4288:	f010 fe2b 	bl	e4ee2 <_ZN6StringC1ERKS_>
   d428c:	4924      	ldr	r1, [pc, #144]	; (d4320 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1c0>)
   d428e:	a804      	add	r0, sp, #16
   d4290:	f010 fe8c 	bl	e4fac <_ZplRK15StringSumHelperPKc>
   d4294:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   d4298:	4606      	mov	r6, r0
   d429a:	a80c      	add	r0, sp, #48	; 0x30
   d429c:	f010 fdff 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d42a0:	a90c      	add	r1, sp, #48	; 0x30
   d42a2:	4630      	mov	r0, r6
   d42a4:	f010 fe76 	bl	e4f94 <_ZplRK15StringSumHelperRK6String>
   d42a8:	491e      	ldr	r1, [pc, #120]	; (d4324 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1c4>)
   d42aa:	f010 fe7f 	bl	e4fac <_ZplRK15StringSumHelperPKc>
   d42ae:	4601      	mov	r1, r0
   d42b0:	4628      	mov	r0, r5
   d42b2:	f010 fe07 	bl	e4ec4 <_ZN6StringaSERKS_>
   d42b6:	a80c      	add	r0, sp, #48	; 0x30
   d42b8:	f010 fdaa 	bl	e4e10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d42bc:	a804      	add	r0, sp, #16
   d42be:	f010 fda7 	bl	e4e10 <_ZN6StringD1Ev>
   d42c2:	a808      	add	r0, sp, #32
   d42c4:	f010 fda4 	bl	e4e10 <_ZN6StringD1Ev>

    client = new MQTT(device.host, 8883, processSubTopic, maxBufferSize);
   d42c8:	f44f 60d1 	mov.w	r0, #1672	; 0x688
   d42cc:	f7ff fee3 	bl	d4096 <_Znwj>
   d42d0:	4605      	mov	r5, r0
   d42d2:	b140      	cbz	r0, d42e6 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x186>
   d42d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d42d6:	9300      	str	r3, [sp, #0]
   d42d8:	f242 22b3 	movw	r2, #8883	; 0x22b3
   d42dc:	4b12      	ldr	r3, [pc, #72]	; (d4328 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil+0x1c8>)
   d42de:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   d42e2:	f001 fc2b 	bl	d5b3c <_ZN4MQTTC1EPctPFvS0_PhjEi>
   d42e6:	f8c4 51e8 	str.w	r5, [r4, #488]	; 0x1e8

    __iotHubInstance = this;
   d42ea:	f8cb 4000 	str.w	r4, [fp]
  }
   d42ee:	4620      	mov	r0, r4
   d42f0:	b011      	add	sp, #68	; 0x44
   d42f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d42f6:	bf00      	nop
   d42f8:	000e7da0 	.word	0x000e7da0
   d42fc:	000e6dc4 	.word	0x000e6dc4
   d4300:	2003bf3c 	.word	0x2003bf3c
   d4304:	2003c188 	.word	0x2003c188
   d4308:	2003c184 	.word	0x2003c184
   d430c:	000e72c7 	.word	0x000e72c7
   d4310:	000e72d0 	.word	0x000e72d0
   d4314:	000e72e2 	.word	0x000e72e2
   d4318:	000e72fa 	.word	0x000e72fa
   d431c:	000e7311 	.word	0x000e7311
   d4320:	000e7355 	.word	0x000e7355
   d4324:	000e7326 	.word	0x000e7326
   d4328:	000d43b1 	.word	0x000d43b1

000d432c <_ZN6IotHub13directMessageEPcPhj>:
    String directMethodResponse;
  } topic;

  const char *letencryptCaPem = LET_ENCRYPT_CA_PEM;

  static void directMessage(char *topic, byte *payload, unsigned int payloadLength)
   d432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4330:	4689      	mov	r9, r1
   d4332:	af00      	add	r7, sp, #0
  {
    char *startMethodName = strstr(topic, "POST/") + 5;
   d4334:	4919      	ldr	r1, [pc, #100]	; (d439c <_ZN6IotHub13directMessageEPcPhj+0x70>)
    String directMethodResponse;
  } topic;

  const char *letencryptCaPem = LET_ENCRYPT_CA_PEM;

  static void directMessage(char *topic, byte *payload, unsigned int payloadLength)
   d4336:	4680      	mov	r8, r0
   d4338:	4692      	mov	sl, r2
  {
    char *startMethodName = strstr(topic, "POST/") + 5;
   d433a:	f012 fc9e 	bl	e6c7a <strstr>
    if (NULL == startMethodName)
   d433e:	1d45      	adds	r5, r0, #5
    memcpy(methodName, startMethodName, methodNamelength);

    int status = __callbackDirectMethod(methodName, payload, payloadLength);

    char *rid = strstr(topic, "rid=") + 4;
    __iotHubInstance->directMethodReponse(rid, status);
   d4340:	466e      	mov	r6, sp
  const char *letencryptCaPem = LET_ENCRYPT_CA_PEM;

  static void directMessage(char *topic, byte *payload, unsigned int payloadLength)
  {
    char *startMethodName = strstr(topic, "POST/") + 5;
    if (NULL == startMethodName)
   d4342:	d026      	beq.n	d4392 <_ZN6IotHub13directMessageEPcPhj+0x66>
    {
      return;
    }

    char *endMethodName = strstr(startMethodName, "/?");
   d4344:	4916      	ldr	r1, [pc, #88]	; (d43a0 <_ZN6IotHub13directMessageEPcPhj+0x74>)
   d4346:	4628      	mov	r0, r5
   d4348:	f012 fc97 	bl	e6c7a <strstr>
    if (NULL == endMethodName)
   d434c:	b308      	cbz	r0, d4392 <_ZN6IotHub13directMessageEPcPhj+0x66>
    {
      return;
    }

    int methodNamelength = endMethodName - startMethodName;
   d434e:	1b44      	subs	r4, r0, r5

    char methodName[methodNamelength + 1];
   d4350:	f104 0308 	add.w	r3, r4, #8
   d4354:	f023 0307 	bic.w	r3, r3, #7
   d4358:	ebad 0d03 	sub.w	sp, sp, r3
    memset(methodName, 0, methodNamelength + 1);
   d435c:	1c62      	adds	r2, r4, #1
   d435e:	2100      	movs	r1, #0
   d4360:	4668      	mov	r0, sp
   d4362:	f012 fc16 	bl	e6b92 <memset>
    memcpy(methodName, startMethodName, methodNamelength);
   d4366:	4622      	mov	r2, r4
   d4368:	4629      	mov	r1, r5
   d436a:	4668      	mov	r0, sp
   d436c:	f012 fbeb 	bl	e6b46 <memcpy>

    int status = __callbackDirectMethod(methodName, payload, payloadLength);
   d4370:	4b0c      	ldr	r3, [pc, #48]	; (d43a4 <_ZN6IotHub13directMessageEPcPhj+0x78>)
   d4372:	4652      	mov	r2, sl
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	4649      	mov	r1, r9
   d4378:	4668      	mov	r0, sp
   d437a:	4798      	blx	r3

    char *rid = strstr(topic, "rid=") + 4;
   d437c:	490a      	ldr	r1, [pc, #40]	; (d43a8 <_ZN6IotHub13directMessageEPcPhj+0x7c>)

    char methodName[methodNamelength + 1];
    memset(methodName, 0, methodNamelength + 1);
    memcpy(methodName, startMethodName, methodNamelength);

    int status = __callbackDirectMethod(methodName, payload, payloadLength);
   d437e:	4604      	mov	r4, r0

    char *rid = strstr(topic, "rid=") + 4;
   d4380:	4640      	mov	r0, r8
   d4382:	f012 fc7a 	bl	e6c7a <strstr>
    __iotHubInstance->directMethodReponse(rid, status);
   d4386:	4b09      	ldr	r3, [pc, #36]	; (d43ac <_ZN6IotHub13directMessageEPcPhj+0x80>)
   d4388:	1d01      	adds	r1, r0, #4
   d438a:	4622      	mov	r2, r4
   d438c:	6818      	ldr	r0, [r3, #0]
   d438e:	f001 f83b 	bl	d5408 <_ZN6IotHub19directMethodReponseEPci>
  static void directMessage(char *topic, byte *payload, unsigned int payloadLength)
  {
    char *startMethodName = strstr(topic, "POST/") + 5;
    if (NULL == startMethodName)
    {
      return;
   d4392:	46b5      	mov	sp, r6

    int status = __callbackDirectMethod(methodName, payload, payloadLength);

    char *rid = strstr(topic, "rid=") + 4;
    __iotHubInstance->directMethodReponse(rid, status);
  }
   d4394:	46bd      	mov	sp, r7
   d4396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d439a:	bf00      	nop
   d439c:	000e7351 	.word	0x000e7351
   d43a0:	000e733e 	.word	0x000e733e
   d43a4:	2003c184 	.word	0x2003c184
   d43a8:	000e7531 	.word	0x000e7531
   d43ac:	2003bf3c 	.word	0x2003bf3c

000d43b0 <_ZN6IotHub15processSubTopicEPcPhj>:

  static void processSubTopic(char *topic, byte *payload, unsigned int payloadLength)
   d43b0:	b570      	push	{r4, r5, r6, lr}
   d43b2:	460d      	mov	r5, r1
  {
    char *p1;

    p1 = strstr(topic, "$iothub/methods/POST/"); // handle request response direct message
   d43b4:	490e      	ldr	r1, [pc, #56]	; (d43f0 <_ZN6IotHub15processSubTopicEPcPhj+0x40>)

    char *rid = strstr(topic, "rid=") + 4;
    __iotHubInstance->directMethodReponse(rid, status);
  }

  static void processSubTopic(char *topic, byte *payload, unsigned int payloadLength)
   d43b6:	4604      	mov	r4, r0
   d43b8:	4616      	mov	r6, r2
  {
    char *p1;

    p1 = strstr(topic, "$iothub/methods/POST/"); // handle request response direct message
   d43ba:	f012 fc5e 	bl	e6c7a <strstr>
    if (p1 == topic && NULL != __callbackDirectMethod)
   d43be:	4284      	cmp	r4, r0
   d43c0:	d107      	bne.n	d43d2 <_ZN6IotHub15processSubTopicEPcPhj+0x22>
   d43c2:	4b0c      	ldr	r3, [pc, #48]	; (d43f4 <_ZN6IotHub15processSubTopicEPcPhj+0x44>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	b123      	cbz	r3, d43d2 <_ZN6IotHub15processSubTopicEPcPhj+0x22>
    {
      directMessage(topic, payload, payloadLength);
   d43c8:	4632      	mov	r2, r6
   d43ca:	4629      	mov	r1, r5
   d43cc:	f7ff ffae 	bl	d432c <_ZN6IotHub13directMessageEPcPhj>
      return;
   d43d0:	bd70      	pop	{r4, r5, r6, pc}
    }

    p1 = strstr(topic, "devices/"); // handle cloud to device messages
   d43d2:	4909      	ldr	r1, [pc, #36]	; (d43f8 <_ZN6IotHub15processSubTopicEPcPhj+0x48>)
   d43d4:	4620      	mov	r0, r4
   d43d6:	f012 fc50 	bl	e6c7a <strstr>
    if (p1 == topic && NULL != __callbackCloud2Device)
   d43da:	4284      	cmp	r4, r0
   d43dc:	d107      	bne.n	d43ee <_ZN6IotHub15processSubTopicEPcPhj+0x3e>
   d43de:	4b07      	ldr	r3, [pc, #28]	; (d43fc <_ZN6IotHub15processSubTopicEPcPhj+0x4c>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	b123      	cbz	r3, d43ee <_ZN6IotHub15processSubTopicEPcPhj+0x3e>
    {
      __callbackCloud2Device(topic, payload, payloadLength);
   d43e4:	4632      	mov	r2, r6
   d43e6:	4629      	mov	r1, r5
      return;
    }
  }
   d43e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }

    p1 = strstr(topic, "devices/"); // handle cloud to device messages
    if (p1 == topic && NULL != __callbackCloud2Device)
    {
      __callbackCloud2Device(topic, payload, payloadLength);
   d43ec:	4718      	bx	r3
   d43ee:	bd70      	pop	{r4, r5, r6, pc}
   d43f0:	000e7341 	.word	0x000e7341
   d43f4:	2003c184 	.word	0x2003c184
   d43f8:	000e72c7 	.word	0x000e72c7
   d43fc:	2003c188 	.word	0x2003c188

000d4400 <setup>:

unsigned long previousCheckMillis = 0;
unsigned long checkInterval = 30000;

void setup()
{
   d4400:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d4402:	f011 f9f5 	bl	e57f0 <_Z16_fetch_usbserialv>

  dht.begin();

  leds.init();
   d4406:	4c16      	ldr	r4, [pc, #88]	; (d4460 <setup+0x60>)
unsigned long previousCheckMillis = 0;
unsigned long checkInterval = 30000;

void setup()
{
  Serial.begin(9600);
   d4408:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d440c:	f011 f9e4 	bl	e57d8 <_ZN9USBSerial5beginEl>

  dht.begin();
   d4410:	4814      	ldr	r0, [pc, #80]	; (d4464 <setup+0x64>)
   d4412:	f000 fcc3 	bl	d4d9c <_ZN3DHT5beginEv>

  leds.init();
   d4416:	4620      	mov	r0, r4
   d4418:	f000 fb1c 	bl	d4a54 <_ZN12ChainableLED4initEv>
  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d441c:	ed9f 1a12 	vldr	s2, [pc, #72]	; d4468 <setup+0x68>
   d4420:	4620      	mov	r0, r4
   d4422:	eef0 0a41 	vmov.f32	s1, s2
   d4426:	eeb0 0a41 	vmov.f32	s0, s2
   d442a:	2100      	movs	r1, #0
   d442c:	f000 fbb4 	bl	d4b98 <_ZN12ChainableLED11setColorHSBEhfff>

  pinMode(A0, INPUT);
   d4430:	2100      	movs	r1, #0
   d4432:	2013      	movs	r0, #19
   d4434:	f011 fb1a 	bl	e5a6c <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4438:	2300      	movs	r3, #0
   d443a:	2202      	movs	r2, #2
   d443c:	490b      	ldr	r1, [pc, #44]	; (d446c <setup+0x6c>)
   d443e:	480c      	ldr	r0, [pc, #48]	; (d4470 <setup+0x70>)
   d4440:	f00f fd22 	bl	e3e88 <spark_variable>
   d4444:	2202      	movs	r2, #2
   d4446:	490b      	ldr	r1, [pc, #44]	; (d4474 <setup+0x74>)
   d4448:	480b      	ldr	r0, [pc, #44]	; (d4478 <setup+0x78>)
   d444a:	2300      	movs	r3, #0
   d444c:	f00f fd1c 	bl	e3e88 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4450:	4a0a      	ldr	r2, [pc, #40]	; (d447c <setup+0x7c>)
   d4452:	490b      	ldr	r1, [pc, #44]	; (d4480 <setup+0x80>)
   d4454:	480b      	ldr	r0, [pc, #44]	; (d4484 <setup+0x84>)

  Particle.variable("temp", temp);
  Particle.variable("humidity", humidity);

  Particle.function("toggleLed", toggleLed);
}
   d4456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d445a:	f00f bead 	b.w	e41b8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d445e:	bf00      	nop
   d4460:	2003bf34 	.word	0x2003bf34
   d4464:	2003c194 	.word	0x2003c194
   d4468:	00000000 	.word	0x00000000
   d446c:	2003c180 	.word	0x2003c180
   d4470:	000e7357 	.word	0x000e7357
   d4474:	2003c1a8 	.word	0x2003c1a8
   d4478:	000e735c 	.word	0x000e735c
   d447c:	000e7365 	.word	0x000e7365
   d4480:	000d40e9 	.word	0x000d40e9
   d4484:	000e418d 	.word	0x000e418d

000d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4488:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d448a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d448c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d448e:	b17c      	cbz	r4, d44b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4490:	6863      	ldr	r3, [r4, #4]
   d4492:	3b01      	subs	r3, #1
   d4494:	6063      	str	r3, [r4, #4]
   d4496:	b95b      	cbnz	r3, d44b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4498:	6823      	ldr	r3, [r4, #0]
   d449a:	4620      	mov	r0, r4
   d449c:	689b      	ldr	r3, [r3, #8]
   d449e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d44a0:	68a3      	ldr	r3, [r4, #8]
   d44a2:	3b01      	subs	r3, #1
   d44a4:	60a3      	str	r3, [r4, #8]
   d44a6:	b91b      	cbnz	r3, d44b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d44a8:	6823      	ldr	r3, [r4, #0]
   d44aa:	4620      	mov	r0, r4
   d44ac:	68db      	ldr	r3, [r3, #12]
   d44ae:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d44b0:	4628      	mov	r0, r5
   d44b2:	bd38      	pop	{r3, r4, r5, pc}

000d44b4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d44b4:	b570      	push	{r4, r5, r6, lr}
   d44b6:	4604      	mov	r4, r0
   d44b8:	460e      	mov	r6, r1
   d44ba:	4615      	mov	r5, r2
		insertCheckSeparator();
   d44bc:	f000 feb4 	bl	d5228 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d44c0:	2201      	movs	r2, #1
   d44c2:	4631      	mov	r1, r6
   d44c4:	4620      	mov	r0, r4
   d44c6:	f000 fe23 	bl	d5110 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d44ca:	4620      	mov	r0, r4
   d44cc:	213a      	movs	r1, #58	; 0x3a
   d44ce:	f000 fdc1 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d44d2:	462a      	mov	r2, r5
   d44d4:	4620      	mov	r0, r4
   d44d6:	4902      	ldr	r1, [pc, #8]	; (d44e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d44d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d44dc:	f000 be0a 	b.w	d50f4 <_ZN10JsonWriter13insertsprintfEPKcz>
   d44e0:	000e7579 	.word	0x000e7579

000d44e4 <_Z18createEventPayloadiid>:

  createEventPayload(temp, humidity, currentLightLevel);
}

void createEventPayload(int temp, int humidity, double light)
{
   d44e4:	b530      	push	{r4, r5, lr}
   d44e6:	ed2d 8b02 	vpush	{d8}
   d44ea:	eeb0 8a40 	vmov.f32	s16, s0
   d44ee:	eef0 8a60 	vmov.f32	s17, s1
   d44f2:	b0d5      	sub	sp, #340	; 0x154
   d44f4:	4605      	mov	r5, r0
   d44f6:	460c      	mov	r4, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d44f8:	f44f 7280 	mov.w	r2, #256	; 0x100
   d44fc:	a914      	add	r1, sp, #80	; 0x50
   d44fe:	a808      	add	r0, sp, #32
   d4500:	f000 fd96 	bl	d5030 <_ZN10JsonWriterC1EPcj>
   d4504:	4b3c      	ldr	r3, [pc, #240]	; (d45f8 <_Z18createEventPayloadiid+0x114>)
   d4506:	9308      	str	r3, [sp, #32]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d4508:	227d      	movs	r2, #125	; 0x7d
   d450a:	217b      	movs	r1, #123	; 0x7b
   d450c:	a808      	add	r0, sp, #32
   d450e:	f000 fdaf 	bl	d5070 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp", temp);
   d4512:	462a      	mov	r2, r5
   d4514:	4939      	ldr	r1, [pc, #228]	; (d45fc <_Z18createEventPayloadiid+0x118>)
    jw.insertKeyValue("humidity", humidity);
    jw.insertKeyValue("light", light);
    
    if (hub.loop())
   d4516:	4d3a      	ldr	r5, [pc, #232]	; (d4600 <_Z18createEventPayloadiid+0x11c>)
{
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp", temp);
   d4518:	a808      	add	r0, sp, #32
   d451a:	f7ff ffcb 	bl	d44b4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   d451e:	4622      	mov	r2, r4
   d4520:	4938      	ldr	r1, [pc, #224]	; (d4604 <_Z18createEventPayloadiid+0x120>)
   d4522:	4c39      	ldr	r4, [pc, #228]	; (d4608 <_Z18createEventPayloadiid+0x124>)
   d4524:	a808      	add	r0, sp, #32
   d4526:	f7ff ffc5 	bl	d44b4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d452a:	a808      	add	r0, sp, #32
   d452c:	f000 fe7c 	bl	d5228 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4530:	2201      	movs	r2, #1
   d4532:	4936      	ldr	r1, [pc, #216]	; (d460c <_Z18createEventPayloadiid+0x128>)
   d4534:	a808      	add	r0, sp, #32
   d4536:	f000 fdeb 	bl	d5110 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d453a:	213a      	movs	r1, #58	; 0x3a
   d453c:	a808      	add	r0, sp, #32
   d453e:	f000 fd89 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d4542:	eeb0 0a48 	vmov.f32	s0, s16
   d4546:	eef0 0a68 	vmov.f32	s1, s17
   d454a:	a808      	add	r0, sp, #32
   d454c:	f000 fe78 	bl	d5240 <_ZN10JsonWriter11insertValueEd>
    jw.insertKeyValue("light", light);
    
    if (hub.loop())
   d4550:	4628      	mov	r0, r5
   d4552:	f000 ff15 	bl	d5380 <_ZN6IotHub4loopEv>
   d4556:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4558:	f88d 3000 	strb.w	r3, [sp]
   d455c:	233c      	movs	r3, #60	; 0x3c
   d455e:	b1d8      	cbz	r0, d4598 <_Z18createEventPayloadiid+0xb4>
   d4560:	4a2b      	ldr	r2, [pc, #172]	; (d4610 <_Z18createEventPayloadiid+0x12c>)
   d4562:	492c      	ldr	r1, [pc, #176]	; (d4614 <_Z18createEventPayloadiid+0x130>)
   d4564:	a804      	add	r0, sp, #16
   d4566:	f00f ff41 	bl	e43ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d456a:	a805      	add	r0, sp, #20
   d456c:	f7ff ff8c 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d4570:	a808      	add	r0, sp, #32
   d4572:	f8d5 513c 	ldr.w	r5, [r5, #316]	; 0x13c
   d4576:	f000 fe57 	bl	d5228 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d457a:	2201      	movs	r2, #1
   d457c:	a808      	add	r0, sp, #32
   d457e:	4926      	ldr	r1, [pc, #152]	; (d4618 <_Z18createEventPayloadiid+0x134>)
   d4580:	f000 fdc6 	bl	d5110 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4584:	a808      	add	r0, sp, #32
   d4586:	213a      	movs	r1, #58	; 0x3a
   d4588:	f000 fd64 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d458c:	2201      	movs	r2, #1
   d458e:	4629      	mov	r1, r5
   d4590:	a808      	add	r0, sp, #32
   d4592:	f000 fdbd 	bl	d5110 <_ZN10JsonWriter12insertStringEPKcb>
   d4596:	e007      	b.n	d45a8 <_Z18createEventPayloadiid+0xc4>
   d4598:	a804      	add	r0, sp, #16
   d459a:	4a20      	ldr	r2, [pc, #128]	; (d461c <_Z18createEventPayloadiid+0x138>)
   d459c:	491d      	ldr	r1, [pc, #116]	; (d4614 <_Z18createEventPayloadiid+0x130>)
   d459e:	f00f ff25 	bl	e43ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d45a2:	a805      	add	r0, sp, #20
   d45a4:	f7ff ff70 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d45a8:	a808      	add	r0, sp, #32
   d45aa:	f000 fd72 	bl	d5092 <_ZN10JsonWriter19finishObjectOrArrayEv>
    } else {
      Particle.publish("iot-central/debug", "IoT Hub Not Connected!", PRIVATE);
    }
  }

  if (hub.loop())
   d45ae:	4814      	ldr	r0, [pc, #80]	; (d4600 <_Z18createEventPayloadiid+0x11c>)
   d45b0:	f000 fee6 	bl	d5380 <_ZN6IotHub4loopEv>
   d45b4:	b150      	cbz	r0, d45cc <_Z18createEventPayloadiid+0xe8>
  {
     hub.publish(jw.getBuffer());
   d45b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d45b8:	a804      	add	r0, sp, #16
   d45ba:	f010 fc70 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d45be:	a904      	add	r1, sp, #16
   d45c0:	480f      	ldr	r0, [pc, #60]	; (d4600 <_Z18createEventPayloadiid+0x11c>)
   d45c2:	f000 ff11 	bl	d53e8 <_ZN6IotHub7publishE6String>
   d45c6:	a804      	add	r0, sp, #16
   d45c8:	f010 fc22 	bl	e4e10 <_ZN6StringD1Ev>
   d45cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d45ce:	9303      	str	r3, [sp, #12]
   d45d0:	7823      	ldrb	r3, [r4, #0]
   d45d2:	9a03      	ldr	r2, [sp, #12]
   d45d4:	4912      	ldr	r1, [pc, #72]	; (d4620 <_Z18createEventPayloadiid+0x13c>)
   d45d6:	f88d 3000 	strb.w	r3, [sp]
   d45da:	a804      	add	r0, sp, #16
   d45dc:	233c      	movs	r3, #60	; 0x3c
   d45de:	f00f ff05 	bl	e43ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d45e2:	a805      	add	r0, sp, #20
   d45e4:	f7ff ff50 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  createEventPayload(temp, humidity, currentLightLevel);
}

void createEventPayload(int temp, int humidity, double light)
{
  JsonWriterStatic<256> jw;
   d45e8:	a808      	add	r0, sp, #32
   d45ea:	f7ff fda3 	bl	d4134 <_ZN16JsonWriterStaticILj256EED1Ev>
  {
     hub.publish(jw.getBuffer());
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}
   d45ee:	b055      	add	sp, #340	; 0x154
   d45f0:	ecbd 8b02 	vpop	{d8}
   d45f4:	bd30      	pop	{r4, r5, pc}
   d45f6:	bf00      	nop
   d45f8:	000e6dbc 	.word	0x000e6dbc
   d45fc:	000e7357 	.word	0x000e7357
   d4600:	2003bf40 	.word	0x2003bf40
   d4604:	000e735c 	.word	0x000e735c
   d4608:	2003c18c 	.word	0x2003c18c
   d460c:	000e736f 	.word	0x000e736f
   d4610:	000e7375 	.word	0x000e7375
   d4614:	000e7386 	.word	0x000e7386
   d4618:	000e7398 	.word	0x000e7398
   d461c:	000e73a1 	.word	0x000e73a1
   d4620:	000e73b8 	.word	0x000e73b8
   d4624:	00000000 	.word	0x00000000

000d4628 <loop>:

  Particle.function("toggleLed", toggleLed);
}

void loop()
{
   d4628:	b570      	push	{r4, r5, r6, lr}
  unsigned long currentMillis = millis();

  if (currentMillis - previousCheckMillis > checkInterval)
   d462a:	4c3b      	ldr	r4, [pc, #236]	; (d4718 <loop+0xf0>)

  Particle.function("toggleLed", toggleLed);
}

void loop()
{
   d462c:	b08a      	sub	sp, #40	; 0x28
   d462e:	f00f fa57 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
  unsigned long currentMillis = millis();

  if (currentMillis - previousCheckMillis > checkInterval)
   d4632:	6823      	ldr	r3, [r4, #0]
   d4634:	1ac0      	subs	r0, r0, r3
   d4636:	4b39      	ldr	r3, [pc, #228]	; (d471c <loop+0xf4>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	4298      	cmp	r0, r3
   d463c:	d95b      	bls.n	d46f6 <loop+0xce>
   d463e:	f00f fa4f 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
  {
    previousCheckMillis = millis();
   d4642:	6020      	str	r0, [r4, #0]

    temp = (int)dht.getTempFarenheit();
   d4644:	4836      	ldr	r0, [pc, #216]	; (d4720 <loop+0xf8>)
   d4646:	4c37      	ldr	r4, [pc, #220]	; (d4724 <loop+0xfc>)
    humidity = (int)dht.getHumidity();
   d4648:	4d37      	ldr	r5, [pc, #220]	; (d4728 <loop+0x100>)

    Serial.printlnf("Temp: %f", temp);
    Serial.printlnf("Humidity: %f", humidity);

    double lightAnalogVal = analogRead(A0);
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d464a:	4e38      	ldr	r6, [pc, #224]	; (d472c <loop+0x104>)

  if (currentMillis - previousCheckMillis > checkInterval)
  {
    previousCheckMillis = millis();

    temp = (int)dht.getTempFarenheit();
   d464c:	f000 fc90 	bl	d4f70 <_ZN3DHT16getTempFarenheitEv>
   d4650:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    humidity = (int)dht.getHumidity();
   d4654:	4832      	ldr	r0, [pc, #200]	; (d4720 <loop+0xf8>)

  if (currentMillis - previousCheckMillis > checkInterval)
  {
    previousCheckMillis = millis();

    temp = (int)dht.getTempFarenheit();
   d4656:	ed84 0a00 	vstr	s0, [r4]
    humidity = (int)dht.getHumidity();
   d465a:	f000 fcab 	bl	d4fb4 <_ZN3DHT11getHumidityEv>
   d465e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4662:	ed85 0a00 	vstr	s0, [r5]

    Serial.printlnf("Temp: %f", temp);
   d4666:	f011 f8c3 	bl	e57f0 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d466a:	6823      	ldr	r3, [r4, #0]
   d466c:	4a30      	ldr	r2, [pc, #192]	; (d4730 <loop+0x108>)
   d466e:	2101      	movs	r1, #1
   d4670:	f010 fafc 	bl	e4c6c <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Humidity: %f", humidity);
   d4674:	f011 f8bc 	bl	e57f0 <_Z16_fetch_usbserialv>
   d4678:	682b      	ldr	r3, [r5, #0]
   d467a:	4a2e      	ldr	r2, [pc, #184]	; (d4734 <loop+0x10c>)
   d467c:	2101      	movs	r1, #1
   d467e:	f010 faf5 	bl	e4c6c <_ZN5Print11printf_implEbPKcz>

    double lightAnalogVal = analogRead(A0);
   d4682:	2013      	movs	r0, #19
   d4684:	f011 fa1c 	bl	e5ac0 <analogRead>
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d4688:	f011 fd18 	bl	e60bc <__aeabi_i2d>
   d468c:	ed9f 3b1c 	vldr	d3, [pc, #112]	; d4700 <loop+0xd8>
   d4690:	ed9f 4b1d 	vldr	d4, [pc, #116]	; d4708 <loop+0xe0>
   d4694:	eeb0 1a43 	vmov.f32	s2, s6
   d4698:	eef0 1a63 	vmov.f32	s3, s7
   d469c:	ed9f 2b1c 	vldr	d2, [pc, #112]	; d4710 <loop+0xe8>
   d46a0:	ec41 0b10 	vmov	d0, r0, r1
   d46a4:	f00f fcc8 	bl	e4038 <_Z3mapddddd>

    createEventPayload(temp, humidity, currentLightLevel);
   d46a8:	6829      	ldr	r1, [r5, #0]
   d46aa:	6820      	ldr	r0, [r4, #0]

    Serial.printlnf("Temp: %f", temp);
    Serial.printlnf("Humidity: %f", humidity);

    double lightAnalogVal = analogRead(A0);
    currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d46ac:	ed86 0b00 	vstr	d0, [r6]

    createEventPayload(temp, humidity, currentLightLevel);
   d46b0:	f7ff ff18 	bl	d44e4 <_Z18createEventPayloadiid>

    if (currentLightLevel > 50)
   d46b4:	ed96 0b00 	vldr	d0, [r6]
   d46b8:	2200      	movs	r2, #0
   d46ba:	ec51 0b10 	vmov	r0, r1, d0
   d46be:	4b1e      	ldr	r3, [pc, #120]	; (d4738 <loop+0x110>)
   d46c0:	ed8d 0b02 	vstr	d0, [sp, #8]
   d46c4:	f011 fff0 	bl	e66a8 <__aeabi_dcmpgt>
   d46c8:	ed9d 0b02 	vldr	d0, [sp, #8]
   d46cc:	b198      	cbz	r0, d46f6 <loop+0xce>
    {
      Particle.publish("light-meter/level", String(currentLightLevel), PRIVATE);
   d46ce:	2106      	movs	r1, #6
   d46d0:	a806      	add	r0, sp, #24
   d46d2:	f010 fc35 	bl	e4f40 <_ZN6StringC1Edi>
   d46d6:	4b19      	ldr	r3, [pc, #100]	; (d473c <loop+0x114>)
   d46d8:	9a06      	ldr	r2, [sp, #24]
   d46da:	781b      	ldrb	r3, [r3, #0]
   d46dc:	f88d 3000 	strb.w	r3, [sp]
   d46e0:	4917      	ldr	r1, [pc, #92]	; (d4740 <loop+0x118>)
   d46e2:	233c      	movs	r3, #60	; 0x3c
   d46e4:	a804      	add	r0, sp, #16
   d46e6:	f00f fe81 	bl	e43ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d46ea:	a805      	add	r0, sp, #20
   d46ec:	f7ff fecc 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46f0:	a806      	add	r0, sp, #24
   d46f2:	f010 fb8d 	bl	e4e10 <_ZN6StringD1Ev>
    }
  }
}
   d46f6:	b00a      	add	sp, #40	; 0x28
   d46f8:	bd70      	pop	{r4, r5, r6, pc}
   d46fa:	bf00      	nop
   d46fc:	f3af 8000 	nop.w
	...
   d470c:	40590000 	.word	0x40590000
   d4710:	00000000 	.word	0x00000000
   d4714:	40affe00 	.word	0x40affe00
   d4718:	2003c190 	.word	0x2003c190
   d471c:	2003bd74 	.word	0x2003bd74
   d4720:	2003c194 	.word	0x2003c194
   d4724:	2003c180 	.word	0x2003c180
   d4728:	2003c1a8 	.word	0x2003c1a8
   d472c:	2003c1b0 	.word	0x2003c1b0
   d4730:	000e73c1 	.word	0x000e73c1
   d4734:	000e73ca 	.word	0x000e73ca
   d4738:	40490000 	.word	0x40490000
   d473c:	2003c18c 	.word	0x2003c18c
   d4740:	000e73d7 	.word	0x000e73d7
   d4744:	00000000 	.word	0x00000000

000d4748 <_Z11readSensorsv>:

  return 1;
}

void readSensors()
{
   d4748:	b538      	push	{r3, r4, r5, lr}
  temp = (int)dht.getTempFarenheit();
   d474a:	4d1d      	ldr	r5, [pc, #116]	; (d47c0 <_Z11readSensorsv+0x78>)
   d474c:	4c1d      	ldr	r4, [pc, #116]	; (d47c4 <_Z11readSensorsv+0x7c>)
   d474e:	4628      	mov	r0, r5
   d4750:	f000 fc0e 	bl	d4f70 <_ZN3DHT16getTempFarenheitEv>
   d4754:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  humidity = (int)dht.getHumidity();
   d4758:	4628      	mov	r0, r5
  return 1;
}

void readSensors()
{
  temp = (int)dht.getTempFarenheit();
   d475a:	ed84 0a00 	vstr	s0, [r4]
  humidity = (int)dht.getHumidity();
   d475e:	f000 fc29 	bl	d4fb4 <_ZN3DHT11getHumidityEv>
   d4762:	4d19      	ldr	r5, [pc, #100]	; (d47c8 <_Z11readSensorsv+0x80>)
   d4764:	eebd 0ac0 	vcvt.s32.f32	s0, s0

  double lightAnalogVal = analogRead(A0);
   d4768:	2013      	movs	r0, #19
}

void readSensors()
{
  temp = (int)dht.getTempFarenheit();
  humidity = (int)dht.getHumidity();
   d476a:	ed85 0a00 	vstr	s0, [r5]

  double lightAnalogVal = analogRead(A0);
   d476e:	f011 f9a7 	bl	e5ac0 <analogRead>
  currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d4772:	f011 fca3 	bl	e60bc <__aeabi_i2d>
   d4776:	ed9f 3b0c 	vldr	d3, [pc, #48]	; d47a8 <_Z11readSensorsv+0x60>
   d477a:	ec41 0b10 	vmov	d0, r0, r1
   d477e:	eeb0 1a43 	vmov.f32	s2, s6
   d4782:	eef0 1a63 	vmov.f32	s3, s7
   d4786:	ed9f 4b0a 	vldr	d4, [pc, #40]	; d47b0 <_Z11readSensorsv+0x68>
   d478a:	ed9f 2b0b 	vldr	d2, [pc, #44]	; d47b8 <_Z11readSensorsv+0x70>
   d478e:	f00f fc53 	bl	e4038 <_Z3mapddddd>
   d4792:	4b0e      	ldr	r3, [pc, #56]	; (d47cc <_Z11readSensorsv+0x84>)

  createEventPayload(temp, humidity, currentLightLevel);
   d4794:	6829      	ldr	r1, [r5, #0]
   d4796:	6820      	ldr	r0, [r4, #0]
{
  temp = (int)dht.getTempFarenheit();
  humidity = (int)dht.getHumidity();

  double lightAnalogVal = analogRead(A0);
  currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d4798:	ed83 0b00 	vstr	d0, [r3]

  createEventPayload(temp, humidity, currentLightLevel);
}
   d479c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  humidity = (int)dht.getHumidity();

  double lightAnalogVal = analogRead(A0);
  currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);

  createEventPayload(temp, humidity, currentLightLevel);
   d47a0:	f7ff bea0 	b.w	d44e4 <_Z18createEventPayloadiid>
   d47a4:	f3af 8000 	nop.w
	...
   d47b4:	40590000 	.word	0x40590000
   d47b8:	00000000 	.word	0x00000000
   d47bc:	40affe00 	.word	0x40affe00
   d47c0:	2003c194 	.word	0x2003c194
   d47c4:	2003c180 	.word	0x2003c180
   d47c8:	2003c1a8 	.word	0x2003c1a8
   d47cc:	2003c1b0 	.word	0x2003c1b0

000d47d0 <_Z20callbackDirectMethodPcPhj>:

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}

int callbackDirectMethod(char *method, byte *payload, unsigned int payloadLength)
{
   d47d0:	b510      	push	{r4, lr}
  if (strcmp(method, "readSensors") == 0)
   d47d2:	491c      	ldr	r1, [pc, #112]	; (d4844 <_Z20callbackDirectMethodPcPhj+0x74>)

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}

int callbackDirectMethod(char *method, byte *payload, unsigned int payloadLength)
{
   d47d4:	b086      	sub	sp, #24
   d47d6:	4604      	mov	r4, r0
  if (strcmp(method, "readSensors") == 0)
   d47d8:	f012 fa1a 	bl	e6c10 <strcmp>
   d47dc:	b978      	cbnz	r0, d47fe <_Z20callbackDirectMethodPcPhj+0x2e>
   d47de:	4b1a      	ldr	r3, [pc, #104]	; (d4848 <_Z20callbackDirectMethodPcPhj+0x78>)
   d47e0:	4a1a      	ldr	r2, [pc, #104]	; (d484c <_Z20callbackDirectMethodPcPhj+0x7c>)
   d47e2:	781b      	ldrb	r3, [r3, #0]
   d47e4:	f88d 3000 	strb.w	r3, [sp]
   d47e8:	4919      	ldr	r1, [pc, #100]	; (d4850 <_Z20callbackDirectMethodPcPhj+0x80>)
   d47ea:	233c      	movs	r3, #60	; 0x3c
   d47ec:	a802      	add	r0, sp, #8
   d47ee:	f00f fdfd 	bl	e43ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d47f2:	a803      	add	r0, sp, #12
   d47f4:	f7ff fe48 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    Particle.publish("iot-central/debug", "Read Sensors from IoT Central!", PRIVATE);
    readSensors();
   d47f8:	f7ff ffa6 	bl	d4748 <_Z11readSensorsv>
   d47fc:	e01b      	b.n	d4836 <_Z20callbackDirectMethodPcPhj+0x66>
  }
  else if (strcmp(method, "toggleLed") == 0)
   d47fe:	4915      	ldr	r1, [pc, #84]	; (d4854 <_Z20callbackDirectMethodPcPhj+0x84>)
   d4800:	4620      	mov	r0, r4
   d4802:	f012 fa05 	bl	e6c10 <strcmp>
   d4806:	b9c0      	cbnz	r0, d483a <_Z20callbackDirectMethodPcPhj+0x6a>
   d4808:	4b0f      	ldr	r3, [pc, #60]	; (d4848 <_Z20callbackDirectMethodPcPhj+0x78>)
   d480a:	4a13      	ldr	r2, [pc, #76]	; (d4858 <_Z20callbackDirectMethodPcPhj+0x88>)
   d480c:	781b      	ldrb	r3, [r3, #0]
   d480e:	4910      	ldr	r1, [pc, #64]	; (d4850 <_Z20callbackDirectMethodPcPhj+0x80>)
   d4810:	f88d 3000 	strb.w	r3, [sp]
   d4814:	a802      	add	r0, sp, #8
   d4816:	233c      	movs	r3, #60	; 0x3c
   d4818:	f00f fde8 	bl	e43ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d481c:	a803      	add	r0, sp, #12
   d481e:	f7ff fe33 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    Particle.publish("iot-central/debug", "Toggle LED from IoT Central!", PRIVATE);
    toggleLed("");
   d4822:	490e      	ldr	r1, [pc, #56]	; (d485c <_Z20callbackDirectMethodPcPhj+0x8c>)
   d4824:	a802      	add	r0, sp, #8
   d4826:	f010 fb3a 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d482a:	a802      	add	r0, sp, #8
   d482c:	f7ff fc5c 	bl	d40e8 <_Z9toggleLed6String>
   d4830:	a802      	add	r0, sp, #8
   d4832:	f010 faed 	bl	e4e10 <_ZN6StringD1Ev>
  else
  {
    return 400;
  }

  return 200;
   d4836:	20c8      	movs	r0, #200	; 0xc8
   d4838:	e001      	b.n	d483e <_Z20callbackDirectMethodPcPhj+0x6e>
    Particle.publish("iot-central/debug", "Toggle LED from IoT Central!", PRIVATE);
    toggleLed("");
  }
  else
  {
    return 400;
   d483a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  }

  return 200;
   d483e:	b006      	add	sp, #24
   d4840:	bd10      	pop	{r4, pc}
   d4842:	bf00      	nop
   d4844:	000e73e9 	.word	0x000e73e9
   d4848:	2003c18c 	.word	0x2003c18c
   d484c:	000e73f5 	.word	0x000e73f5
   d4850:	000e7386 	.word	0x000e7386
   d4854:	000e7365 	.word	0x000e7365
   d4858:	000e7414 	.word	0x000e7414
   d485c:	000e7da0 	.word	0x000e7da0

000d4860 <_GLOBAL__sub_I_dht>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4860:	4b16      	ldr	r3, [pc, #88]	; (d48bc <_GLOBAL__sub_I_dht+0x5c>)
   d4862:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4864:	2501      	movs	r5, #1
   d4866:	701d      	strb	r5, [r3, #0]
#include "AzureIotHubClient.h"

#define AZURE_CONNECTON_STRING "HostName=iotc-af0dbdee-0bd5-4262-a65b-909ee3750604.azure-devices.net;DeviceId=bd13d588-3bf8-4b83-81e4-c0da964d28b6;SharedAccessKey=LI9QIOFK7bKItZNdmmJc/TXOTymvKqzsPvWjlge5vKY="

DHT dht(D2);
ChainableLED leds(A4, A5, 1);
   d4868:	4c15      	ldr	r4, [pc, #84]	; (d48c0 <_GLOBAL__sub_I_dht+0x60>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d486a:	f00f f959 	bl	e3b20 <HAL_Pin_Map>
#include "JsonParserGeneratorRK.h"
#include "AzureIotHubClient.h"

#define AZURE_CONNECTON_STRING "HostName=iotc-af0dbdee-0bd5-4262-a65b-909ee3750604.azure-devices.net;DeviceId=bd13d588-3bf8-4b83-81e4-c0da964d28b6;SharedAccessKey=LI9QIOFK7bKItZNdmmJc/TXOTymvKqzsPvWjlge5vKY="

DHT dht(D2);
   d486e:	2206      	movs	r2, #6
   d4870:	2102      	movs	r1, #2
   d4872:	4814      	ldr	r0, [pc, #80]	; (d48c4 <_GLOBAL__sub_I_dht+0x64>)
   d4874:	f000 fa8c 	bl	d4d90 <_ZN3DHTC1Ehh>
ChainableLED leds(A4, A5, 1);
   d4878:	462b      	mov	r3, r5
   d487a:	4d13      	ldr	r5, [pc, #76]	; (d48c8 <_GLOBAL__sub_I_dht+0x68>)
   d487c:	220e      	movs	r2, #14
   d487e:	210f      	movs	r1, #15
   d4880:	4620      	mov	r0, r4
   d4882:	f000 f82d 	bl	d48e0 <_ZN12ChainableLEDC1Ehhh>
   d4886:	462a      	mov	r2, r5
   d4888:	4910      	ldr	r1, [pc, #64]	; (d48cc <_GLOBAL__sub_I_dht+0x6c>)
   d488a:	4620      	mov	r0, r4

int callbackDirectMethod(char *method, byte *payload, unsigned int length);

IotHub hub(AZURE_CONNECTON_STRING, NULL, callbackDirectMethod);
   d488c:	4c10      	ldr	r4, [pc, #64]	; (d48d0 <_GLOBAL__sub_I_dht+0x70>)
#include "AzureIotHubClient.h"

#define AZURE_CONNECTON_STRING "HostName=iotc-af0dbdee-0bd5-4262-a65b-909ee3750604.azure-devices.net;DeviceId=bd13d588-3bf8-4b83-81e4-c0da964d28b6;SharedAccessKey=LI9QIOFK7bKItZNdmmJc/TXOTymvKqzsPvWjlge5vKY="

DHT dht(D2);
ChainableLED leds(A4, A5, 1);
   d488e:	f011 f971 	bl	e5b74 <__aeabi_atexit>

int callbackDirectMethod(char *method, byte *payload, unsigned int length);

IotHub hub(AZURE_CONNECTON_STRING, NULL, callbackDirectMethod);
   d4892:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d4896:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d489a:	e88d 000c 	stmia.w	sp, {r2, r3}
   d489e:	490d      	ldr	r1, [pc, #52]	; (d48d4 <_GLOBAL__sub_I_dht+0x74>)
   d48a0:	4b0d      	ldr	r3, [pc, #52]	; (d48d8 <_GLOBAL__sub_I_dht+0x78>)
   d48a2:	2200      	movs	r2, #0
   d48a4:	4620      	mov	r0, r4
   d48a6:	f7ff fc5b 	bl	d4160 <_ZN6IotHubC1EPKcPFvPcPhjEPFiS2_S3_jEil>
   d48aa:	490c      	ldr	r1, [pc, #48]	; (d48dc <_GLOBAL__sub_I_dht+0x7c>)
   d48ac:	462a      	mov	r2, r5
   d48ae:	4620      	mov	r0, r4
  {
    return 400;
  }

  return 200;
   d48b0:	b003      	add	sp, #12
   d48b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
DHT dht(D2);
ChainableLED leds(A4, A5, 1);

int callbackDirectMethod(char *method, byte *payload, unsigned int length);

IotHub hub(AZURE_CONNECTON_STRING, NULL, callbackDirectMethod);
   d48b6:	f011 b95d 	b.w	e5b74 <__aeabi_atexit>
   d48ba:	bf00      	nop
   d48bc:	2003c18c 	.word	0x2003c18c
   d48c0:	2003bf34 	.word	0x2003bf34
   d48c4:	2003c194 	.word	0x2003c194
   d48c8:	2003bf30 	.word	0x2003bf30
   d48cc:	000d48fb 	.word	0x000d48fb
   d48d0:	2003bf40 	.word	0x2003bf40
   d48d4:	000e7431 	.word	0x000e7431
   d48d8:	000d47d1 	.word	0x000d47d1
   d48dc:	000d40b7 	.word	0x000d40b7

000d48e0 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d48e0:	b510      	push	{r4, lr}
   d48e2:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d48e4:	7001      	strb	r1, [r0, #0]
   d48e6:	7042      	strb	r2, [r0, #1]
   d48e8:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d48ea:	2101      	movs	r1, #1
   d48ec:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d48f0:	f012 f904 	bl	e6afc <calloc>
   d48f4:	6060      	str	r0, [r4, #4]
}
   d48f6:	4620      	mov	r0, r4
   d48f8:	bd10      	pop	{r4, pc}

000d48fa <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d48fa:	b510      	push	{r4, lr}
   d48fc:	4604      	mov	r4, r0
{
    free(_led_state);
   d48fe:	6840      	ldr	r0, [r0, #4]
   d4900:	f00f fb5a 	bl	e3fb8 <free>
}
   d4904:	4620      	mov	r0, r4
   d4906:	bd10      	pop	{r4, pc}

000d4908 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4908:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d490a:	2100      	movs	r1, #0
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d490c:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d490e:	7800      	ldrb	r0, [r0, #0]
   d4910:	f011 f8bd 	bl	e5a8e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4914:	2014      	movs	r0, #20
   d4916:	f00f f8db 	bl	e3ad0 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d491a:	7820      	ldrb	r0, [r4, #0]
   d491c:	2101      	movs	r1, #1
   d491e:	f011 f8b6 	bl	e5a8e <digitalWrite>
   d4922:	2014      	movs	r0, #20
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d4924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4928:	f00f b8d2 	b.w	e3ad0 <HAL_Delay_Microseconds>

000d492c <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d492c:	b570      	push	{r4, r5, r6, lr}
   d492e:	4606      	mov	r6, r0
   d4930:	460d      	mov	r5, r1
   d4932:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4934:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
   d4938:	bf14      	ite	ne
   d493a:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d493c:	2100      	moveq	r1, #0
   d493e:	7870      	ldrb	r0, [r6, #1]
   d4940:	f011 f8a5 	bl	e5a8e <digitalWrite>
   d4944:	3c01      	subs	r4, #1
        clk();
   d4946:	4630      	mov	r0, r6
   d4948:	f7ff ffde 	bl	d4908 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d494c:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d494e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
   d4952:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d4954:	d1ee      	bne.n	d4934 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
   d4956:	bd70      	pop	{r4, r5, r6, pc}

000d4958 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4958:	f013 0f80 	tst.w	r3, #128	; 0x80
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d495e:	460d      	mov	r5, r1
   d4960:	4616      	mov	r6, r2
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4962:	bf14      	ite	ne
   d4964:	21c0      	movne	r1, #192	; 0xc0
   d4966:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4968:	065a      	lsls	r2, r3, #25
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d496a:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d496c:	bf58      	it	pl
   d496e:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4972:	0633      	lsls	r3, r6, #24
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4974:	4604      	mov	r4, r0
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4976:	bf58      	it	pl
   d4978:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d497c:	0670      	lsls	r0, r6, #25
   d497e:	bf58      	it	pl
   d4980:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4984:	062a      	lsls	r2, r5, #24
   d4986:	bf58      	it	pl
   d4988:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d498c:	066b      	lsls	r3, r5, #25
   d498e:	bf58      	it	pl
   d4990:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4994:	4620      	mov	r0, r4
   d4996:	f7ff ffc9 	bl	d492c <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d499a:	4639      	mov	r1, r7
   d499c:	4620      	mov	r0, r4
   d499e:	f7ff ffc5 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d49a2:	4631      	mov	r1, r6
   d49a4:	4620      	mov	r0, r4
   d49a6:	f7ff ffc1 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d49aa:	4629      	mov	r1, r5
   d49ac:	4620      	mov	r0, r4
}
   d49ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
   d49b2:	f7ff bfbb 	b.w	d492c <_ZN12ChainableLED8sendByteEh>

000d49b6 <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d49b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49ba:	4604      	mov	r4, r0
   d49bc:	460d      	mov	r5, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d49be:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d49c0:	4691      	mov	r9, r2
   d49c2:	469a      	mov	sl, r3
   d49c4:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d49c8:	f7ff ffb0 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49cc:	2100      	movs	r1, #0
   d49ce:	4620      	mov	r0, r4
   d49d0:	f7ff ffac 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49d4:	2100      	movs	r1, #0
   d49d6:	4620      	mov	r0, r4
   d49d8:	f7ff ffa8 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49dc:	2100      	movs	r1, #0
   d49de:	4620      	mov	r0, r4
   d49e0:	f7ff ffa4 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   d49e4:	2703      	movs	r7, #3
            _led_state[i*3 + _CL_GREEN] = green;
   d49e6:	f04f 0801 	mov.w	r8, #1
{
    // Send data frame prefix (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d49ea:	2600      	movs	r6, #0
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
            _led_state[i*3 + _CL_GREEN] = green;
   d49ec:	fb17 8805 	smlabb	r8, r7, r5, r8
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d49f0:	78a2      	ldrb	r2, [r4, #2]
   d49f2:	b2f3      	uxtb	r3, r6
   d49f4:	429a      	cmp	r2, r3
   d49f6:	d91b      	bls.n	d4a30 <_ZN12ChainableLED11setColorRGBEhhhh+0x7a>
    {
        if (i == led)
   d49f8:	42ab      	cmp	r3, r5
   d49fa:	d10d      	bne.n	d4a18 <_ZN12ChainableLED11setColorRGBEhhhh+0x62>
        {
            _led_state[i*3 + _CL_RED] = red;
   d49fc:	6861      	ldr	r1, [r4, #4]
   d49fe:	fb15 f207 	smulbb	r2, r5, r7
   d4a02:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_GREEN] = green;
   d4a06:	6862      	ldr	r2, [r4, #4]
   d4a08:	f802 a008 	strb.w	sl, [r2, r8]
            _led_state[i*3 + _CL_BLUE] = blue;
   d4a0c:	2202      	movs	r2, #2
   d4a0e:	fb17 2205 	smlabb	r2, r7, r5, r2
   d4a12:	6861      	ldr	r1, [r4, #4]
   d4a14:	f801 b002 	strb.w	fp, [r1, r2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d4a18:	6860      	ldr	r0, [r4, #4]
   d4a1a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   d4a1e:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
   d4a20:	5c41      	ldrb	r1, [r0, r1]
   d4a22:	7893      	ldrb	r3, [r2, #2]
   d4a24:	7852      	ldrb	r2, [r2, #1]
   d4a26:	4620      	mov	r0, r4
   d4a28:	f7ff ff96 	bl	d4958 <_ZN12ChainableLED9sendColorEhhh>
   d4a2c:	3601      	adds	r6, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4a2e:	e7df      	b.n	d49f0 <_ZN12ChainableLED11setColorRGBEhhhh+0x3a>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d4a30:	4620      	mov	r0, r4
   d4a32:	2100      	movs	r1, #0
   d4a34:	f7ff ff7a 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4a38:	4620      	mov	r0, r4
   d4a3a:	2100      	movs	r1, #0
   d4a3c:	f7ff ff76 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4a40:	4620      	mov	r0, r4
   d4a42:	2100      	movs	r1, #0
   d4a44:	f7ff ff72 	bl	d492c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4a48:	4620      	mov	r0, r4
   d4a4a:	2100      	movs	r1, #0
}
   d4a4c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d4a50:	f7ff bf6c 	b.w	d492c <_ZN12ChainableLED8sendByteEh>

000d4a54 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
   d4a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4a56:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d4a58:	2101      	movs	r1, #1
   d4a5a:	7800      	ldrb	r0, [r0, #0]
   d4a5c:	f011 f806 	bl	e5a6c <pinMode>
    pinMode(_data_pin, OUTPUT);
   d4a60:	2101      	movs	r1, #1
   d4a62:	7860      	ldrb	r0, [r4, #1]
   d4a64:	f011 f802 	bl	e5a6c <pinMode>
   d4a68:	2500      	movs	r5, #0

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
   d4a6a:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d4a6c:	78a3      	ldrb	r3, [r4, #2]
   d4a6e:	b2e9      	uxtb	r1, r5
   d4a70:	428b      	cmp	r3, r1
   d4a72:	f105 0501 	add.w	r5, r5, #1
   d4a76:	d906      	bls.n	d4a86 <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
   d4a78:	2300      	movs	r3, #0
   d4a7a:	9600      	str	r6, [sp, #0]
   d4a7c:	461a      	mov	r2, r3
   d4a7e:	4620      	mov	r0, r4
   d4a80:	f7ff ff99 	bl	d49b6 <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d4a84:	e7f2      	b.n	d4a6c <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
   d4a86:	b002      	add	sp, #8
   d4a88:	bd70      	pop	{r4, r5, r6, pc}
   d4a8a:	0000      	movs	r0, r0
   d4a8c:	0000      	movs	r0, r0
	...

000d4a90 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   d4a92:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   d4a96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d4a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4a9e:	ed2d 8b04 	vpush	{d8-d9}
   d4aa2:	eef0 8a41 	vmov.f32	s17, s2
    if (t < 0.0)
        t += 1.0;
   d4aa6:	bf48      	it	mi
   d4aa8:	ee71 8a27 	vaddmi.f32	s17, s2, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4aac:	eeb0 8a40 	vmov.f32	s16, s0
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
   d4ab0:	eef4 8ae7 	vcmpe.f32	s17, s15
   d4ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   d4ab8:	bfc4      	itt	gt
   d4aba:	eef7 7a00 	vmovgt.f32	s15, #112	; 0x3f800000  1.0
   d4abe:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4ac2:	eeb0 9a60 	vmov.f32	s18, s1
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
   d4ac6:	ee18 0a90 	vmov	r0, s17
   d4aca:	f011 fb09 	bl	e60e0 <__aeabi_f2d>
   d4ace:	a32f      	add	r3, pc, #188	; (adr r3, d4b8c <_Z7hue2rgbfff+0xfc>)
   d4ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ad4:	4604      	mov	r4, r0
   d4ad6:	460d      	mov	r5, r1
   d4ad8:	f011 fdc8 	bl	e666c <__aeabi_dcmplt>
   d4adc:	b160      	cbz	r0, d4af8 <_Z7hue2rgbfff+0x68>
        return p + (q - p) * 6.0 * t;
   d4ade:	ee79 7a48 	vsub.f32	s15, s18, s16
   d4ae2:	ee17 0a90 	vmov	r0, s15
   d4ae6:	f011 fafb 	bl	e60e0 <__aeabi_f2d>
   d4aea:	2200      	movs	r2, #0
   d4aec:	4b26      	ldr	r3, [pc, #152]	; (d4b88 <_Z7hue2rgbfff+0xf8>)
   d4aee:	f011 fb4b 	bl	e6188 <__aeabi_dmul>
   d4af2:	4622      	mov	r2, r4
   d4af4:	462b      	mov	r3, r5
   d4af6:	e025      	b.n	d4b44 <_Z7hue2rgbfff+0xb4>
    if(t < 1.0/2.0)
   d4af8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4afc:	eef4 8ae7 	vcmpe.f32	s17, s15
   d4b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b04:	d42f      	bmi.n	d4b66 <_Z7hue2rgbfff+0xd6>
        return q;
    if(t < 2.0/3.0)
   d4b06:	a31e      	add	r3, pc, #120	; (adr r3, d4b80 <_Z7hue2rgbfff+0xf0>)
   d4b08:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	4629      	mov	r1, r5
   d4b10:	f011 fdac 	bl	e666c <__aeabi_dcmplt>
   d4b14:	b350      	cbz	r0, d4b6c <_Z7hue2rgbfff+0xdc>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   d4b16:	ee79 7a48 	vsub.f32	s15, s18, s16
   d4b1a:	ee17 0a90 	vmov	r0, s15
   d4b1e:	f011 fadf 	bl	e60e0 <__aeabi_f2d>
   d4b22:	4622      	mov	r2, r4
   d4b24:	4606      	mov	r6, r0
   d4b26:	460f      	mov	r7, r1
   d4b28:	462b      	mov	r3, r5
   d4b2a:	a115      	add	r1, pc, #84	; (adr r1, d4b80 <_Z7hue2rgbfff+0xf0>)
   d4b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4b30:	f011 f976 	bl	e5e20 <__aeabi_dsub>
   d4b34:	4602      	mov	r2, r0
   d4b36:	460b      	mov	r3, r1
   d4b38:	4630      	mov	r0, r6
   d4b3a:	4639      	mov	r1, r7
   d4b3c:	f011 fb24 	bl	e6188 <__aeabi_dmul>
   d4b40:	4b11      	ldr	r3, [pc, #68]	; (d4b88 <_Z7hue2rgbfff+0xf8>)
   d4b42:	2200      	movs	r2, #0
   d4b44:	f011 fb20 	bl	e6188 <__aeabi_dmul>
   d4b48:	4604      	mov	r4, r0
   d4b4a:	ee18 0a10 	vmov	r0, s16
   d4b4e:	460d      	mov	r5, r1
   d4b50:	f011 fac6 	bl	e60e0 <__aeabi_f2d>
   d4b54:	4602      	mov	r2, r0
   d4b56:	460b      	mov	r3, r1
   d4b58:	4620      	mov	r0, r4
   d4b5a:	4629      	mov	r1, r5
   d4b5c:	f011 f962 	bl	e5e24 <__adddf3>
   d4b60:	f011 fdcc 	bl	e66fc <__aeabi_d2f>
   d4b64:	e004      	b.n	d4b70 <_Z7hue2rgbfff+0xe0>
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
        return p + (q - p) * 6.0 * t;
    if(t < 1.0/2.0)
        return q;
   d4b66:	ee19 0a10 	vmov	r0, s18
   d4b6a:	e001      	b.n	d4b70 <_Z7hue2rgbfff+0xe0>
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;

    return p;
   d4b6c:	ee18 0a10 	vmov	r0, s16
}
   d4b70:	ecbd 8b04 	vpop	{d8-d9}
   d4b74:	ee00 0a10 	vmov	s0, r0
   d4b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b7a:	bf00      	nop
   d4b7c:	f3af 8000 	nop.w
   d4b80:	55555555 	.word	0x55555555
   d4b84:	3fe55555 	.word	0x3fe55555
   d4b88:	40180000 	.word	0x40180000
   d4b8c:	55555555 	.word	0x55555555
   d4b90:	3fc55555 	.word	0x3fc55555
   d4b94:	00000000 	.word	0x00000000

000d4b98 <_ZN12ChainableLED11setColorHSBEhfff>:
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4b9c:	ed2d 8b04 	vpush	{d8-d9}

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d4ba0:	eef5 0a40 	vcmp.f32	s1, #0.0
   d4ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4ba8:	b083      	sub	sp, #12
   d4baa:	4680      	mov	r8, r0
   d4bac:	4689      	mov	r9, r1
   d4bae:	eef0 9a40 	vmov.f32	s19, s0
   d4bb2:	eeb0 9a60 	vmov.f32	s18, s1
   d4bb6:	eeb0 8a41 	vmov.f32	s16, s2

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d4bba:	d06e      	beq.n	d4c9a <_ZN12ChainableLED11setColorHSBEhfff+0x102>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d4bbc:	ee11 0a10 	vmov	r0, s2
   d4bc0:	f011 fa8e 	bl	e60e0 <__aeabi_f2d>
        r = g = b = brightness;
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   d4bc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4bc8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4bd0:	4606      	mov	r6, r0
   d4bd2:	460f      	mov	r7, r1
   d4bd4:	d510      	bpl.n	d4bf8 <_ZN12ChainableLED11setColorHSBEhfff+0x60>
   d4bd6:	ee19 0a10 	vmov	r0, s18
   d4bda:	f011 fa81 	bl	e60e0 <__aeabi_f2d>
   d4bde:	2200      	movs	r2, #0
   d4be0:	4b4d      	ldr	r3, [pc, #308]	; (d4d18 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   d4be2:	f011 f91f 	bl	e5e24 <__adddf3>
   d4be6:	4632      	mov	r2, r6
   d4be8:	463b      	mov	r3, r7
   d4bea:	f011 facd 	bl	e6188 <__aeabi_dmul>
   d4bee:	f011 fd85 	bl	e66fc <__aeabi_d2f>
   d4bf2:	ee08 0a90 	vmov	s17, r0
   d4bf6:	e003      	b.n	d4c00 <_ZN12ChainableLED11setColorHSBEhfff+0x68>
   d4bf8:	ee79 8a08 	vadd.f32	s17, s18, s16
   d4bfc:	eee9 8a48 	vfms.f32	s17, s18, s16
   d4c00:	ee19 0a90 	vmov	r0, s19
   d4c04:	f011 fa6c 	bl	e60e0 <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   d4c08:	4632      	mov	r2, r6
   d4c0a:	463b      	mov	r3, r7
   d4c0c:	4604      	mov	r4, r0
   d4c0e:	460d      	mov	r5, r1
   d4c10:	4630      	mov	r0, r6
   d4c12:	4639      	mov	r1, r7
   d4c14:	f011 f906 	bl	e5e24 <__adddf3>
   d4c18:	4606      	mov	r6, r0
   d4c1a:	ee18 0a90 	vmov	r0, s17
   d4c1e:	460f      	mov	r7, r1
   d4c20:	f011 fa5e 	bl	e60e0 <__aeabi_f2d>
   d4c24:	4602      	mov	r2, r0
   d4c26:	460b      	mov	r3, r1
   d4c28:	4630      	mov	r0, r6
   d4c2a:	4639      	mov	r1, r7
   d4c2c:	f011 f8f8 	bl	e5e20 <__aeabi_dsub>
   d4c30:	f011 fd64 	bl	e66fc <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4c34:	a334      	add	r3, pc, #208	; (adr r3, d4d08 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4c36:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
   d4c3a:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4c3e:	4629      	mov	r1, r5
   d4c40:	4620      	mov	r0, r4
   d4c42:	f011 f8ef 	bl	e5e24 <__adddf3>
   d4c46:	f011 fd59 	bl	e66fc <__aeabi_d2f>
   d4c4a:	eef0 0a68 	vmov.f32	s1, s17
   d4c4e:	ee01 0a10 	vmov	s2, r0
   d4c52:	eeb0 0a49 	vmov.f32	s0, s18
   d4c56:	f7ff ff1b 	bl	d4a90 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   d4c5a:	eeb0 1a69 	vmov.f32	s2, s19
   d4c5e:	eef0 0a68 	vmov.f32	s1, s17
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4c62:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   d4c66:	eeb0 0a49 	vmov.f32	s0, s18
   d4c6a:	f7ff ff11 	bl	d4a90 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d4c6e:	a326      	add	r3, pc, #152	; (adr r3, d4d08 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4c70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c74:	4620      	mov	r0, r4
   d4c76:	4629      	mov	r1, r5
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
   d4c78:	eef0 9a40 	vmov.f32	s19, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d4c7c:	f011 f8d0 	bl	e5e20 <__aeabi_dsub>
   d4c80:	f011 fd3c 	bl	e66fc <__aeabi_d2f>
   d4c84:	eef0 0a68 	vmov.f32	s1, s17
   d4c88:	ee01 0a10 	vmov	s2, r0
   d4c8c:	eeb0 0a49 	vmov.f32	s0, s18
   d4c90:	f7ff fefe 	bl	d4a90 <_Z7hue2rgbfff>
   d4c94:	eef0 8a40 	vmov.f32	s17, s0
   d4c98:	e003      	b.n	d4ca2 <_ZN12ChainableLED11setColorHSBEhfff+0x10a>
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
    {
        r = g = b = brightness;
   d4c9a:	eef0 8a41 	vmov.f32	s17, s2
   d4c9e:	eef0 9a41 	vmov.f32	s19, s2
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
        b = hue2rgb(p, q, hue - 1.0/3.0);
    }

    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   d4ca2:	ee19 0a90 	vmov	r0, s19
   d4ca6:	f011 fa1b 	bl	e60e0 <__aeabi_f2d>
   d4caa:	a319      	add	r3, pc, #100	; (adr r3, d4d10 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cb0:	f011 fa6a 	bl	e6188 <__aeabi_dmul>
   d4cb4:	f011 fd02 	bl	e66bc <__aeabi_d2uiz>
   d4cb8:	b2c5      	uxtb	r5, r0
   d4cba:	ee18 0a10 	vmov	r0, s16
   d4cbe:	f011 fa0f 	bl	e60e0 <__aeabi_f2d>
   d4cc2:	a313      	add	r3, pc, #76	; (adr r3, d4d10 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cc8:	f011 fa5e 	bl	e6188 <__aeabi_dmul>
   d4ccc:	f011 fcf6 	bl	e66bc <__aeabi_d2uiz>
   d4cd0:	b2c4      	uxtb	r4, r0
   d4cd2:	ee18 0a90 	vmov	r0, s17
   d4cd6:	f011 fa03 	bl	e60e0 <__aeabi_f2d>
   d4cda:	a30d      	add	r3, pc, #52	; (adr r3, d4d10 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ce0:	f011 fa52 	bl	e6188 <__aeabi_dmul>
   d4ce4:	f011 fcea 	bl	e66bc <__aeabi_d2uiz>
   d4ce8:	b2c0      	uxtb	r0, r0
   d4cea:	9000      	str	r0, [sp, #0]
   d4cec:	462b      	mov	r3, r5
   d4cee:	4622      	mov	r2, r4
   d4cf0:	4649      	mov	r1, r9
   d4cf2:	4640      	mov	r0, r8
   d4cf4:	f7ff fe5f 	bl	d49b6 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   d4cf8:	b003      	add	sp, #12
   d4cfa:	ecbd 8b04 	vpop	{d8-d9}
   d4cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4d02:	bf00      	nop
   d4d04:	f3af 8000 	nop.w
   d4d08:	55555555 	.word	0x55555555
   d4d0c:	3fd55555 	.word	0x3fd55555
   d4d10:	00000000 	.word	0x00000000
   d4d14:	406fe000 	.word	0x406fe000
   d4d18:	3ff00000 	.word	0x3ff00000

000d4d1c <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
   d4d1c:	f00e bf00 	b.w	e3b20 <HAL_Pin_Map>

000d4d20 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4d20:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4d22:	6803      	ldr	r3, [r0, #0]
   d4d24:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4d26:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4d28:	d904      	bls.n	d4d34 <nrf_gpio_pin_port_decode+0x14>
   d4d2a:	4a07      	ldr	r2, [pc, #28]	; (d4d48 <nrf_gpio_pin_port_decode+0x28>)
   d4d2c:	2100      	movs	r1, #0
   d4d2e:	200a      	movs	r0, #10
   d4d30:	f00f f856 	bl	e3de0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4d34:	6823      	ldr	r3, [r4, #0]
   d4d36:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4d38:	bf83      	ittte	hi
   d4d3a:	f003 031f 	andhi.w	r3, r3, #31
   d4d3e:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4d40:	4802      	ldrhi	r0, [pc, #8]	; (d4d4c <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4d42:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4d46:	bd10      	pop	{r4, pc}
   d4d48:	000e3ad1 	.word	0x000e3ad1
   d4d4c:	50000300 	.word	0x50000300

000d4d50 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4d50:	b507      	push	{r0, r1, r2, lr}
   d4d52:	ab02      	add	r3, sp, #8
   d4d54:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4d58:	4618      	mov	r0, r3
   d4d5a:	f7ff ffe1 	bl	d4d20 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4d5e:	9a01      	ldr	r2, [sp, #4]
   d4d60:	2301      	movs	r3, #1
   d4d62:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4d64:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4d68:	b003      	add	sp, #12
   d4d6a:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d6e <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d4d6e:	b507      	push	{r0, r1, r2, lr}
   d4d70:	ab02      	add	r3, sp, #8
   d4d72:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4d76:	4618      	mov	r0, r3
   d4d78:	f7ff ffd2 	bl	d4d20 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4d7c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4d80:	9801      	ldr	r0, [sp, #4]
   d4d82:	fa23 f000 	lsr.w	r0, r3, r0
}
   d4d86:	f000 0001 	and.w	r0, r0, #1
   d4d8a:	b003      	add	sp, #12
   d4d8c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d90 <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d4d90:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d4d92:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d4d94:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d4d96:	7402      	strb	r2, [r0, #16]
}
   d4d98:	4770      	bx	lr
	...

000d4d9c <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d4d9c:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d4d9e:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d4da0:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d4da2:	7980      	ldrb	r0, [r0, #6]
   d4da4:	f010 fe62 	bl	e5a6c <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4da8:	4a07      	ldr	r2, [pc, #28]	; (d4dc8 <_ZN3DHT5beginEv+0x2c>)
   d4daa:	79a3      	ldrb	r3, [r4, #6]
   d4dac:	6812      	ldr	r2, [r2, #0]
   d4dae:	011b      	lsls	r3, r3, #4
   d4db0:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4db2:	5cd0      	ldrb	r0, [r2, r3]
   d4db4:	784b      	ldrb	r3, [r1, #1]
   d4db6:	f003 031f 	and.w	r3, r3, #31
   d4dba:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4dbe:	f7ff ffc7 	bl	d4d50 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d4dc2:	2300      	movs	r3, #0
   d4dc4:	60e3      	str	r3, [r4, #12]
   d4dc6:	bd10      	pop	{r4, pc}
   d4dc8:	2003c1b8 	.word	0x2003c1b8

000d4dcc <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d4dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4dd0:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4dd2:	f00e fe85 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d4dd6:	68e3      	ldr	r3, [r4, #12]
   d4dd8:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d4dda:	bf84      	itt	hi
   d4ddc:	2300      	movhi	r3, #0
   d4dde:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4de0:	7c23      	ldrb	r3, [r4, #16]
   d4de2:	b933      	cbnz	r3, d4df2 <_ZN3DHT4readEv+0x26>
   d4de4:	68e3      	ldr	r3, [r4, #12]
   d4de6:	1ac0      	subs	r0, r0, r3
   d4de8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4dec:	d201      	bcs.n	d4df2 <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d4dee:	2001      	movs	r0, #1
   d4df0:	e0a8      	b.n	d4f44 <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4df2:	2500      	movs	r5, #0

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4df4:	4e55      	ldr	r6, [pc, #340]	; (d4f4c <_ZN3DHT4readEv+0x180>)
   d4df6:	7425      	strb	r5, [r4, #16]
   d4df8:	f00e fe72 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
   d4dfc:	79a3      	ldrb	r3, [r4, #6]
   d4dfe:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d4e00:	60e0      	str	r0, [r4, #12]
   d4e02:	011b      	lsls	r3, r3, #4
   d4e04:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4e06:	7125      	strb	r5, [r4, #4]
   d4e08:	70e5      	strb	r5, [r4, #3]
   d4e0a:	70a5      	strb	r5, [r4, #2]
   d4e0c:	7065      	strb	r5, [r4, #1]
   d4e0e:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4e10:	5cd0      	ldrb	r0, [r2, r3]
   d4e12:	784b      	ldrb	r3, [r1, #1]
   d4e14:	f003 031f 	and.w	r3, r3, #31
   d4e18:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4e1c:	f7ff ff98 	bl	d4d50 <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d4e20:	20fa      	movs	r0, #250	; 0xfa
   d4e22:	f00f f952 	bl	e40ca <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d4e26:	2101      	movs	r1, #1
   d4e28:	79a0      	ldrb	r0, [r4, #6]
   d4e2a:	f010 fe1f 	bl	e5a6c <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4e2e:	79a3      	ldrb	r3, [r4, #6]
   d4e30:	6832      	ldr	r2, [r6, #0]
   d4e32:	011b      	lsls	r3, r3, #4
   d4e34:	18d1      	adds	r1, r2, r3
   d4e36:	5cd2      	ldrb	r2, [r2, r3]
   d4e38:	784b      	ldrb	r3, [r1, #1]
   d4e3a:	a802      	add	r0, sp, #8
   d4e3c:	f003 031f 	and.w	r3, r3, #31
   d4e40:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4e44:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4e48:	f7ff ff6a 	bl	d4d20 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4e4c:	9b01      	ldr	r3, [sp, #4]
   d4e4e:	f04f 0801 	mov.w	r8, #1
   d4e52:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4e56:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d4e5a:	2014      	movs	r0, #20
   d4e5c:	f00f f935 	bl	e40ca <delay>
	noInterrupts();
   d4e60:	f00f fcaa 	bl	e47b8 <_Z12noInterruptsv>

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4e64:	79a3      	ldrb	r3, [r4, #6]
   d4e66:	6832      	ldr	r2, [r6, #0]
   d4e68:	011b      	lsls	r3, r3, #4
   d4e6a:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4e6c:	5cd0      	ldrb	r0, [r2, r3]
   d4e6e:	784b      	ldrb	r3, [r1, #1]
   d4e70:	f003 031f 	and.w	r3, r3, #31
   d4e74:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4e78:	f7ff ff6a 	bl	d4d50 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4e7c:	2028      	movs	r0, #40	; 0x28
   d4e7e:	f00e fe27 	bl	e3ad0 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4e82:	4629      	mov	r1, r5
   d4e84:	79a0      	ldrb	r0, [r4, #6]
   d4e86:	f010 fdf1 	bl	e5a6c <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d4e8a:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d4e8c:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4e90:	79a3      	ldrb	r3, [r4, #6]
   d4e92:	6832      	ldr	r2, [r6, #0]
   d4e94:	011b      	lsls	r3, r3, #4
   d4e96:	18d1      	adds	r1, r2, r3
   d4e98:	f812 a003 	ldrb.w	sl, [r2, r3]
   d4e9c:	784b      	ldrb	r3, [r1, #1]
   d4e9e:	f003 031f 	and.w	r3, r3, #31
   d4ea2:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d4ea6:	4650      	mov	r0, sl
   d4ea8:	f7ff ff61 	bl	d4d6e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4eac:	4650      	mov	r0, sl
   d4eae:	f7ff ff5e 	bl	d4d6e <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d4eb2:	4580      	cmp	r8, r0
   d4eb4:	fa5f f98b 	uxtb.w	r9, fp
   d4eb8:	d108      	bne.n	d4ecc <_ZN3DHT4readEv+0x100>
   d4eba:	2001      	movs	r0, #1
   d4ebc:	f10b 0b01 	add.w	fp, fp, #1
   d4ec0:	f00e fe06 	bl	e3ad0 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d4ec4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d4ec8:	d1e2      	bne.n	d4e90 <_ZN3DHT4readEv+0xc4>
   d4eca:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4ecc:	79a3      	ldrb	r3, [r4, #6]
   d4ece:	6832      	ldr	r2, [r6, #0]
   d4ed0:	011b      	lsls	r3, r3, #4
   d4ed2:	18d1      	adds	r1, r2, r3
   d4ed4:	f812 8003 	ldrb.w	r8, [r2, r3]
   d4ed8:	784b      	ldrb	r3, [r1, #1]
   d4eda:	f003 031f 	and.w	r3, r3, #31
   d4ede:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d4ee2:	4640      	mov	r0, r8
   d4ee4:	f7ff ff43 	bl	d4d6e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4ee8:	4640      	mov	r0, r8
   d4eea:	f7ff ff40 	bl	d4d6e <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d4eee:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4ef2:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d4ef6:	d014      	beq.n	d4f22 <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d4ef8:	2d03      	cmp	r5, #3
   d4efa:	d90e      	bls.n	d4f1a <_ZN3DHT4readEv+0x14e>
   d4efc:	07eb      	lsls	r3, r5, #31
   d4efe:	d40c      	bmi.n	d4f1a <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4f00:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4f02:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4f04:	5ca3      	ldrb	r3, [r4, r2]
   d4f06:	005b      	lsls	r3, r3, #1
   d4f08:	b2db      	uxtb	r3, r3
   d4f0a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4f0c:	7a21      	ldrb	r1, [r4, #8]
   d4f0e:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4f10:	bf3c      	itt	cc
   d4f12:	f043 0301 	orrcc.w	r3, r3, #1
   d4f16:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4f18:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4f1a:	3501      	adds	r5, #1
   d4f1c:	b2ed      	uxtb	r5, r5
   d4f1e:	2d55      	cmp	r5, #85	; 0x55
   d4f20:	d1b4      	bne.n	d4e8c <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d4f22:	f00f fc4b 	bl	e47bc <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4f26:	2f27      	cmp	r7, #39	; 0x27
   d4f28:	d90b      	bls.n	d4f42 <_ZN3DHT4readEv+0x176>
   d4f2a:	7822      	ldrb	r2, [r4, #0]
   d4f2c:	7863      	ldrb	r3, [r4, #1]
   d4f2e:	7921      	ldrb	r1, [r4, #4]
   d4f30:	4413      	add	r3, r2
   d4f32:	78a2      	ldrb	r2, [r4, #2]
   d4f34:	4413      	add	r3, r2
   d4f36:	78e2      	ldrb	r2, [r4, #3]
   d4f38:	4413      	add	r3, r2
   d4f3a:	b2db      	uxtb	r3, r3
   d4f3c:	4299      	cmp	r1, r3
   d4f3e:	f43f af56 	beq.w	d4dee <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d4f42:	2000      	movs	r0, #0

}
   d4f44:	b003      	add	sp, #12
   d4f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4f4a:	bf00      	nop
   d4f4c:	2003c1b8 	.word	0x2003c1b8

000d4f50 <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d4f50:	b510      	push	{r4, lr}
   d4f52:	4604      	mov	r4, r0
	float f;

	if (read())
   d4f54:	f7ff ff3a 	bl	d4dcc <_ZN3DHT4readEv>
   d4f58:	b128      	cbz	r0, d4f66 <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d4f5a:	78a3      	ldrb	r3, [r4, #2]
   d4f5c:	ee00 3a10 	vmov	s0, r3
   d4f60:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4f64:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4f66:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4f6c <_ZN3DHT15readTemperatureEv+0x1c>
}
   d4f6a:	bd10      	pop	{r4, pc}
   d4f6c:	7fc00000 	.word	0x7fc00000

000d4f70 <_ZN3DHT16getTempFarenheitEv>:
{
	return readTemperature();
}

float DHT::getTempFarenheit()
{
   d4f70:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4f72:	f7ff ffed 	bl	d4f50 <_ZN3DHT15readTemperatureEv>
   d4f76:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4f7a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4f7e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d4f82:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4f86:	eddf 7a02 	vldr	s15, [pc, #8]	; d4f90 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4f8a:	ee30 0a27 	vadd.f32	s0, s0, s15
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	42000000 	.word	0x42000000

000d4f94 <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d4f94:	b510      	push	{r4, lr}
   d4f96:	4604      	mov	r4, r0
	float f;

	if (read())
   d4f98:	f7ff ff18 	bl	d4dcc <_ZN3DHT4readEv>
   d4f9c:	b128      	cbz	r0, d4faa <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d4f9e:	7823      	ldrb	r3, [r4, #0]
   d4fa0:	ee00 3a10 	vmov	s0, r3
   d4fa4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4fa8:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4faa:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4fb0 <_ZN3DHT12readHumidityEv+0x1c>
}
   d4fae:	bd10      	pop	{r4, pc}
   d4fb0:	7fc00000 	.word	0x7fc00000

000d4fb4 <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d4fb4:	f7ff bfee 	b.w	d4f94 <_ZN3DHT12readHumidityEv>

000d4fb8 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d4fb8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4fba:	f00e fdb1 	bl	e3b20 <HAL_Pin_Map>
   d4fbe:	4b01      	ldr	r3, [pc, #4]	; (d4fc4 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d4fc0:	6018      	str	r0, [r3, #0]
   d4fc2:	bd08      	pop	{r3, pc}
   d4fc4:	2003c1b8 	.word	0x2003c1b8

000d4fc8 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4fc8:	b510      	push	{r4, lr}
   d4fca:	4b05      	ldr	r3, [pc, #20]	; (d4fe0 <_ZN10JsonBufferD1Ev+0x18>)
   d4fcc:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4fce:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4fd0:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4fd2:	b91b      	cbnz	r3, d4fdc <_ZN10JsonBufferD1Ev+0x14>
   d4fd4:	6840      	ldr	r0, [r0, #4]
   d4fd6:	b108      	cbz	r0, d4fdc <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4fd8:	f00e ffee 	bl	e3fb8 <free>
	}
}
   d4fdc:	4620      	mov	r0, r4
   d4fde:	bd10      	pop	{r4, pc}
   d4fe0:	000e74ec 	.word	0x000e74ec

000d4fe4 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4fe4:	b510      	push	{r4, lr}
   d4fe6:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4fe8:	f7ff ffee 	bl	d4fc8 <_ZN10JsonBufferD1Ev>
   d4fec:	4620      	mov	r0, r4
   d4fee:	2114      	movs	r1, #20
   d4ff0:	f010 fdc5 	bl	e5b7e <_ZdlPvj>
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	bd10      	pop	{r4, pc}

000d4ff8 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d4ff8:	b510      	push	{r4, lr}
   d4ffa:	4b03      	ldr	r3, [pc, #12]	; (d5008 <_ZN10JsonWriterD1Ev+0x10>)
   d4ffc:	6003      	str	r3, [r0, #0]
   d4ffe:	4604      	mov	r4, r0
   d5000:	f7ff ffe2 	bl	d4fc8 <_ZN10JsonBufferD1Ev>

}
   d5004:	4620      	mov	r0, r4
   d5006:	bd10      	pop	{r4, pc}
   d5008:	000e74fc 	.word	0x000e74fc

000d500c <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d500c:	b510      	push	{r4, lr}
   d500e:	4604      	mov	r4, r0

}
   d5010:	f7ff fff2 	bl	d4ff8 <_ZN10JsonWriterD1Ev>
   d5014:	4620      	mov	r0, r4
   d5016:	2130      	movs	r1, #48	; 0x30
   d5018:	f010 fdb1 	bl	e5b7e <_ZdlPvj>
   d501c:	4620      	mov	r0, r4
   d501e:	bd10      	pop	{r4, pc}

000d5020 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5020:	2300      	movs	r3, #0
   d5022:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d5024:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = false;
   d5026:	7603      	strb	r3, [r0, #24]
	context[contextIndex].terminator = 0;
   d5028:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d502a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d502e:	4770      	bx	lr

000d5030 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5030:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5032:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5034:	60c3      	str	r3, [r0, #12]
   d5036:	2301      	movs	r3, #1
   d5038:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d503a:	4b05      	ldr	r3, [pc, #20]	; (d5050 <_ZN10JsonWriterC1EPcj+0x20>)
   d503c:	6003      	str	r3, [r0, #0]
   d503e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5042:	6041      	str	r1, [r0, #4]
   d5044:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5046:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d5048:	f7ff ffea 	bl	d5020 <_ZN10JsonWriter4initEv>
}
   d504c:	bd10      	pop	{r4, pc}
   d504e:	bf00      	nop
   d5050:	000e74fc 	.word	0x000e74fc

000d5054 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d5054:	68c3      	ldr	r3, [r0, #12]
   d5056:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d5058:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d505a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d505c:	bf3f      	itttt	cc
   d505e:	6842      	ldrcc	r2, [r0, #4]
   d5060:	1c5c      	addcc	r4, r3, #1
   d5062:	60c4      	strcc	r4, [r0, #12]
   d5064:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d5066:	bf24      	itt	cs
   d5068:	2301      	movcs	r3, #1
   d506a:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d506e:	bd10      	pop	{r4, pc}

000d5070 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5070:	b538      	push	{r3, r4, r5, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5072:	6944      	ldr	r4, [r0, #20]
   d5074:	1c65      	adds	r5, r4, #1
   d5076:	2d08      	cmp	r5, #8
   d5078:	d809      	bhi.n	d508e <_ZN10JsonWriter18startObjectOrArrayEcc+0x1e>
   d507a:	eb00 0344 	add.w	r3, r0, r4, lsl #1
		return false;
	}
	contextIndex++;

	context[contextIndex].isFirst = true;
   d507e:	2401      	movs	r4, #1

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	contextIndex++;
   d5080:	6145      	str	r5, [r0, #20]

	context[contextIndex].isFirst = true;
   d5082:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d5084:	76da      	strb	r2, [r3, #27]

	insertChar(startChar);
   d5086:	f7ff ffe5 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
	return true;
   d508a:	4620      	mov	r0, r4
   d508c:	bd38      	pop	{r3, r4, r5, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d508e:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d5090:	bd38      	pop	{r3, r4, r5, pc}

000d5092 <_ZN10JsonWriter19finishObjectOrArrayEv>:


void JsonWriter::finishObjectOrArray() {
   d5092:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5094:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5096:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d5098:	b143      	cbz	r3, d50ac <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d509a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d509e:	7e59      	ldrb	r1, [r3, #25]
   d50a0:	b109      	cbz	r1, d50a6 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d50a2:	f7ff ffd7 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d50a6:	6963      	ldr	r3, [r4, #20]
   d50a8:	3b01      	subs	r3, #1
   d50aa:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d50ac:	68a3      	ldr	r3, [r4, #8]
   d50ae:	68e0      	ldr	r0, [r4, #12]
   d50b0:	6861      	ldr	r1, [r4, #4]
   d50b2:	4298      	cmp	r0, r3
   d50b4:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d50b8:	bf2a      	itet	cs
   d50ba:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d50bc:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d50be:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d50c2:	bd10      	pop	{r4, pc}

000d50c4 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d50c4:	b570      	push	{r4, r5, r6, lr}
   d50c6:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d50c8:	68c0      	ldr	r0, [r0, #12]
   d50ca:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d50cc:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d50ce:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d50d0:	4613      	mov	r3, r2
   d50d2:	4430      	add	r0, r6
   d50d4:	460a      	mov	r2, r1
   d50d6:	4629      	mov	r1, r5
   d50d8:	f00e ff8e 	bl	e3ff8 <vsnprintf>
	if (count <= spaceAvailable) {
   d50dc:	4285      	cmp	r5, r0
		offset += count;
   d50de:	bf2d      	iteet	cs
   d50e0:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d50e2:	68a3      	ldrcc	r3, [r4, #8]
   d50e4:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d50e6:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d50e8:	bf36      	itet	cc
   d50ea:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d50ec:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d50ee:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d50f2:	bd70      	pop	{r4, r5, r6, pc}

000d50f4 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d50f4:	b40e      	push	{r1, r2, r3}
   d50f6:	b503      	push	{r0, r1, lr}
   d50f8:	aa03      	add	r2, sp, #12
   d50fa:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d50fe:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5100:	f7ff ffe0 	bl	d50c4 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5104:	b002      	add	sp, #8
   d5106:	f85d eb04 	ldr.w	lr, [sp], #4
   d510a:	b003      	add	sp, #12
   d510c:	4770      	bx	lr
	...

000d5110 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5114:	4604      	mov	r4, r0
   d5116:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5118:	4617      	mov	r7, r2
   d511a:	b112      	cbz	r2, d5122 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d511c:	2122      	movs	r1, #34	; 0x22
   d511e:	f7ff ff99 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5122:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5124:	5d71      	ldrb	r1, [r6, r5]
   d5126:	eb06 0805 	add.w	r8, r6, r5
   d512a:	2900      	cmp	r1, #0
   d512c:	d071      	beq.n	d5212 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d512e:	68e2      	ldr	r2, [r4, #12]
   d5130:	68a3      	ldr	r3, [r4, #8]
   d5132:	429a      	cmp	r2, r3
   d5134:	d26d      	bcs.n	d5212 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5136:	060b      	lsls	r3, r1, #24
   d5138:	d533      	bpl.n	d51a2 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d513a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d513e:	2be0      	cmp	r3, #224	; 0xe0
   d5140:	d117      	bne.n	d5172 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5142:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5146:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d514a:	2a80      	cmp	r2, #128	; 0x80
   d514c:	d111      	bne.n	d5172 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d514e:	f105 0802 	add.w	r8, r5, #2
   d5152:	f816 2008 	ldrb.w	r2, [r6, r8]
   d5156:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d515a:	2880      	cmp	r0, #128	; 0x80
   d515c:	d109      	bne.n	d5172 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d515e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d5162:	019b      	lsls	r3, r3, #6
   d5164:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d5168:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d516c:	431a      	orrs	r2, r3
   d516e:	b292      	uxth	r2, r2
   d5170:	e011      	b.n	d5196 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5172:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d5176:	2bc0      	cmp	r3, #192	; 0xc0
   d5178:	d146      	bne.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d517a:	f105 0801 	add.w	r8, r5, #1
   d517e:	f816 3008 	ldrb.w	r3, [r6, r8]
   d5182:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5186:	2a80      	cmp	r2, #128	; 0x80
   d5188:	d13e      	bne.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d518a:	0189      	lsls	r1, r1, #6
   d518c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d5194:	431a      	orrs	r2, r3
   d5196:	4923      	ldr	r1, [pc, #140]	; (d5224 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d5198:	4620      	mov	r0, r4
   d519a:	f7ff ffab 	bl	d50f4 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d519e:	4645      	mov	r5, r8
   d51a0:	e035      	b.n	d520e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d51a2:	290c      	cmp	r1, #12
   d51a4:	d018      	beq.n	d51d8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d51a6:	d80b      	bhi.n	d51c0 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d51a8:	2909      	cmp	r1, #9
   d51aa:	d021      	beq.n	d51f0 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d51ac:	290a      	cmp	r1, #10
   d51ae:	d019      	beq.n	d51e4 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d51b0:	2908      	cmp	r1, #8
   d51b2:	d129      	bne.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d51b4:	215c      	movs	r1, #92	; 0x5c
   d51b6:	4620      	mov	r0, r4
   d51b8:	f7ff ff4c 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d51bc:	2162      	movs	r1, #98	; 0x62
   d51be:	e023      	b.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d51c0:	2922      	cmp	r1, #34	; 0x22
   d51c2:	d01b      	beq.n	d51fc <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d51c4:	295c      	cmp	r1, #92	; 0x5c
   d51c6:	d019      	beq.n	d51fc <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d51c8:	290d      	cmp	r1, #13
   d51ca:	d11d      	bne.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d51cc:	215c      	movs	r1, #92	; 0x5c
   d51ce:	4620      	mov	r0, r4
   d51d0:	f7ff ff40 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d51d4:	2172      	movs	r1, #114	; 0x72
   d51d6:	e017      	b.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d51d8:	215c      	movs	r1, #92	; 0x5c
   d51da:	4620      	mov	r0, r4
   d51dc:	f7ff ff3a 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d51e0:	2166      	movs	r1, #102	; 0x66
   d51e2:	e011      	b.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d51e4:	215c      	movs	r1, #92	; 0x5c
   d51e6:	4620      	mov	r0, r4
   d51e8:	f7ff ff34 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d51ec:	216e      	movs	r1, #110	; 0x6e
   d51ee:	e00b      	b.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d51f0:	215c      	movs	r1, #92	; 0x5c
   d51f2:	4620      	mov	r0, r4
   d51f4:	f7ff ff2e 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d51f8:	2174      	movs	r1, #116	; 0x74
   d51fa:	e005      	b.n	d5208 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d51fc:	215c      	movs	r1, #92	; 0x5c
   d51fe:	4620      	mov	r0, r4
   d5200:	f7ff ff28 	bl	d5054 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5204:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5208:	4620      	mov	r0, r4
   d520a:	f7ff ff23 	bl	d5054 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d520e:	3501      	adds	r5, #1
   d5210:	e788      	b.n	d5124 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d5212:	b12f      	cbz	r7, d5220 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5214:	4620      	mov	r0, r4
   d5216:	2122      	movs	r1, #34	; 0x22
	}

}
   d5218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d521c:	f7ff bf1a 	b.w	d5054 <_ZN10JsonWriter10insertCharEc>
   d5220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5224:	000e750d 	.word	0x000e750d

000d5228 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5228:	6942      	ldr	r2, [r0, #20]
   d522a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d522e:	7e1a      	ldrb	r2, [r3, #24]
   d5230:	b112      	cbz	r2, d5238 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5232:	2200      	movs	r2, #0
   d5234:	761a      	strb	r2, [r3, #24]
   d5236:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5238:	212c      	movs	r1, #44	; 0x2c
   d523a:	f7ff bf0b 	b.w	d5054 <_ZN10JsonWriter10insertCharEc>
	...

000d5240 <_ZN10JsonWriter11insertValueEd>:
	}
	else {
		insertsprintf("%f", value);
	}
}
void JsonWriter::insertValue(double value) {
   d5240:	b507      	push	{r0, r1, r2, lr}
	if (floatPlaces >= 0) {
   d5242:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d5244:	2a00      	cmp	r2, #0
   d5246:	db07      	blt.n	d5258 <_ZN10JsonWriter11insertValueEd+0x18>
		insertsprintf("%.*lf", floatPlaces, value);
   d5248:	ed8d 0b00 	vstr	d0, [sp]
   d524c:	4906      	ldr	r1, [pc, #24]	; (d5268 <_ZN10JsonWriter11insertValueEd+0x28>)
   d524e:	f7ff ff51 	bl	d50f4 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%lf", value);
	}
}
   d5252:	b003      	add	sp, #12
   d5254:	f85d fb04 	ldr.w	pc, [sp], #4
void JsonWriter::insertValue(double value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*lf", floatPlaces, value);
	}
	else {
		insertsprintf("%lf", value);
   d5258:	ec53 2b10 	vmov	r2, r3, d0
   d525c:	4903      	ldr	r1, [pc, #12]	; (d526c <_ZN10JsonWriter11insertValueEd+0x2c>)
	}
}
   d525e:	b003      	add	sp, #12
   d5260:	f85d eb04 	ldr.w	lr, [sp], #4
void JsonWriter::insertValue(double value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*lf", floatPlaces, value);
	}
	else {
		insertsprintf("%lf", value);
   d5264:	f7ff bf46 	b.w	d50f4 <_ZN10JsonWriter13insertsprintfEPKcz>
   d5268:	000e7524 	.word	0x000e7524
   d526c:	000e752a 	.word	0x000e752a

000d5270 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5270:	f00e bc56 	b.w	e3b20 <HAL_Pin_Map>

000d5274 <_ZN10CloudClass12syncTimeDoneEv.isra.7>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5274:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5276:	2000      	movs	r0, #0
   d5278:	f00e fe36 	bl	e3ee8 <spark_sync_time_pending>
   d527c:	b128      	cbz	r0, d528a <_ZN10CloudClass12syncTimeDoneEv.isra.7+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d527e:	f00e fe1b 	bl	e3eb8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5282:	f080 0001 	eor.w	r0, r0, #1
   d5286:	b2c0      	uxtb	r0, r0
   d5288:	bd08      	pop	{r3, pc}
   d528a:	2001      	movs	r0, #1
    }
   d528c:	bd08      	pop	{r3, pc}

000d528e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d528e:	2200      	movs	r2, #0
   d5290:	4611      	mov	r1, r2
   d5292:	6840      	ldr	r0, [r0, #4]
   d5294:	f00e be50 	b.w	e3f38 <network_ready>

000d5298 <_ZN6IotHub15startConnectionEv>:
#include "AzureIotHubClient.h"

void IotHub::startConnection()
{
   d5298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d529c:	4604      	mov	r4, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d529e:	2000      	movs	r0, #0
   d52a0:	f00e fc36 	bl	e3b10 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d52a4:	2700      	movs	r7, #0
   d52a6:	4606      	mov	r6, r0
   d52a8:	f241 3887 	movw	r8, #4999	; 0x1387
   d52ac:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d52b0:	2000      	movs	r0, #0
   d52b2:	f00e fc2d 	bl	e3b10 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d52b6:	1b80      	subs	r0, r0, r6
   d52b8:	eb61 0107 	sbc.w	r1, r1, r7
   d52bc:	4589      	cmp	r9, r1
   d52be:	bf08      	it	eq
   d52c0:	4580      	cmpeq	r8, r0
   d52c2:	d306      	bcc.n	d52d2 <_ZN6IotHub15startConnectionEv+0x3a>
  waitFor(WiFi.ready, 5000);
   d52c4:	481a      	ldr	r0, [pc, #104]	; (d5330 <_ZN6IotHub15startConnectionEv+0x98>)
   d52c6:	f7ff ffe2 	bl	d528e <_ZN5spark9WiFiClass5readyEv>
   d52ca:	b910      	cbnz	r0, d52d2 <_ZN6IotHub15startConnectionEv+0x3a>
            spark_process();
   d52cc:	f00e fdec 	bl	e3ea8 <spark_process>
   d52d0:	e7ee      	b.n	d52b0 <_ZN6IotHub15startConnectionEv+0x18>
   d52d2:	4817      	ldr	r0, [pc, #92]	; (d5330 <_ZN6IotHub15startConnectionEv+0x98>)
   d52d4:	f7ff ffdb 	bl	d528e <_ZN5spark9WiFiClass5readyEv>

  if (WiFi.ready())
   d52d8:	4815      	ldr	r0, [pc, #84]	; (d5330 <_ZN6IotHub15startConnectionEv+0x98>)
   d52da:	f7ff ffd8 	bl	d528e <_ZN5spark9WiFiClass5readyEv>
   d52de:	b328      	cbz	r0, d532c <_ZN6IotHub15startConnectionEv+0x94>
  {
    client->enableTls(letencryptCaPem, strlen(letencryptCaPem) + 1);
   d52e0:	f8d4 523c 	ldr.w	r5, [r4, #572]	; 0x23c
   d52e4:	4628      	mov	r0, r5
   d52e6:	f011 fcc0 	bl	e6c6a <strlen>
   d52ea:	4629      	mov	r1, r5
   d52ec:	1c42      	adds	r2, r0, #1
   d52ee:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
   d52f2:	f001 f811 	bl	d6318 <_ZN4MQTT9enableTlsEPKcj>
    client->connect(this->device.deviceId, this->endPoint, this->sas.token);
   d52f6:	f104 0308 	add.w	r3, r4, #8
   d52fa:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
   d52fe:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   d5302:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
   d5306:	f001 f95f 	bl	d65c8 <_ZN4MQTT7connectEPKcS1_S1_>
    client->subscribe(this->topic.messageSubscribe);
   d530a:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
   d530e:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
   d5312:	f000 fe33 	bl	d5f7c <_ZN4MQTT9subscribeEPKc>
    client->subscribe(this->topic.directMethodSubscribe);
   d5316:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
   d531a:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
   d531e:	f000 fe2d 	bl	d5f7c <_ZN4MQTT9subscribeEPKc>

    this->wasConnected = true;
   d5322:	2301      	movs	r3, #1
   d5324:	f884 31e4 	strb.w	r3, [r4, #484]	; 0x1e4
  }
}
   d5328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d532c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5330:	2003e704 	.word	0x2003e704

000d5334 <_ZN6IotHub14stopConnectionEv>:

void IotHub::stopConnection()
{
   d5334:	b510      	push	{r4, lr}
   d5336:	4604      	mov	r4, r0
  client->unsubscribe(this->topic.messageSubscribe);
   d5338:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
   d533c:	f8d0 01e8 	ldr.w	r0, [r0, #488]	; 0x1e8
   d5340:	f000 fe1f 	bl	d5f82 <_ZN4MQTT11unsubscribeEPKc>
  client->unsubscribe(this->topic.directMethodSubscribe);
   d5344:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
   d5348:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
   d534c:	f000 fe19 	bl	d5f82 <_ZN4MQTT11unsubscribeEPKc>
  client->disconnect();
   d5350:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
   d5354:	f000 fc71 	bl	d5c3a <_ZN4MQTT10disconnectEv>

  this->wasConnected = false;
   d5358:	2300      	movs	r3, #0
   d535a:	f884 31e4 	strb.w	r3, [r4, #484]	; 0x1e4
   d535e:	bd10      	pop	{r4, pc}

000d5360 <_ZN6IotHub9connectedEv>:
}

bool IotHub::connected()
{
   d5360:	b510      	push	{r4, lr}
   d5362:	4604      	mov	r4, r0
  return WiFi.ready() && client->isConnected();
   d5364:	4805      	ldr	r0, [pc, #20]	; (d537c <_ZN6IotHub9connectedEv+0x1c>)
   d5366:	f7ff ff92 	bl	d528e <_ZN5spark9WiFiClass5readyEv>
   d536a:	b128      	cbz	r0, d5378 <_ZN6IotHub9connectedEv+0x18>
   d536c:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
}
   d5370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->wasConnected = false;
}

bool IotHub::connected()
{
  return WiFi.ready() && client->isConnected();
   d5374:	f000 bcb9 	b.w	d5cea <_ZN4MQTT11isConnectedEv>
}
   d5378:	bd10      	pop	{r4, pc}
   d537a:	bf00      	nop
   d537c:	2003e704 	.word	0x2003e704

000d5380 <_ZN6IotHub4loopEv>:

bool IotHub::loop()
{
   d5380:	b570      	push	{r4, r5, r6, lr}
  if (this->wasConnected)
   d5382:	f890 61e4 	ldrb.w	r6, [r0, #484]	; 0x1e4
{
  return WiFi.ready() && client->isConnected();
}

bool IotHub::loop()
{
   d5386:	4604      	mov	r4, r0
  if (this->wasConnected)
   d5388:	b1ae      	cbz	r6, d53b6 <_ZN6IotHub4loopEv+0x36>
  {
    if (connected())
   d538a:	f7ff ffe9 	bl	d5360 <_ZN6IotHub9connectedEv>
   d538e:	4605      	mov	r5, r0
    {
      // generareSas returns true if new sas token created
      // so stop existing mqtt connection and reopen using new sas token
      if (generateSasToken())
   d5390:	4620      	mov	r0, r4

bool IotHub::loop()
{
  if (this->wasConnected)
  {
    if (connected())
   d5392:	b16d      	cbz	r5, d53b0 <_ZN6IotHub4loopEv+0x30>
    {
      // generareSas returns true if new sas token created
      // so stop existing mqtt connection and reopen using new sas token
      if (generateSasToken())
   d5394:	f000 f976 	bl	d5684 <_ZN8SasToken16generateSasTokenEv>
   d5398:	b128      	cbz	r0, d53a6 <_ZN6IotHub4loopEv+0x26>
      {
        stopConnection();
   d539a:	4620      	mov	r0, r4
   d539c:	f7ff ffca 	bl	d5334 <_ZN6IotHub14stopConnectionEv>
        startConnection();
   d53a0:	4620      	mov	r0, r4
   d53a2:	f7ff ff79 	bl	d5298 <_ZN6IotHub15startConnectionEv>
      }
      client->loop(); // check if a new message from iot hub
   d53a6:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
   d53aa:	f000 fe14 	bl	d5fd6 <_ZN4MQTT4loopEv>
      return true;
   d53ae:	e017      	b.n	d53e0 <_ZN6IotHub4loopEv+0x60>
    }
    else
    {
      stopConnection();
   d53b0:	f7ff ffc0 	bl	d5334 <_ZN6IotHub14stopConnectionEv>
      return false;
   d53b4:	e014      	b.n	d53e0 <_ZN6IotHub4loopEv+0x60>
    }
  }
  else
  {
    if (WiFi.ready())
   d53b6:	480b      	ldr	r0, [pc, #44]	; (d53e4 <_ZN6IotHub4loopEv+0x64>)
   d53b8:	f7ff ff69 	bl	d528e <_ZN5spark9WiFiClass5readyEv>
   d53bc:	4605      	mov	r5, r0
   d53be:	b178      	cbz	r0, d53e0 <_ZN6IotHub4loopEv+0x60>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d53c0:	4630      	mov	r0, r6
   d53c2:	f00e fd89 	bl	e3ed8 <spark_sync_time>
    {
      Particle.syncTime();
      waitUntil(Particle.syncTimeDone);
   d53c6:	f7ff ff55 	bl	d5274 <_ZN10CloudClass12syncTimeDoneEv.isra.7>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d53ca:	4605      	mov	r5, r0
   d53cc:	b128      	cbz	r0, d53da <_ZN6IotHub4loopEv+0x5a>
   d53ce:	f7ff ff51 	bl	d5274 <_ZN10CloudClass12syncTimeDoneEv.isra.7>

      generateSasToken();
   d53d2:	4620      	mov	r0, r4
   d53d4:	f000 f956 	bl	d5684 <_ZN8SasToken16generateSasTokenEv>
   d53d8:	e7e2      	b.n	d53a0 <_ZN6IotHub4loopEv+0x20>
            spark_process();
   d53da:	f00e fd65 	bl	e3ea8 <spark_process>
   d53de:	e7f2      	b.n	d53c6 <_ZN6IotHub4loopEv+0x46>
    else
    {
      return false;
    }
  }
}
   d53e0:	4628      	mov	r0, r5
   d53e2:	bd70      	pop	{r4, r5, r6, pc}
   d53e4:	2003e704 	.word	0x2003e704

000d53e8 <_ZN6IotHub7publishE6String>:

bool IotHub::publish(String msg)
{
   d53e8:	b538      	push	{r3, r4, r5, lr}
   d53ea:	4604      	mov	r4, r0
   d53ec:	460d      	mov	r5, r1
  if (connected())
   d53ee:	f7ff ffb7 	bl	d5360 <_ZN6IotHub9connectedEv>
   d53f2:	b140      	cbz	r0, d5406 <_ZN6IotHub7publishE6String+0x1e>
  {
    client->publish(this->topic.messagePublish, msg);
   d53f4:	682a      	ldr	r2, [r5, #0]
   d53f6:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
   d53fa:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
  }
}
   d53fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

bool IotHub::publish(String msg)
{
  if (connected())
  {
    client->publish(this->topic.messagePublish, msg);
   d5402:	f000 bd4e 	b.w	d5ea2 <_ZN4MQTT7publishEPKcS1_>
  }
}
   d5406:	bd38      	pop	{r3, r4, r5, pc}

000d5408 <_ZN6IotHub19directMethodReponseEPci>:

void IotHub::directMethodReponse(char *rid, int status)
{
   d5408:	b570      	push	{r4, r5, r6, lr}
   d540a:	b090      	sub	sp, #64	; 0x40
   d540c:	4615      	mov	r5, r2
   d540e:	4604      	mov	r4, r0
   d5410:	460e      	mov	r6, r1
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5412:	f500 710b 	add.w	r1, r0, #556	; 0x22c
   d5416:	a808      	add	r0, sp, #32
   d5418:	f00f fd63 	bl	e4ee2 <_ZN6StringC1ERKS_>
  String response = topic.directMethodResponse + String(status) + "/?$rid=" + String(rid);
   d541c:	220a      	movs	r2, #10
   d541e:	4629      	mov	r1, r5
   d5420:	a804      	add	r0, sp, #16
   d5422:	f00f fd7a 	bl	e4f1a <_ZN6StringC1Eih>
   d5426:	a904      	add	r1, sp, #16
   d5428:	a808      	add	r0, sp, #32
   d542a:	f00f fdb3 	bl	e4f94 <_ZplRK15StringSumHelperRK6String>
   d542e:	4912      	ldr	r1, [pc, #72]	; (d5478 <_ZN6IotHub19directMethodReponseEPci+0x70>)
   d5430:	f00f fdbc 	bl	e4fac <_ZplRK15StringSumHelperPKc>
   d5434:	4631      	mov	r1, r6
   d5436:	4605      	mov	r5, r0
   d5438:	a80c      	add	r0, sp, #48	; 0x30
   d543a:	f00f fd30 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d543e:	a90c      	add	r1, sp, #48	; 0x30
   d5440:	4628      	mov	r0, r5
   d5442:	f00f fda7 	bl	e4f94 <_ZplRK15StringSumHelperRK6String>
   d5446:	4601      	mov	r1, r0
   d5448:	4668      	mov	r0, sp
   d544a:	f00f fd4a 	bl	e4ee2 <_ZN6StringC1ERKS_>
   d544e:	a80c      	add	r0, sp, #48	; 0x30
   d5450:	f00f fcde 	bl	e4e10 <_ZN6StringD1Ev>
   d5454:	a804      	add	r0, sp, #16
   d5456:	f00f fcdb 	bl	e4e10 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d545a:	a808      	add	r0, sp, #32
   d545c:	f00f fcd8 	bl	e4e10 <_ZN6StringD1Ev>
  client->publish(response, "");
   d5460:	4a06      	ldr	r2, [pc, #24]	; (d547c <_ZN6IotHub19directMethodReponseEPci+0x74>)
   d5462:	9900      	ldr	r1, [sp, #0]
   d5464:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
   d5468:	f000 fd1b 	bl	d5ea2 <_ZN4MQTT7publishEPKcS1_>
  }
}

void IotHub::directMethodReponse(char *rid, int status)
{
  String response = topic.directMethodResponse + String(status) + "/?$rid=" + String(rid);
   d546c:	4668      	mov	r0, sp
   d546e:	f00f fccf 	bl	e4e10 <_ZN6StringD1Ev>
  client->publish(response, "");
}
   d5472:	b010      	add	sp, #64	; 0x40
   d5474:	bd70      	pop	{r4, r5, r6, pc}
   d5476:	bf00      	nop
   d5478:	000e752e 	.word	0x000e752e
   d547c:	000e7da0 	.word	0x000e7da0

000d5480 <_ZN6IotHub8getValueEPcS0_>:
    pch = strtok(NULL, ";");
  }
}

char *IotHub::getValue(char *token, char *key)
{
   d5480:	b570      	push	{r4, r5, r6, lr}
  int valuelen;
  int keyLen = strlen(key) + 1; // plus 1 for = char
   d5482:	4610      	mov	r0, r2
    pch = strtok(NULL, ";");
  }
}

char *IotHub::getValue(char *token, char *key)
{
   d5484:	460d      	mov	r5, r1
   d5486:	4616      	mov	r6, r2
  int valuelen;
  int keyLen = strlen(key) + 1; // plus 1 for = char
   d5488:	f011 fbef 	bl	e6c6a <strlen>

  if (NULL == strstr(token, key))
   d548c:	4631      	mov	r1, r6
}

char *IotHub::getValue(char *token, char *key)
{
  int valuelen;
  int keyLen = strlen(key) + 1; // plus 1 for = char
   d548e:	1c44      	adds	r4, r0, #1

  if (NULL == strstr(token, key))
   d5490:	4628      	mov	r0, r5
   d5492:	f011 fbf2 	bl	e6c7a <strstr>
   d5496:	b148      	cbz	r0, d54ac <_ZN6IotHub8getValueEPcS0_+0x2c>
  {
    return NULL;
  }

  valuelen = strlen(token + keyLen);
   d5498:	442c      	add	r4, r5
   d549a:	4620      	mov	r0, r4
   d549c:	f011 fbe5 	bl	e6c6a <strlen>
  char *arr = (char *)malloc(valuelen + 1);
   d54a0:	3001      	adds	r0, #1
   d54a2:	f00e fd81 	bl	e3fa8 <malloc>
  strcpy(arr, token + keyLen);
   d54a6:	4621      	mov	r1, r4
   d54a8:	f011 fbbc 	bl	e6c24 <strcpy>
  return arr;
}
   d54ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d54b0 <_ZN6IotHub24tokeniseConnectionStringEPc>:
  String response = topic.directMethodResponse + String(status) + "/?$rid=" + String(rid);
  client->publish(response, "");
}

void IotHub::tokeniseConnectionString(char *cs)
{
   d54b0:	b538      	push	{r3, r4, r5, lr}
   d54b2:	4604      	mov	r4, r0
   d54b4:	4608      	mov	r0, r1
  char *value;
  char *pch = strtok(cs, ";");
   d54b6:	4910      	ldr	r1, [pc, #64]	; (d54f8 <_ZN6IotHub24tokeniseConnectionStringEPc+0x48>)
   d54b8:	f011 fbfa 	bl	e6cb0 <strtok>
   d54bc:	4605      	mov	r5, r0

  while (pch != NULL)
   d54be:	b1d0      	cbz	r0, d54f6 <_ZN6IotHub24tokeniseConnectionStringEPc+0x46>
  {
    value = getValue(pch, "HostName");
   d54c0:	4601      	mov	r1, r0
   d54c2:	4a0e      	ldr	r2, [pc, #56]	; (d54fc <_ZN6IotHub24tokeniseConnectionStringEPc+0x4c>)
   d54c4:	4620      	mov	r0, r4
   d54c6:	f7ff ffdb 	bl	d5480 <_ZN6IotHub8getValueEPcS0_>
    if (NULL != value)
   d54ca:	b108      	cbz	r0, d54d0 <_ZN6IotHub24tokeniseConnectionStringEPc+0x20>
    {
      this->device.host = value;
   d54cc:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    }
    value = getValue(pch, "DeviceId");
   d54d0:	4a0b      	ldr	r2, [pc, #44]	; (d5500 <_ZN6IotHub24tokeniseConnectionStringEPc+0x50>)
   d54d2:	4629      	mov	r1, r5
   d54d4:	4620      	mov	r0, r4
   d54d6:	f7ff ffd3 	bl	d5480 <_ZN6IotHub8getValueEPcS0_>
    if (NULL != value)
   d54da:	b108      	cbz	r0, d54e0 <_ZN6IotHub24tokeniseConnectionStringEPc+0x30>
    {
      this->device.deviceId = value;
   d54dc:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    }
    value = getValue(pch, "SharedAccessKey");
   d54e0:	4a08      	ldr	r2, [pc, #32]	; (d5504 <_ZN6IotHub24tokeniseConnectionStringEPc+0x54>)
   d54e2:	4629      	mov	r1, r5
   d54e4:	4620      	mov	r0, r4
   d54e6:	f7ff ffcb 	bl	d5480 <_ZN6IotHub8getValueEPcS0_>
    if (NULL != value)
   d54ea:	b108      	cbz	r0, d54f0 <_ZN6IotHub24tokeniseConnectionStringEPc+0x40>
    {
      this->device.deviceKey = value;
   d54ec:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    }
    pch = strtok(NULL, ";");
   d54f0:	4901      	ldr	r1, [pc, #4]	; (d54f8 <_ZN6IotHub24tokeniseConnectionStringEPc+0x48>)
   d54f2:	2000      	movs	r0, #0
   d54f4:	e7e0      	b.n	d54b8 <_ZN6IotHub24tokeniseConnectionStringEPc+0x8>
   d54f6:	bd38      	pop	{r3, r4, r5, pc}
   d54f8:	000e7536 	.word	0x000e7536
   d54fc:	000e7538 	.word	0x000e7538
   d5500:	000e7541 	.word	0x000e7541
   d5504:	000e754a 	.word	0x000e754a

000d5508 <_GLOBAL__sub_I__ZN6IotHub15startConnectionEv>:
   d5508:	f00e bb0a 	b.w	e3b20 <HAL_Pin_Map>

000d550c <_ZN10CloudClass12syncTimeDoneEv.isra.2>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d550c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d550e:	2000      	movs	r0, #0
   d5510:	f00e fcea 	bl	e3ee8 <spark_sync_time_pending>
   d5514:	b128      	cbz	r0, d5522 <_ZN10CloudClass12syncTimeDoneEv.isra.2+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5516:	f00e fccf 	bl	e3eb8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d551a:	f080 0001 	eor.w	r0, r0, #1
   d551e:	b2c0      	uxtb	r0, r0
   d5520:	bd08      	pop	{r3, pc}
   d5522:	2001      	movs	r0, #1
    }
   d5524:	bd08      	pop	{r3, pc}
	...

000d5528 <_ZN8SasToken9urlEncodeEPcS0_>:
#include "SasToken.h"

int SasToken::urlEncode(char *dest, char *msg)
{
   d5528:	b5f0      	push	{r4, r5, r6, r7, lr}
      *dest++ = *msg;
    }
    else
    {
      *dest++ = '%';
      *dest++ = hex[*msg >> 4];
   d552a:	4e11      	ldr	r6, [pc, #68]	; (d5570 <_ZN8SasToken9urlEncodeEPcS0_+0x48>)
   d552c:	3a01      	subs	r2, #1
#include "SasToken.h"

int SasToken::urlEncode(char *dest, char *msg)
{
   d552e:	460b      	mov	r3, r1
    {
      *dest++ = *msg;
    }
    else
    {
      *dest++ = '%';
   d5530:	2725      	movs	r7, #37	; 0x25
int SasToken::urlEncode(char *dest, char *msg)
{
  const char *hex = "0123456789abcdef";
  char *startPtr = dest;

  while (*msg != '\0')
   d5532:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   d5536:	b1c4      	cbz	r4, d556a <_ZN8SasToken9urlEncodeEPcS0_+0x42>
  {
    if (('a' <= *msg && *msg <= 'z') || ('A' <= *msg && *msg <= 'Z') || ('0' <= *msg && *msg <= '9'))
   d5538:	f024 0520 	bic.w	r5, r4, #32
   d553c:	3d41      	subs	r5, #65	; 0x41
   d553e:	2d19      	cmp	r5, #25
   d5540:	d903      	bls.n	d554a <_ZN8SasToken9urlEncodeEPcS0_+0x22>
   d5542:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   d5546:	2809      	cmp	r0, #9
   d5548:	d802      	bhi.n	d5550 <_ZN8SasToken9urlEncodeEPcS0_+0x28>
    {
      *dest++ = *msg;
   d554a:	1c58      	adds	r0, r3, #1
   d554c:	701c      	strb	r4, [r3, #0]
   d554e:	e00a      	b.n	d5566 <_ZN8SasToken9urlEncodeEPcS0_+0x3e>
    }
    else
    {
      *dest++ = '%';
   d5550:	701f      	strb	r7, [r3, #0]
      *dest++ = hex[*msg >> 4];
   d5552:	7814      	ldrb	r4, [r2, #0]
   d5554:	1124      	asrs	r4, r4, #4
   d5556:	5da0      	ldrb	r0, [r4, r6]
   d5558:	7058      	strb	r0, [r3, #1]
      *dest++ = hex[*msg & 15];
   d555a:	7814      	ldrb	r4, [r2, #0]
   d555c:	f004 040f 	and.w	r4, r4, #15
   d5560:	1cd8      	adds	r0, r3, #3
   d5562:	5da4      	ldrb	r4, [r4, r6]
   d5564:	709c      	strb	r4, [r3, #2]
int SasToken::urlEncode(char *dest, char *msg)
{
  const char *hex = "0123456789abcdef";
  char *startPtr = dest;

  while (*msg != '\0')
   d5566:	4603      	mov	r3, r0
   d5568:	e7e3      	b.n	d5532 <_ZN8SasToken9urlEncodeEPcS0_+0xa>
      *dest++ = hex[*msg >> 4];
      *dest++ = hex[*msg & 15];
    }
    msg++;
  }
  *dest = '\0';
   d556a:	701c      	strb	r4, [r3, #0]
  return dest - startPtr;
}
   d556c:	1a58      	subs	r0, r3, r1
   d556e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5570:	000e755a 	.word	0x000e755a

000d5574 <_ZN8SasToken14createSasTokenEPc>:

void SasToken::createSasToken(char *key)
{
   d5574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5578:	4604      	mov	r4, r0
   d557a:	460e      	mov	r6, r1
  sas.expiryTime = Time.now() + sas.expiryPeriodInSeconds;
   d557c:	f010 f829 	bl	e55d2 <_ZN9TimeClass3nowEv>
   d5580:	6823      	ldr	r3, [r4, #0]
   d5582:	4418      	add	r0, r3
   d5584:	6060      	str	r0, [r4, #4]

  int keyLength = strlen(key);
   d5586:	4630      	mov	r0, r6
   d5588:	f011 fb6f 	bl	e6c6a <strlen>
   d558c:	4680      	mov	r8, r0

  int decodedKeyLength = base64_dec_len(key, keyLength);
   d558e:	4601      	mov	r1, r0
   d5590:	4630      	mov	r0, r6
   d5592:	f00e f95d 	bl	e3850 <_Z14base64_dec_lenPci>
  memset(buff, 0, decodedKeyLength + 1); // initialised extra byte to allow for null termination
   d5596:	f504 75a4 	add.w	r5, r4, #328	; 0x148
{
  sas.expiryTime = Time.now() + sas.expiryPeriodInSeconds;

  int keyLength = strlen(key);

  int decodedKeyLength = base64_dec_len(key, keyLength);
   d559a:	4607      	mov	r7, r0
  memset(buff, 0, decodedKeyLength + 1); // initialised extra byte to allow for null termination
   d559c:	1c42      	adds	r2, r0, #1
   d559e:	2100      	movs	r1, #0
   d55a0:	4628      	mov	r0, r5
   d55a2:	f011 faf6 	bl	e6b92 <memset>

  base64_decode(buff, key, keyLength); //decode key
   d55a6:	4631      	mov	r1, r6
  Sha256.initHmac((const uint8_t *)buff, decodedKeyLength);
   d55a8:	4e24      	ldr	r6, [pc, #144]	; (d563c <_ZN8SasToken14createSasTokenEPc+0xc8>)
  int keyLength = strlen(key);

  int decodedKeyLength = base64_dec_len(key, keyLength);
  memset(buff, 0, decodedKeyLength + 1); // initialised extra byte to allow for null termination

  base64_decode(buff, key, keyLength); //decode key
   d55aa:	4642      	mov	r2, r8
   d55ac:	4628      	mov	r0, r5
   d55ae:	f00e fa00 	bl	e39b2 <_Z13base64_decodePcS_i>
  Sha256.initHmac((const uint8_t *)buff, decodedKeyLength);
   d55b2:	463a      	mov	r2, r7
   d55b4:	4629      	mov	r1, r5
   d55b6:	4630      	mov	r0, r6
   d55b8:	f000 f997 	bl	d58ea <_ZN11Sha256Class8initHmacEPKhi>

  int len = snprintf(buff, sizeof(buff), "%s/devices/%s\n%d", this->device.host, this->device.deviceId, sas.expiryTime);
   d55bc:	6863      	ldr	r3, [r4, #4]
   d55be:	9301      	str	r3, [sp, #4]
   d55c0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   d55c4:	4a1e      	ldr	r2, [pc, #120]	; (d5640 <_ZN8SasToken14createSasTokenEPc+0xcc>)
   d55c6:	9300      	str	r3, [sp, #0]
   d55c8:	2196      	movs	r1, #150	; 0x96
   d55ca:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   d55ce:	4628      	mov	r0, r5
   d55d0:	f00e fd0a 	bl	e3fe8 <snprintf>
  Sha256.print(buff);
   d55d4:	4629      	mov	r1, r5
   d55d6:	4630      	mov	r0, r6
   d55d8:	f00f fb06 	bl	e4be8 <_ZN5Print5printEPKc>

  char *sign = (char *)Sha256.resultHmac();
   d55dc:	4630      	mov	r0, r6
   d55de:	f000 f9c1 	bl	d5964 <_ZN11Sha256Class10resultHmacEv>
   d55e2:	4606      	mov	r6, r0

  int encodedSignLen = base64_enc_len(HASH_LENGTH); // START: Get base64 of signature
   d55e4:	2020      	movs	r0, #32
   d55e6:	f00e f929 	bl	e383c <_Z14base64_enc_leni>
  memset(buff, 0, encodedSignLen + 1);              // initialised extra byte to allow for null termination
   d55ea:	2100      	movs	r1, #0
   d55ec:	1c42      	adds	r2, r0, #1
   d55ee:	4628      	mov	r0, r5
   d55f0:	f011 facf 	bl	e6b92 <memset>

  base64_encode(buff, sign, HASH_LENGTH);
   d55f4:	4631      	mov	r1, r6
   d55f6:	2220      	movs	r2, #32
   d55f8:	4628      	mov	r0, r5
   d55fa:	f00e f951 	bl	e38a0 <_Z13base64_encodePcS_i>

  char *sasPointer = sas.token;
   d55fe:	f104 0708 	add.w	r7, r4, #8
  sasPointer += snprintf(sasPointer, sizeof(sas.token), "SharedAccessSignature sr=%s/devices/%s&sig=", this->device.host, this->device.deviceId);
   d5602:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   d5606:	9300      	str	r3, [sp, #0]
   d5608:	4a0e      	ldr	r2, [pc, #56]	; (d5644 <_ZN8SasToken14createSasTokenEPc+0xd0>)
   d560a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   d560e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5612:	4638      	mov	r0, r7
   d5614:	f00e fce8 	bl	e3fe8 <snprintf>
   d5618:	183e      	adds	r6, r7, r0
  sasPointer += urlEncode(sasPointer, buff);
   d561a:	462a      	mov	r2, r5
   d561c:	4631      	mov	r1, r6
   d561e:	4620      	mov	r0, r4
   d5620:	f7ff ff82 	bl	d5528 <_ZN8SasToken9urlEncodeEPcS0_>
   d5624:	4430      	add	r0, r6
  snprintf(sasPointer, sizeof(sas.token) - (sasPointer - sas.token), "&se=%d", sas.expiryTime);
   d5626:	1bc1      	subs	r1, r0, r7
   d5628:	6863      	ldr	r3, [r4, #4]
   d562a:	4a07      	ldr	r2, [pc, #28]	; (d5648 <_ZN8SasToken14createSasTokenEPc+0xd4>)
   d562c:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
}
   d5630:	b002      	add	sp, #8
   d5632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  base64_encode(buff, sign, HASH_LENGTH);

  char *sasPointer = sas.token;
  sasPointer += snprintf(sasPointer, sizeof(sas.token), "SharedAccessSignature sr=%s/devices/%s&sig=", this->device.host, this->device.deviceId);
  sasPointer += urlEncode(sasPointer, buff);
  snprintf(sasPointer, sizeof(sas.token) - (sasPointer - sas.token), "&se=%d", sas.expiryTime);
   d5636:	f00e bcd7 	b.w	e3fe8 <snprintf>
   d563a:	bf00      	nop
   d563c:	2003c1bc 	.word	0x2003c1bc
   d5640:	000e756b 	.word	0x000e756b
   d5644:	000e757c 	.word	0x000e757c
   d5648:	000e75a8 	.word	0x000e75a8

000d564c <_ZN8SasToken8syncTimeEv>:
}

void SasToken::syncTime()
{
   d564c:	b510      	push	{r4, lr}
   d564e:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5650:	f00e fa46 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTimeSync > ONE_DAY_MILLIS)
   d5654:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   d5658:	1ac0      	subs	r0, r0, r3
   d565a:	4b09      	ldr	r3, [pc, #36]	; (d5680 <_ZN8SasToken8syncTimeEv+0x34>)
   d565c:	4298      	cmp	r0, r3
   d565e:	d90e      	bls.n	d567e <_ZN8SasToken8syncTimeEv+0x32>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d5660:	2000      	movs	r0, #0
   d5662:	f00e fc39 	bl	e3ed8 <spark_sync_time>
  {
    Particle.syncTime();
    waitUntil(Particle.syncTimeDone);
   d5666:	f7ff ff51 	bl	d550c <_ZN10CloudClass12syncTimeDoneEv.isra.2>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d566a:	b910      	cbnz	r0, d5672 <_ZN8SasToken8syncTimeEv+0x26>
            spark_process();
   d566c:	f00e fc1c 	bl	e3ea8 <spark_process>
   d5670:	e7f9      	b.n	d5666 <_ZN8SasToken8syncTimeEv+0x1a>
   d5672:	f7ff ff4b 	bl	d550c <_ZN10CloudClass12syncTimeDoneEv.isra.2>
   d5676:	f00e fa33 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
    lastTimeSync = millis();
   d567a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
   d567e:	bd10      	pop	{r4, pc}
   d5680:	05265c00 	.word	0x05265c00

000d5684 <_ZN8SasToken16generateSasTokenEv>:
  }
}

// returns false if no new sas token generated
bool SasToken::generateSasToken()
{
   d5684:	b510      	push	{r4, lr}
   d5686:	4604      	mov	r4, r0
  if (Time.now() < sas.expiryTime)
   d5688:	f00f ffa3 	bl	e55d2 <_ZN9TimeClass3nowEv>
   d568c:	6863      	ldr	r3, [r4, #4]
   d568e:	4298      	cmp	r0, r3
   d5690:	db09      	blt.n	d56a6 <_ZN8SasToken16generateSasTokenEv+0x22>
  {
    return false;
  }
  syncTime();
   d5692:	4620      	mov	r0, r4
   d5694:	f7ff ffda 	bl	d564c <_ZN8SasToken8syncTimeEv>
  createSasToken(device.deviceKey);
   d5698:	4620      	mov	r0, r4
   d569a:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   d569e:	f7ff ff69 	bl	d5574 <_ZN8SasToken14createSasTokenEPc>
  return true;
   d56a2:	2001      	movs	r0, #1
   d56a4:	bd10      	pop	{r4, pc}
// returns false if no new sas token generated
bool SasToken::generateSasToken()
{
  if (Time.now() < sas.expiryTime)
  {
    return false;
   d56a6:	2000      	movs	r0, #0
  }
  syncTime();
  createSasToken(device.deviceKey);
  return true;
}
   d56a8:	bd10      	pop	{r4, pc}

000d56aa <_GLOBAL__sub_I__ZN8SasToken9urlEncodeEPcS0_>:
   d56aa:	f00e ba39 	b.w	e3b20 <HAL_Pin_Map>

000d56ae <_ZN11Sha256ClassD1Ev>:
union _state {
    uint8_t b[HASH_LENGTH];
    uint32_t w[HASH_LENGTH / 4];
};

class Sha256Class : public Print
   d56ae:	4770      	bx	lr

000d56b0 <_ZN11Sha256ClassD0Ev>:
   d56b0:	b510      	push	{r4, lr}
   d56b2:	21d0      	movs	r1, #208	; 0xd0
   d56b4:	4604      	mov	r4, r0
   d56b6:	f010 fa62 	bl	e5b7e <_ZdlPvj>
   d56ba:	4620      	mov	r0, r4
   d56bc:	bd10      	pop	{r4, pc}
	...

000d56c0 <_ZN11Sha256Class4initEv>:
    0xab, 0xd9, 0x83, 0x1f, // H6
    0x19, 0xcd, 0xe0, 0x5b  // H7
};

void Sha256Class::init(void)
{
   d56c0:	b510      	push	{r4, lr}
  memcpy_P(state.b, sha256InitState, 32);
   d56c2:	4b08      	ldr	r3, [pc, #32]	; (d56e4 <_ZN11Sha256Class4initEv+0x24>)
   d56c4:	f100 024c 	add.w	r2, r0, #76	; 0x4c
   d56c8:	f103 0120 	add.w	r1, r3, #32
   d56cc:	f853 4b04 	ldr.w	r4, [r3], #4
   d56d0:	f842 4b04 	str.w	r4, [r2], #4
   d56d4:	428b      	cmp	r3, r1
   d56d6:	d1f9      	bne.n	d56cc <_ZN11Sha256Class4initEv+0xc>
  byteCount = 0;
   d56d8:	2300      	movs	r3, #0
   d56da:	66c3      	str	r3, [r0, #108]	; 0x6c
  bufferOffset = 0;
   d56dc:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
   d56e0:	bd10      	pop	{r4, pc}
   d56e2:	bf00      	nop
   d56e4:	2003be78 	.word	0x2003be78

000d56e8 <_ZN11Sha256Class9hashBlockEv>:
{
  return ((number << (32 - bits)) | (number >> bits));
}

void Sha256Class::hashBlock()
{
   d56e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56ec:	b089      	sub	sp, #36	; 0x24
  uint8_t i;
  uint32_t a, b, c, d, e, f, g, h, t1, t2;

  a = state.w[0];
   d56ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   d56f0:	9300      	str	r3, [sp, #0]
  b = state.w[1];
   d56f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   d56f4:	9301      	str	r3, [sp, #4]
  c = state.w[2];
   d56f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d56f8:	9302      	str	r3, [sp, #8]
  d = state.w[3];
   d56fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
   d56fc:	9303      	str	r3, [sp, #12]
  e = state.w[4];
   d56fe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   d5700:	9304      	str	r3, [sp, #16]
  f = state.w[5];
   d5702:	6e03      	ldr	r3, [r0, #96]	; 0x60
   d5704:	9305      	str	r3, [sp, #20]
  g = state.w[6];
   d5706:	6e43      	ldr	r3, [r0, #100]	; 0x64
   d5708:	9306      	str	r3, [sp, #24]
  h = state.w[7];
   d570a:	6e83      	ldr	r3, [r0, #104]	; 0x68
  b = state.w[1];
  c = state.w[2];
  d = state.w[3];
  e = state.w[4];
  f = state.w[5];
  g = state.w[6];
   d570c:	9c06      	ldr	r4, [sp, #24]
  a = state.w[0];
  b = state.w[1];
  c = state.w[2];
  d = state.w[3];
  e = state.w[4];
  f = state.w[5];
   d570e:	f8dd c014 	ldr.w	ip, [sp, #20]

  a = state.w[0];
  b = state.w[1];
  c = state.w[2];
  d = state.w[3];
  e = state.w[4];
   d5712:	9d04      	ldr	r5, [sp, #16]
  uint32_t a, b, c, d, e, f, g, h, t1, t2;

  a = state.w[0];
  b = state.w[1];
  c = state.w[2];
  d = state.w[3];
   d5714:	9e03      	ldr	r6, [sp, #12]
  uint8_t i;
  uint32_t a, b, c, d, e, f, g, h, t1, t2;

  a = state.w[0];
  b = state.w[1];
  c = state.w[2];
   d5716:	f8dd 8008 	ldr.w	r8, [sp, #8]
{
  uint8_t i;
  uint32_t a, b, c, d, e, f, g, h, t1, t2;

  a = state.w[0];
  b = state.w[1];
   d571a:	f8dd 9004 	ldr.w	r9, [sp, #4]
void Sha256Class::hashBlock()
{
  uint8_t i;
  uint32_t a, b, c, d, e, f, g, h, t1, t2;

  a = state.w[0];
   d571e:	f8dd e000 	ldr.w	lr, [sp]
  c = state.w[2];
  d = state.w[3];
  e = state.w[4];
  f = state.w[5];
  g = state.w[6];
  h = state.w[7];
   d5722:	9307      	str	r3, [sp, #28]
   d5724:	469a      	mov	sl, r3
   d5726:	2100      	movs	r1, #0
   d5728:	ea4f 17b5 	mov.w	r7, r5, ror #6
   d572c:	ea84 020c 	eor.w	r2, r4, ip
   d5730:	ea87 27f5 	eor.w	r7, r7, r5, ror #11
   d5734:	402a      	ands	r2, r5
   d5736:	ea87 6775 	eor.w	r7, r7, r5, ror #25
   d573a:	4062      	eors	r2, r4
   d573c:	443a      	add	r2, r7
   d573e:	4f39      	ldr	r7, [pc, #228]	; (d5824 <_ZN11Sha256Class9hashBlockEv+0x13c>)
   d5740:	f857 7021 	ldr.w	r7, [r7, r1, lsl #2]
   d5744:	b2cb      	uxtb	r3, r1
   d5746:	4417      	add	r7, r2
    }
    t1 = h;
    t1 += ror32(e, 6) ^ ror32(e, 11) ^ ror32(e, 25); // ∑1(e)
    t1 += g ^ (e & (g ^ f));                         // Ch(e,f,g)
    t1 += pgm_read_dword(sha256K + i);               // Ki
    t1 += buffer.w[i & 15];                          // Wi
   d5748:	f003 020f 	and.w	r2, r3, #15
   d574c:	3202      	adds	r2, #2
    t2 = ror32(a, 2) ^ ror32(a, 13) ^ ror32(a, 22);  // ∑0(a)
   d574e:	ea4f 0bbe 	mov.w	fp, lr, ror #2
   d5752:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   d5756:	4417      	add	r7, r2
    t2 += ((b & c) | (a & (b | c)));                 // Maj(a,b,c)
   d5758:	ea48 0209 	orr.w	r2, r8, r9
    }
    t1 = h;
    t1 += ror32(e, 6) ^ ror32(e, 11) ^ ror32(e, 25); // ∑1(e)
    t1 += g ^ (e & (g ^ f));                         // Ch(e,f,g)
    t1 += pgm_read_dword(sha256K + i);               // Ki
    t1 += buffer.w[i & 15];                          // Wi
   d575c:	4457      	add	r7, sl
    t2 = ror32(a, 2) ^ ror32(a, 13) ^ ror32(a, 22);  // ∑0(a)
   d575e:	ea8b 3b7e 	eor.w	fp, fp, lr, ror #13
    t2 += ((b & c) | (a & (b | c)));                 // Maj(a,b,c)
   d5762:	ea02 020e 	and.w	r2, r2, lr
   d5766:	ea08 0a09 	and.w	sl, r8, r9
    t1 = h;
    t1 += ror32(e, 6) ^ ror32(e, 11) ^ ror32(e, 25); // ∑1(e)
    t1 += g ^ (e & (g ^ f));                         // Ch(e,f,g)
    t1 += pgm_read_dword(sha256K + i);               // Ki
    t1 += buffer.w[i & 15];                          // Wi
    t2 = ror32(a, 2) ^ ror32(a, 13) ^ ror32(a, 22);  // ∑0(a)
   d576a:	ea8b 5bbe 	eor.w	fp, fp, lr, ror #22
    t2 += ((b & c) | (a & (b | c)));                 // Maj(a,b,c)
   d576e:	ea42 020a 	orr.w	r2, r2, sl
   d5772:	445a      	add	r2, fp
   d5774:	3301      	adds	r3, #1
  e = state.w[4];
  f = state.w[5];
  g = state.w[6];
  h = state.w[7];

  for (i = 0; i < 64; i++)
   d5776:	293f      	cmp	r1, #63	; 0x3f
    t2 = ror32(a, 2) ^ ror32(a, 13) ^ ror32(a, 22);  // ∑0(a)
    t2 += ((b & c) | (a & (b | c)));                 // Maj(a,b,c)
    h = g;
    g = f;
    f = e;
    e = d + t1;
   d5778:	443e      	add	r6, r7
    d = c;
    c = b;
    b = a;
    a = t1 + t2;
   d577a:	443a      	add	r2, r7
   d577c:	b2db      	uxtb	r3, r3
  e = state.w[4];
  f = state.w[5];
  g = state.w[6];
  h = state.w[7];

  for (i = 0; i < 64; i++)
   d577e:	d035      	beq.n	d57ec <_ZN11Sha256Class9hashBlockEv+0x104>
  {
    if (i >= 16)
   d5780:	2b0f      	cmp	r3, #15
   d5782:	d929      	bls.n	d57d8 <_ZN11Sha256Class9hashBlockEv+0xf0>
    {
      t1 = buffer.w[i & 15] + buffer.w[(i - 7) & 15];
   d5784:	1f8f      	subs	r7, r1, #6
   d5786:	f003 030f 	and.w	r3, r3, #15
   d578a:	f007 070f 	and.w	r7, r7, #15
   d578e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   d5792:	3702      	adds	r7, #2
   d5794:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
   d5798:	689f      	ldr	r7, [r3, #8]
   d579a:	eb0a 0b07 	add.w	fp, sl, r7
      t2 = buffer.w[(i - 2) & 15];
   d579e:	1e4f      	subs	r7, r1, #1
   d57a0:	f007 070f 	and.w	r7, r7, #15
   d57a4:	3702      	adds	r7, #2
   d57a6:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
      t1 += ror32(t2, 17) ^ ror32(t2, 19) ^ (t2 >> 10);
   d57aa:	ea4f 4af7 	mov.w	sl, r7, ror #19
   d57ae:	ea8a 4a77 	eor.w	sl, sl, r7, ror #17
   d57b2:	ea8a 2797 	eor.w	r7, sl, r7, lsr #10
      t2 = buffer.w[(i - 15) & 15];
   d57b6:	f1a1 0a0e 	sub.w	sl, r1, #14
   d57ba:	f00a 0a0f 	and.w	sl, sl, #15
   d57be:	f10a 0a02 	add.w	sl, sl, #2
  {
    if (i >= 16)
    {
      t1 = buffer.w[i & 15] + buffer.w[(i - 7) & 15];
      t2 = buffer.w[(i - 2) & 15];
      t1 += ror32(t2, 17) ^ ror32(t2, 19) ^ (t2 >> 10);
   d57c2:	445f      	add	r7, fp
      t2 = buffer.w[(i - 15) & 15];
   d57c4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
      t1 += ror32(t2, 7) ^ ror32(t2, 18) ^ (t2 >> 3);
      buffer.w[i & 15] = t1;
   d57c8:	ea4f 4abb 	mov.w	sl, fp, ror #18
   d57cc:	ea8a 1afb 	eor.w	sl, sl, fp, ror #7
   d57d0:	ea8a 0adb 	eor.w	sl, sl, fp, lsr #3
   d57d4:	4457      	add	r7, sl
   d57d6:	609f      	str	r7, [r3, #8]
    t2 = ror32(a, 2) ^ ror32(a, 13) ^ ror32(a, 22);  // ∑0(a)
    t2 += ((b & c) | (a & (b | c)));                 // Maj(a,b,c)
    h = g;
    g = f;
    f = e;
    e = d + t1;
   d57d8:	46a2      	mov	sl, r4
   d57da:	3101      	adds	r1, #1
   d57dc:	4664      	mov	r4, ip
   d57de:	46ac      	mov	ip, r5
   d57e0:	4635      	mov	r5, r6
   d57e2:	4646      	mov	r6, r8
   d57e4:	46c8      	mov	r8, r9
   d57e6:	46f1      	mov	r9, lr
    d = c;
    c = b;
    b = a;
    a = t1 + t2;
   d57e8:	4696      	mov	lr, r2
   d57ea:	e79d      	b.n	d5728 <_ZN11Sha256Class9hashBlockEv+0x40>
  }
  state.w[0] += a;
   d57ec:	9b00      	ldr	r3, [sp, #0]
   d57ee:	4413      	add	r3, r2
   d57f0:	64c3      	str	r3, [r0, #76]	; 0x4c
  state.w[1] += b;
   d57f2:	9b01      	ldr	r3, [sp, #4]
   d57f4:	4473      	add	r3, lr
   d57f6:	6503      	str	r3, [r0, #80]	; 0x50
  state.w[2] += c;
   d57f8:	9b02      	ldr	r3, [sp, #8]
   d57fa:	444b      	add	r3, r9
   d57fc:	6543      	str	r3, [r0, #84]	; 0x54
  state.w[3] += d;
   d57fe:	9b03      	ldr	r3, [sp, #12]
   d5800:	4443      	add	r3, r8
   d5802:	6583      	str	r3, [r0, #88]	; 0x58
  state.w[4] += e;
   d5804:	9b04      	ldr	r3, [sp, #16]
   d5806:	4433      	add	r3, r6
   d5808:	65c3      	str	r3, [r0, #92]	; 0x5c
  state.w[5] += f;
   d580a:	9b05      	ldr	r3, [sp, #20]
   d580c:	441d      	add	r5, r3
  state.w[6] += g;
   d580e:	9b06      	ldr	r3, [sp, #24]
  state.w[0] += a;
  state.w[1] += b;
  state.w[2] += c;
  state.w[3] += d;
  state.w[4] += e;
  state.w[5] += f;
   d5810:	6605      	str	r5, [r0, #96]	; 0x60
  state.w[6] += g;
   d5812:	4463      	add	r3, ip
   d5814:	6643      	str	r3, [r0, #100]	; 0x64
  state.w[7] += h;
   d5816:	9b07      	ldr	r3, [sp, #28]
   d5818:	4423      	add	r3, r4
   d581a:	6683      	str	r3, [r0, #104]	; 0x68
}
   d581c:	b009      	add	sp, #36	; 0x24
   d581e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5822:	bf00      	nop
   d5824:	2003bd78 	.word	0x2003bd78

000d5828 <_ZN11Sha256Class12addUncountedEh>:

void Sha256Class::addUncounted(uint8_t data)
{
  buffer.b[bufferOffset ^ 3] = data;
   d5828:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   d582c:	f083 0203 	eor.w	r2, r3, #3
  bufferOffset++;
   d5830:	3301      	adds	r3, #1
   d5832:	b2db      	uxtb	r3, r3
  state.w[7] += h;
}

void Sha256Class::addUncounted(uint8_t data)
{
  buffer.b[bufferOffset ^ 3] = data;
   d5834:	4402      	add	r2, r0
  bufferOffset++;
  if (bufferOffset == BUFFER_SIZE)
   d5836:	2b40      	cmp	r3, #64	; 0x40
  state.w[6] += g;
  state.w[7] += h;
}

void Sha256Class::addUncounted(uint8_t data)
{
   d5838:	b510      	push	{r4, lr}
  buffer.b[bufferOffset ^ 3] = data;
   d583a:	7211      	strb	r1, [r2, #8]
  bufferOffset++;
   d583c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (bufferOffset == BUFFER_SIZE)
   d5840:	d104      	bne.n	d584c <_ZN11Sha256Class12addUncountedEh+0x24>
  {
    hashBlock();
   d5842:	f7ff ff51 	bl	d56e8 <_ZN11Sha256Class9hashBlockEv>
    bufferOffset = 0;
   d5846:	2300      	movs	r3, #0
   d5848:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
   d584c:	bd10      	pop	{r4, pc}

000d584e <_ZN11Sha256Class5writeEh>:
  }
}

size_t Sha256Class::write(uint8_t data)
{
   d584e:	b508      	push	{r3, lr}
  ++byteCount;
   d5850:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   d5852:	3301      	adds	r3, #1
   d5854:	66c3      	str	r3, [r0, #108]	; 0x6c
  addUncounted(data);
   d5856:	f7ff ffe7 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
}
   d585a:	bd08      	pop	{r3, pc}

000d585c <_ZN11Sha256Class3padEv>:

void Sha256Class::pad()
{
   d585c:	b510      	push	{r4, lr}
  // Implement SHA-256 padding (fips180-2 §5.1.1)

  // Pad with 0x80 followed by 0x00 until the end of the block
  addUncounted(0x80);
   d585e:	2180      	movs	r1, #128	; 0x80
  ++byteCount;
  addUncounted(data);
}

void Sha256Class::pad()
{
   d5860:	4604      	mov	r4, r0
  // Implement SHA-256 padding (fips180-2 §5.1.1)

  // Pad with 0x80 followed by 0x00 until the end of the block
  addUncounted(0x80);
   d5862:	f7ff ffe1 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
  while (bufferOffset != 56)
   d5866:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d586a:	2b38      	cmp	r3, #56	; 0x38
    addUncounted(0x00);

  // Append length in the last 8 bytes
  addUncounted(0);               // We're only using 32 bit lengths
   d586c:	f04f 0100 	mov.w	r1, #0
   d5870:	4620      	mov	r0, r4
{
  // Implement SHA-256 padding (fips180-2 §5.1.1)

  // Pad with 0x80 followed by 0x00 until the end of the block
  addUncounted(0x80);
  while (bufferOffset != 56)
   d5872:	d1f6      	bne.n	d5862 <_ZN11Sha256Class3padEv+0x6>
    addUncounted(0x00);

  // Append length in the last 8 bytes
  addUncounted(0);               // We're only using 32 bit lengths
   d5874:	f7ff ffd8 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
  addUncounted(0);               // But SHA-1 supports 64 bit lengths
   d5878:	4620      	mov	r0, r4
   d587a:	2100      	movs	r1, #0
   d587c:	f7ff ffd4 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
  addUncounted(0);               // So zero pad the top bits
   d5880:	4620      	mov	r0, r4
   d5882:	2100      	movs	r1, #0
   d5884:	f7ff ffd0 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
  addUncounted(byteCount >> 29); // Shifting to multiply by 8
   d5888:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   d588a:	4620      	mov	r0, r4
   d588c:	0f49      	lsrs	r1, r1, #29
   d588e:	f7ff ffcb 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
  addUncounted(byteCount >> 21); // as SHA-1 supports bitstreams as well as
   d5892:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   d5894:	4620      	mov	r0, r4
   d5896:	f3c1 5147 	ubfx	r1, r1, #21, #8
   d589a:	f7ff ffc5 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
  addUncounted(byteCount >> 13); // byte.
   d589e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   d58a0:	4620      	mov	r0, r4
   d58a2:	f3c1 3147 	ubfx	r1, r1, #13, #8
   d58a6:	f7ff ffbf 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
  addUncounted(byteCount >> 5);
   d58aa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   d58ac:	4620      	mov	r0, r4
   d58ae:	f3c1 1147 	ubfx	r1, r1, #5, #8
   d58b2:	f7ff ffb9 	bl	d5828 <_ZN11Sha256Class12addUncountedEh>
  addUncounted(byteCount << 3);
   d58b6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   d58b8:	00c9      	lsls	r1, r1, #3
   d58ba:	4620      	mov	r0, r4
   d58bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
}
   d58c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  addUncounted(0);               // So zero pad the top bits
  addUncounted(byteCount >> 29); // Shifting to multiply by 8
  addUncounted(byteCount >> 21); // as SHA-1 supports bitstreams as well as
  addUncounted(byteCount >> 13); // byte.
  addUncounted(byteCount >> 5);
  addUncounted(byteCount << 3);
   d58c4:	f7ff bfb0 	b.w	d5828 <_ZN11Sha256Class12addUncountedEh>

000d58c8 <_ZN11Sha256Class6resultEv>:
}

uint8_t *Sha256Class::result(void)
{
   d58c8:	b510      	push	{r4, lr}
   d58ca:	4604      	mov	r4, r0
  // Pad to complete the last block
  pad();
   d58cc:	f7ff ffc6 	bl	d585c <_ZN11Sha256Class3padEv>
   d58d0:	f104 0348 	add.w	r3, r4, #72	; 0x48
   d58d4:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d58d8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   d58dc:	ba12      	rev	r2, r2

  // Swap byte order back
  for (int i = 0; i < 8; i++)
   d58de:	428b      	cmp	r3, r1
    a = state.w[i];
    b = a << 24;
    b |= (a << 8) & 0x00ff0000;
    b |= (a >> 8) & 0x0000ff00;
    b |= a >> 24;
    state.w[i] = b;
   d58e0:	601a      	str	r2, [r3, #0]
{
  // Pad to complete the last block
  pad();

  // Swap byte order back
  for (int i = 0; i < 8; i++)
   d58e2:	d1f9      	bne.n	d58d8 <_ZN11Sha256Class6resultEv+0x10>
    state.w[i] = b;
  }

  // Return pointer to hash (20 characters)
  return state.b;
}
   d58e4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d58e8:	bd10      	pop	{r4, pc}

000d58ea <_ZN11Sha256Class8initHmacEPKhi>:

uint8_t keyBuffer[BLOCK_LENGTH]; // K0 in FIPS-198a
uint8_t innerHash[HASH_LENGTH];

void Sha256Class::initHmac(const uint8_t *key, int keyLength)
{
   d58ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  memset(keyBuffer, 0, BLOCK_LENGTH);
   d58ec:	f100 0570 	add.w	r5, r0, #112	; 0x70

uint8_t keyBuffer[BLOCK_LENGTH]; // K0 in FIPS-198a
uint8_t innerHash[HASH_LENGTH];

void Sha256Class::initHmac(const uint8_t *key, int keyLength)
{
   d58f0:	4617      	mov	r7, r2
   d58f2:	4604      	mov	r4, r0
   d58f4:	460e      	mov	r6, r1
  uint8_t i;

  memset(keyBuffer, 0, BLOCK_LENGTH);
   d58f6:	2240      	movs	r2, #64	; 0x40
   d58f8:	2100      	movs	r1, #0
   d58fa:	4628      	mov	r0, r5
   d58fc:	f011 f949 	bl	e6b92 <memset>

  if (keyLength > BLOCK_LENGTH)
   d5900:	2f40      	cmp	r7, #64	; 0x40
   d5902:	dd18      	ble.n	d5936 <_ZN11Sha256Class8initHmacEPKhi+0x4c>
  {
    // Hash long keys
    init();
   d5904:	4620      	mov	r0, r4
   d5906:	f7ff fedb 	bl	d56c0 <_ZN11Sha256Class4initEv>
   d590a:	4437      	add	r7, r6
    for (; keyLength--;)
   d590c:	42be      	cmp	r6, r7
   d590e:	d006      	beq.n	d591e <_ZN11Sha256Class8initHmacEPKhi+0x34>
      write(*key++);
   d5910:	6823      	ldr	r3, [r4, #0]
   d5912:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5916:	689b      	ldr	r3, [r3, #8]
   d5918:	4620      	mov	r0, r4
   d591a:	4798      	blx	r3

  if (keyLength > BLOCK_LENGTH)
  {
    // Hash long keys
    init();
    for (; keyLength--;)
   d591c:	e7f6      	b.n	d590c <_ZN11Sha256Class8initHmacEPKhi+0x22>
      write(*key++);
    memcpy(keyBuffer, result(), HASH_LENGTH);
   d591e:	4620      	mov	r0, r4
   d5920:	f7ff ffd2 	bl	d58c8 <_ZN11Sha256Class6resultEv>
   d5924:	f100 0320 	add.w	r3, r0, #32
   d5928:	f850 2b04 	ldr.w	r2, [r0], #4
   d592c:	f845 2b04 	str.w	r2, [r5], #4
   d5930:	4298      	cmp	r0, r3
   d5932:	d1f9      	bne.n	d5928 <_ZN11Sha256Class8initHmacEPKhi+0x3e>
   d5934:	e004      	b.n	d5940 <_ZN11Sha256Class8initHmacEPKhi+0x56>
  }
  else
  {
    // Block length keys are used as is
    memcpy(keyBuffer, key, keyLength);
   d5936:	463a      	mov	r2, r7
   d5938:	4631      	mov	r1, r6
   d593a:	4628      	mov	r0, r5
   d593c:	f011 f903 	bl	e6b46 <memcpy>
  }

  // Start inner hash
  init();
   d5940:	4620      	mov	r0, r4
   d5942:	f7ff febd 	bl	d56c0 <_ZN11Sha256Class4initEv>
   d5946:	f104 056f 	add.w	r5, r4, #111	; 0x6f
   d594a:	f104 06af 	add.w	r6, r4, #175	; 0xaf
  for (i = 0; i < BLOCK_LENGTH; i++)
  {
    write(keyBuffer[i] ^ HMAC_IPAD);
   d594e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d5952:	6823      	ldr	r3, [r4, #0]
   d5954:	f081 0136 	eor.w	r1, r1, #54	; 0x36
   d5958:	689b      	ldr	r3, [r3, #8]
   d595a:	4620      	mov	r0, r4
   d595c:	4798      	blx	r3
    memcpy(keyBuffer, key, keyLength);
  }

  // Start inner hash
  init();
  for (i = 0; i < BLOCK_LENGTH; i++)
   d595e:	42b5      	cmp	r5, r6
   d5960:	d1f5      	bne.n	d594e <_ZN11Sha256Class8initHmacEPKhi+0x64>
  {
    write(keyBuffer[i] ^ HMAC_IPAD);
  }
}
   d5962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5964 <_ZN11Sha256Class10resultHmacEv>:

uint8_t *Sha256Class::resultHmac(void)
{
   d5964:	b570      	push	{r4, r5, r6, lr}
   d5966:	4604      	mov	r4, r0
  uint8_t i;
  // Complete inner hash
  memcpy(innerHash, result(), HASH_LENGTH);
   d5968:	f7ff ffae 	bl	d58c8 <_ZN11Sha256Class6resultEv>
   d596c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   d5970:	f100 0220 	add.w	r2, r0, #32
   d5974:	f850 1b04 	ldr.w	r1, [r0], #4
   d5978:	f843 1b04 	str.w	r1, [r3], #4
   d597c:	4290      	cmp	r0, r2
   d597e:	d1f9      	bne.n	d5974 <_ZN11Sha256Class10resultHmacEv+0x10>
  // Calculate outer hash
  init();
   d5980:	4620      	mov	r0, r4
   d5982:	f7ff fe9d 	bl	d56c0 <_ZN11Sha256Class4initEv>
   d5986:	f104 066f 	add.w	r6, r4, #111	; 0x6f
   d598a:	f104 05af 	add.w	r5, r4, #175	; 0xaf
  for (i = 0; i < BLOCK_LENGTH; i++)
    write(keyBuffer[i] ^ HMAC_OPAD);
   d598e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   d5992:	6823      	ldr	r3, [r4, #0]
   d5994:	f081 015c 	eor.w	r1, r1, #92	; 0x5c
   d5998:	689b      	ldr	r3, [r3, #8]
   d599a:	4620      	mov	r0, r4
   d599c:	4798      	blx	r3
  uint8_t i;
  // Complete inner hash
  memcpy(innerHash, result(), HASH_LENGTH);
  // Calculate outer hash
  init();
  for (i = 0; i < BLOCK_LENGTH; i++)
   d599e:	42ae      	cmp	r6, r5
   d59a0:	d1f5      	bne.n	d598e <_ZN11Sha256Class10resultHmacEv+0x2a>
   d59a2:	f104 06cf 	add.w	r6, r4, #207	; 0xcf
    write(keyBuffer[i] ^ HMAC_OPAD);
  for (i = 0; i < HASH_LENGTH; i++)
    write(innerHash[i]);
   d59a6:	6823      	ldr	r3, [r4, #0]
   d59a8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d59ac:	689b      	ldr	r3, [r3, #8]
   d59ae:	4620      	mov	r0, r4
   d59b0:	4798      	blx	r3
  memcpy(innerHash, result(), HASH_LENGTH);
  // Calculate outer hash
  init();
  for (i = 0; i < BLOCK_LENGTH; i++)
    write(keyBuffer[i] ^ HMAC_OPAD);
  for (i = 0; i < HASH_LENGTH; i++)
   d59b2:	42b5      	cmp	r5, r6
   d59b4:	d1f7      	bne.n	d59a6 <_ZN11Sha256Class10resultHmacEv+0x42>
    write(innerHash[i]);
  return result();
   d59b6:	4620      	mov	r0, r4
}
   d59b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  init();
  for (i = 0; i < BLOCK_LENGTH; i++)
    write(keyBuffer[i] ^ HMAC_OPAD);
  for (i = 0; i < HASH_LENGTH; i++)
    write(innerHash[i]);
  return result();
   d59bc:	f7ff bf84 	b.w	d58c8 <_ZN11Sha256Class6resultEv>

000d59c0 <_GLOBAL__sub_I_sha256K>:
}
   d59c0:	b508      	push	{r3, lr}
   d59c2:	f00e f8ad 	bl	e3b20 <HAL_Pin_Map>
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d59c6:	4805      	ldr	r0, [pc, #20]	; (d59dc <_GLOBAL__sub_I_sha256K+0x1c>)
   d59c8:	4a05      	ldr	r2, [pc, #20]	; (d59e0 <_GLOBAL__sub_I_sha256K+0x20>)
   d59ca:	4906      	ldr	r1, [pc, #24]	; (d59e4 <_GLOBAL__sub_I_sha256K+0x24>)
   d59cc:	2300      	movs	r3, #0
   d59ce:	6043      	str	r3, [r0, #4]
   d59d0:	4b05      	ldr	r3, [pc, #20]	; (d59e8 <_GLOBAL__sub_I_sha256K+0x28>)
   d59d2:	6003      	str	r3, [r0, #0]
   d59d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d59d8:	f010 b8cc 	b.w	e5b74 <__aeabi_atexit>
   d59dc:	2003c1bc 	.word	0x2003c1bc
   d59e0:	2003bf30 	.word	0x2003bf30
   d59e4:	000d56af 	.word	0x000d56af
   d59e8:	000e75b8 	.word	0x000e75b8

000d59ec <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
   d59ec:	4770      	bx	lr
	...

000d59f0 <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d59f0:	b570      	push	{r4, r5, r6, lr}
   d59f2:	4605      	mov	r5, r0
   d59f4:	460c      	mov	r4, r1
   d59f6:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
   d59f8:	f00f fb19 	bl	e502e <_ZN9TCPClient9connectedEv>
   d59fc:	b158      	cbz	r0, d5a16 <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
   d59fe:	4621      	mov	r1, r4
   d5a00:	4632      	mov	r2, r6
   d5a02:	4628      	mov	r0, r5
   d5a04:	f00f fafd 	bl	e5002 <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
   d5a08:	4604      	mov	r4, r0
   d5a0a:	b138      	cbz	r0, d5a1c <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
   d5a0c:	4628      	mov	r0, r5
   d5a0e:	f00f fb0d 	bl	e502c <_ZN9TCPClient5flushEv>
  return ret;
   d5a12:	4620      	mov	r0, r4
   d5a14:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
   d5a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5a1a:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
   d5a1c:	4800      	ldr	r0, [pc, #0]	; (d5a20 <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
   d5a1e:	bd70      	pop	{r4, r5, r6, pc}
   d5a20:	ffff9780 	.word	0xffff9780

000d5a24 <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d5a24:	b570      	push	{r4, r5, r6, lr}
   d5a26:	4604      	mov	r4, r0
   d5a28:	460d      	mov	r5, r1
   d5a2a:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
   d5a2c:	f00f faff 	bl	e502e <_ZN9TCPClient9connectedEv>
   d5a30:	b158      	cbz	r0, d5a4a <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
   d5a32:	4620      	mov	r0, r4
   d5a34:	f00f fce6 	bl	e5404 <_ZN9TCPClient9availableEv>
   d5a38:	b128      	cbz	r0, d5a46 <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
   d5a3a:	4632      	mov	r2, r6
   d5a3c:	4629      	mov	r1, r5
   d5a3e:	4620      	mov	r0, r4
   d5a40:	f00f fc1b 	bl	e527a <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
   d5a44:	b918      	cbnz	r0, d5a4e <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
   d5a46:	4802      	ldr	r0, [pc, #8]	; (d5a50 <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
   d5a48:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
   d5a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
   d5a4e:	bd70      	pop	{r4, r5, r6, pc}
   d5a50:	ffff9700 	.word	0xffff9700

000d5a54 <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
   d5a54:	b570      	push	{r4, r5, r6, lr}
   d5a56:	460e      	mov	r6, r1
   d5a58:	4615      	mov	r5, r2
   d5a5a:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
   d5a5c:	1b2b      	subs	r3, r5, r4
   d5a5e:	4433      	add	r3, r6
   d5a60:	2b03      	cmp	r3, #3
   d5a62:	d904      	bls.n	d5a6e <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
   d5a64:	f00e f82c 	bl	e3ac0 <HAL_RNG_GetRandomNumber>
   d5a68:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
   d5a6c:	e7f6      	b.n	d5a5c <_ZN4MQTT7rng_TlsEPvPhj+0x8>
   d5a6e:	08ac      	lsrs	r4, r5, #2
   d5a70:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   d5a74:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
   d5a76:	42ac      	cmp	r4, r5
   d5a78:	d004      	beq.n	d5a84 <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
   d5a7a:	f00e f821 	bl	e3ac0 <HAL_RNG_GetRandomNumber>
   d5a7e:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
   d5a82:	e7f8      	b.n	d5a76 <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
   d5a84:	2000      	movs	r0, #0
   d5a86:	bd70      	pop	{r4, r5, r6, pc}

000d5a88 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
   d5a88:	b500      	push	{lr}
   d5a8a:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
   d5a8e:	460b      	mov	r3, r1
   d5a90:	4a05      	ldr	r2, [pc, #20]	; (d5aa8 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
   d5a92:	f240 31ff 	movw	r1, #1023	; 0x3ff
   d5a96:	4668      	mov	r0, sp
   d5a98:	f00c fb76 	bl	e2188 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
   d5a9c:	2000      	movs	r0, #0
   d5a9e:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   d5aa2:	f85d fb04 	ldr.w	pc, [sp], #4
   d5aa6:	bf00      	nop
   d5aa8:	000e7da0 	.word	0x000e7da0

000d5aac <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5aac:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5aae:	6984      	ldr	r4, [r0, #24]
   d5ab0:	4b0a      	ldr	r3, [pc, #40]	; (d5adc <_ZN9TCPClientD1Ev+0x30>)
   d5ab2:	6003      	str	r3, [r0, #0]
   d5ab4:	4605      	mov	r5, r0
   d5ab6:	b17c      	cbz	r4, d5ad8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5ab8:	6863      	ldr	r3, [r4, #4]
   d5aba:	3b01      	subs	r3, #1
   d5abc:	6063      	str	r3, [r4, #4]
   d5abe:	b95b      	cbnz	r3, d5ad8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5ac0:	6823      	ldr	r3, [r4, #0]
   d5ac2:	4620      	mov	r0, r4
   d5ac4:	689b      	ldr	r3, [r3, #8]
   d5ac6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5ac8:	68a3      	ldr	r3, [r4, #8]
   d5aca:	3b01      	subs	r3, #1
   d5acc:	60a3      	str	r3, [r4, #8]
   d5ace:	b91b      	cbnz	r3, d5ad8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5ad0:	6823      	ldr	r3, [r4, #0]
   d5ad2:	4620      	mov	r0, r4
   d5ad4:	68db      	ldr	r3, [r3, #12]
   d5ad6:	4798      	blx	r3
   d5ad8:	4628      	mov	r0, r5
   d5ada:	bd38      	pop	{r3, r4, r5, pc}
   d5adc:	000e98e8 	.word	0x000e98e8

000d5ae0 <_ZN9TCPClientD0Ev>:
   d5ae0:	b510      	push	{r4, lr}
   d5ae2:	4604      	mov	r4, r0
   d5ae4:	f7ff ffe2 	bl	d5aac <_ZN9TCPClientD1Ev>
   d5ae8:	4620      	mov	r0, r4
   d5aea:	211c      	movs	r1, #28
   d5aec:	f010 f847 	bl	e5b7e <_ZdlPvj>
   d5af0:	4620      	mov	r0, r4
   d5af2:	bd10      	pop	{r4, pc}

000d5af4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5af4:	b538      	push	{r3, r4, r5, lr}
   d5af6:	4604      	mov	r4, r0
   d5af8:	461d      	mov	r5, r3
    this->callback = callback;
   d5afa:	9b05      	ldr	r3, [sp, #20]
   d5afc:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
   d5afe:	2000      	movs	r0, #0
   d5b00:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
   d5b04:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
   d5b08:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
   d5b0a:	b102      	cbz	r2, d5b0e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
   d5b0c:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
   d5b0e:	b119      	cbz	r1, d5b18 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
   d5b10:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5b14:	f00f f9f0 	bl	e4ef8 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d5b18:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
   d5b1a:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
   d5b1c:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
   d5b1e:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d5b20:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
   d5b24:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d5b28:	b108      	cbz	r0, d5b2e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
   d5b2a:	f7fe faba 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d5b2e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d5b32:	f7fe fab2 	bl	d409a <_Znaj>
   d5b36:	61e0      	str	r0, [r4, #28]
   d5b38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b3c <_ZN4MQTTC1EPctPFvS0_PhjEi>:

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5b3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5b40:	4604      	mov	r4, r0
   d5b42:	2500      	movs	r5, #0
   d5b44:	4617      	mov	r7, r2
   d5b46:	4698      	mov	r8, r3
   d5b48:	460e      	mov	r6, r1
   d5b4a:	f00f fcf7 	bl	e553c <_ZN9TCPClientC1Ev>
   d5b4e:	61e5      	str	r5, [r4, #28]
   d5b50:	490c      	ldr	r1, [pc, #48]	; (d5b84 <_ZN4MQTTC1EPctPFvS0_PhjEi+0x48>)
   d5b52:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5b56:	f00f f9a2 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
   d5b5a:	2301      	movs	r3, #1
   d5b5c:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
   d5b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5b62:	9302      	str	r3, [sp, #8]
   d5b64:	230f      	movs	r3, #15
   d5b66:	9300      	str	r3, [sp, #0]
   d5b68:	4620      	mov	r0, r4

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5b6a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
   d5b6c:	f8cd 8004 	str.w	r8, [sp, #4]
   d5b70:	463b      	mov	r3, r7
   d5b72:	462a      	mov	r2, r5
   d5b74:	4631      	mov	r1, r6
   d5b76:	f7ff ffbd 	bl	d5af4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	b004      	add	sp, #16
   d5b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b82:	bf00      	nop
   d5b84:	000e7da0 	.word	0x000e7da0

000d5b88 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5b88:	3302      	adds	r3, #2
    }
    tcpClient.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5b8c:	b29b      	uxth	r3, r3
   d5b8e:	460d      	mov	r5, r1
   d5b90:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d5b92:	f815 6b01 	ldrb.w	r6, [r5], #1
   d5b96:	b2a4      	uxth	r4, r4
   d5b98:	b13e      	cbz	r6, d5baa <_ZN4MQTT11writeStringEPKcPht+0x22>
   d5b9a:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d5b9e:	429f      	cmp	r7, r3
   d5ba0:	d903      	bls.n	d5baa <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d5ba2:	1c5c      	adds	r4, r3, #1
   d5ba4:	54d6      	strb	r6, [r2, r3]
   d5ba6:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d5ba8:	e7f2      	b.n	d5b90 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5baa:	1b19      	subs	r1, r3, r4
   d5bac:	440a      	add	r2, r1
   d5bae:	1221      	asrs	r1, r4, #8
   d5bb0:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5bb4:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d5bb8:	4618      	mov	r0, r3
   d5bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5bbc <_ZN4MQTT8netWriteEPhi>:


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
   d5bbc:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
   d5bbe:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
   d5bc2:	b914      	cbnz	r4, d5bca <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
   d5bc4:	f00f fa1d 	bl	e5002 <_ZN9TCPClient5writeEPKhj>
   d5bc8:	e003      	b.n	d5bd2 <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
   d5bca:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
   d5bce:	f00b fbab 	bl	e1328 <mbedtls_ssl_write>
   d5bd2:	b280      	uxth	r0, r0
    }
}
   d5bd4:	bd10      	pop	{r4, pc}

000d5bd6 <_ZN4MQTT5writeEhPht>:
        return netWrite(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5bd8:	4607      	mov	r7, r0
   d5bda:	468e      	mov	lr, r1
   d5bdc:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d5bde:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d5be0:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5be2:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d5be4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5be8:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d5bea:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d5bec:	bf18      	it	ne
   d5bee:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d5bf2:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5bf4:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d5bf8:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d5bfa:	2d00      	cmp	r5, #0
   d5bfc:	d1f1      	bne.n	d5be2 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d5bfe:	f1c4 0304 	rsb	r3, r4, #4
   d5c02:	18d1      	adds	r1, r2, r3
   d5c04:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5c08:	42a5      	cmp	r5, r4
   d5c0a:	da06      	bge.n	d5c1a <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d5c0c:	1b2b      	subs	r3, r5, r4
   d5c0e:	a801      	add	r0, sp, #4
   d5c10:	4413      	add	r3, r2
   d5c12:	5c28      	ldrb	r0, [r5, r0]
   d5c14:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d5c16:	3501      	adds	r5, #1
   d5c18:	e7f6      	b.n	d5c08 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);
   d5c1a:	1c72      	adds	r2, r6, #1
   d5c1c:	4422      	add	r2, r4
   d5c1e:	4638      	mov	r0, r7
   d5c20:	f7ff ffcc 	bl	d5bbc <_ZN4MQTT8netWriteEPhi>
   d5c24:	4605      	mov	r5, r0
   d5c26:	f00d ff5b 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d5c2a:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d5c2c:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d5c2e:	19a0      	adds	r0, r4, r6
}
   d5c30:	1b43      	subs	r3, r0, r5
   d5c32:	4258      	negs	r0, r3
   d5c34:	4158      	adcs	r0, r3
   d5c36:	b003      	add	sp, #12
   d5c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c3a <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5c3a:	b538      	push	{r3, r4, r5, lr}
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
   d5c3c:	69c3      	ldr	r3, [r0, #28]
   d5c3e:	22e0      	movs	r2, #224	; 0xe0
   d5c40:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d5c42:	69c3      	ldr	r3, [r0, #28]
   d5c44:	2500      	movs	r5, #0
   d5c46:	705d      	strb	r5, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5c48:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    netWrite(buffer,2);
   d5c4a:	2202      	movs	r2, #2
   d5c4c:	69c1      	ldr	r1, [r0, #28]
   d5c4e:	f7ff ffb5 	bl	d5bbc <_ZN4MQTT8netWriteEPhi>

    if (tls) {
   d5c52:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
   d5c56:	b1bb      	cbz	r3, d5c88 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
   d5c58:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
   d5c5c:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
   d5c60:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
   d5c64:	f00d f9e5 	bl	e3032 <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
   d5c68:	f204 501c 	addw	r0, r4, #1308	; 0x51c
   d5c6c:	f00d f9e1 	bl	e3032 <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
   d5c70:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
   d5c74:	f004 f9b8 	bl	d9fe8 <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
   d5c78:	f504 7061 	add.w	r0, r4, #900	; 0x384
   d5c7c:	f00b fd44 	bl	e1708 <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
   d5c80:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
   d5c84:	f00b fcac 	bl	e15e0 <mbedtls_ssl_free>
    }
    tcpClient.stop();
   d5c88:	4620      	mov	r0, r4
   d5c8a:	f00f fba4 	bl	e53d6 <_ZN9TCPClient4stopEv>
   d5c8e:	f00d ff27 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d5c92:	6260      	str	r0, [r4, #36]	; 0x24
   d5c94:	62a0      	str	r0, [r4, #40]	; 0x28
   d5c96:	bd38      	pop	{r3, r4, r5, pc}

000d5c98 <_ZN4MQTT8readByteEv>:
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d5c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (tls == false) {
   d5c9a:	f890 3681 	ldrb.w	r3, [r0, #1665]	; 0x681
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d5c9e:	4604      	mov	r4, r0
    if (tls == false) {
   d5ca0:	b94b      	cbnz	r3, d5cb6 <_ZN4MQTT8readByteEv+0x1e>
        while(!tcpClient.available()) {}
   d5ca2:	4620      	mov	r0, r4
   d5ca4:	f00f fbae 	bl	e5404 <_ZN9TCPClient9availableEv>
   d5ca8:	2800      	cmp	r0, #0
   d5caa:	d0fa      	beq.n	d5ca2 <_ZN4MQTT8readByteEv+0xa>
        return tcpClient.read();
   d5cac:	4620      	mov	r0, r4
   d5cae:	f00f faca 	bl	e5246 <_ZN9TCPClient4readEv>
   d5cb2:	b2c0      	uxtb	r0, r0
   d5cb4:	e017      	b.n	d5ce6 <_ZN4MQTT8readByteEv+0x4e>
    } else {
        uint8_t val = 0;
        uint8_t buff;

        if (tlsConnected) {
   d5cb6:	f890 3680 	ldrb.w	r3, [r0, #1664]	; 0x680
   d5cba:	b19b      	cbz	r3, d5ce4 <_ZN4MQTT8readByteEv+0x4c>
            while (1) {
                int ret = mbedtls_ssl_read(&ssl, &buff, 1);
   d5cbc:	f500 7534 	add.w	r5, r0, #720	; 0x2d0
   d5cc0:	2201      	movs	r2, #1
   d5cc2:	f10d 0107 	add.w	r1, sp, #7
   d5cc6:	4628      	mov	r0, r5
   d5cc8:	f00b faa8 	bl	e121c <mbedtls_ssl_read>
                if (ret < 0) {
   d5ccc:	2800      	cmp	r0, #0
   d5cce:	da06      	bge.n	d5cde <_ZN4MQTT8readByteEv+0x46>
                      switch (ret) {
   d5cd0:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d5cd4:	d0f4      	beq.n	d5cc0 <_ZN4MQTT8readByteEv+0x28>
                        case MBEDTLS_ERR_SSL_WANT_READ:
                          break;
                      case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                      case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
                      default:
                          disconnect();
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	f7ff ffaf 	bl	d5c3a <_ZN4MQTT10disconnectEv>
   d5cdc:	e002      	b.n	d5ce4 <_ZN4MQTT8readByteEv+0x4c>
                          return -1;
                    }
                } else {
                    return buff;
   d5cde:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5ce2:	e000      	b.n	d5ce6 <_ZN4MQTT8readByteEv+0x4e>
                }
            }
        } else {
            return -1;
   d5ce4:	20ff      	movs	r0, #255	; 0xff
        }
    }
}
   d5ce6:	b003      	add	sp, #12
   d5ce8:	bd30      	pop	{r4, r5, pc}

000d5cea <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
   d5cea:	b510      	push	{r4, lr}
   d5cec:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
   d5cee:	f00f f99e 	bl	e502e <_ZN9TCPClient9connectedEv>
    if (rc && tls)
   d5cf2:	b130      	cbz	r0, d5d02 <_ZN4MQTT11isConnectedEv+0x18>
   d5cf4:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
   d5cf8:	b113      	cbz	r3, d5d00 <_ZN4MQTT11isConnectedEv+0x16>
        return tlsConnected;
   d5cfa:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
   d5cfe:	bd10      	pop	{r4, pc}
    return rc;
   d5d00:	2001      	movs	r0, #1
}
   d5d02:	bd10      	pop	{r4, pc}

000d5d04 <_ZN4MQTT10readPacketEPh>:
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5d08:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5d0a:	69c4      	ldr	r4, [r0, #28]
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5d0c:	4689      	mov	r9, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5d0e:	f7ff ffc3 	bl	d5c98 <_ZN4MQTT8readByteEv>
   d5d12:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d5d14:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
   d5d16:	f04f 0a01 	mov.w	sl, #1
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d5d1a:	f893 8000 	ldrb.w	r8, [r3]
    uint32_t multiplier = 1;
    uint16_t length = 0;
   d5d1e:	2700      	movs	r7, #0
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5d20:	4656      	mov	r6, sl
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if (!isConnected()) return -1;
   d5d22:	4628      	mov	r0, r5
   d5d24:	f7ff ffe1 	bl	d5cea <_ZN4MQTT11isConnectedEv>
   d5d28:	2800      	cmp	r0, #0
   d5d2a:	d049      	beq.n	d5dc0 <_ZN4MQTT10readPacketEPh+0xbc>
        digit = readByte();
   d5d2c:	4628      	mov	r0, r5
   d5d2e:	f7ff ffb3 	bl	d5c98 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d5d32:	69eb      	ldr	r3, [r5, #28]
   d5d34:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d5d36:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d5d3a:	fb13 f30a 	smulbb	r3, r3, sl
   d5d3e:	441f      	add	r7, r3
    uint8_t start = 0;

    do {
        if (!isConnected()) return -1;
        digit = readByte();
        buffer[len++] = digit;
   d5d40:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d5d42:	0603      	lsls	r3, r0, #24
    uint8_t start = 0;

    do {
        if (!isConnected()) return -1;
        digit = readByte();
        buffer[len++] = digit;
   d5d44:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d5d46:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d5d48:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    } while ((digit & 128) != 0);
   d5d4c:	d501      	bpl.n	d5d52 <_ZN4MQTT10readPacketEPh+0x4e>
    uint8_t start = 0;

    do {
        if (!isConnected()) return -1;
        digit = readByte();
        buffer[len++] = digit;
   d5d4e:	4626      	mov	r6, r4
   d5d50:	e7e7      	b.n	d5d22 <_ZN4MQTT10readPacketEPh+0x1e>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;

    if (isPublish) {
   d5d52:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5d56:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d5d58:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5d5c:	f889 3000 	strb.w	r3, [r9]

    if (isPublish) {
   d5d60:	d113      	bne.n	d5d8a <_ZN4MQTT10readPacketEPh+0x86>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d5d62:	4628      	mov	r0, r5
   d5d64:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5d68:	f7ff ff96 	bl	d5c98 <_ZN4MQTT8readByteEv>
   d5d6c:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d5d70:	4628      	mov	r0, r5
   d5d72:	1cf4      	adds	r4, r6, #3
   d5d74:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5d78:	3602      	adds	r6, #2
   d5d7a:	f7ff ff8d 	bl	d5c98 <_ZN4MQTT8readByteEv>
   d5d7e:	b2b6      	uxth	r6, r6
   d5d80:	b2a4      	uxth	r4, r4
   d5d82:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d5d86:	2302      	movs	r3, #2
   d5d88:	e000      	b.n	d5d8c <_ZN4MQTT10readPacketEPh+0x88>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d5d8a:	2300      	movs	r3, #0
   d5d8c:	1b1b      	subs	r3, r3, r4
   d5d8e:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5d90:	19a3      	adds	r3, r4, r6
   d5d92:	b29b      	uxth	r3, r3
   d5d94:	429f      	cmp	r7, r3
   d5d96:	d90b      	bls.n	d5db0 <_ZN4MQTT10readPacketEPh+0xac>
        digit = readByte();
   d5d98:	4628      	mov	r0, r5
   d5d9a:	f7ff ff7d 	bl	d5c98 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d5d9e:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d5da2:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d5da4:	bf84      	itt	hi
   d5da6:	69eb      	ldrhi	r3, [r5, #28]
   d5da8:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d5daa:	3401      	adds	r4, #1
   d5dac:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5dae:	e7ef      	b.n	d5d90 <_ZN4MQTT10readPacketEPh+0x8c>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d5db0:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
   d5db4:	42a0      	cmp	r0, r4
   d5db6:	bf2c      	ite	cs
   d5db8:	4620      	movcs	r0, r4
   d5dba:	2000      	movcc	r0, #0
   d5dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if (!isConnected()) return -1;
   d5dc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    if (len > this->maxpacketsize) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d5dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5dc8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5dc8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5dcc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d5dce:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5dd2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5dd6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d5dda:	4604      	mov	r4, r0
   d5ddc:	468b      	mov	fp, r1
   d5dde:	4691      	mov	r9, r2
   d5de0:	469a      	mov	sl, r3
    if (isConnected()) {
   d5de2:	f7ff ff82 	bl	d5cea <_ZN4MQTT11isConnectedEv>
   d5de6:	2800      	cmp	r0, #0
   d5de8:	d049      	beq.n	d5e7e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb6>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, sizeof(buffer));
   d5dea:	69e3      	ldr	r3, [r4, #28]
   d5dec:	2200      	movs	r2, #0
   d5dee:	601a      	str	r2, [r3, #0]

        length = writeString(topic, buffer, length);
   d5df0:	69e2      	ldr	r2, [r4, #28]
   d5df2:	2305      	movs	r3, #5
   d5df4:	4659      	mov	r1, fp
   d5df6:	4620      	mov	r0, r4
   d5df8:	f7ff fec6 	bl	d5b88 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d5dfc:	1e6b      	subs	r3, r5, #1
   d5dfe:	2b01      	cmp	r3, #1
   d5e00:	d812      	bhi.n	d5e28 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
            nextMsgId += 1;
   d5e02:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5e04:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, sizeof(buffer));

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d5e06:	3301      	adds	r3, #1
   d5e08:	b29b      	uxth	r3, r3
   d5e0a:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5e0c:	121b      	asrs	r3, r3, #8
   d5e0e:	5413      	strb	r3, [r2, r0]
   d5e10:	1c41      	adds	r1, r0, #1
   d5e12:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d5e14:	69e3      	ldr	r3, [r4, #28]
   d5e16:	8c22      	ldrh	r2, [r4, #32]
   d5e18:	545a      	strb	r2, [r3, r1]
   d5e1a:	3002      	adds	r0, #2
   d5e1c:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d5e1e:	b11e      	cbz	r6, d5e28 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
                *messageid = nextMsgId++;
   d5e20:	8c23      	ldrh	r3, [r4, #32]
   d5e22:	1c5a      	adds	r2, r3, #1
   d5e24:	8422      	strh	r2, [r4, #32]
   d5e26:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5e28:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5e2a:	b291      	uxth	r1, r2
   d5e2c:	1883      	adds	r3, r0, r2
   d5e2e:	458a      	cmp	sl, r1
   d5e30:	b29b      	uxth	r3, r3
   d5e32:	d90a      	bls.n	d5e4a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x82>
   d5e34:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5e38:	429e      	cmp	r6, r3
   d5e3a:	f102 0201 	add.w	r2, r2, #1
   d5e3e:	d904      	bls.n	d5e4a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x82>
            buffer[length++] = payload[i];
   d5e40:	f819 6001 	ldrb.w	r6, [r9, r1]
   d5e44:	69e1      	ldr	r1, [r4, #28]
   d5e46:	54ce      	strb	r6, [r1, r3]
   d5e48:	e7ef      	b.n	d5e2a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x62>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d5e4a:	f1b8 0f00 	cmp.w	r8, #0
   d5e4e:	bf0c      	ite	eq
   d5e50:	2130      	moveq	r1, #48	; 0x30
   d5e52:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d5e54:	b10f      	cbz	r7, d5e5a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x92>
            header |= DUP_FLAG_ON_MASK;
   d5e56:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d5e5a:	2d02      	cmp	r5, #2
   d5e5c:	d102      	bne.n	d5e64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x9c>
            header |= MQTTQOS2_HEADER_MASK;
   d5e5e:	f041 0104 	orr.w	r1, r1, #4
   d5e62:	e003      	b.n	d5e6c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa4>
        else if (qos == QOS1)
   d5e64:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5e66:	bf08      	it	eq
   d5e68:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5e6c:	3b05      	subs	r3, #5
   d5e6e:	69e2      	ldr	r2, [r4, #28]
   d5e70:	b29b      	uxth	r3, r3
   d5e72:	4620      	mov	r0, r4
    }
    return false;
}
   d5e74:	b001      	add	sp, #4
   d5e76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5e7a:	f7ff beac 	b.w	d5bd6 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5e7e:	b001      	add	sp, #4
   d5e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5e84 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5e86:	9c08      	ldr	r4, [sp, #32]
   d5e88:	9403      	str	r4, [sp, #12]
   d5e8a:	2400      	movs	r4, #0
   d5e8c:	9402      	str	r4, [sp, #8]
   d5e8e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d5e92:	9401      	str	r4, [sp, #4]
   d5e94:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5e98:	9400      	str	r4, [sp, #0]
   d5e9a:	f7ff ff95 	bl	d5dc8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d5e9e:	b004      	add	sp, #16
   d5ea0:	bd10      	pop	{r4, pc}

000d5ea2 <_ZN4MQTT7publishEPKcS1_>:
        }
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d5ea2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5ea4:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5ea6:	4610      	mov	r0, r2
        }
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d5ea8:	460e      	mov	r6, r1
   d5eaa:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5eac:	f010 fedd 	bl	e6c6a <strlen>
   d5eb0:	2300      	movs	r3, #0
   d5eb2:	9302      	str	r3, [sp, #8]
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	9300      	str	r3, [sp, #0]
   d5eb8:	4622      	mov	r2, r4
   d5eba:	4603      	mov	r3, r0
   d5ebc:	4631      	mov	r1, r6
   d5ebe:	4628      	mov	r0, r5
   d5ec0:	f7ff ffe0 	bl	d5e84 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d5ec4:	b004      	add	sp, #16
   d5ec6:	bd70      	pop	{r4, r5, r6, pc}

000d5ec8 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d5ec8:	b538      	push	{r3, r4, r5, lr}
   d5eca:	4604      	mov	r4, r0
   d5ecc:	460d      	mov	r5, r1
    if (isConnected()) {
   d5ece:	f7ff ff0c 	bl	d5cea <_ZN4MQTT11isConnectedEv>
   d5ed2:	b190      	cbz	r0, d5efa <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d5ed4:	69e3      	ldr	r3, [r4, #28]
   d5ed6:	2262      	movs	r2, #98	; 0x62
   d5ed8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5eda:	69e3      	ldr	r3, [r4, #28]
   d5edc:	2202      	movs	r2, #2
   d5ede:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5ee0:	69e3      	ldr	r3, [r4, #28]
   d5ee2:	122a      	asrs	r2, r5, #8
   d5ee4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5ee6:	69e3      	ldr	r3, [r4, #28]
   d5ee8:	70dd      	strb	r5, [r3, #3]
        return netWrite(buffer, length);
   d5eea:	2204      	movs	r2, #4
   d5eec:	69e1      	ldr	r1, [r4, #28]
   d5eee:	4620      	mov	r0, r4
   d5ef0:	f7ff fe64 	bl	d5bbc <_ZN4MQTT8netWriteEPhi>
   d5ef4:	3000      	adds	r0, #0
   d5ef6:	bf18      	it	ne
   d5ef8:	2001      	movne	r0, #1
    }
    return false;
}
   d5efa:	bd38      	pop	{r3, r4, r5, pc}

000d5efc <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d5efc:	b538      	push	{r3, r4, r5, lr}
   d5efe:	4604      	mov	r4, r0
   d5f00:	460d      	mov	r5, r1
    if (isConnected()) {
   d5f02:	f7ff fef2 	bl	d5cea <_ZN4MQTT11isConnectedEv>
   d5f06:	b190      	cbz	r0, d5f2e <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d5f08:	69e3      	ldr	r3, [r4, #28]
   d5f0a:	2272      	movs	r2, #114	; 0x72
   d5f0c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5f0e:	69e3      	ldr	r3, [r4, #28]
   d5f10:	2202      	movs	r2, #2
   d5f12:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5f14:	69e3      	ldr	r3, [r4, #28]
   d5f16:	122a      	asrs	r2, r5, #8
   d5f18:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5f1a:	69e3      	ldr	r3, [r4, #28]
   d5f1c:	70dd      	strb	r5, [r3, #3]
        return netWrite(buffer, length);
   d5f1e:	2204      	movs	r2, #4
   d5f20:	69e1      	ldr	r1, [r4, #28]
   d5f22:	4620      	mov	r0, r4
   d5f24:	f7ff fe4a 	bl	d5bbc <_ZN4MQTT8netWriteEPhi>
   d5f28:	3000      	adds	r0, #0
   d5f2a:	bf18      	it	ne
   d5f2c:	2001      	movne	r0, #1
    }
    return false;
}
   d5f2e:	bd38      	pop	{r3, r4, r5, pc}

000d5f30 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d5f30:	b570      	push	{r4, r5, r6, lr}
   d5f32:	4604      	mov	r4, r0
   d5f34:	460e      	mov	r6, r1
   d5f36:	4615      	mov	r5, r2
    if (isConnected()) {
   d5f38:	f7ff fed7 	bl	d5cea <_ZN4MQTT11isConnectedEv>
   d5f3c:	b1e8      	cbz	r0, d5f7a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d5f3e:	8c23      	ldrh	r3, [r4, #32]
   d5f40:	3301      	adds	r3, #1
   d5f42:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5f44:	b903      	cbnz	r3, d5f48 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d5f46:	2301      	movs	r3, #1
   d5f48:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d5f4a:	8c23      	ldrh	r3, [r4, #32]
   d5f4c:	69e2      	ldr	r2, [r4, #28]
   d5f4e:	121b      	asrs	r3, r3, #8
   d5f50:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5f52:	69e3      	ldr	r3, [r4, #28]
   d5f54:	8c22      	ldrh	r2, [r4, #32]
   d5f56:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5f58:	69e2      	ldr	r2, [r4, #28]
   d5f5a:	4631      	mov	r1, r6
   d5f5c:	2307      	movs	r3, #7
   d5f5e:	4620      	mov	r0, r4
   d5f60:	f7ff fe12 	bl	d5b88 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5f64:	69e3      	ldr	r3, [r4, #28]
   d5f66:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5f68:	1f03      	subs	r3, r0, #4
   d5f6a:	69e2      	ldr	r2, [r4, #28]
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	b29b      	uxth	r3, r3
   d5f70:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d5f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5f76:	f7ff be2e 	b.w	d5bd6 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5f7a:	bd70      	pop	{r4, r5, r6, pc}

000d5f7c <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d5f7c:	2200      	movs	r2, #0
   d5f7e:	f7ff bfd7 	b.w	d5f30 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d5f82 <_ZN4MQTT11unsubscribeEPKc>:
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

bool MQTT::unsubscribe(const char* topic) {
   d5f82:	b570      	push	{r4, r5, r6, lr}
   d5f84:	4604      	mov	r4, r0
   d5f86:	460d      	mov	r5, r1
    if (isConnected()) {
   d5f88:	f7ff feaf 	bl	d5cea <_ZN4MQTT11isConnectedEv>
   d5f8c:	b1d8      	cbz	r0, d5fc6 <_ZN4MQTT11unsubscribeEPKc+0x44>
        uint16_t length = 5;
        nextMsgId++;
   d5f8e:	8c23      	ldrh	r3, [r4, #32]
   d5f90:	3301      	adds	r3, #1
   d5f92:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5f94:	b903      	cbnz	r3, d5f98 <_ZN4MQTT11unsubscribeEPKc+0x16>
            nextMsgId = 1;
   d5f96:	2301      	movs	r3, #1
   d5f98:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d5f9a:	8c23      	ldrh	r3, [r4, #32]
   d5f9c:	69e2      	ldr	r2, [r4, #28]
   d5f9e:	121b      	asrs	r3, r3, #8
   d5fa0:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5fa2:	69e3      	ldr	r3, [r4, #28]
   d5fa4:	8c22      	ldrh	r2, [r4, #32]
   d5fa6:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5fa8:	69e2      	ldr	r2, [r4, #28]
   d5faa:	4629      	mov	r1, r5
   d5fac:	2307      	movs	r3, #7
   d5fae:	4620      	mov	r0, r4
   d5fb0:	f7ff fdea 	bl	d5b88 <_ZN4MQTT11writeStringEPKcPht>
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5fb4:	1f43      	subs	r3, r0, #5
   d5fb6:	69e2      	ldr	r2, [r4, #28]
   d5fb8:	4620      	mov	r0, r4
   d5fba:	b29b      	uxth	r3, r3
   d5fbc:	21a2      	movs	r1, #162	; 0xa2
    }
    return false;
}
   d5fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5fc2:	f7ff be08 	b.w	d5bd6 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5fc6:	bd70      	pop	{r4, r5, r6, pc}

000d5fc8 <_ZN4MQTT9availableEv>:
    if (rc && tls)
        return tlsConnected;
    return rc;
}

bool MQTT::available() {
   d5fc8:	b508      	push	{r3, lr}
    return tcpClient.available();
   d5fca:	f00f fa1b 	bl	e5404 <_ZN9TCPClient9availableEv>
}
   d5fce:	3000      	adds	r0, #0
   d5fd0:	bf18      	it	ne
   d5fd2:	2001      	movne	r0, #1
   d5fd4:	bd08      	pop	{r3, pc}

000d5fd6 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d5fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fda:	b083      	sub	sp, #12
   d5fdc:	af00      	add	r7, sp, #0
   d5fde:	4604      	mov	r4, r0
    if (isConnected()) {
   d5fe0:	f7ff fe83 	bl	d5cea <_ZN4MQTT11isConnectedEv>
   d5fe4:	b1a0      	cbz	r0, d6010 <_ZN4MQTT4loopEv+0x3a>
   d5fe6:	f00d fd7b 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d5fea:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ff0:	4353      	muls	r3, r2
   d5ff2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5ff4:	1a82      	subs	r2, r0, r2
   d5ff6:	429a      	cmp	r2, r3
   d5ff8:	4605      	mov	r5, r0
   d5ffa:	d803      	bhi.n	d6004 <_ZN4MQTT4loopEv+0x2e>
   d5ffc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5ffe:	1a82      	subs	r2, r0, r2
   d6000:	4293      	cmp	r3, r2
   d6002:	d217      	bcs.n	d6034 <_ZN4MQTT4loopEv+0x5e>
            if (pingOutstanding) {
   d6004:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d6008:	b12b      	cbz	r3, d6016 <_ZN4MQTT4loopEv+0x40>
                disconnect();
   d600a:	4620      	mov	r0, r4
   d600c:	f7ff fe15 	bl	d5c3a <_ZN4MQTT10disconnectEv>
                return false;
   d6010:	f04f 0900 	mov.w	r9, #0
   d6014:	e0dd      	b.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
            } else {
                buffer[0] = MQTTPINGREQ;
   d6016:	69e2      	ldr	r2, [r4, #28]
   d6018:	21c0      	movs	r1, #192	; 0xc0
   d601a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d601c:	69e2      	ldr	r2, [r4, #28]
   d601e:	7053      	strb	r3, [r2, #1]
                netWrite(buffer,2);
   d6020:	69e1      	ldr	r1, [r4, #28]
   d6022:	2202      	movs	r2, #2
   d6024:	4620      	mov	r0, r4
   d6026:	f7ff fdc9 	bl	d5bbc <_ZN4MQTT8netWriteEPhi>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d602a:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                netWrite(buffer,2);
                lastOutActivity = t;
   d602c:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d602e:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d6030:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (available()) {
   d6034:	4620      	mov	r0, r4
   d6036:	f7ff ffc7 	bl	d5fc8 <_ZN4MQTT9availableEv>
   d603a:	4681      	mov	r9, r0
   d603c:	2800      	cmp	r0, #0
   d603e:	d0e7      	beq.n	d6010 <_ZN4MQTT4loopEv+0x3a>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d6040:	1df9      	adds	r1, r7, #7
   d6042:	4620      	mov	r0, r4
   d6044:	f7ff fe5e 	bl	d5d04 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d6048:	4602      	mov	r2, r0
   d604a:	2800      	cmp	r0, #0
   d604c:	f000 80c1 	beq.w	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d6050:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d6052:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d6054:	7818      	ldrb	r0, [r3, #0]
   d6056:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d605a:	2930      	cmp	r1, #48	; 0x30
   d605c:	d17d      	bne.n	d615a <_ZN4MQTT4loopEv+0x184>
                    if (callback) {
   d605e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d6062:	f1bb 0f00 	cmp.w	fp, #0
   d6066:	f000 80b4 	beq.w	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   d606a:	f897 c007 	ldrb.w	ip, [r7, #7]
   d606e:	eb03 000c 	add.w	r0, r3, ip
              							netWrite(buffer, 4);
              							lastOutActivity = t;
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d6072:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   d6074:	7881      	ldrb	r1, [r0, #2]
   d6076:	f890 e001 	ldrb.w	lr, [r0, #1]
   d607a:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d607e:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d6082:	f10e 0108 	add.w	r1, lr, #8
   d6086:	f021 0107 	bic.w	r1, r1, #7
   d608a:	ebad 0d01 	sub.w	sp, sp, r1
   d608e:	4668      	mov	r0, sp
   d6090:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d6092:	b28e      	uxth	r6, r1
   d6094:	45b6      	cmp	lr, r6
   d6096:	d906      	bls.n	d60a6 <_ZN4MQTT4loopEv+0xd0>
                            topic[i] = buffer[llen+3+i];
   d6098:	eb0c 0601 	add.w	r6, ip, r1
   d609c:	441e      	add	r6, r3
   d609e:	78f6      	ldrb	r6, [r6, #3]
   d60a0:	5446      	strb	r6, [r0, r1]
   d60a2:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d60a4:	e7f5      	b.n	d6092 <_ZN4MQTT4loopEv+0xbc>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d60a6:	2100      	movs	r1, #0
   d60a8:	f800 100e 	strb.w	r1, [r0, lr]
   d60ac:	781e      	ldrb	r6, [r3, #0]
   d60ae:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
   d60b2:	2e02      	cmp	r6, #2
   d60b4:	f10c 0103 	add.w	r1, ip, #3
   d60b8:	ebcc 0202 	rsb	r2, ip, r2
   d60bc:	d11e      	bne.n	d60fc <_ZN4MQTT4loopEv+0x126>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d60be:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d60c0:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d60c4:	f813 8001 	ldrb.w	r8, [r3, r1]
   d60c8:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d60ca:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d60cc:	7849      	ldrb	r1, [r1, #1]
   d60ce:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d60d2:	f10c 0105 	add.w	r1, ip, #5
   d60d6:	4471      	add	r1, lr
   d60d8:	4419      	add	r1, r3
   d60da:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK;
   d60dc:	69e3      	ldr	r3, [r4, #28]
   d60de:	2240      	movs	r2, #64	; 0x40
   d60e0:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d60e2:	69e3      	ldr	r3, [r4, #28]
   d60e4:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d60e6:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d60e8:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d60ec:	ea4f 2228 	mov.w	r2, r8, asr #8
   d60f0:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d60f2:	69e3      	ldr	r3, [r4, #28]
                            netWrite(buffer,4);
   d60f4:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d60f6:	f883 8003 	strb.w	r8, [r3, #3]
   d60fa:	e020      	b.n	d613e <_ZN4MQTT4loopEv+0x168>
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d60fc:	2e04      	cmp	r6, #4
   d60fe:	d124      	bne.n	d614a <_ZN4MQTT4loopEv+0x174>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6100:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6102:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6106:	f813 8001 	ldrb.w	r8, [r3, r1]
   d610a:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d610c:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d610e:	7849      	ldrb	r1, [r1, #1]
   d6110:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6114:	f10c 0105 	add.w	r1, ip, #5
   d6118:	4471      	add	r1, lr
   d611a:	4419      	add	r1, r3
   d611c:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d611e:	69e3      	ldr	r3, [r4, #28]
   d6120:	2250      	movs	r2, #80	; 0x50
   d6122:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d6124:	69e3      	ldr	r3, [r4, #28]
   d6126:	2202      	movs	r2, #2
   d6128:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d612a:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d612c:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d6130:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6134:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d6136:	69e3      	ldr	r3, [r4, #28]
              							netWrite(buffer, 4);
   d6138:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d613a:	f883 8003 	strb.w	r8, [r3, #3]
              							netWrite(buffer, 4);
   d613e:	69e1      	ldr	r1, [r4, #28]
   d6140:	4620      	mov	r0, r4
   d6142:	f7ff fd3b 	bl	d5bbc <_ZN4MQTT8netWriteEPhi>
              							lastOutActivity = t;
   d6146:	6265      	str	r5, [r4, #36]	; 0x24
   d6148:	e005      	b.n	d6156 <_ZN4MQTT4loopEv+0x180>
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d614a:	3a03      	subs	r2, #3
   d614c:	4471      	add	r1, lr
   d614e:	ebce 0202 	rsb	r2, lr, r2
   d6152:	4419      	add	r1, r3
   d6154:	47d8      	blx	fp
   d6156:	46d5      	mov	sp, sl
   d6158:	e03b      	b.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d615a:	2950      	cmp	r1, #80	; 0x50
   d615c:	d108      	bne.n	d6170 <_ZN4MQTT4loopEv+0x19a>
                  // check for the situation that QoS2 receive PUBREC, should return PUBREL
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishRelease(msgId);
   d615e:	7899      	ldrb	r1, [r3, #2]
   d6160:	78db      	ldrb	r3, [r3, #3]
   d6162:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6166:	b289      	uxth	r1, r1
   d6168:	4620      	mov	r0, r4
   d616a:	f7ff fead 	bl	d5ec8 <_ZN4MQTT14publishReleaseEt>
   d616e:	e030      	b.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                } else if (type == MQTTPUBACK) {
   d6170:	2940      	cmp	r1, #64	; 0x40
   d6172:	d00c      	beq.n	d618e <_ZN4MQTT4loopEv+0x1b8>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d6174:	2960      	cmp	r1, #96	; 0x60
   d6176:	d108      	bne.n	d618a <_ZN4MQTT4loopEv+0x1b4>
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishComplete(msgId);
   d6178:	7899      	ldrb	r1, [r3, #2]
   d617a:	78db      	ldrb	r3, [r3, #3]
   d617c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6180:	b289      	uxth	r1, r1
   d6182:	4620      	mov	r0, r4
   d6184:	f7ff feba 	bl	d5efc <_ZN4MQTT15publishCompleteEt>
   d6188:	e023      	b.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                } else if (type == MQTTPUBCOMP) {
   d618a:	2970      	cmp	r1, #112	; 0x70
   d618c:	d10d      	bne.n	d61aa <_ZN4MQTT4loopEv+0x1d4>
                    if (qoscallback) {
   d618e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6190:	b1f9      	cbz	r1, d61d2 <_ZN4MQTT4loopEv+0x1fc>
                        // msgId only present for QOS==0
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d6192:	2a04      	cmp	r2, #4
   d6194:	d11d      	bne.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
   d6196:	f010 0f06 	tst.w	r0, #6
   d619a:	d11a      	bne.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
   d619c:	7898      	ldrb	r0, [r3, #2]
   d619e:	78db      	ldrb	r3, [r3, #3]
   d61a0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d61a4:	b280      	uxth	r0, r0
   d61a6:	4788      	blx	r1
   d61a8:	e013      	b.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                        }
                    }
                } else if (type == MQTTSUBACK) {
   d61aa:	2990      	cmp	r1, #144	; 0x90
   d61ac:	d011      	beq.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d61ae:	29c0      	cmp	r1, #192	; 0xc0
   d61b0:	d10a      	bne.n	d61c8 <_ZN4MQTT4loopEv+0x1f2>
                    buffer[0] = MQTTPINGRESP;
   d61b2:	22d0      	movs	r2, #208	; 0xd0
   d61b4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d61b6:	69e3      	ldr	r3, [r4, #28]
   d61b8:	2200      	movs	r2, #0
   d61ba:	705a      	strb	r2, [r3, #1]
                    netWrite(buffer,2);
   d61bc:	69e1      	ldr	r1, [r4, #28]
   d61be:	2202      	movs	r2, #2
   d61c0:	4620      	mov	r0, r4
   d61c2:	f7ff fcfb 	bl	d5bbc <_ZN4MQTT8netWriteEPhi>
   d61c6:	e004      	b.n	d61d2 <_ZN4MQTT4loopEv+0x1fc>
                } else if (type == MQTTPINGRESP) {
   d61c8:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d61ca:	bf04      	itt	eq
   d61cc:	2300      	moveq	r3, #0
   d61ce:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
            return true;
        }
    }
    return false;
}
   d61d2:	4648      	mov	r0, r9
   d61d4:	370c      	adds	r7, #12
   d61d6:	46bd      	mov	sp, r7
   d61d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d61dc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
   d61dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d61e0:	4605      	mov	r5, r0
   d61e2:	b085      	sub	sp, #20
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
   d61e4:	f500 7461 	add.w	r4, r0, #900	; 0x384
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
   d61e8:	4699      	mov	r9, r3
    int ret;
    tls = true;
   d61ea:	2301      	movs	r3, #1
   d61ec:	f880 3681 	strb.w	r3, [r0, #1665]	; 0x681

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
   d61f0:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
   d61f4:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
   d61f6:	4693      	mov	fp, r2
   d61f8:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
   d61fa:	f505 7a7a 	add.w	sl, r5, #1000	; 0x3e8
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
   d61fe:	f00b fa3d 	bl	e167c <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
   d6202:	4630      	mov	r0, r6
   d6204:	f00a ff60 	bl	e10c8 <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
   d6208:	f205 571c 	addw	r7, r5, #1308	; 0x51c
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
   d620c:	4650      	mov	r0, sl
   d620e:	f00c ff0b 	bl	e3028 <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
   d6212:	f505 68ca 	add.w	r8, r5, #1616	; 0x650
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
   d6216:	4638      	mov	r0, r7
   d6218:	f00c ff06 	bl	e3028 <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
   d621c:	4640      	mov	r0, r8
   d621e:	f003 fede 	bl	d9fde <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
   d6222:	2200      	movs	r2, #0
   d6224:	4935      	ldr	r1, [pc, #212]	; (d62fc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
   d6226:	4620      	mov	r0, r4
   d6228:	f00a ff5f 	bl	e10ea <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
   d622c:	465a      	mov	r2, fp
   d622e:	9903      	ldr	r1, [sp, #12]
   d6230:	4650      	mov	r0, sl
   d6232:	f00d fa91 	bl	e3758 <mbedtls_x509_crt_parse>
   d6236:	2800      	cmp	r0, #0
   d6238:	db5d      	blt.n	d62f6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
   d623a:	f1b9 0f00 	cmp.w	r9, #0
   d623e:	d102      	bne.n	d6246 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d6240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6242:	b95b      	cbnz	r3, d625c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
   d6244:	e00c      	b.n	d6260 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
   d6246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d6248:	2b00      	cmp	r3, #0
   d624a:	d0f9      	beq.n	d6240 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
   d624c:	461a      	mov	r2, r3
   d624e:	4649      	mov	r1, r9
   d6250:	4638      	mov	r0, r7
   d6252:	f00d fa81 	bl	e3758 <mbedtls_x509_crt_parse>
   d6256:	2800      	cmp	r0, #0
   d6258:	daf2      	bge.n	d6240 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
   d625a:	e04c      	b.n	d62f6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d625c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d625e:	b94b      	cbnz	r3, d6274 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
   d6260:	2300      	movs	r3, #0
   d6262:	461a      	mov	r2, r3
   d6264:	4619      	mov	r1, r3
   d6266:	4620      	mov	r0, r4
   d6268:	f00b fa0c 	bl	e1684 <mbedtls_ssl_config_defaults>
   d626c:	4683      	mov	fp, r0
   d626e:	2800      	cmp	r0, #0
   d6270:	d141      	bne.n	d62f6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
   d6272:	e009      	b.n	d6288 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
   d6274:	2300      	movs	r3, #0
   d6276:	9300      	str	r3, [sp, #0]
   d6278:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d627a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d627c:	4640      	mov	r0, r8
   d627e:	f004 fe75 	bl	daf6c <mbedtls_pk_parse_key>
   d6282:	2800      	cmp	r0, #0
   d6284:	d0ec      	beq.n	d6260 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
   d6286:	e036      	b.n	d62f6 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
   d6288:	2203      	movs	r2, #3
   d628a:	4611      	mov	r1, r2
   d628c:	4620      	mov	r0, r4
   d628e:	f00a ff7b 	bl	e1188 <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
   d6292:	465a      	mov	r2, fp
   d6294:	491a      	ldr	r1, [pc, #104]	; (d6300 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
   d6296:	4620      	mov	r0, r4
   d6298:	f00a ff21 	bl	e10de <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
   d629c:	2101      	movs	r1, #1
   d629e:	4620      	mov	r0, r4
   d62a0:	f00a ff16 	bl	e10d0 <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
   d62a4:	465a      	mov	r2, fp
   d62a6:	4917      	ldr	r1, [pc, #92]	; (d6304 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
   d62a8:	4620      	mov	r0, r4
   d62aa:	f00a ff1b 	bl	e10e4 <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
   d62ae:	465a      	mov	r2, fp
   d62b0:	4651      	mov	r1, sl
   d62b2:	4620      	mov	r0, r4
   d62b4:	f00a ff2e 	bl	e1114 <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
   d62b8:	f1b9 0f00 	cmp.w	r9, #0
   d62bc:	d006      	beq.n	d62cc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
   d62be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d62c0:	b123      	cbz	r3, d62cc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
   d62c2:	4642      	mov	r2, r8
   d62c4:	4639      	mov	r1, r7
   d62c6:	4620      	mov	r0, r4
   d62c8:	f00a ff21 	bl	e110e <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
   d62cc:	4621      	mov	r1, r4
   d62ce:	4630      	mov	r0, r6
   d62d0:	f00b f94c 	bl	e156c <mbedtls_ssl_setup>
   d62d4:	4604      	mov	r4, r0
   d62d6:	b968      	cbnz	r0, d62f4 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
   d62d8:	4b0b      	ldr	r3, [pc, #44]	; (d6308 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
   d62da:	4a0c      	ldr	r2, [pc, #48]	; (d630c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
   d62dc:	f505 61cb 	add.w	r1, r5, #1624	; 0x658
   d62e0:	4630      	mov	r0, r6
   d62e2:	f00a ff0b 	bl	e10fc <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
   d62e6:	9400      	str	r4, [sp, #0]
   d62e8:	4b09      	ldr	r3, [pc, #36]	; (d6310 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
   d62ea:	4a0a      	ldr	r2, [pc, #40]	; (d6314 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
   d62ec:	4629      	mov	r1, r5
   d62ee:	4630      	mov	r0, r6
   d62f0:	f00a fefe 	bl	e10f0 <mbedtls_ssl_set_bio>
   d62f4:	4620      	mov	r0, r4
    return 0;
}
   d62f6:	b005      	add	sp, #20
   d62f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d62fc:	000d59ed 	.word	0x000d59ed
   d6300:	000d5a89 	.word	0x000d5a89
   d6304:	000d5a55 	.word	0x000d5a55
   d6308:	000e1a0f 	.word	0x000e1a0f
   d630c:	000e1a01 	.word	0x000e1a01
   d6310:	000d5a25 	.word	0x000d5a25
   d6314:	000d59f1 	.word	0x000d59f1

000d6318 <_ZN4MQTT9enableTlsEPKcj>:
    ((void) level);
    debug_tls("%s:%04d: %s", file, line, str);
}


int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize) {
   d6318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
   d631a:	2300      	movs	r3, #0
   d631c:	9302      	str	r3, [sp, #8]
   d631e:	9301      	str	r3, [sp, #4]
   d6320:	9300      	str	r3, [sp, #0]
   d6322:	f7ff ff5b 	bl	d61dc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>
}
   d6326:	b005      	add	sp, #20
   d6328:	f85d fb04 	ldr.w	pc, [sp], #4

000d632c <_ZN4MQTT6verifyEv>:
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
   d632c:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
   d632e:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
   d6332:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
   d6336:	f00a ff2c 	bl	e1192 <mbedtls_ssl_get_verify_result>
   d633a:	4603      	mov	r3, r0
   d633c:	b138      	cbz	r0, d634e <_ZN4MQTT6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
   d633e:	4a06      	ldr	r2, [pc, #24]	; (d6358 <_ZN4MQTT6verifyEv+0x2c>)
   d6340:	f44f 7100 	mov.w	r1, #512	; 0x200
   d6344:	4668      	mov	r0, sp
   d6346:	f00c fa57 	bl	e27f8 <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
   d634a:	2000      	movs	r0, #0
   d634c:	e000      	b.n	d6350 <_ZN4MQTT6verifyEv+0x24>
  }
  return true;
   d634e:	2001      	movs	r0, #1
}
   d6350:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   d6354:	f85d fb04 	ldr.w	pc, [sp], #4
   d6358:	000e75d8 	.word	0x000e75d8

000d635c <_ZN4MQTT12handShakeTlsEv>:
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
    return 0;
}


int MQTT::handShakeTls() {
   d635c:	b570      	push	{r4, r5, r6, lr}
   d635e:	4604      	mov	r4, r0
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d6360:	f500 7634 	add.w	r6, r0, #720	; 0x2d0

int MQTT::handShakeTls() {
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
   d6364:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   d6368:	2b10      	cmp	r3, #16
   d636a:	d005      	beq.n	d6378 <_ZN4MQTT12handShakeTlsEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d636c:	4630      	mov	r0, r6
   d636e:	f009 fa4d 	bl	df80c <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
   d6372:	4605      	mov	r5, r0
   d6374:	2800      	cmp	r0, #0
   d6376:	d0f5      	beq.n	d6364 <_ZN4MQTT12handShakeTlsEv+0x8>
              break;
      }
  } while (ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
   d6378:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
   d637c:	d0f2      	beq.n	d6364 <_ZN4MQTT12handShakeTlsEv+0x8>
   d637e:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
   d6382:	d0ef      	beq.n	d6364 <_ZN4MQTT12handShakeTlsEv+0x8>

  // clean ca cert/crt/pkey for memory limitation
  mbedtls_x509_crt_free(&cacert);
   d6384:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
   d6388:	f00c fe53 	bl	e3032 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d638c:	f204 501c 	addw	r0, r4, #1308	; 0x51c
   d6390:	f00c fe4f 	bl	e3032 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d6394:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
   d6398:	f003 fe26 	bl	d9fe8 <mbedtls_pk_free>

  debug_tls("%s, ret = %d\n", "handshake done", ret);
  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
   d639c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   d63a0:	2b10      	cmp	r3, #16
   d63a2:	d109      	bne.n	d63b8 <_ZN4MQTT12handShakeTlsEv+0x5c>
      if (enableVerify && !verify())
   d63a4:	f894 3682 	ldrb.w	r3, [r4, #1666]	; 0x682
   d63a8:	b143      	cbz	r3, d63bc <_ZN4MQTT12handShakeTlsEv+0x60>
   d63aa:	4620      	mov	r0, r4
   d63ac:	f7ff ffbe 	bl	d632c <_ZN4MQTT6verifyEv>
   d63b0:	b920      	cbnz	r0, d63bc <_ZN4MQTT12handShakeTlsEv+0x60>
        return -1;
   d63b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d63b6:	bd70      	pop	{r4, r5, r6, pc}
   d63b8:	4628      	mov	r0, r5
   d63ba:	bd70      	pop	{r4, r5, r6, pc}
      tlsConnected = true;
   d63bc:	2301      	movs	r3, #1
   d63be:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
      debug_tls("tls connected\n");
      return 0;
   d63c2:	2000      	movs	r0, #0
  }
  return ret;
}
   d63c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d63c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage,true,MQTT_V311);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d63c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d63cc:	b08d      	sub	sp, #52	; 0x34
   d63ce:	4604      	mov	r4, r0
   d63d0:	4689      	mov	r9, r1
   d63d2:	4617      	mov	r7, r2
   d63d4:	461e      	mov	r6, r3
   d63d6:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    if (!isConnected()) {
   d63da:	f7ff fc86 	bl	d5cea <_ZN4MQTT11isConnectedEv>
   d63de:	4605      	mov	r5, r0
   d63e0:	2800      	cmp	r0, #0
   d63e2:	f040 80e7 	bne.w	d65b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ec>
        int result = 0;
        if (ip == NULL) {
   d63e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d63e8:	2900      	cmp	r1, #0
   d63ea:	d138      	bne.n	d645e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
            result = tcpClient.connect(this->domain.c_str(), this->port);
   d63ec:	4603      	mov	r3, r0
   d63ee:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d63f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d63f4:	4620      	mov	r0, r4
   d63f6:	f00e fe47 	bl	e5088 <_ZN9TCPClient7connectEPKctm>
            if (tls) {
   d63fa:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
   d63fe:	2b00      	cmp	r3, #0
   d6400:	d050      	beq.n	d64a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                mbedtls_ssl_set_hostname(&ssl, domain);
   d6402:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6404:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
   d6408:	f00a fe88 	bl	e111c <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
   d640c:	4620      	mov	r0, r4
   d640e:	f7ff ffa5 	bl	d635c <_ZN4MQTT12handShakeTlsEv>
   d6412:	2800      	cmp	r0, #0
   d6414:	f040 80ca 	bne.w	d65ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
                result = (0 == this->handShakeTls() ? 1 : 0);
            }
        }

        if (result) {
            nextMsgId = 1;
   d6418:	2301      	movs	r3, #1
   d641a:	8423      	strh	r3, [r4, #32]

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d641c:	4b68      	ldr	r3, [pc, #416]	; (d65c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1f8>)
   d641e:	6859      	ldr	r1, [r3, #4]
   d6420:	6818      	ldr	r0, [r3, #0]
   d6422:	aa06      	add	r2, sp, #24
   d6424:	c203      	stmia	r2!, {r0, r1}
   d6426:	7a19      	ldrb	r1, [r3, #8]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d6428:	f853 0f09 	ldr.w	r0, [r3, #9]!
        if (result) {
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d642c:	7011      	strb	r1, [r2, #0]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d642e:	889a      	ldrh	r2, [r3, #4]
   d6430:	799b      	ldrb	r3, [r3, #6]
   d6432:	f88d 3016 	strb.w	r3, [sp, #22]

            if (version == MQTT_V311) {
   d6436:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d643a:	f8ad 2014 	strh.w	r2, [sp, #20]

            if (version == MQTT_V311) {
   d643e:	2b04      	cmp	r3, #4
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d6440:	9004      	str	r0, [sp, #16]
   d6442:	69e2      	ldr	r2, [r4, #28]

            if (version == MQTT_V311) {
   d6444:	d131      	bne.n	d64aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6446:	1d53      	adds	r3, r2, #5
   d6448:	9804      	ldr	r0, [sp, #16]
   d644a:	f8c2 0005 	str.w	r0, [r2, #5]
   d644e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   d6452:	f89d 2016 	ldrb.w	r2, [sp, #22]
   d6456:	8099      	strh	r1, [r3, #4]
   d6458:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
   d645a:	230c      	movs	r3, #12
   d645c:	e02e      	b.n	d64bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xf4>
                mbedtls_ssl_set_hostname(&ssl, domain);
                result = (0 == this->handShakeTls() ? 1 : 0);
            }

        } else {
            result = tcpClient.connect(this->ip, this->port);
   d645e:	a806      	add	r0, sp, #24
   d6460:	f00e fa36 	bl	e48d0 <_ZN9IPAddressC1EPKh>
   d6464:	462b      	mov	r3, r5
   d6466:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d646a:	a906      	add	r1, sp, #24
   d646c:	4620      	mov	r0, r4
   d646e:	f00e ff35 	bl	e52dc <_ZN9TCPClient7connectE9IPAddresstm>
            if (tls) {
   d6472:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
   d6476:	b1ab      	cbz	r3, d64a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                char buffername[16];
                sprintf(buffername, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
   d6478:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d647a:	78c8      	ldrb	r0, [r1, #3]
   d647c:	784b      	ldrb	r3, [r1, #1]
   d647e:	780a      	ldrb	r2, [r1, #0]
   d6480:	9001      	str	r0, [sp, #4]
   d6482:	7889      	ldrb	r1, [r1, #2]
   d6484:	9100      	str	r1, [sp, #0]
   d6486:	a806      	add	r0, sp, #24
   d6488:	494e      	ldr	r1, [pc, #312]	; (d65c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1fc>)
   d648a:	f00d fda5 	bl	e3fd8 <sprintf>
                mbedtls_ssl_set_hostname(&ssl, buffername);
   d648e:	a906      	add	r1, sp, #24
   d6490:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
   d6494:	f00a fe42 	bl	e111c <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
   d6498:	4620      	mov	r0, r4
   d649a:	f7ff ff5f 	bl	d635c <_ZN4MQTT12handShakeTlsEv>
   d649e:	fab0 f080 	clz	r0, r0
   d64a2:	0940      	lsrs	r0, r0, #5
            }
        }

        if (result) {
   d64a4:	2800      	cmp	r0, #0
   d64a6:	d1b7      	bne.n	d6418 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x50>
   d64a8:	e080      	b.n	d65ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>

            if (version == MQTT_V311) {
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d64aa:	ab06      	add	r3, sp, #24
   d64ac:	cb03      	ldmia	r3!, {r0, r1}
   d64ae:	f8c2 0005 	str.w	r0, [r2, #5]
   d64b2:	f8c2 1009 	str.w	r1, [r2, #9]
   d64b6:	781b      	ldrb	r3, [r3, #0]
   d64b8:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d64ba:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d64bc:	f1b8 0f00 	cmp.w	r8, #0
   d64c0:	d00a      	beq.n	d64d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x110>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d64c2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   d64c6:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
   d64ca:	0152      	lsls	r2, r2, #5
   d64cc:	f042 0206 	orr.w	r2, r2, #6
   d64d0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d64d4:	b2d2      	uxtb	r2, r2
   d64d6:	e000      	b.n	d64da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x112>
            } else {
                v = 0x02;
   d64d8:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d64da:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
   d64de:	b909      	cbnz	r1, d64e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x11c>
              v = v&0xfd;
   d64e0:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d64e4:	b12f      	cbz	r7, d64f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>
                v = v|0x80;

                if(pass != NULL) {
   d64e6:	b916      	cbnz	r6, d64ee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x126>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d64e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d64ec:	e001      	b.n	d64f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d64ee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d64f2:	69e1      	ldr	r1, [r4, #28]
   d64f4:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d64f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d64f8:	69e1      	ldr	r1, [r4, #28]
   d64fa:	1c58      	adds	r0, r3, #1
   d64fc:	1212      	asrs	r2, r2, #8
   d64fe:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d6500:	1c9a      	adds	r2, r3, #2
   d6502:	69e1      	ldr	r1, [r4, #28]
   d6504:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d6506:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d6508:	3303      	adds	r3, #3
   d650a:	69e2      	ldr	r2, [r4, #28]
   d650c:	4649      	mov	r1, r9
   d650e:	4620      	mov	r0, r4
   d6510:	f7ff fb3a 	bl	d5b88 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d6514:	f1b8 0f00 	cmp.w	r8, #0
   d6518:	d00b      	beq.n	d6532 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x16a>
                length = writeString(willTopic, buffer, length);
   d651a:	4603      	mov	r3, r0
   d651c:	69e2      	ldr	r2, [r4, #28]
   d651e:	4641      	mov	r1, r8
   d6520:	4620      	mov	r0, r4
   d6522:	f7ff fb31 	bl	d5b88 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d6526:	69e2      	ldr	r2, [r4, #28]
   d6528:	9917      	ldr	r1, [sp, #92]	; 0x5c
   d652a:	4603      	mov	r3, r0
   d652c:	4620      	mov	r0, r4
   d652e:	f7ff fb2b 	bl	d5b88 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d6532:	b167      	cbz	r7, d654e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                length = writeString(user,buffer,length);
   d6534:	4603      	mov	r3, r0
   d6536:	69e2      	ldr	r2, [r4, #28]
   d6538:	4639      	mov	r1, r7
   d653a:	4620      	mov	r0, r4
   d653c:	f7ff fb24 	bl	d5b88 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d6540:	b12e      	cbz	r6, d654e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                    length = writeString(pass,buffer,length);
   d6542:	4603      	mov	r3, r0
   d6544:	69e2      	ldr	r2, [r4, #28]
   d6546:	4631      	mov	r1, r6
   d6548:	4620      	mov	r0, r4
   d654a:	f7ff fb1d 	bl	d5b88 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d654e:	1f43      	subs	r3, r0, #5
   d6550:	b29b      	uxth	r3, r3
   d6552:	69e2      	ldr	r2, [r4, #28]
   d6554:	2110      	movs	r1, #16
   d6556:	4620      	mov	r0, r4
   d6558:	f7ff fb3d 	bl	d5bd6 <_ZN4MQTT5writeEhPht>
   d655c:	f00d fac0 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d6560:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d6564:	6260      	str	r0, [r4, #36]	; 0x24
   d6566:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!available()) {
   d6568:	4620      	mov	r0, r4
   d656a:	f7ff fd2d 	bl	d5fc8 <_ZN4MQTT9availableEv>
   d656e:	4606      	mov	r6, r0
   d6570:	b958      	cbnz	r0, d658a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c2>
   d6572:	f00d fab5 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d6576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6578:	1ac0      	subs	r0, r0, r3
   d657a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d657c:	437b      	muls	r3, r7
   d657e:	4298      	cmp	r0, r3
   d6580:	d9f2      	bls.n	d6568 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
   d6582:	4620      	mov	r0, r4
   d6584:	f7ff fb59 	bl	d5c3a <_ZN4MQTT10disconnectEv>
   d6588:	e00e      	b.n	d65a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e0>
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d658a:	f10d 010f 	add.w	r1, sp, #15
   d658e:	4620      	mov	r0, r4
   d6590:	f7ff fbb8 	bl	d5d04 <_ZN4MQTT10readPacketEPh>

            if (len == 4 && buffer[3] == 0) {
   d6594:	2804      	cmp	r0, #4
   d6596:	d109      	bne.n	d65ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
   d6598:	69e3      	ldr	r3, [r4, #28]
   d659a:	78df      	ldrb	r7, [r3, #3]
   d659c:	b937      	cbnz	r7, d65ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
   d659e:	f00d fa9f 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
                lastInActivity = millis();
                pingOutstanding = false;
   d65a2:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4 && buffer[3] == 0) {
                lastInActivity = millis();
   d65a6:	62a0      	str	r0, [r4, #40]	; 0x28
            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
                    return false;
   d65a8:	4635      	mov	r5, r6
   d65aa:	e004      	b.n	d65b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
                pingOutstanding = false;
                debug_tls("MQTT connected.\n");
                return true;
            }
        }
        disconnect();
   d65ac:	4620      	mov	r0, r4
   d65ae:	f7ff fb44 	bl	d5c3a <_ZN4MQTT10disconnectEv>
   d65b2:	e000      	b.n	d65b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
    }
    return false;
   d65b4:	2500      	movs	r5, #0
}
   d65b6:	4628      	mov	r0, r5
   d65b8:	b00d      	add	sp, #52	; 0x34
   d65ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d65be:	bf00      	nop
   d65c0:	000e75c8 	.word	0x000e75c8
   d65c4:	000e75dd 	.word	0x000e75dd

000d65c8 <_ZN4MQTT7connectEPKcS1_S1_>:

bool MQTT::connect(const char *id) {
    return connect(id,NULL,NULL,0,QOS0,0,0,true,MQTT_V311);
}

bool MQTT::connect(const char *id, const char *user, const char *pass) {
   d65c8:	b510      	push	{r4, lr}
   d65ca:	b086      	sub	sp, #24
    return connect(id,user,pass,0,QOS0,0,0,true,MQTT_V311);
   d65cc:	2404      	movs	r4, #4
   d65ce:	9405      	str	r4, [sp, #20]
   d65d0:	2401      	movs	r4, #1
   d65d2:	9404      	str	r4, [sp, #16]
   d65d4:	2400      	movs	r4, #0
   d65d6:	9403      	str	r4, [sp, #12]
   d65d8:	9402      	str	r4, [sp, #8]
   d65da:	9401      	str	r4, [sp, #4]
   d65dc:	9400      	str	r4, [sp, #0]
   d65de:	f7ff fef3 	bl	d63c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d65e2:	b006      	add	sp, #24
   d65e4:	bd10      	pop	{r4, pc}

000d65e6 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
   d65e6:	f00d ba9b 	b.w	e3b20 <HAL_Pin_Map>
	...

000d65ec <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
   d65ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65f0:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   d65f4:	2301      	movs	r3, #1
   d65f6:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
   d65f8:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
   d65fc:	a904      	add	r1, sp, #16
        log[x] = i;
   d65fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
   d6602:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   d6606:	f013 0180 	ands.w	r1, r3, #128	; 0x80
   d660a:	bf18      	it	ne
   d660c:	211b      	movne	r1, #27
   d660e:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   d6612:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   d6614:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   d6616:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   d661a:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   d661c:	d1ee      	bne.n	d65fc <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
   d661e:	4c66      	ldr	r4, [pc, #408]	; (d67b8 <_ZL14aes_gen_tablesv+0x1cc>)
   d6620:	2301      	movs	r3, #1
   d6622:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
   d6624:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
   d6628:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
   d662c:	bf18      	it	ne
   d662e:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   d6630:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   d6632:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   d6636:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   d6638:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   d663a:	d1f3      	bne.n	d6624 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   d663c:	4e5f      	ldr	r6, [pc, #380]	; (d67bc <_ZL14aes_gen_tablesv+0x1d0>)
    RSb[0x63] = 0x00;
   d663e:	4d60      	ldr	r5, [pc, #384]	; (d67c0 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   d6640:	2363      	movs	r3, #99	; 0x63
   d6642:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
   d6644:	2300      	movs	r3, #0
   d6646:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
   d664a:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
   d664c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6650:	aa04      	add	r2, sp, #16
   d6652:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   d6656:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d665a:	ea4f 11ee 	mov.w	r1, lr, asr #7
   d665e:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
   d6662:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d6664:	11ca      	asrs	r2, r1, #7
   d6666:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
   d666a:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d666c:	11d3      	asrs	r3, r2, #7
   d666e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   d6672:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
   d6674:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d6678:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
   d667a:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   d667e:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
   d6682:	404a      	eors	r2, r1
   d6684:	4053      	eors	r3, r2
   d6686:	b2fa      	uxtb	r2, r7
   d6688:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
   d668a:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
   d668c:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
   d668e:	3401      	adds	r4, #1
   d6690:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   d6694:	d1da      	bne.n	d664c <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   d6696:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d6698:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   d669a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d669c:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   d669e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   d66a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
   d66a2:	f8df e118 	ldr.w	lr, [pc, #280]	; d67bc <_ZL14aes_gen_tablesv+0x1d0>
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
   d66a6:	f8df c12c 	ldr.w	ip, [pc, #300]	; d67d4 <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
   d66aa:	f8df 812c 	ldr.w	r8, [pc, #300]	; d67d8 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
   d66ae:	f8df 912c 	ldr.w	r9, [pc, #300]	; d67dc <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
   d66b2:	f8df a12c 	ldr.w	sl, [pc, #300]	; d67e0 <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
   d66b6:	f8df b108 	ldr.w	fp, [pc, #264]	; d67c0 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   d66ba:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   d66bc:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
   d66be:	f812 000e 	ldrb.w	r0, [r2, lr]
        y = XTIME( x ) & 0xFF;
   d66c2:	f010 0f80 	tst.w	r0, #128	; 0x80
   d66c6:	bf14      	ite	ne
   d66c8:	211b      	movne	r1, #27
   d66ca:	2100      	moveq	r1, #0
   d66cc:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
   d66d0:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
   d66d2:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
   d66d4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d66d8:	404b      	eors	r3, r1
   d66da:	4041      	eors	r1, r0
   d66dc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
   d66e0:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
   d66e4:	ea4f 6333 	mov.w	r3, r3, ror #24
   d66e8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
   d66ec:	ea4f 6333 	mov.w	r3, r3, ror #24
   d66f0:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
   d66f4:	ea4f 6333 	mov.w	r3, r3, ror #24
   d66f8:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
   d66fc:	f81b 3002 	ldrb.w	r3, [fp, r2]
   d6700:	0094      	lsls	r4, r2, #2

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   d6702:	b1d3      	cbz	r3, d673a <_ZL14aes_gen_tablesv+0x14e>
   d6704:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   d6708:	9801      	ldr	r0, [sp, #4]
   d670a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   d670e:	1845      	adds	r5, r0, r1
   d6710:	20ff      	movs	r0, #255	; 0xff
   d6712:	fb95 f6f0 	sdiv	r6, r5, r0
   d6716:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
   d671a:	1bae      	subs	r6, r5, r6
   d671c:	ad04      	add	r5, sp, #16
   d671e:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   d6722:	9e02      	ldr	r6, [sp, #8]
   d6724:	4431      	add	r1, r6
   d6726:	fb91 f0f0 	sdiv	r0, r1, r0
   d672a:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   d672e:	1a09      	subs	r1, r1, r0
   d6730:	a804      	add	r0, sp, #16
   d6732:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   d6736:	0209      	lsls	r1, r1, #8
   d6738:	e001      	b.n	d673e <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   d673a:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   d673c:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   d673e:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   d6740:	b183      	cbz	r3, d6764 <_ZL14aes_gen_tablesv+0x178>
   d6742:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   d6746:	9803      	ldr	r0, [sp, #12]
   d6748:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   d674c:	4401      	add	r1, r0
   d674e:	20ff      	movs	r0, #255	; 0xff
   d6750:	fb91 f0f0 	sdiv	r0, r1, r0
   d6754:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   d6758:	1a08      	subs	r0, r1, r0
   d675a:	a904      	add	r1, sp, #16
   d675c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d6760:	0409      	lsls	r1, r1, #16
   d6762:	e000      	b.n	d6766 <_ZL14aes_gen_tablesv+0x17a>
   d6764:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   d6766:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   d6768:	b173      	cbz	r3, d6788 <_ZL14aes_gen_tablesv+0x19c>
   d676a:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   d676e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   d6772:	21ff      	movs	r1, #255	; 0xff
   d6774:	443b      	add	r3, r7
   d6776:	fb93 f1f1 	sdiv	r1, r3, r1
   d677a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
   d677e:	1a59      	subs	r1, r3, r1
   d6780:	ab04      	add	r3, sp, #16
   d6782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d6786:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   d6788:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   d678a:	4b0e      	ldr	r3, [pc, #56]	; (d67c4 <_ZL14aes_gen_tablesv+0x1d8>)
   d678c:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
   d678e:	4b0e      	ldr	r3, [pc, #56]	; (d67c8 <_ZL14aes_gen_tablesv+0x1dc>)
   d6790:	ea4f 6535 	mov.w	r5, r5, ror #24
   d6794:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
   d6796:	4b0d      	ldr	r3, [pc, #52]	; (d67cc <_ZL14aes_gen_tablesv+0x1e0>)
   d6798:	ea4f 6535 	mov.w	r5, r5, ror #24
   d679c:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   d679e:	3201      	adds	r2, #1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
   d67a0:	4b0b      	ldr	r3, [pc, #44]	; (d67d0 <_ZL14aes_gen_tablesv+0x1e4>)
   d67a2:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   d67a6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
   d67aa:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   d67ac:	d187      	bne.n	d66be <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
   d67ae:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
   d67b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67b6:	bf00      	nop
   d67b8:	2003e490 	.word	0x2003e490
   d67bc:	2003d390 	.word	0x2003d390
   d67c0:	2003d290 	.word	0x2003d290
   d67c4:	2003d890 	.word	0x2003d890
   d67c8:	2003dc90 	.word	0x2003dc90
   d67cc:	2003e090 	.word	0x2003e090
   d67d0:	2003d490 	.word	0x2003d490
   d67d4:	2003c290 	.word	0x2003c290
   d67d8:	2003c690 	.word	0x2003c690
   d67dc:	2003ca90 	.word	0x2003ca90
   d67e0:	2003ce90 	.word	0x2003ce90

000d67e4 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
   d67e4:	f44f 728c 	mov.w	r2, #280	; 0x118
   d67e8:	2100      	movs	r1, #0
   d67ea:	f010 b9d2 	b.w	e6b92 <memset>

000d67ee <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
   d67ee:	b138      	cbz	r0, d6800 <mbedtls_aes_free+0x12>
   d67f0:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
   d67f4:	2300      	movs	r3, #0
   d67f6:	4290      	cmp	r0, r2
   d67f8:	d002      	beq.n	d6800 <mbedtls_aes_free+0x12>
   d67fa:	7003      	strb	r3, [r0, #0]
   d67fc:	3001      	adds	r0, #1
   d67fe:	e7fa      	b.n	d67f6 <mbedtls_aes_free+0x8>
   d6800:	4770      	bx	lr
	...

000d6804 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   d6804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   d6806:	4e79      	ldr	r6, [pc, #484]	; (d69ec <mbedtls_aes_setkey_enc+0x1e8>)
   d6808:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   d680a:	4604      	mov	r4, r0
   d680c:	460f      	mov	r7, r1
   d680e:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   d6810:	b91b      	cbnz	r3, d681a <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
   d6812:	f7ff feeb 	bl	d65ec <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
   d6816:	2301      	movs	r3, #1
   d6818:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
   d681a:	2dc0      	cmp	r5, #192	; 0xc0
   d681c:	d007      	beq.n	d682e <mbedtls_aes_setkey_enc+0x2a>
   d681e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   d6822:	d006      	beq.n	d6832 <mbedtls_aes_setkey_enc+0x2e>
   d6824:	2d80      	cmp	r5, #128	; 0x80
   d6826:	f040 80db 	bne.w	d69e0 <mbedtls_aes_setkey_enc+0x1dc>
    {
        case 128: ctx->nr = 10; break;
   d682a:	230a      	movs	r3, #10
   d682c:	e002      	b.n	d6834 <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
   d682e:	230c      	movs	r3, #12
   d6830:	e000      	b.n	d6834 <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
   d6832:	230e      	movs	r3, #14
   d6834:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   d6836:	f104 0308 	add.w	r3, r4, #8
   d683a:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   d683c:	096d      	lsrs	r5, r5, #5
   d683e:	2000      	movs	r0, #0
   d6840:	42a8      	cmp	r0, r5
   d6842:	d010      	beq.n	d6866 <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
   d6844:	eb07 0180 	add.w	r1, r7, r0, lsl #2
   d6848:	788a      	ldrb	r2, [r1, #2]
   d684a:	784e      	ldrb	r6, [r1, #1]
   d684c:	78c9      	ldrb	r1, [r1, #3]
   d684e:	0412      	lsls	r2, r2, #16
   d6850:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   d6854:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
   d6858:	4332      	orrs	r2, r6
   d685a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   d685e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   d6862:	3001      	adds	r0, #1
   d6864:	e7ec      	b.n	d6840 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   d6866:	6822      	ldr	r2, [r4, #0]
   d6868:	2a0c      	cmp	r2, #12
   d686a:	d031      	beq.n	d68d0 <mbedtls_aes_setkey_enc+0xcc>
   d686c:	2a0e      	cmp	r2, #14
   d686e:	d066      	beq.n	d693e <mbedtls_aes_setkey_enc+0x13a>
   d6870:	2a0a      	cmp	r2, #10
   d6872:	f040 80b8 	bne.w	d69e6 <mbedtls_aes_setkey_enc+0x1e2>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
   d6876:	4f5e      	ldr	r7, [pc, #376]	; (d69f0 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   d6878:	4e5e      	ldr	r6, [pc, #376]	; (d69f4 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   d687a:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   d687c:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   d687e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   d6882:	681a      	ldr	r2, [r3, #0]
   d6884:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   d6886:	f3c4 2207 	ubfx	r2, r4, #8, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   d688a:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   d688c:	5cb0      	ldrb	r0, [r6, r2]
   d688e:	0e22      	lsrs	r2, r4, #24
   d6890:	4041      	eors	r1, r0
   d6892:	5cb2      	ldrb	r2, [r6, r2]
   d6894:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   d6898:	b2e2      	uxtb	r2, r4

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   d689a:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   d689c:	5cb2      	ldrb	r2, [r6, r2]
   d689e:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
   d68a2:	f3c4 4207 	ubfx	r2, r4, #16, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   d68a6:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   d68aa:	5cb2      	ldrb	r2, [r6, r2]
   d68ac:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
   d68b0:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   d68b4:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
   d68b6:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
   d68ba:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
   d68be:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
   d68c0:	ea82 0201 	eor.w	r2, r2, r1
   d68c4:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
   d68c6:	ea82 0204 	eor.w	r2, r2, r4
   d68ca:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   d68cc:	d1d6      	bne.n	d687c <mbedtls_aes_setkey_enc+0x78>
   d68ce:	e08a      	b.n	d69e6 <mbedtls_aes_setkey_enc+0x1e2>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
   d68d0:	4e47      	ldr	r6, [pc, #284]	; (d69f0 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   d68d2:	4d48      	ldr	r5, [pc, #288]	; (d69f4 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   d68d4:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d68d6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   d68da:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d68dc:	681a      	ldr	r2, [r3, #0]
   d68de:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   d68e0:	f3c0 2107 	ubfx	r1, r0, #8, #8
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   d68e4:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d68e6:	5c69      	ldrb	r1, [r5, r1]
   d68e8:	404a      	eors	r2, r1
   d68ea:	0e01      	lsrs	r1, r0, #24
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   d68ec:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d68ee:	5c69      	ldrb	r1, [r5, r1]
   d68f0:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   d68f4:	b2c1      	uxtb	r1, r0
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   d68f6:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d68fa:	5c69      	ldrb	r1, [r5, r1]
   d68fc:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
   d6900:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   d6904:	5c69      	ldrb	r1, [r5, r1]
   d6906:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
   d690a:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   d690e:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
   d6910:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
   d6914:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
   d6918:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
   d691a:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
   d691e:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
   d6922:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
   d6924:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
   d6928:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
   d692c:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
   d692e:	ea82 0201 	eor.w	r2, r2, r1
   d6932:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
   d6934:	ea82 0200 	eor.w	r2, r2, r0
   d6938:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   d693a:	d1cc      	bne.n	d68d6 <mbedtls_aes_setkey_enc+0xd2>
   d693c:	e053      	b.n	d69e6 <mbedtls_aes_setkey_enc+0x1e2>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
   d693e:	4e2c      	ldr	r6, [pc, #176]	; (d69f0 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   d6940:	482c      	ldr	r0, [pc, #176]	; (d69f4 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   d6942:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d6944:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   d6948:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d694a:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
   d694c:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d694e:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   d6950:	f3c4 2207 	ubfx	r2, r4, #8, #8
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   d6954:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d6956:	5c82      	ldrb	r2, [r0, r2]
   d6958:	4051      	eors	r1, r2
   d695a:	0e22      	lsrs	r2, r4, #24
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   d695c:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d695e:	5c82      	ldrb	r2, [r0, r2]
   d6960:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   d6964:	b2e2      	uxtb	r2, r4
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   d6966:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d696a:	5c82      	ldrb	r2, [r0, r2]
   d696c:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
   d6970:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   d6974:	5c82      	ldrb	r2, [r0, r2]
   d6976:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
   d697a:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   d697e:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
   d6980:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
   d6984:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
   d6988:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
   d698a:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
   d698e:	ea87 0701 	eor.w	r7, r7, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
   d6992:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
   d6994:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
   d6996:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   d6998:	5c82      	ldrb	r2, [r0, r2]
   d699a:	f853 1c10 	ldr.w	r1, [r3, #-16]
   d699e:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   d69a2:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   d69a6:	5c82      	ldrb	r2, [r0, r2]
   d69a8:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
   d69ac:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   d69b0:	f3c7 4707 	ubfx	r7, r7, #16, #8
   d69b4:	5c82      	ldrb	r2, [r0, r2]
   d69b6:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
   d69ba:	5dc2      	ldrb	r2, [r0, r7]
   d69bc:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
   d69c0:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   d69c4:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
   d69c6:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
   d69ca:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
   d69ce:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
   d69d0:	ea82 0201 	eor.w	r2, r2, r1
   d69d4:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
   d69d6:	ea82 0204 	eor.w	r2, r2, r4
   d69da:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   d69dc:	d1b2      	bne.n	d6944 <mbedtls_aes_setkey_enc+0x140>
   d69de:	e002      	b.n	d69e6 <mbedtls_aes_setkey_enc+0x1e2>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
   d69e0:	f06f 001f 	mvn.w	r0, #31
   d69e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
   d69e6:	2000      	movs	r0, #0
}
   d69e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d69ea:	bf00      	nop
   d69ec:	2003c28c 	.word	0x2003c28c
   d69f0:	2003e490 	.word	0x2003e490
   d69f4:	2003d390 	.word	0x2003d390

000d69f8 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   d69f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d69fc:	b0c9      	sub	sp, #292	; 0x124
   d69fe:	4604      	mov	r4, r0
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
   d6a00:	a802      	add	r0, sp, #8
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   d6a02:	460d      	mov	r5, r1
   d6a04:	4616      	mov	r6, r2
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
   d6a06:	f7ff feed 	bl	d67e4 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   d6a0a:	f104 0308 	add.w	r3, r4, #8
   d6a0e:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   d6a10:	4632      	mov	r2, r6
   d6a12:	4629      	mov	r1, r5
   d6a14:	a802      	add	r0, sp, #8
   d6a16:	f7ff fef5 	bl	d6804 <mbedtls_aes_setkey_enc>
   d6a1a:	4680      	mov	r8, r0
   d6a1c:	2800      	cmp	r0, #0
   d6a1e:	d14c      	bne.n	d6aba <mbedtls_aes_setkey_dec+0xc2>
        goto exit;

    ctx->nr = cty.nr;
   d6a20:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   d6a22:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
   d6a24:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   d6a26:	010a      	lsls	r2, r1, #4
   d6a28:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
   d6a2a:	5882      	ldr	r2, [r0, r2]
   d6a2c:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
   d6a2e:	685a      	ldr	r2, [r3, #4]
   d6a30:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
   d6a32:	689a      	ldr	r2, [r3, #8]
   d6a34:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
   d6a36:	68d8      	ldr	r0, [r3, #12]
   d6a38:	6160      	str	r0, [r4, #20]
   d6a3a:	f104 0218 	add.w	r2, r4, #24
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
   d6a3e:	f8df c090 	ldr.w	ip, [pc, #144]	; d6ad0 <mbedtls_aes_setkey_dec+0xd8>

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
   d6a42:	4c21      	ldr	r4, [pc, #132]	; (d6ac8 <mbedtls_aes_setkey_dec+0xd0>)
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
   d6a44:	f8df 908c 	ldr.w	r9, [pc, #140]	; d6ad4 <mbedtls_aes_setkey_dec+0xdc>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
   d6a48:	f8df a08c 	ldr.w	sl, [pc, #140]	; d6ad8 <mbedtls_aes_setkey_dec+0xe0>
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   d6a4c:	3901      	subs	r1, #1
   d6a4e:	3b10      	subs	r3, #16
   d6a50:	2900      	cmp	r1, #0
   d6a52:	dd2a      	ble.n	d6aaa <mbedtls_aes_setkey_dec+0xb2>
   d6a54:	1f1d      	subs	r5, r3, #4
   d6a56:	f1a2 0e04 	sub.w	lr, r2, #4
   d6a5a:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
   d6a5e:	f855 0f04 	ldr.w	r0, [r5, #4]!
   d6a62:	b2c6      	uxtb	r6, r0
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
   d6a64:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
   d6a66:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
   d6a68:	ea4f 6610 	mov.w	r6, r0, lsr #24
   d6a6c:	5da6      	ldrb	r6, [r4, r6]
   d6a6e:	9601      	str	r6, [sp, #4]
   d6a70:	4e16      	ldr	r6, [pc, #88]	; (d6acc <mbedtls_aes_setkey_dec+0xd4>)
   d6a72:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
   d6a76:	9e01      	ldr	r6, [sp, #4]
   d6a78:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d6a7c:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
   d6a80:	f3c0 2607 	ubfx	r6, r0, #8, #8
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
   d6a84:	f3c0 4007 	ubfx	r0, r0, #16, #8
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
   d6a88:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
   d6a8a:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
   d6a8c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d6a90:	ea86 0607 	eor.w	r6, r6, r7
   d6a94:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
   d6a98:	ea86 0607 	eor.w	r6, r6, r7
   d6a9c:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
   d6aa0:	d1dd      	bne.n	d6a5e <mbedtls_aes_setkey_dec+0x66>
   d6aa2:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   d6aa4:	3901      	subs	r1, #1
   d6aa6:	3b10      	subs	r3, #16
   d6aa8:	e7d2      	b.n	d6a50 <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
   d6aaa:	6819      	ldr	r1, [r3, #0]
   d6aac:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
   d6aae:	6859      	ldr	r1, [r3, #4]
   d6ab0:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
   d6ab2:	6899      	ldr	r1, [r3, #8]
   d6ab4:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
   d6ab6:	68db      	ldr	r3, [r3, #12]
   d6ab8:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
   d6aba:	a802      	add	r0, sp, #8
   d6abc:	f7ff fe97 	bl	d67ee <mbedtls_aes_free>

    return( ret );
}
   d6ac0:	4640      	mov	r0, r8
   d6ac2:	b049      	add	sp, #292	; 0x124
   d6ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ac8:	2003d390 	.word	0x2003d390
   d6acc:	2003d890 	.word	0x2003d890
   d6ad0:	2003d490 	.word	0x2003d490
   d6ad4:	2003dc90 	.word	0x2003dc90
   d6ad8:	2003e090 	.word	0x2003e090

000d6adc <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   d6adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   d6ae0:	6846      	ldr	r6, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   d6ae2:	680c      	ldr	r4, [r1, #0]
   d6ae4:	6833      	ldr	r3, [r6, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   d6ae6:	688d      	ldr	r5, [r1, #8]
   d6ae8:	f8df c374 	ldr.w	ip, [pc, #884]	; d6e60 <mbedtls_internal_aes_encrypt+0x384>
   d6aec:	f8df e374 	ldr.w	lr, [pc, #884]	; d6e64 <mbedtls_internal_aes_encrypt+0x388>
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6af0:	4fd8      	ldr	r7, [pc, #864]	; (d6e54 <mbedtls_internal_aes_encrypt+0x378>)
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   d6af2:	ea84 0b03 	eor.w	fp, r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   d6af6:	684c      	ldr	r4, [r1, #4]
   d6af8:	6873      	ldr	r3, [r6, #4]
   d6afa:	4063      	eors	r3, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   d6afc:	68b4      	ldr	r4, [r6, #8]
   d6afe:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   d6b00:	68cd      	ldr	r5, [r1, #12]
   d6b02:	68f1      	ldr	r1, [r6, #12]
   d6b04:	404d      	eors	r5, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d6b06:	6801      	ldr	r1, [r0, #0]
   d6b08:	1049      	asrs	r1, r1, #1
   d6b0a:	3901      	subs	r1, #1
   d6b0c:	9101      	str	r1, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   d6b0e:	f106 0110 	add.w	r1, r6, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d6b12:	9e01      	ldr	r6, [sp, #4]
   d6b14:	f8df 9348 	ldr.w	r9, [pc, #840]	; d6e60 <mbedtls_internal_aes_encrypt+0x384>
   d6b18:	f8df 8348 	ldr.w	r8, [pc, #840]	; d6e64 <mbedtls_internal_aes_encrypt+0x388>
   d6b1c:	2e00      	cmp	r6, #0
   d6b1e:	4608      	mov	r0, r1
   d6b20:	fa5f f68b 	uxtb.w	r6, fp
   d6b24:	f101 0120 	add.w	r1, r1, #32
   d6b28:	ea4f 6a15 	mov.w	sl, r5, lsr #24
   d6b2c:	f340 80be 	ble.w	d6cac <mbedtls_internal_aes_encrypt+0x1d0>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6b30:	f85e 002a 	ldr.w	r0, [lr, sl, lsl #2]
   d6b34:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
   d6b38:	4ec7      	ldr	r6, [pc, #796]	; (d6e58 <mbedtls_internal_aes_encrypt+0x37c>)
   d6b3a:	ea88 0800 	eor.w	r8, r8, r0
   d6b3e:	f851 0c20 	ldr.w	r0, [r1, #-32]
   d6b42:	ea88 0800 	eor.w	r8, r8, r0
   d6b46:	f3c3 2007 	ubfx	r0, r3, #8, #8
   d6b4a:	fa5f f983 	uxtb.w	r9, r3
   d6b4e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
   d6b52:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
   d6b56:	ea88 0000 	eor.w	r0, r8, r0
   d6b5a:	f3c4 4807 	ubfx	r8, r4, #16, #8
   d6b5e:	fa5f fa84 	uxtb.w	sl, r4
   d6b62:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
   d6b66:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   d6b6a:	ea80 0808 	eor.w	r8, r0, r8
   d6b6e:	ea4f 601b 	mov.w	r0, fp, lsr #24
   d6b72:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   d6b76:	ea89 0900 	eor.w	r9, r9, r0
   d6b7a:	f851 0c1c 	ldr.w	r0, [r1, #-28]
   d6b7e:	ea89 0000 	eor.w	r0, r9, r0
   d6b82:	f3c4 2907 	ubfx	r9, r4, #8, #8
   d6b86:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
   d6b8a:	ea80 0009 	eor.w	r0, r0, r9
   d6b8e:	f3c5 4907 	ubfx	r9, r5, #16, #8
   d6b92:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
   d6b96:	ea80 0909 	eor.w	r9, r0, r9
   d6b9a:	0e18      	lsrs	r0, r3, #24
   d6b9c:	f3c3 4307 	ubfx	r3, r3, #16, #8
   d6ba0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   d6ba4:	ea8a 0a00 	eor.w	sl, sl, r0
   d6ba8:	f851 0c18 	ldr.w	r0, [r1, #-24]
   d6bac:	ea8a 0000 	eor.w	r0, sl, r0
   d6bb0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
   d6bb4:	b2ed      	uxtb	r5, r5
   d6bb6:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d6bba:	ea80 000a 	eor.w	r0, r0, sl
   d6bbe:	f3cb 4a07 	ubfx	sl, fp, #16, #8
   d6bc2:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d6bc6:	ea80 000a 	eor.w	r0, r0, sl
   d6bca:	ea4f 6a14 	mov.w	sl, r4, lsr #24
   d6bce:	f85c 4025 	ldr.w	r4, [ip, r5, lsl #2]
   d6bd2:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   d6bd6:	4065      	eors	r5, r4
   d6bd8:	f851 4c14 	ldr.w	r4, [r1, #-20]
   d6bdc:	406c      	eors	r4, r5
   d6bde:	f3cb 2507 	ubfx	r5, fp, #8, #8
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d6be2:	fa5f fa80 	uxtb.w	sl, r0
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6be6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d6bea:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6bee:	406c      	eors	r4, r5
   d6bf0:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
   d6bf4:	4065      	eors	r5, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d6bf6:	0e2b      	lsrs	r3, r5, #24
   d6bf8:	fa5f f488 	uxtb.w	r4, r8
   d6bfc:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d6c00:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
   d6c04:	405c      	eors	r4, r3
   d6c06:	f851 3c10 	ldr.w	r3, [r1, #-16]
   d6c0a:	4063      	eors	r3, r4
   d6c0c:	f3c9 2407 	ubfx	r4, r9, #8, #8
   d6c10:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   d6c14:	4063      	eors	r3, r4
   d6c16:	f3c0 4407 	ubfx	r4, r0, #16, #8
   d6c1a:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   d6c1e:	ea83 0b04 	eor.w	fp, r3, r4
   d6c22:	fa5f f489 	uxtb.w	r4, r9
   d6c26:	ea4f 6318 	mov.w	r3, r8, lsr #24
   d6c2a:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
   d6c2e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d6c32:	405c      	eors	r4, r3
   d6c34:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   d6c38:	4063      	eors	r3, r4
   d6c3a:	f3c0 2407 	ubfx	r4, r0, #8, #8
   d6c3e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   d6c42:	4063      	eors	r3, r4
   d6c44:	f3c5 4407 	ubfx	r4, r5, #16, #8
   d6c48:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   d6c4c:	4063      	eors	r3, r4
   d6c4e:	ea4f 6419 	mov.w	r4, r9, lsr #24
   d6c52:	f3c9 4907 	ubfx	r9, r9, #16, #8
   d6c56:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   d6c5a:	ea8a 0a04 	eor.w	sl, sl, r4
   d6c5e:	f851 4c08 	ldr.w	r4, [r1, #-8]
   d6c62:	ea8a 0404 	eor.w	r4, sl, r4
   d6c66:	f3c5 2a07 	ubfx	sl, r5, #8, #8
   d6c6a:	b2ed      	uxtb	r5, r5
   d6c6c:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d6c70:	ea84 040a 	eor.w	r4, r4, sl
   d6c74:	f3c8 4a07 	ubfx	sl, r8, #16, #8
   d6c78:	f3c8 2807 	ubfx	r8, r8, #8, #8
   d6c7c:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d6c80:	ea84 040a 	eor.w	r4, r4, sl
   d6c84:	ea4f 6a10 	mov.w	sl, r0, lsr #24
   d6c88:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
   d6c8c:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   d6c90:	4045      	eors	r5, r0
   d6c92:	f851 0c04 	ldr.w	r0, [r1, #-4]
   d6c96:	4068      	eors	r0, r5
   d6c98:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
   d6c9c:	4068      	eors	r0, r5
   d6c9e:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
   d6ca2:	4045      	eors	r5, r0
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d6ca4:	9801      	ldr	r0, [sp, #4]
   d6ca6:	3801      	subs	r0, #1
   d6ca8:	9001      	str	r0, [sp, #4]
   d6caa:	e732      	b.n	d6b12 <mbedtls_internal_aes_encrypt+0x36>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6cac:	f858 102a 	ldr.w	r1, [r8, sl, lsl #2]
   d6cb0:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   d6cb4:	f8df c19c 	ldr.w	ip, [pc, #412]	; d6e54 <mbedtls_internal_aes_encrypt+0x378>
   d6cb8:	f8df e19c 	ldr.w	lr, [pc, #412]	; d6e58 <mbedtls_internal_aes_encrypt+0x37c>
   d6cbc:	f3c3 2607 	ubfx	r6, r3, #8, #8
   d6cc0:	404f      	eors	r7, r1
   d6cc2:	6801      	ldr	r1, [r0, #0]
   d6cc4:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d6cc8:	4079      	eors	r1, r7
   d6cca:	4071      	eors	r1, r6
   d6ccc:	f3c4 4607 	ubfx	r6, r4, #16, #8
   d6cd0:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
   d6cd4:	b2de      	uxtb	r6, r3
   d6cd6:	404f      	eors	r7, r1
   d6cd8:	ea4f 611b 	mov.w	r1, fp, lsr #24
   d6cdc:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d6ce0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
   d6ce4:	ea86 0a01 	eor.w	sl, r6, r1
   d6ce8:	f3c4 2607 	ubfx	r6, r4, #8, #8
   d6cec:	6841      	ldr	r1, [r0, #4]
   d6cee:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d6cf2:	ea8a 0101 	eor.w	r1, sl, r1
   d6cf6:	4071      	eors	r1, r6
   d6cf8:	f3c5 4607 	ubfx	r6, r5, #16, #8
   d6cfc:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   d6d00:	ea81 0a06 	eor.w	sl, r1, r6
   d6d04:	b2e6      	uxtb	r6, r4
   d6d06:	0e19      	lsrs	r1, r3, #24
   d6d08:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d6d0c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
   d6d10:	4071      	eors	r1, r6
   d6d12:	6886      	ldr	r6, [r0, #8]
   d6d14:	404e      	eors	r6, r1
   d6d16:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d6d1a:	0e24      	lsrs	r4, r4, #24
   d6d1c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   d6d20:	404e      	eors	r6, r1
   d6d22:	f3cb 4107 	ubfx	r1, fp, #16, #8
   d6d26:	b2ed      	uxtb	r5, r5
   d6d28:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   d6d2c:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
   d6d30:	404e      	eors	r6, r1
   d6d32:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
   d6d36:	68c4      	ldr	r4, [r0, #12]
   d6d38:	4069      	eors	r1, r5
   d6d3a:	404c      	eors	r4, r1
   d6d3c:	f3cb 2107 	ubfx	r1, fp, #8, #8
   d6d40:	f3c3 4307 	ubfx	r3, r3, #16, #8
   d6d44:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   d6d48:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d6d4c:	404c      	eors	r4, r1
   d6d4e:	405c      	eors	r4, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
   d6d50:	b2f9      	uxtb	r1, r7
   d6d52:	4b42      	ldr	r3, [pc, #264]	; (d6e5c <mbedtls_internal_aes_encrypt+0x380>)
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   d6d54:	0e25      	lsrs	r5, r4, #24
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   d6d56:	f813 e001 	ldrb.w	lr, [r3, r1]
   d6d5a:	6901      	ldr	r1, [r0, #16]
   d6d5c:	ea8e 0101 	eor.w	r1, lr, r1
   d6d60:	f813 e005 	ldrb.w	lr, [r3, r5]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   d6d64:	f3ca 2507 	ubfx	r5, sl, #8, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   d6d68:	ea81 610e 	eor.w	r1, r1, lr, lsl #24
   d6d6c:	f813 e005 	ldrb.w	lr, [r3, r5]
   d6d70:	f3c6 4507 	ubfx	r5, r6, #16, #8
   d6d74:	ea81 210e 	eor.w	r1, r1, lr, lsl #8
   d6d78:	f813 e005 	ldrb.w	lr, [r3, r5]
   d6d7c:	ea81 4e0e 	eor.w	lr, r1, lr, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
   d6d80:	fa5f f18a 	uxtb.w	r1, sl
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d6d84:	5c5d      	ldrb	r5, [r3, r1]
   d6d86:	6941      	ldr	r1, [r0, #20]
   d6d88:	4069      	eors	r1, r5
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   d6d8a:	0e3d      	lsrs	r5, r7, #24
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d6d8c:	5d5d      	ldrb	r5, [r3, r5]
   d6d8e:	ea81 6105 	eor.w	r1, r1, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   d6d92:	f3c6 2507 	ubfx	r5, r6, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d6d96:	5d5d      	ldrb	r5, [r3, r5]
   d6d98:	ea81 2105 	eor.w	r1, r1, r5, lsl #8
   d6d9c:	f3c4 4507 	ubfx	r5, r4, #16, #8
   d6da0:	5d5d      	ldrb	r5, [r3, r5]
   d6da2:	ea81 4505 	eor.w	r5, r1, r5, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
   d6da6:	b2f1      	uxtb	r1, r6

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   d6da8:	0e36      	lsrs	r6, r6, #24
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d6daa:	f813 c001 	ldrb.w	ip, [r3, r1]
   d6dae:	6981      	ldr	r1, [r0, #24]
   d6db0:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   d6db4:	ea4f 6c1a 	mov.w	ip, sl, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d6db8:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d6dbc:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d6dc0:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   d6dc4:	f3c4 2c07 	ubfx	ip, r4, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
   d6dc8:	b2e4      	uxtb	r4, r4
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d6dca:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d6dce:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d6dd0:	ea81 210c 	eor.w	r1, r1, ip, lsl #8
   d6dd4:	f3c7 4c07 	ubfx	ip, r7, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   d6dd8:	f3c7 2707 	ubfx	r7, r7, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d6ddc:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d6de0:	ea81 4c0c 	eor.w	ip, r1, ip, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d6de4:	69c1      	ldr	r1, [r0, #28]
   d6de6:	ea84 0001 	eor.w	r0, r4, r1
   d6dea:	5d99      	ldrb	r1, [r3, r6]
   d6dec:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
   d6df0:	5dd9      	ldrb	r1, [r3, r7]
   d6df2:	f813 300a 	ldrb.w	r3, [r3, sl]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d6df6:	f882 e000 	strb.w	lr, [r2]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d6dfa:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d6dfe:	ea4f 211e 	mov.w	r1, lr, lsr #8
   d6e02:	7051      	strb	r1, [r2, #1]
   d6e04:	ea4f 411e 	mov.w	r1, lr, lsr #16
   d6e08:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
   d6e0a:	0a29      	lsrs	r1, r5, #8
   d6e0c:	7151      	strb	r1, [r2, #5]
   d6e0e:	0c29      	lsrs	r1, r5, #16
   d6e10:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   d6e12:	ea4f 211c 	mov.w	r1, ip, lsr #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d6e16:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
   d6e1a:	7251      	strb	r1, [r2, #9]
   d6e1c:	ea4f 411c 	mov.w	r1, ip, lsr #16
   d6e20:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   d6e22:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d6e24:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
   d6e28:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   d6e2a:	f882 c008 	strb.w	ip, [r2, #8]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
   d6e2e:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
   d6e30:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
   d6e34:	7313      	strb	r3, [r2, #12]
   d6e36:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   d6e38:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
   d6e3a:	0c19      	lsrs	r1, r3, #16
   d6e3c:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d6e3e:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   d6e42:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   d6e44:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   d6e48:	7391      	strb	r1, [r2, #14]
   d6e4a:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
   d6e4c:	b003      	add	sp, #12
   d6e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e52:	bf00      	nop
   d6e54:	2003c690 	.word	0x2003c690
   d6e58:	2003ca90 	.word	0x2003ca90
   d6e5c:	2003d390 	.word	0x2003d390
   d6e60:	2003c290 	.word	0x2003c290
   d6e64:	2003ce90 	.word	0x2003ce90

000d6e68 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   d6e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   d6e6c:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   d6e6e:	680c      	ldr	r4, [r1, #0]
   d6e70:	682b      	ldr	r3, [r5, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   d6e72:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d6e74:	6800      	ldr	r0, [r0, #0]
   d6e76:	f8df c374 	ldr.w	ip, [pc, #884]	; d71ec <mbedtls_internal_aes_decrypt+0x384>
   d6e7a:	f8df e374 	ldr.w	lr, [pc, #884]	; d71f0 <mbedtls_internal_aes_decrypt+0x388>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6e7e:	4fd8      	ldr	r7, [pc, #864]	; (d71e0 <mbedtls_internal_aes_decrypt+0x378>)
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   d6e80:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   d6e82:	686b      	ldr	r3, [r5, #4]
   d6e84:	ea86 0b03 	eor.w	fp, r6, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   d6e88:	688e      	ldr	r6, [r1, #8]
   d6e8a:	68ab      	ldr	r3, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d6e8c:	1040      	asrs	r0, r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   d6e8e:	4073      	eors	r3, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   d6e90:	68ce      	ldr	r6, [r1, #12]
   d6e92:	68e9      	ldr	r1, [r5, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d6e94:	3801      	subs	r0, #1
   d6e96:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   d6e98:	4071      	eors	r1, r6
   d6e9a:	f105 0010 	add.w	r0, r5, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d6e9e:	9e01      	ldr	r6, [sp, #4]
   d6ea0:	f8df 9348 	ldr.w	r9, [pc, #840]	; d71ec <mbedtls_internal_aes_decrypt+0x384>
   d6ea4:	f8df 8348 	ldr.w	r8, [pc, #840]	; d71f0 <mbedtls_internal_aes_decrypt+0x388>
   d6ea8:	2e00      	cmp	r6, #0
   d6eaa:	4605      	mov	r5, r0
   d6eac:	b2e6      	uxtb	r6, r4
   d6eae:	f100 0020 	add.w	r0, r0, #32
   d6eb2:	ea4f 6a1b 	mov.w	sl, fp, lsr #24
   d6eb6:	f340 80c0 	ble.w	d703a <mbedtls_internal_aes_decrypt+0x1d2>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6eba:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   d6ebe:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
   d6ec2:	4ec8      	ldr	r6, [pc, #800]	; (d71e4 <mbedtls_internal_aes_decrypt+0x37c>)
   d6ec4:	ea88 0805 	eor.w	r8, r8, r5
   d6ec8:	f850 5c20 	ldr.w	r5, [r0, #-32]
   d6ecc:	ea88 0805 	eor.w	r8, r8, r5
   d6ed0:	f3c1 2507 	ubfx	r5, r1, #8, #8
   d6ed4:	fa5f f98b 	uxtb.w	r9, fp
   d6ed8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   d6edc:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
   d6ee0:	ea88 0505 	eor.w	r5, r8, r5
   d6ee4:	f3c3 4807 	ubfx	r8, r3, #16, #8
   d6ee8:	fa5f fa83 	uxtb.w	sl, r3
   d6eec:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
   d6ef0:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   d6ef4:	ea85 0808 	eor.w	r8, r5, r8
   d6ef8:	0e1d      	lsrs	r5, r3, #24
   d6efa:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d6efe:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
   d6f02:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   d6f06:	ea89 0905 	eor.w	r9, r9, r5
   d6f0a:	f850 5c1c 	ldr.w	r5, [r0, #-28]
   d6f0e:	ea89 0505 	eor.w	r5, r9, r5
   d6f12:	f3c4 2907 	ubfx	r9, r4, #8, #8
   d6f16:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
   d6f1a:	ea85 0509 	eor.w	r5, r5, r9
   d6f1e:	f3c1 4907 	ubfx	r9, r1, #16, #8
   d6f22:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
   d6f26:	ea85 0909 	eor.w	r9, r5, r9
   d6f2a:	0e0d      	lsrs	r5, r1, #24
   d6f2c:	b2c9      	uxtb	r1, r1
   d6f2e:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
   d6f32:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   d6f36:	ea8a 0a05 	eor.w	sl, sl, r5
   d6f3a:	f850 5c18 	ldr.w	r5, [r0, #-24]
   d6f3e:	ea8a 0505 	eor.w	r5, sl, r5
   d6f42:	f3cb 2a07 	ubfx	sl, fp, #8, #8
   d6f46:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d6f4a:	ea85 050a 	eor.w	r5, r5, sl
   d6f4e:	f3c4 4a07 	ubfx	sl, r4, #16, #8
   d6f52:	0e24      	lsrs	r4, r4, #24
   d6f54:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d6f58:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   d6f5c:	404c      	eors	r4, r1
   d6f5e:	f850 1c14 	ldr.w	r1, [r0, #-20]
   d6f62:	4061      	eors	r1, r4
   d6f64:	4059      	eors	r1, r3
   d6f66:	f3cb 4307 	ubfx	r3, fp, #16, #8
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d6f6a:	fa5f f488 	uxtb.w	r4, r8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6f6e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d6f72:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6f76:	4059      	eors	r1, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d6f78:	ea4f 6319 	mov.w	r3, r9, lsr #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d6f7c:	ea85 050a 	eor.w	r5, r5, sl
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d6f80:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d6f84:	405c      	eors	r4, r3
   d6f86:	f850 3c10 	ldr.w	r3, [r0, #-16]
   d6f8a:	4063      	eors	r3, r4
   d6f8c:	f3c1 2407 	ubfx	r4, r1, #8, #8
   d6f90:	fa5f fa89 	uxtb.w	sl, r9
   d6f94:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   d6f98:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   d6f9c:	4063      	eors	r3, r4
   d6f9e:	f3c5 4407 	ubfx	r4, r5, #16, #8
   d6fa2:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   d6fa6:	405c      	eors	r4, r3
   d6fa8:	0e2b      	lsrs	r3, r5, #24
   d6faa:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d6fae:	ea8a 0a03 	eor.w	sl, sl, r3
   d6fb2:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   d6fb6:	ea8a 0303 	eor.w	r3, sl, r3
   d6fba:	f3c8 2a07 	ubfx	sl, r8, #8, #8
   d6fbe:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d6fc2:	ea83 030a 	eor.w	r3, r3, sl
   d6fc6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
   d6fca:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d6fce:	ea83 0b0a 	eor.w	fp, r3, sl
   d6fd2:	fa5f fa85 	uxtb.w	sl, r5
   d6fd6:	0e0b      	lsrs	r3, r1, #24
   d6fd8:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   d6fdc:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d6fe0:	ea8a 0a03 	eor.w	sl, sl, r3
   d6fe4:	f850 3c08 	ldr.w	r3, [r0, #-8]
   d6fe8:	ea8a 0303 	eor.w	r3, sl, r3
   d6fec:	f3c9 2a07 	ubfx	sl, r9, #8, #8
   d6ff0:	b2c9      	uxtb	r1, r1
   d6ff2:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   d6ff6:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   d6ffa:	ea83 030a 	eor.w	r3, r3, sl
   d6ffe:	f3c8 4a07 	ubfx	sl, r8, #16, #8
   d7002:	ea4f 6818 	mov.w	r8, r8, lsr #24
   d7006:	f3c5 2507 	ubfx	r5, r5, #8, #8
   d700a:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
   d700e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   d7012:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   d7016:	ea81 0808 	eor.w	r8, r1, r8
   d701a:	f850 1c04 	ldr.w	r1, [r0, #-4]
   d701e:	f3c9 4907 	ubfx	r9, r9, #16, #8
   d7022:	ea88 0101 	eor.w	r1, r8, r1
   d7026:	4069      	eors	r1, r5
   d7028:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
   d702c:	4069      	eors	r1, r5
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d702e:	9d01      	ldr	r5, [sp, #4]
   d7030:	3d01      	subs	r5, #1
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   d7032:	ea83 030a 	eor.w	r3, r3, sl
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   d7036:	9501      	str	r5, [sp, #4]
   d7038:	e731      	b.n	d6e9e <mbedtls_internal_aes_decrypt+0x36>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d703a:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
   d703e:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   d7042:	f8df c19c 	ldr.w	ip, [pc, #412]	; d71e0 <mbedtls_internal_aes_decrypt+0x378>
   d7046:	f8df e19c 	ldr.w	lr, [pc, #412]	; d71e4 <mbedtls_internal_aes_decrypt+0x37c>
   d704a:	f3c1 2607 	ubfx	r6, r1, #8, #8
   d704e:	4047      	eors	r7, r0
   d7050:	6828      	ldr	r0, [r5, #0]
   d7052:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d7056:	4078      	eors	r0, r7
   d7058:	4070      	eors	r0, r6
   d705a:	f3c3 4607 	ubfx	r6, r3, #16, #8
   d705e:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
   d7062:	fa5f f68b 	uxtb.w	r6, fp
   d7066:	4047      	eors	r7, r0
   d7068:	0e18      	lsrs	r0, r3, #24
   d706a:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d706e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
   d7072:	ea86 0a00 	eor.w	sl, r6, r0
   d7076:	f3c4 2607 	ubfx	r6, r4, #8, #8
   d707a:	6868      	ldr	r0, [r5, #4]
   d707c:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   d7080:	ea8a 0000 	eor.w	r0, sl, r0
   d7084:	4070      	eors	r0, r6
   d7086:	f3c1 4607 	ubfx	r6, r1, #16, #8
   d708a:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   d708e:	ea80 0a06 	eor.w	sl, r0, r6
   d7092:	b2de      	uxtb	r6, r3
   d7094:	0e08      	lsrs	r0, r1, #24
   d7096:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   d709a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
   d709e:	4070      	eors	r0, r6
   d70a0:	68ae      	ldr	r6, [r5, #8]
   d70a2:	4046      	eors	r6, r0
   d70a4:	f3cb 2007 	ubfx	r0, fp, #8, #8
   d70a8:	b2c9      	uxtb	r1, r1
   d70aa:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
   d70ae:	4046      	eors	r6, r0
   d70b0:	f3c4 4007 	ubfx	r0, r4, #16, #8
   d70b4:	0e24      	lsrs	r4, r4, #24
   d70b6:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   d70ba:	4046      	eors	r6, r0
   d70bc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
   d70c0:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
   d70c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d70c8:	4048      	eors	r0, r1
   d70ca:	68e9      	ldr	r1, [r5, #12]
   d70cc:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
   d70d0:	4041      	eors	r1, r0
   d70d2:	4059      	eors	r1, r3
   d70d4:	f3cb 4307 	ubfx	r3, fp, #16, #8

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   d70d8:	b2f8      	uxtb	r0, r7
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   d70da:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   d70de:	4059      	eors	r1, r3

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   d70e0:	4b41      	ldr	r3, [pc, #260]	; (d71e8 <mbedtls_internal_aes_decrypt+0x380>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   d70e2:	ea4f 641a 	mov.w	r4, sl, lsr #24
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   d70e6:	f813 e000 	ldrb.w	lr, [r3, r0]
   d70ea:	6928      	ldr	r0, [r5, #16]
   d70ec:	ea8e 0000 	eor.w	r0, lr, r0
   d70f0:	f813 e004 	ldrb.w	lr, [r3, r4]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   d70f4:	f3c1 2407 	ubfx	r4, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   d70f8:	ea80 600e 	eor.w	r0, r0, lr, lsl #24
   d70fc:	f813 e004 	ldrb.w	lr, [r3, r4]
   d7100:	f3c6 4407 	ubfx	r4, r6, #16, #8
   d7104:	ea80 200e 	eor.w	r0, r0, lr, lsl #8
   d7108:	f813 e004 	ldrb.w	lr, [r3, r4]
   d710c:	ea80 4e0e 	eor.w	lr, r0, lr, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
   d7110:	fa5f f08a 	uxtb.w	r0, sl
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d7114:	5c1c      	ldrb	r4, [r3, r0]
   d7116:	6968      	ldr	r0, [r5, #20]
   d7118:	4060      	eors	r0, r4
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   d711a:	0e34      	lsrs	r4, r6, #24
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d711c:	5d1c      	ldrb	r4, [r3, r4]
   d711e:	ea80 6004 	eor.w	r0, r0, r4, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   d7122:	f3c7 2407 	ubfx	r4, r7, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   d7126:	5d1c      	ldrb	r4, [r3, r4]
   d7128:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
   d712c:	f3c1 4407 	ubfx	r4, r1, #16, #8
   d7130:	5d1c      	ldrb	r4, [r3, r4]
   d7132:	ea80 4404 	eor.w	r4, r0, r4, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
   d7136:	b2f0      	uxtb	r0, r6
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   d7138:	f3c6 2607 	ubfx	r6, r6, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d713c:	f813 c000 	ldrb.w	ip, [r3, r0]
   d7140:	69a8      	ldr	r0, [r5, #24]
   d7142:	ea8c 0000 	eor.w	r0, ip, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   d7146:	ea4f 6c11 	mov.w	ip, r1, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
   d714a:	b2c9      	uxtb	r1, r1
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d714c:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d7150:	ea80 600c 	eor.w	r0, r0, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   d7154:	f3ca 2c07 	ubfx	ip, sl, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d7158:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d715c:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d7160:	ea80 200c 	eor.w	r0, r0, ip, lsl #8
   d7164:	f3c7 4c07 	ubfx	ip, r7, #16, #8

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   d7168:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   d716a:	f813 c00c 	ldrb.w	ip, [r3, ip]
   d716e:	ea80 4c0c 	eor.w	ip, r0, ip, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d7172:	5c58      	ldrb	r0, [r3, r1]
   d7174:	69e9      	ldr	r1, [r5, #28]
   d7176:	4041      	eors	r1, r0
   d7178:	5dd8      	ldrb	r0, [r3, r7]
   d717a:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
   d717e:	5d98      	ldrb	r0, [r3, r6]
   d7180:	f813 300a 	ldrb.w	r3, [r3, sl]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d7184:	f882 e000 	strb.w	lr, [r2]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   d7188:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
   d718c:	ea81 4303 	eor.w	r3, r1, r3, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d7190:	ea4f 211e 	mov.w	r1, lr, lsr #8
   d7194:	7051      	strb	r1, [r2, #1]
   d7196:	ea4f 411e 	mov.w	r1, lr, lsr #16
   d719a:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
   d719c:	0a21      	lsrs	r1, r4, #8
   d719e:	7151      	strb	r1, [r2, #5]
   d71a0:	0c21      	lsrs	r1, r4, #16
   d71a2:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   d71a4:	ea4f 211c 	mov.w	r1, ip, lsr #8
   d71a8:	7251      	strb	r1, [r2, #9]
   d71aa:	ea4f 411c 	mov.w	r1, ip, lsr #16
   d71ae:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   d71b0:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d71b2:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
   d71b6:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   d71b8:	f882 c008 	strb.w	ip, [r2, #8]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
   d71bc:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
   d71be:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
   d71c2:	7313      	strb	r3, [r2, #12]
   d71c4:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   d71c6:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
   d71c8:	0c19      	lsrs	r1, r3, #16
   d71ca:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   d71cc:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   d71d0:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   d71d2:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   d71d6:	7391      	strb	r1, [r2, #14]
   d71d8:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
   d71da:	b003      	add	sp, #12
   d71dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d71e0:	2003dc90 	.word	0x2003dc90
   d71e4:	2003e090 	.word	0x2003e090
   d71e8:	2003d290 	.word	0x2003d290
   d71ec:	2003d890 	.word	0x2003d890
   d71f0:	2003d490 	.word	0x2003d490

000d71f4 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
   d71f4:	b410      	push	{r4}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   d71f6:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
   d71f8:	4614      	mov	r4, r2
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   d71fa:	4621      	mov	r1, r4
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
   d71fc:	461a      	mov	r2, r3
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   d71fe:	d103      	bne.n	d7208 <mbedtls_aes_crypt_ecb+0x14>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   d7200:	f85d 4b04 	ldr.w	r4, [sp], #4
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   d7204:	f7ff bc6a 	b.w	d6adc <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   d7208:	f85d 4b04 	ldr.w	r4, [sp], #4
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
   d720c:	f7ff be2c 	b.w	d6e68 <mbedtls_internal_aes_decrypt>

000d7210 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
   d7210:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
   d7212:	6803      	ldr	r3, [r0, #0]
   d7214:	1acd      	subs	r5, r1, r3
   d7216:	2d00      	cmp	r5, #0
   d7218:	dc02      	bgt.n	d7220 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d721a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d721e:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
   d7220:	781c      	ldrb	r4, [r3, #0]
   d7222:	f014 0f80 	tst.w	r4, #128	; 0x80
   d7226:	d104      	bne.n	d7232 <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
   d7228:	1c5c      	adds	r4, r3, #1
   d722a:	6004      	str	r4, [r0, #0]
   d722c:	781b      	ldrb	r3, [r3, #0]
   d722e:	6013      	str	r3, [r2, #0]
   d7230:	e036      	b.n	d72a0 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
   d7232:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7236:	3c01      	subs	r4, #1
   d7238:	2c03      	cmp	r4, #3
   d723a:	d838      	bhi.n	d72ae <mbedtls_asn1_get_len+0x9e>
   d723c:	e8df f004 	tbb	[pc, r4]
   d7240:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
   d7244:	2d01      	cmp	r5, #1
   d7246:	d0e8      	beq.n	d721a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
   d7248:	785b      	ldrb	r3, [r3, #1]
   d724a:	6013      	str	r3, [r2, #0]
            (*p) += 2;
   d724c:	6803      	ldr	r3, [r0, #0]
   d724e:	3302      	adds	r3, #2
   d7250:	e025      	b.n	d729e <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
   d7252:	2d02      	cmp	r5, #2
   d7254:	dde1      	ble.n	d721a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
   d7256:	785c      	ldrb	r4, [r3, #1]
   d7258:	789b      	ldrb	r3, [r3, #2]
   d725a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   d725e:	6013      	str	r3, [r2, #0]
            (*p) += 3;
   d7260:	6803      	ldr	r3, [r0, #0]
   d7262:	3303      	adds	r3, #3
   d7264:	e01b      	b.n	d729e <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
   d7266:	2d03      	cmp	r5, #3
   d7268:	ddd7      	ble.n	d721a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d726a:	789c      	ldrb	r4, [r3, #2]
   d726c:	785d      	ldrb	r5, [r3, #1]
   d726e:	78db      	ldrb	r3, [r3, #3]
   d7270:	0224      	lsls	r4, r4, #8
   d7272:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   d7276:	431c      	orrs	r4, r3
   d7278:	6014      	str	r4, [r2, #0]
            (*p) += 4;
   d727a:	6803      	ldr	r3, [r0, #0]
   d727c:	3304      	adds	r3, #4
   d727e:	e00e      	b.n	d729e <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
   d7280:	2d04      	cmp	r5, #4
   d7282:	ddca      	ble.n	d721a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
   d7284:	789c      	ldrb	r4, [r3, #2]
   d7286:	785d      	ldrb	r5, [r3, #1]
   d7288:	0424      	lsls	r4, r4, #16
   d728a:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
   d728e:	791c      	ldrb	r4, [r3, #4]
   d7290:	78db      	ldrb	r3, [r3, #3]
   d7292:	432c      	orrs	r4, r5
   d7294:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7298:	6013      	str	r3, [r2, #0]
            (*p) += 5;
   d729a:	6803      	ldr	r3, [r0, #0]
   d729c:	3305      	adds	r3, #5
   d729e:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
   d72a0:	6803      	ldr	r3, [r0, #0]
   d72a2:	1ac9      	subs	r1, r1, r3
   d72a4:	6813      	ldr	r3, [r2, #0]
   d72a6:	428b      	cmp	r3, r1
   d72a8:	d8b7      	bhi.n	d721a <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
   d72aa:	2000      	movs	r0, #0
   d72ac:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d72ae:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
   d72b2:	bd30      	pop	{r4, r5, pc}

000d72b4 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
   d72b4:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
   d72b6:	6804      	ldr	r4, [r0, #0]
   d72b8:	1b0e      	subs	r6, r1, r4
   d72ba:	2e00      	cmp	r6, #0
   d72bc:	dd07      	ble.n	d72ce <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
   d72be:	7826      	ldrb	r6, [r4, #0]
   d72c0:	429e      	cmp	r6, r3
   d72c2:	d107      	bne.n	d72d4 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d72c4:	3401      	adds	r4, #1
   d72c6:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d72c8:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
   d72ca:	f7ff bfa1 	b.w	d7210 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d72ce:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d72d2:	e001      	b.n	d72d8 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d72d4:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d72d8:	bc70      	pop	{r4, r5, r6}
   d72da:	4770      	bx	lr

000d72dc <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d72dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d72de:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d72e0:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d72e2:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d72e4:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d72e6:	f7ff ffe5 	bl	d72b4 <mbedtls_asn1_get_tag>
   d72ea:	b970      	cbnz	r0, d730a <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
   d72ec:	9b01      	ldr	r3, [sp, #4]
   d72ee:	2b01      	cmp	r3, #1
   d72f0:	d109      	bne.n	d7306 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
   d72f2:	6823      	ldr	r3, [r4, #0]
   d72f4:	781b      	ldrb	r3, [r3, #0]
   d72f6:	3300      	adds	r3, #0
   d72f8:	bf18      	it	ne
   d72fa:	2301      	movne	r3, #1
   d72fc:	602b      	str	r3, [r5, #0]
    (*p)++;
   d72fe:	6823      	ldr	r3, [r4, #0]
   d7300:	3301      	adds	r3, #1
   d7302:	6023      	str	r3, [r4, #0]

    return( 0 );
   d7304:	e001      	b.n	d730a <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d7306:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
   d730a:	b003      	add	sp, #12
   d730c:	bd30      	pop	{r4, r5, pc}

000d730e <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d730e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d7310:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d7312:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d7314:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d7316:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d7318:	f7ff ffcc 	bl	d72b4 <mbedtls_asn1_get_tag>
   d731c:	b9c8      	cbnz	r0, d7352 <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
   d731e:	9b01      	ldr	r3, [sp, #4]
   d7320:	3b01      	subs	r3, #1
   d7322:	2b03      	cmp	r3, #3
   d7324:	d813      	bhi.n	d734e <mbedtls_asn1_get_int+0x40>
   d7326:	6823      	ldr	r3, [r4, #0]
   d7328:	f993 3000 	ldrsb.w	r3, [r3]
   d732c:	2b00      	cmp	r3, #0
   d732e:	db0e      	blt.n	d734e <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
   d7330:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
   d7332:	9b01      	ldr	r3, [sp, #4]
   d7334:	1e5a      	subs	r2, r3, #1
   d7336:	9201      	str	r2, [sp, #4]
   d7338:	b15b      	cbz	r3, d7352 <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
   d733a:	6823      	ldr	r3, [r4, #0]
   d733c:	682a      	ldr	r2, [r5, #0]
   d733e:	781b      	ldrb	r3, [r3, #0]
   d7340:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d7344:	602b      	str	r3, [r5, #0]
        (*p)++;
   d7346:	6823      	ldr	r3, [r4, #0]
   d7348:	3301      	adds	r3, #1
   d734a:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
   d734c:	e7f1      	b.n	d7332 <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d734e:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
   d7352:	b003      	add	sp, #12
   d7354:	bd30      	pop	{r4, r5, pc}

000d7356 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d7356:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d7358:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d735a:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d735c:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d735e:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d7360:	f7ff ffa8 	bl	d72b4 <mbedtls_asn1_get_tag>
   d7364:	b940      	cbnz	r0, d7378 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
   d7366:	9a01      	ldr	r2, [sp, #4]
   d7368:	6821      	ldr	r1, [r4, #0]
   d736a:	4628      	mov	r0, r5
   d736c:	f000 fc4c 	bl	d7c08 <mbedtls_mpi_read_binary>

    *p += len;
   d7370:	6822      	ldr	r2, [r4, #0]
   d7372:	9b01      	ldr	r3, [sp, #4]
   d7374:	4413      	add	r3, r2
   d7376:	6023      	str	r3, [r4, #0]

    return( ret );
}
   d7378:	b003      	add	sp, #12
   d737a:	bd30      	pop	{r4, r5, pc}

000d737c <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d737c:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d737e:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d7380:	4604      	mov	r4, r0
   d7382:	460e      	mov	r6, r1
   d7384:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d7386:	f7ff ff95 	bl	d72b4 <mbedtls_asn1_get_tag>
   d738a:	b9d8      	cbnz	r0, d73c4 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
   d738c:	6813      	ldr	r3, [r2, #0]
   d738e:	b1a3      	cbz	r3, d73ba <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
   d7390:	3b01      	subs	r3, #1
   d7392:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
   d7394:	6823      	ldr	r3, [r4, #0]
   d7396:	781b      	ldrb	r3, [r3, #0]
   d7398:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
   d739a:	2b07      	cmp	r3, #7
   d739c:	d810      	bhi.n	d73c0 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
   d739e:	6823      	ldr	r3, [r4, #0]
   d73a0:	3301      	adds	r3, #1
   d73a2:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
   d73a4:	6093      	str	r3, [r2, #8]
    *p += bs->len;
   d73a6:	6822      	ldr	r2, [r4, #0]
   d73a8:	682b      	ldr	r3, [r5, #0]
   d73aa:	4413      	add	r3, r2

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d73ac:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
   d73ae:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d73b0:	bf0c      	ite	eq
   d73b2:	2000      	moveq	r0, #0
   d73b4:	f06f 0065 	mvnne.w	r0, #101	; 0x65
   d73b8:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d73ba:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d73be:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d73c0:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d73c4:	bd70      	pop	{r4, r5, r6, pc}

000d73c6 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d73c6:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d73c8:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d73ca:	4604      	mov	r4, r0
   d73cc:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d73ce:	f7ff ff71 	bl	d72b4 <mbedtls_asn1_get_tag>
   d73d2:	b958      	cbnz	r0, d73ec <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
   d73d4:	6813      	ldr	r3, [r2, #0]
   d73d6:	1e5a      	subs	r2, r3, #1
   d73d8:	2b01      	cmp	r3, #1
   d73da:	602a      	str	r2, [r5, #0]
   d73dc:	d904      	bls.n	d73e8 <mbedtls_asn1_get_bitstring_null+0x22>
   d73de:	6823      	ldr	r3, [r4, #0]
   d73e0:	1c5a      	adds	r2, r3, #1
   d73e2:	6022      	str	r2, [r4, #0]
   d73e4:	781b      	ldrb	r3, [r3, #0]
   d73e6:	b10b      	cbz	r3, d73ec <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d73e8:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d73ec:	bd38      	pop	{r3, r4, r5, pc}

000d73ee <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d73ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d73f2:	4615      	mov	r5, r2
   d73f4:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d73f6:	aa01      	add	r2, sp, #4
   d73f8:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d73fa:	4604      	mov	r4, r0
   d73fc:	460f      	mov	r7, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d73fe:	f7ff ff59 	bl	d72b4 <mbedtls_asn1_get_tag>
   d7402:	4606      	mov	r6, r0
   d7404:	bb78      	cbnz	r0, d7466 <mbedtls_asn1_get_sequence_of+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
   d7406:	6822      	ldr	r2, [r4, #0]
   d7408:	9b01      	ldr	r3, [sp, #4]
   d740a:	4413      	add	r3, r2
   d740c:	429f      	cmp	r7, r3
   d740e:	d01d      	beq.n	d744c <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d7410:	f06f 0665 	mvn.w	r6, #101	; 0x65
   d7414:	e027      	b.n	d7466 <mbedtls_asn1_get_sequence_of+0x78>

    while( *p < end )
   d7416:	6823      	ldr	r3, [r4, #0]
   d7418:	429f      	cmp	r7, r3
   d741a:	d91a      	bls.n	d7452 <mbedtls_asn1_get_sequence_of+0x64>
    {
        buf = &(cur->buf);
        buf->tag = **p;
   d741c:	781b      	ldrb	r3, [r3, #0]
   d741e:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d7420:	464a      	mov	r2, r9
   d7422:	4643      	mov	r3, r8
   d7424:	4639      	mov	r1, r7
   d7426:	4620      	mov	r0, r4
   d7428:	f7ff ff44 	bl	d72b4 <mbedtls_asn1_get_tag>
   d742c:	b9b8      	cbnz	r0, d745e <mbedtls_asn1_get_sequence_of+0x70>
            return( ret );

        buf->p = *p;
   d742e:	6823      	ldr	r3, [r4, #0]
   d7430:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
   d7432:	6822      	ldr	r2, [r4, #0]
   d7434:	686b      	ldr	r3, [r5, #4]
   d7436:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
   d7438:	429f      	cmp	r7, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
   d743a:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
   d743c:	d9eb      	bls.n	d7416 <mbedtls_asn1_get_sequence_of+0x28>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
   d743e:	2110      	movs	r1, #16
   d7440:	2001      	movs	r0, #1
   d7442:	f00f fb5b 	bl	e6afc <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
   d7446:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
   d7448:	b158      	cbz	r0, d7462 <mbedtls_asn1_get_sequence_of+0x74>
   d744a:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d744c:	f105 0904 	add.w	r9, r5, #4
   d7450:	e7e1      	b.n	d7416 <mbedtls_asn1_get_sequence_of+0x28>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   d7452:	2300      	movs	r3, #0
   d7454:	60eb      	str	r3, [r5, #12]

    if( *p != end )
   d7456:	6823      	ldr	r3, [r4, #0]
   d7458:	429f      	cmp	r7, r3
   d745a:	d004      	beq.n	d7466 <mbedtls_asn1_get_sequence_of+0x78>
   d745c:	e7d8      	b.n	d7410 <mbedtls_asn1_get_sequence_of+0x22>
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d745e:	4606      	mov	r6, r0
   d7460:	e001      	b.n	d7466 <mbedtls_asn1_get_sequence_of+0x78>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   d7462:	f06f 0669 	mvn.w	r6, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d7466:	4630      	mov	r0, r6
   d7468:	b003      	add	sp, #12
   d746a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d746e <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d746e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7470:	4617      	mov	r7, r2
   d7472:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d7474:	aa01      	add	r2, sp, #4
   d7476:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d7478:	4604      	mov	r4, r0
   d747a:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d747c:	f7ff ff1a 	bl	d72b4 <mbedtls_asn1_get_tag>
   d7480:	2800      	cmp	r0, #0
   d7482:	d13a      	bne.n	d74fa <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
   d7484:	6823      	ldr	r3, [r4, #0]
   d7486:	1af6      	subs	r6, r6, r3
   d7488:	2e00      	cmp	r6, #0
   d748a:	dd34      	ble.n	d74f6 <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
   d748c:	463a      	mov	r2, r7
   d748e:	781b      	ldrb	r3, [r3, #0]
   d7490:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
   d7494:	9b01      	ldr	r3, [sp, #4]
   d7496:	6826      	ldr	r6, [r4, #0]
   d7498:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d749a:	4631      	mov	r1, r6
   d749c:	2306      	movs	r3, #6
   d749e:	4620      	mov	r0, r4
   d74a0:	f7ff ff08 	bl	d72b4 <mbedtls_asn1_get_tag>
   d74a4:	bb48      	cbnz	r0, d74fa <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
   d74a6:	6823      	ldr	r3, [r4, #0]
   d74a8:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
   d74aa:	6822      	ldr	r2, [r4, #0]
   d74ac:	687b      	ldr	r3, [r7, #4]
   d74ae:	18d1      	adds	r1, r2, r3

    if( *p == end )
   d74b0:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
   d74b2:	6021      	str	r1, [r4, #0]

    if( *p == end )
   d74b4:	d107      	bne.n	d74c6 <mbedtls_asn1_get_alg+0x58>
   d74b6:	f105 020c 	add.w	r2, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
   d74ba:	4603      	mov	r3, r0
   d74bc:	4295      	cmp	r5, r2
   d74be:	d01c      	beq.n	d74fa <mbedtls_asn1_get_alg+0x8c>
   d74c0:	702b      	strb	r3, [r5, #0]
   d74c2:	3501      	adds	r5, #1
   d74c4:	e7fa      	b.n	d74bc <mbedtls_asn1_get_alg+0x4e>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
   d74c6:	5cd3      	ldrb	r3, [r2, r3]
   d74c8:	462a      	mov	r2, r5
    (*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d74ca:	4631      	mov	r1, r6
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
   d74cc:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
   d74d0:	6823      	ldr	r3, [r4, #0]
   d74d2:	3301      	adds	r3, #1
   d74d4:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d74d6:	4620      	mov	r0, r4
   d74d8:	f7ff fe9a 	bl	d7210 <mbedtls_asn1_get_len>
   d74dc:	b968      	cbnz	r0, d74fa <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
   d74de:	6823      	ldr	r3, [r4, #0]
   d74e0:	60ab      	str	r3, [r5, #8]
    *p += params->len;
   d74e2:	6822      	ldr	r2, [r4, #0]
   d74e4:	686b      	ldr	r3, [r5, #4]
   d74e6:	4413      	add	r3, r2

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d74e8:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
   d74ea:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d74ec:	bf0c      	ite	eq
   d74ee:	2000      	moveq	r0, #0
   d74f0:	f06f 0065 	mvnne.w	r0, #101	; 0x65
   d74f4:	e001      	b.n	d74fa <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d74f6:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d74fa:	b003      	add	sp, #12
   d74fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d74fe <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
   d74fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
   d7500:	2300      	movs	r3, #0
   d7502:	9301      	str	r3, [sp, #4]
   d7504:	9302      	str	r3, [sp, #8]
   d7506:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
   d7508:	ab01      	add	r3, sp, #4
   d750a:	f7ff ffb0 	bl	d746e <mbedtls_asn1_get_alg>
   d750e:	b960      	cbnz	r0, d752a <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
   d7510:	9b01      	ldr	r3, [sp, #4]
   d7512:	2b05      	cmp	r3, #5
   d7514:	d000      	beq.n	d7518 <mbedtls_asn1_get_alg_null+0x1a>
   d7516:	b933      	cbnz	r3, d7526 <mbedtls_asn1_get_alg_null+0x28>
   d7518:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d751a:	2b00      	cmp	r3, #0
   d751c:	bf0c      	ite	eq
   d751e:	2000      	moveq	r0, #0
   d7520:	f06f 0067 	mvnne.w	r0, #103	; 0x67
   d7524:	e001      	b.n	d752a <mbedtls_asn1_get_alg_null+0x2c>
   d7526:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d752a:	b005      	add	sp, #20
   d752c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7530 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
   d7530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7534:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   d7538:	f8df 811c 	ldr.w	r8, [pc, #284]	; d7658 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
   d753c:	2700      	movs	r7, #0
   d753e:	463c      	mov	r4, r7
   d7540:	463d      	mov	r5, r7
   d7542:	4575      	cmp	r5, lr
   d7544:	d22d      	bcs.n	d75a2 <mbedtls_base64_decode+0x72>
   d7546:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   d754a:	5d5e      	ldrb	r6, [r3, r5]
   d754c:	2e20      	cmp	r6, #32
   d754e:	d104      	bne.n	d755a <mbedtls_base64_decode+0x2a>
        {
            ++i;
   d7550:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   d7552:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
   d7554:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   d7558:	d8f7      	bhi.n	d754a <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
   d755a:	45ae      	cmp	lr, r5
   d755c:	d021      	beq.n	d75a2 <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
   d755e:	ebc5 060e 	rsb	r6, r5, lr
   d7562:	2e01      	cmp	r6, #1
   d7564:	d906      	bls.n	d7574 <mbedtls_base64_decode+0x44>
   d7566:	5d5e      	ldrb	r6, [r3, r5]
   d7568:	2e0d      	cmp	r6, #13
   d756a:	d103      	bne.n	d7574 <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
   d756c:	195e      	adds	r6, r3, r5
   d756e:	7876      	ldrb	r6, [r6, #1]
   d7570:	2e0a      	cmp	r6, #10
   d7572:	d014      	beq.n	d759e <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
   d7574:	5d5e      	ldrb	r6, [r3, r5]
   d7576:	2e0a      	cmp	r6, #10
   d7578:	d011      	beq.n	d759e <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
   d757a:	f1bc 0f00 	cmp.w	ip, #0
   d757e:	d166      	bne.n	d764e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
   d7580:	2e3d      	cmp	r6, #61	; 0x3d
   d7582:	d102      	bne.n	d758a <mbedtls_base64_decode+0x5a>
   d7584:	3701      	adds	r7, #1
   d7586:	2f02      	cmp	r7, #2
   d7588:	d861      	bhi.n	d764e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   d758a:	f016 0f80 	tst.w	r6, #128	; 0x80
   d758e:	d15e      	bne.n	d764e <mbedtls_base64_decode+0x11e>
   d7590:	f818 6006 	ldrb.w	r6, [r8, r6]
   d7594:	2e7f      	cmp	r6, #127	; 0x7f
   d7596:	d05a      	beq.n	d764e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
   d7598:	2e3f      	cmp	r6, #63	; 0x3f
   d759a:	d956      	bls.n	d764a <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
   d759c:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
   d759e:	3501      	adds	r5, #1
   d75a0:	e7cf      	b.n	d7542 <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
   d75a2:	b91c      	cbnz	r4, d75ac <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
   d75a4:	6014      	str	r4, [r2, #0]
        return( 0 );
   d75a6:	4620      	mov	r0, r4
   d75a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
   d75ac:	f004 0e07 	and.w	lr, r4, #7
   d75b0:	2606      	movs	r6, #6
   d75b2:	08e4      	lsrs	r4, r4, #3
   d75b4:	fb06 fe0e 	mul.w	lr, r6, lr
   d75b8:	4366      	muls	r6, r4
   d75ba:	f10e 0e07 	add.w	lr, lr, #7
   d75be:	1bf6      	subs	r6, r6, r7
   d75c0:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
   d75c4:	b160      	cbz	r0, d75e0 <mbedtls_base64_decode+0xb0>
   d75c6:	428c      	cmp	r4, r1
   d75c8:	d80a      	bhi.n	d75e0 <mbedtls_base64_decode+0xb0>
   d75ca:	2600      	movs	r6, #0
   d75cc:	eb03 0e05 	add.w	lr, r3, r5
   d75d0:	4601      	mov	r1, r0
   d75d2:	2503      	movs	r5, #3
   d75d4:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   d75d6:	f8df c080 	ldr.w	ip, [pc, #128]	; d7658 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   d75da:	f8df 8080 	ldr.w	r8, [pc, #128]	; d765c <mbedtls_base64_decode+0x12c>
   d75de:	e00f      	b.n	d7600 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
   d75e0:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   d75e2:	f06f 0029 	mvn.w	r0, #41	; 0x29
   d75e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   d75ea:	f813 9b01 	ldrb.w	r9, [r3], #1
   d75ee:	f1a9 070a 	sub.w	r7, r9, #10
   d75f2:	b2ff      	uxtb	r7, r7
   d75f4:	2f16      	cmp	r7, #22
   d75f6:	d806      	bhi.n	d7606 <mbedtls_base64_decode+0xd6>
   d75f8:	fa28 f707 	lsr.w	r7, r8, r7
   d75fc:	07ff      	lsls	r7, r7, #31
   d75fe:	d502      	bpl.n	d7606 <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   d7600:	4573      	cmp	r3, lr
   d7602:	d1f2      	bne.n	d75ea <mbedtls_base64_decode+0xba>
   d7604:	e01c      	b.n	d7640 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   d7606:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
   d760a:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   d760c:	2f40      	cmp	r7, #64	; 0x40
   d760e:	bf08      	it	eq
   d7610:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   d7612:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
   d7616:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   d7618:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
   d761c:	d1f0      	bne.n	d7600 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   d761e:	b16d      	cbz	r5, d763c <mbedtls_base64_decode+0x10c>
   d7620:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   d7622:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   d7624:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   d7626:	d101      	bne.n	d762c <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   d7628:	3101      	adds	r1, #1
   d762a:	e007      	b.n	d763c <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
   d762c:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   d762e:	ea4f 2416 	mov.w	r4, r6, lsr #8
   d7632:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
   d7634:	bf16      	itet	ne
   d7636:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   d7638:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
   d763a:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
   d763c:	2400      	movs	r4, #0
   d763e:	e7df      	b.n	d7600 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
   d7640:	1a08      	subs	r0, r1, r0
   d7642:	6010      	str	r0, [r2, #0]

    return( 0 );
   d7644:	2000      	movs	r0, #0
   d7646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
   d764a:	2f00      	cmp	r7, #0
   d764c:	d0a6      	beq.n	d759c <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
   d764e:	f06f 002b 	mvn.w	r0, #43	; 0x2b
   d7652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7656:	bf00      	nop
   d7658:	000e75e9 	.word	0x000e75e9
   d765c:	00400009 	.word	0x00400009

000d7660 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   d7660:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
   d7662:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7664:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   d7666:	461c      	mov	r4, r3
   d7668:	4284      	cmp	r4, r0
   d766a:	d016      	beq.n	d769a <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
   d766c:	f8d6 e000 	ldr.w	lr, [r6]
   d7670:	ebc3 050e 	rsb	r5, r3, lr
   d7674:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
   d7676:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   d767a:	42bd      	cmp	r5, r7
   d767c:	bf2c      	ite	cs
   d767e:	f04f 0c00 	movcs.w	ip, #0
   d7682:	f04f 0c01 	movcc.w	ip, #1
   d7686:	1bed      	subs	r5, r5, r7
   d7688:	4573      	cmp	r3, lr
   d768a:	bf94      	ite	ls
   d768c:	4663      	movls	r3, ip
   d768e:	f10c 0301 	addhi.w	r3, ip, #1
   d7692:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   d7696:	3401      	adds	r4, #1
   d7698:	e7e6      	b.n	d7668 <_ZL11mpi_sub_hlpjPmS_+0x8>
   d769a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   d769e:	b143      	cbz	r3, d76b2 <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
   d76a0:	6811      	ldr	r1, [r2, #0]
   d76a2:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
   d76a4:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
   d76a6:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
   d76aa:	bf94      	ite	ls
   d76ac:	2300      	movls	r3, #0
   d76ae:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   d76b0:	e7f5      	b.n	d769e <_ZL11mpi_sub_hlpjPmS_+0x3e>
   d76b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d76b4 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
   d76b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mbedtls_mpi_uint c = 0, t = 0;
   d76b8:	f04f 0c00 	mov.w	ip, #0
   d76bc:	460d      	mov	r5, r1
   d76be:	4614      	mov	r4, r2
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
   d76c0:	4686      	mov	lr, r0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   d76c2:	f1be 0f0f 	cmp.w	lr, #15
   d76c6:	f105 0540 	add.w	r5, r5, #64	; 0x40
   d76ca:	f104 0440 	add.w	r4, r4, #64	; 0x40
   d76ce:	f240 811e 	bls.w	d790e <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
   d76d2:	f855 6c40 	ldr.w	r6, [r5, #-64]
   d76d6:	fba6 9a03 	umull	r9, sl, r6, r3
   d76da:	f854 6c40 	ldr.w	r6, [r4, #-64]
   d76de:	eb1c 0c09 	adds.w	ip, ip, r9
   d76e2:	bf2c      	ite	cs
   d76e4:	f04f 0801 	movcs.w	r8, #1
   d76e8:	f04f 0800 	movcc.w	r8, #0
   d76ec:	eb1c 0606 	adds.w	r6, ip, r6
   d76f0:	f844 6c40 	str.w	r6, [r4, #-64]
   d76f4:	f855 6c3c 	ldr.w	r6, [r5, #-60]
   d76f8:	eb48 080a 	adc.w	r8, r8, sl
   d76fc:	fba3 9a06 	umull	r9, sl, r3, r6
   d7700:	f854 6c3c 	ldr.w	r6, [r4, #-60]
   d7704:	eb18 0809 	adds.w	r8, r8, r9
   d7708:	bf2c      	ite	cs
   d770a:	f04f 0c01 	movcs.w	ip, #1
   d770e:	f04f 0c00 	movcc.w	ip, #0
   d7712:	eb18 0606 	adds.w	r6, r8, r6
   d7716:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
   d771a:	f855 7c38 	ldr.w	r7, [r5, #-56]
   d771e:	f854 6c38 	ldr.w	r6, [r4, #-56]
   d7722:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
   d7726:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
   d772a:	eb1c 0c08 	adds.w	ip, ip, r8
   d772e:	bf2c      	ite	cs
   d7730:	2701      	movcs	r7, #1
   d7732:	2700      	movcc	r7, #0
   d7734:	eb1c 0606 	adds.w	r6, ip, r6
   d7738:	f844 6c38 	str.w	r6, [r4, #-56]
   d773c:	f855 6c34 	ldr.w	r6, [r5, #-52]
   d7740:	eb47 0709 	adc.w	r7, r7, r9
   d7744:	fba3 8906 	umull	r8, r9, r3, r6
   d7748:	f854 6c34 	ldr.w	r6, [r4, #-52]
   d774c:	eb17 0708 	adds.w	r7, r7, r8
   d7750:	bf2c      	ite	cs
   d7752:	f04f 0c01 	movcs.w	ip, #1
   d7756:	f04f 0c00 	movcc.w	ip, #0
   d775a:	19be      	adds	r6, r7, r6
   d775c:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
   d7760:	f855 7c30 	ldr.w	r7, [r5, #-48]
   d7764:	f854 6c30 	ldr.w	r6, [r4, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
   d7768:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
   d776c:	fba3 8907 	umull	r8, r9, r3, r7
   d7770:	eb1c 0c08 	adds.w	ip, ip, r8
   d7774:	bf2c      	ite	cs
   d7776:	2701      	movcs	r7, #1
   d7778:	2700      	movcc	r7, #0
   d777a:	eb1c 0606 	adds.w	r6, ip, r6
   d777e:	f844 6c30 	str.w	r6, [r4, #-48]
   d7782:	f855 6c2c 	ldr.w	r6, [r5, #-44]
   d7786:	eb47 0709 	adc.w	r7, r7, r9
   d778a:	fba3 8906 	umull	r8, r9, r3, r6
   d778e:	f854 6c2c 	ldr.w	r6, [r4, #-44]
   d7792:	eb17 0708 	adds.w	r7, r7, r8
   d7796:	bf2c      	ite	cs
   d7798:	f04f 0c01 	movcs.w	ip, #1
   d779c:	f04f 0c00 	movcc.w	ip, #0
   d77a0:	19be      	adds	r6, r7, r6
   d77a2:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
   d77a6:	f855 7c28 	ldr.w	r7, [r5, #-40]
   d77aa:	f854 6c28 	ldr.w	r6, [r4, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
   d77ae:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
   d77b2:	fba3 8907 	umull	r8, r9, r3, r7
   d77b6:	eb1c 0c08 	adds.w	ip, ip, r8
   d77ba:	bf2c      	ite	cs
   d77bc:	2701      	movcs	r7, #1
   d77be:	2700      	movcc	r7, #0
   d77c0:	eb1c 0606 	adds.w	r6, ip, r6
   d77c4:	f844 6c28 	str.w	r6, [r4, #-40]
   d77c8:	f855 6c24 	ldr.w	r6, [r5, #-36]
   d77cc:	eb47 0709 	adc.w	r7, r7, r9
   d77d0:	fba3 8906 	umull	r8, r9, r3, r6
   d77d4:	f854 6c24 	ldr.w	r6, [r4, #-36]
   d77d8:	eb17 0708 	adds.w	r7, r7, r8
   d77dc:	bf2c      	ite	cs
   d77de:	f04f 0c01 	movcs.w	ip, #1
   d77e2:	f04f 0c00 	movcc.w	ip, #0
   d77e6:	19be      	adds	r6, r7, r6
   d77e8:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
   d77ec:	f855 7c20 	ldr.w	r7, [r5, #-32]
   d77f0:	f854 6c20 	ldr.w	r6, [r4, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
   d77f4:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
   d77f8:	fba3 8907 	umull	r8, r9, r3, r7
   d77fc:	eb1c 0c08 	adds.w	ip, ip, r8
   d7800:	bf2c      	ite	cs
   d7802:	2701      	movcs	r7, #1
   d7804:	2700      	movcc	r7, #0
   d7806:	eb1c 0606 	adds.w	r6, ip, r6
   d780a:	f844 6c20 	str.w	r6, [r4, #-32]
   d780e:	f855 6c1c 	ldr.w	r6, [r5, #-28]
   d7812:	eb47 0709 	adc.w	r7, r7, r9
   d7816:	fba3 8906 	umull	r8, r9, r3, r6
   d781a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   d781e:	eb17 0708 	adds.w	r7, r7, r8
   d7822:	bf2c      	ite	cs
   d7824:	f04f 0c01 	movcs.w	ip, #1
   d7828:	f04f 0c00 	movcc.w	ip, #0
   d782c:	19be      	adds	r6, r7, r6
   d782e:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
   d7832:	f855 7c18 	ldr.w	r7, [r5, #-24]
   d7836:	f854 6c18 	ldr.w	r6, [r4, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
   d783a:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
   d783e:	fba3 8907 	umull	r8, r9, r3, r7
   d7842:	eb1c 0c08 	adds.w	ip, ip, r8
   d7846:	bf2c      	ite	cs
   d7848:	2701      	movcs	r7, #1
   d784a:	2700      	movcc	r7, #0
   d784c:	eb1c 0606 	adds.w	r6, ip, r6
   d7850:	f844 6c18 	str.w	r6, [r4, #-24]
   d7854:	f855 6c14 	ldr.w	r6, [r5, #-20]
   d7858:	eb47 0709 	adc.w	r7, r7, r9
   d785c:	fba3 8906 	umull	r8, r9, r3, r6
   d7860:	f854 6c14 	ldr.w	r6, [r4, #-20]
   d7864:	eb17 0708 	adds.w	r7, r7, r8
   d7868:	bf2c      	ite	cs
   d786a:	f04f 0c01 	movcs.w	ip, #1
   d786e:	f04f 0c00 	movcc.w	ip, #0
   d7872:	19be      	adds	r6, r7, r6
   d7874:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
   d7878:	f855 7c10 	ldr.w	r7, [r5, #-16]
   d787c:	f854 6c10 	ldr.w	r6, [r4, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
   d7880:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
   d7884:	fba3 8907 	umull	r8, r9, r3, r7
   d7888:	eb1c 0c08 	adds.w	ip, ip, r8
   d788c:	bf2c      	ite	cs
   d788e:	2701      	movcs	r7, #1
   d7890:	2700      	movcc	r7, #0
   d7892:	eb1c 0606 	adds.w	r6, ip, r6
   d7896:	f844 6c10 	str.w	r6, [r4, #-16]
   d789a:	f855 6c0c 	ldr.w	r6, [r5, #-12]
   d789e:	eb47 0709 	adc.w	r7, r7, r9
   d78a2:	fba3 8906 	umull	r8, r9, r3, r6
   d78a6:	f854 6c0c 	ldr.w	r6, [r4, #-12]
   d78aa:	eb17 0708 	adds.w	r7, r7, r8
   d78ae:	bf2c      	ite	cs
   d78b0:	f04f 0c01 	movcs.w	ip, #1
   d78b4:	f04f 0c00 	movcc.w	ip, #0
   d78b8:	19be      	adds	r6, r7, r6
   d78ba:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
   d78be:	f855 7c08 	ldr.w	r7, [r5, #-8]
   d78c2:	f854 6c08 	ldr.w	r6, [r4, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
   d78c6:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
   d78ca:	fba3 8907 	umull	r8, r9, r3, r7
   d78ce:	eb1c 0c08 	adds.w	ip, ip, r8
   d78d2:	bf2c      	ite	cs
   d78d4:	2701      	movcs	r7, #1
   d78d6:	2700      	movcc	r7, #0
   d78d8:	eb1c 0606 	adds.w	r6, ip, r6
   d78dc:	f844 6c08 	str.w	r6, [r4, #-8]
   d78e0:	f855 6c04 	ldr.w	r6, [r5, #-4]
   d78e4:	eb47 0709 	adc.w	r7, r7, r9
   d78e8:	fba3 8906 	umull	r8, r9, r3, r6
   d78ec:	f854 6c04 	ldr.w	r6, [r4, #-4]
   d78f0:	eb17 0708 	adds.w	r7, r7, r8
   d78f4:	bf2c      	ite	cs
   d78f6:	f04f 0c01 	movcs.w	ip, #1
   d78fa:	f04f 0c00 	movcc.w	ip, #0
   d78fe:	19be      	adds	r6, r7, r6
   d7900:	eb4c 0c09 	adc.w	ip, ip, r9
   d7904:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   d7908:	f1ae 0e10 	sub.w	lr, lr, #16
   d790c:	e6d9      	b.n	d76c2 <_ZL11mpi_mul_hlpjPmS_m+0xe>
   d790e:	ea4f 1e10 	mov.w	lr, r0, lsr #4
   d7912:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
   d7916:	2807      	cmp	r0, #7
   d7918:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
   d791c:	eb01 050e 	add.w	r5, r1, lr
   d7920:	eb02 040e 	add.w	r4, r2, lr
   d7924:	d966      	bls.n	d79f4 <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
   d7926:	f851 600e 	ldr.w	r6, [r1, lr]
   d792a:	fba6 7803 	umull	r7, r8, r6, r3
   d792e:	f852 600e 	ldr.w	r6, [r2, lr]
   d7932:	eb1c 0c07 	adds.w	ip, ip, r7
   d7936:	bf2c      	ite	cs
   d7938:	2101      	movcs	r1, #1
   d793a:	2100      	movcc	r1, #0
   d793c:	eb1c 0606 	adds.w	r6, ip, r6
   d7940:	f842 600e 	str.w	r6, [r2, lr]
   d7944:	686e      	ldr	r6, [r5, #4]
   d7946:	eb41 0108 	adc.w	r1, r1, r8
   d794a:	fba3 7806 	umull	r7, r8, r3, r6
   d794e:	6866      	ldr	r6, [r4, #4]
   d7950:	19ca      	adds	r2, r1, r7
   d7952:	bf2c      	ite	cs
   d7954:	2101      	movcs	r1, #1
   d7956:	2100      	movcc	r1, #0
   d7958:	1992      	adds	r2, r2, r6
   d795a:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
   d795c:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
   d795e:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
   d7962:	fba3 7806 	umull	r7, r8, r3, r6
   d7966:	68a6      	ldr	r6, [r4, #8]
   d7968:	19c9      	adds	r1, r1, r7
   d796a:	bf2c      	ite	cs
   d796c:	2201      	movcs	r2, #1
   d796e:	2200      	movcc	r2, #0
   d7970:	1989      	adds	r1, r1, r6
   d7972:	60a1      	str	r1, [r4, #8]
   d7974:	68ee      	ldr	r6, [r5, #12]
   d7976:	eb42 0208 	adc.w	r2, r2, r8
   d797a:	fba3 7806 	umull	r7, r8, r3, r6
   d797e:	68e6      	ldr	r6, [r4, #12]
   d7980:	19d2      	adds	r2, r2, r7
   d7982:	bf2c      	ite	cs
   d7984:	2101      	movcs	r1, #1
   d7986:	2100      	movcc	r1, #0
   d7988:	1992      	adds	r2, r2, r6
   d798a:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
   d798c:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
   d798e:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
   d7992:	fba3 7806 	umull	r7, r8, r3, r6
   d7996:	6926      	ldr	r6, [r4, #16]
   d7998:	19c9      	adds	r1, r1, r7
   d799a:	bf2c      	ite	cs
   d799c:	2201      	movcs	r2, #1
   d799e:	2200      	movcc	r2, #0
   d79a0:	1989      	adds	r1, r1, r6
   d79a2:	6121      	str	r1, [r4, #16]
   d79a4:	696e      	ldr	r6, [r5, #20]
   d79a6:	eb42 0208 	adc.w	r2, r2, r8
   d79aa:	fba3 7806 	umull	r7, r8, r3, r6
   d79ae:	6966      	ldr	r6, [r4, #20]
   d79b0:	19d2      	adds	r2, r2, r7
   d79b2:	bf2c      	ite	cs
   d79b4:	2101      	movcs	r1, #1
   d79b6:	2100      	movcc	r1, #0
   d79b8:	1992      	adds	r2, r2, r6
   d79ba:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
   d79bc:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
   d79be:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
   d79c2:	fba3 7806 	umull	r7, r8, r3, r6
   d79c6:	69a6      	ldr	r6, [r4, #24]
   d79c8:	19c9      	adds	r1, r1, r7
   d79ca:	bf2c      	ite	cs
   d79cc:	2201      	movcs	r2, #1
   d79ce:	2200      	movcc	r2, #0
   d79d0:	1989      	adds	r1, r1, r6
   d79d2:	61a1      	str	r1, [r4, #24]
   d79d4:	69ee      	ldr	r6, [r5, #28]
   d79d6:	69e1      	ldr	r1, [r4, #28]
   d79d8:	fba3 6706 	umull	r6, r7, r3, r6
   d79dc:	eb42 0208 	adc.w	r2, r2, r8
   d79e0:	1992      	adds	r2, r2, r6
   d79e2:	bf2c      	ite	cs
   d79e4:	f04f 0c01 	movcs.w	ip, #1
   d79e8:	f04f 0c00 	movcc.w	ip, #0
   d79ec:	1852      	adds	r2, r2, r1
   d79ee:	eb4c 0c07 	adc.w	ip, ip, r7
   d79f2:	61e2      	str	r2, [r4, #28]
   d79f4:	08c2      	lsrs	r2, r0, #3
   d79f6:	0151      	lsls	r1, r2, #5
   d79f8:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
   d79fc:	440d      	add	r5, r1
   d79fe:	440c      	add	r4, r1
   d7a00:	0080      	lsls	r0, r0, #2
   d7a02:	eb05 0e00 	add.w	lr, r5, r0
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
   d7a06:	4621      	mov	r1, r4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
   d7a08:	4575      	cmp	r5, lr
   d7a0a:	d011      	beq.n	d7a30 <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
   d7a0c:	f855 6b04 	ldr.w	r6, [r5], #4
   d7a10:	fba6 7803 	umull	r7, r8, r6, r3
   d7a14:	680e      	ldr	r6, [r1, #0]
   d7a16:	eb1c 0207 	adds.w	r2, ip, r7
   d7a1a:	bf2c      	ite	cs
   d7a1c:	f04f 0c01 	movcs.w	ip, #1
   d7a20:	f04f 0c00 	movcc.w	ip, #0
   d7a24:	1992      	adds	r2, r2, r6
   d7a26:	eb4c 0c08 	adc.w	ip, ip, r8
   d7a2a:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
   d7a2e:	e7eb      	b.n	d7a08 <_ZL11mpi_mul_hlpjPmS_m+0x354>
   d7a30:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
   d7a32:	6823      	ldr	r3, [r4, #0]
   d7a34:	4463      	add	r3, ip
   d7a36:	459c      	cmp	ip, r3
   d7a38:	f844 3b04 	str.w	r3, [r4], #4
   d7a3c:	bf8c      	ite	hi
   d7a3e:	f04f 0c01 	movhi.w	ip, #1
   d7a42:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
   d7a46:	d8f4      	bhi.n	d7a32 <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
   d7a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7a4c <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
   d7a4c:	b120      	cbz	r0, d7a58 <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
   d7a4e:	2301      	movs	r3, #1
   d7a50:	6003      	str	r3, [r0, #0]
    X->n = 0;
   d7a52:	2300      	movs	r3, #0
   d7a54:	6043      	str	r3, [r0, #4]
    X->p = NULL;
   d7a56:	6083      	str	r3, [r0, #8]
   d7a58:	4770      	bx	lr

000d7a5a <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
   d7a5a:	b510      	push	{r4, lr}
    if( X == NULL )
   d7a5c:	4604      	mov	r4, r0
   d7a5e:	b188      	cbz	r0, d7a84 <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
   d7a60:	6883      	ldr	r3, [r0, #8]
   d7a62:	b153      	cbz	r3, d7a7a <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
   d7a64:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
   d7a66:	2100      	movs	r1, #0
   d7a68:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   d7a6c:	d302      	bcc.n	d7a74 <mbedtls_mpi_free+0x1a>
   d7a6e:	6019      	str	r1, [r3, #0]
   d7a70:	3304      	adds	r3, #4
   d7a72:	e7f9      	b.n	d7a68 <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
   d7a74:	68a0      	ldr	r0, [r4, #8]
   d7a76:	f00c fa9f 	bl	e3fb8 <free>
    }

    X->s = 1;
   d7a7a:	2301      	movs	r3, #1
   d7a7c:	6023      	str	r3, [r4, #0]
    X->n = 0;
   d7a7e:	2300      	movs	r3, #0
   d7a80:	6063      	str	r3, [r4, #4]
    X->p = NULL;
   d7a82:	60a3      	str	r3, [r4, #8]
   d7a84:	bd10      	pop	{r4, pc}

000d7a86 <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   d7a86:	f242 7310 	movw	r3, #10000	; 0x2710
   d7a8a:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
   d7a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a90:	4604      	mov	r4, r0
   d7a92:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   d7a94:	d903      	bls.n	d7a9e <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   d7a96:	f06f 000f 	mvn.w	r0, #15
   d7a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
   d7a9e:	6846      	ldr	r6, [r0, #4]
   d7aa0:	42b1      	cmp	r1, r6
   d7aa2:	d919      	bls.n	d7ad8 <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
   d7aa4:	2104      	movs	r1, #4
   d7aa6:	4638      	mov	r0, r7
   d7aa8:	f00f f828 	bl	e6afc <calloc>
   d7aac:	4680      	mov	r8, r0
   d7aae:	2800      	cmp	r0, #0
   d7ab0:	d0f1      	beq.n	d7a96 <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
   d7ab2:	68a5      	ldr	r5, [r4, #8]
   d7ab4:	b16d      	cbz	r5, d7ad2 <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
   d7ab6:	00b2      	lsls	r2, r6, #2
   d7ab8:	4629      	mov	r1, r5
   d7aba:	f00f f844 	bl	e6b46 <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
   d7abe:	2300      	movs	r3, #0
   d7ac0:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   d7ac4:	d302      	bcc.n	d7acc <mbedtls_mpi_grow+0x46>
   d7ac6:	602b      	str	r3, [r5, #0]
   d7ac8:	3504      	adds	r5, #4
   d7aca:	e7f9      	b.n	d7ac0 <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
   d7acc:	68a0      	ldr	r0, [r4, #8]
   d7ace:	f00c fa73 	bl	e3fb8 <free>
        }

        X->n = nblimbs;
   d7ad2:	6067      	str	r7, [r4, #4]
        X->p = p;
   d7ad4:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
   d7ad8:	2000      	movs	r0, #0
}
   d7ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7ade <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
   d7ade:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   d7ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ae2:	4606      	mov	r6, r0
   d7ae4:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
   d7ae6:	d020      	beq.n	d7b2a <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
   d7ae8:	688d      	ldr	r5, [r1, #8]
   d7aea:	b915      	cbnz	r5, d7af2 <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
   d7aec:	f7ff ffb5 	bl	d7a5a <mbedtls_mpi_free>
        return( 0 );
   d7af0:	e01c      	b.n	d7b2c <mbedtls_mpi_copy+0x4e>
    }

    for( i = Y->n - 1; i > 0; i-- )
   d7af2:	684a      	ldr	r2, [r1, #4]
   d7af4:	3a01      	subs	r2, #1
   d7af6:	b11a      	cbz	r2, d7b00 <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
   d7af8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   d7afc:	2b00      	cmp	r3, #0
   d7afe:	d0f9      	beq.n	d7af4 <mbedtls_mpi_copy+0x16>
            break;
    i++;
   d7b00:	1c54      	adds	r4, r2, #1

    X->s = Y->s;
   d7b02:	683b      	ldr	r3, [r7, #0]
   d7b04:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
   d7b06:	4621      	mov	r1, r4
   d7b08:	4630      	mov	r0, r6
   d7b0a:	f7ff ffbc 	bl	d7a86 <mbedtls_mpi_grow>
   d7b0e:	4605      	mov	r5, r0
   d7b10:	b960      	cbnz	r0, d7b2c <mbedtls_mpi_copy+0x4e>

    memset( X->p, 0, X->n * ciL );
   d7b12:	6872      	ldr	r2, [r6, #4]
   d7b14:	4601      	mov	r1, r0
   d7b16:	0092      	lsls	r2, r2, #2
   d7b18:	68b0      	ldr	r0, [r6, #8]
   d7b1a:	f00f f83a 	bl	e6b92 <memset>
    memcpy( X->p, Y->p, i * ciL );
   d7b1e:	00a2      	lsls	r2, r4, #2
   d7b20:	68b9      	ldr	r1, [r7, #8]
   d7b22:	68b0      	ldr	r0, [r6, #8]
   d7b24:	f00f f80f 	bl	e6b46 <memcpy>
   d7b28:	e000      	b.n	d7b2c <mbedtls_mpi_copy+0x4e>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
   d7b2a:	2500      	movs	r5, #0
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
   d7b2c:	4628      	mov	r0, r5
   d7b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b30 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   d7b30:	b570      	push	{r4, r5, r6, lr}
   d7b32:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   d7b34:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   d7b36:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   d7b38:	f7ff ffa5 	bl	d7a86 <mbedtls_mpi_grow>
   d7b3c:	4605      	mov	r5, r0
   d7b3e:	b988      	cbnz	r0, d7b64 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
   d7b40:	6862      	ldr	r2, [r4, #4]
   d7b42:	4601      	mov	r1, r0
   d7b44:	0092      	lsls	r2, r2, #2
   d7b46:	68a0      	ldr	r0, [r4, #8]
   d7b48:	f00f f823 	bl	e6b92 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
   d7b4c:	68a3      	ldr	r3, [r4, #8]
   d7b4e:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
   d7b52:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
   d7b54:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   d7b58:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
   d7b5a:	bfb4      	ite	lt
   d7b5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   d7b60:	2301      	movge	r3, #1
   d7b62:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
   d7b64:	4628      	mov	r0, r5
   d7b66:	bd70      	pop	{r4, r5, r6, pc}

000d7b68 <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
   d7b68:	6843      	ldr	r3, [r0, #4]
   d7b6a:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
   d7b6e:	bf3f      	itttt	cc
   d7b70:	6883      	ldrcc	r3, [r0, #8]
   d7b72:	094a      	lsrcc	r2, r1, #5
   d7b74:	f001 001f 	andcc.w	r0, r1, #31
   d7b78:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
   d7b7c:	bf3a      	itte	cc
   d7b7e:	fa23 f000 	lsrcc.w	r0, r3, r0
   d7b82:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
   d7b86:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
   d7b88:	4770      	bx	lr

000d7b8a <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
   d7b8a:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;
   d7b8c:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
   d7b8e:	6844      	ldr	r4, [r0, #4]
   d7b90:	461a      	mov	r2, r3
   d7b92:	42a2      	cmp	r2, r4
   d7b94:	d00e      	beq.n	d7bb4 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   d7b96:	6881      	ldr	r1, [r0, #8]
   d7b98:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   d7b9c:	2100      	movs	r1, #0
   d7b9e:	fa25 f601 	lsr.w	r6, r5, r1
   d7ba2:	07f6      	lsls	r6, r6, #31
   d7ba4:	d408      	bmi.n	d7bb8 <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
   d7ba6:	3101      	adds	r1, #1
   d7ba8:	2920      	cmp	r1, #32
   d7baa:	f103 0301 	add.w	r3, r3, #1
   d7bae:	d1f6      	bne.n	d7b9e <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
   d7bb0:	3201      	adds	r2, #1
   d7bb2:	e7ee      	b.n	d7b92 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
   d7bb4:	2000      	movs	r0, #0
   d7bb6:	bd70      	pop	{r4, r5, r6, pc}
   d7bb8:	4618      	mov	r0, r3
}
   d7bba:	bd70      	pop	{r4, r5, r6, pc}

000d7bbc <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
   d7bbc:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
   d7bbe:	6843      	ldr	r3, [r0, #4]
   d7bc0:	b1d3      	cbz	r3, d7bf8 <mbedtls_mpi_bitlen+0x3c>
   d7bc2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d7bc6:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
   d7bc8:	1e59      	subs	r1, r3, #1
   d7bca:	0092      	lsls	r2, r2, #2
   d7bcc:	6883      	ldr	r3, [r0, #8]
   d7bce:	b121      	cbz	r1, d7bda <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
   d7bd0:	589c      	ldr	r4, [r3, r2]
   d7bd2:	3a04      	subs	r2, #4
   d7bd4:	b90c      	cbnz	r4, d7bda <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
   d7bd6:	3901      	subs	r1, #1
   d7bd8:	e7f8      	b.n	d7bcc <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
   d7bda:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
   d7bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
   d7be2:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
   d7be4:	4210      	tst	r0, r2
   d7be6:	d104      	bne.n	d7bf2 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
   d7be8:	3301      	adds	r3, #1
   d7bea:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
   d7bec:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
   d7bf0:	d1f8      	bne.n	d7be4 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
   d7bf2:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
   d7bf6:	3320      	adds	r3, #32
}
   d7bf8:	4618      	mov	r0, r3
   d7bfa:	bd10      	pop	{r4, pc}

000d7bfc <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
   d7bfc:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
   d7bfe:	f7ff ffdd 	bl	d7bbc <mbedtls_mpi_bitlen>
   d7c02:	3007      	adds	r0, #7
}
   d7c04:	08c0      	lsrs	r0, r0, #3
   d7c06:	bd08      	pop	{r3, pc}

000d7c08 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
   d7c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c0a:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
   d7c0c:	f012 0103 	ands.w	r1, r2, #3
   d7c10:	bf18      	it	ne
   d7c12:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d7c14:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
   d7c16:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d7c1a:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
   d7c1c:	4606      	mov	r6, r0
   d7c1e:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   d7c20:	d105      	bne.n	d7c2e <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   d7c22:	2100      	movs	r1, #0
   d7c24:	4630      	mov	r0, r6
   d7c26:	f7ff ff83 	bl	d7b30 <mbedtls_mpi_lset>
   d7c2a:	b160      	cbz	r0, d7c46 <mbedtls_mpi_read_binary+0x3e>
   d7c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
   d7c2e:	f7ff ff14 	bl	d7a5a <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
   d7c32:	4630      	mov	r0, r6
   d7c34:	f7ff ff0a 	bl	d7a4c <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   d7c38:	4621      	mov	r1, r4
   d7c3a:	4630      	mov	r0, r6
   d7c3c:	f7ff ff23 	bl	d7a86 <mbedtls_mpi_grow>
   d7c40:	2800      	cmp	r0, #0
   d7c42:	d0ee      	beq.n	d7c22 <mbedtls_mpi_read_binary+0x1a>
   d7c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7c46:	19e9      	adds	r1, r5, r7
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   d7c48:	4603      	mov	r3, r0

    for( i = buflen, j = 0; i > 0; i--, j++ )
   d7c4a:	42bb      	cmp	r3, r7
   d7c4c:	d010      	beq.n	d7c70 <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
   d7c4e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
   d7c52:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
   d7c56:	68b2      	ldr	r2, [r6, #8]
   d7c58:	00dc      	lsls	r4, r3, #3
   d7c5a:	f004 0418 	and.w	r4, r4, #24
   d7c5e:	fa05 f404 	lsl.w	r4, r5, r4
   d7c62:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   d7c66:	432c      	orrs	r4, r5
   d7c68:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
   d7c6c:	3301      	adds	r3, #1
   d7c6e:	e7ec      	b.n	d7c4a <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
   d7c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c72 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
   d7c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c74:	4614      	mov	r4, r2
   d7c76:	4605      	mov	r5, r0
   d7c78:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
   d7c7a:	f7ff ffbf 	bl	d7bfc <mbedtls_mpi_size>

    if( buflen < n )
   d7c7e:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
   d7c80:	4606      	mov	r6, r0

    if( buflen < n )
   d7c82:	d814      	bhi.n	d7cae <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
   d7c84:	4622      	mov	r2, r4
   d7c86:	2100      	movs	r1, #0
   d7c88:	4638      	mov	r0, r7
   d7c8a:	f00e ff82 	bl	e6b92 <memset>
   d7c8e:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
   d7c90:	2300      	movs	r3, #0
   d7c92:	42b3      	cmp	r3, r6
   d7c94:	d00e      	beq.n	d7cb4 <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
   d7c96:	089f      	lsrs	r7, r3, #2
   d7c98:	68a8      	ldr	r0, [r5, #8]
   d7c9a:	00da      	lsls	r2, r3, #3
   d7c9c:	f002 0118 	and.w	r1, r2, #24
   d7ca0:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   d7ca4:	40ca      	lsrs	r2, r1
   d7ca6:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
   d7caa:	3301      	adds	r3, #1
   d7cac:	e7f1      	b.n	d7c92 <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   d7cae:	f06f 0007 	mvn.w	r0, #7
   d7cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
   d7cb4:	2000      	movs	r0, #0
}
   d7cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cb8 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
   d7cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7cba:	4604      	mov	r4, r0
   d7cbc:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
   d7cbe:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
   d7cc0:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
   d7cc4:	f7ff ff7a 	bl	d7bbc <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
   d7cc8:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
   d7cca:	4428      	add	r0, r5

    if( X->n * biL < i )
   d7ccc:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
   d7cd0:	d809      	bhi.n	d7ce6 <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   d7cd2:	b346      	cbz	r6, d7d26 <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
   d7cd4:	6863      	ldr	r3, [r4, #4]
   d7cd6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d7cda:	3a01      	subs	r2, #1
   d7cdc:	f06f 0103 	mvn.w	r1, #3
   d7ce0:	0092      	lsls	r2, r2, #2
   d7ce2:	4371      	muls	r1, r6
   d7ce4:	e00b      	b.n	d7cfe <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
   d7ce6:	f010 011f 	ands.w	r1, r0, #31
   d7cea:	bf18      	it	ne
   d7cec:	2101      	movne	r1, #1
   d7cee:	eb01 1150 	add.w	r1, r1, r0, lsr #5
   d7cf2:	4620      	mov	r0, r4
   d7cf4:	f7ff fec7 	bl	d7a86 <mbedtls_mpi_grow>
   d7cf8:	2800      	cmp	r0, #0
   d7cfa:	d0ea      	beq.n	d7cd2 <mbedtls_mpi_shift_l+0x1a>
   d7cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   d7cfe:	429e      	cmp	r6, r3
   d7d00:	d206      	bcs.n	d7d10 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
   d7d02:	68a0      	ldr	r0, [r4, #8]
   d7d04:	1885      	adds	r5, r0, r2
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   d7d06:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
   d7d08:	586d      	ldr	r5, [r5, r1]
   d7d0a:	5085      	str	r5, [r0, r2]
   d7d0c:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   d7d0e:	e7f6      	b.n	d7cfe <mbedtls_mpi_shift_l+0x46>
   d7d10:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d7d14:	3a01      	subs	r2, #1
   d7d16:	0092      	lsls	r2, r2, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
   d7d18:	2000      	movs	r0, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   d7d1a:	b123      	cbz	r3, d7d26 <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
   d7d1c:	68a1      	ldr	r1, [r4, #8]
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   d7d1e:	3b01      	subs	r3, #1
            X->p[i - 1] = 0;
   d7d20:	5088      	str	r0, [r1, r2]
   d7d22:	3a04      	subs	r2, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   d7d24:	e7f9      	b.n	d7d1a <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
   d7d26:	b90f      	cbnz	r7, d7d2c <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
   d7d28:	2000      	movs	r0, #0
   d7d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7d2c:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
   d7d2e:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
   d7d30:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   d7d34:	6861      	ldr	r1, [r4, #4]
   d7d36:	428e      	cmp	r6, r1
   d7d38:	d2f6      	bcs.n	d7d28 <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
   d7d3a:	68a0      	ldr	r0, [r4, #8]
   d7d3c:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
   d7d3e:	fa01 f507 	lsl.w	r5, r1, r7
   d7d42:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
   d7d44:	68a0      	ldr	r0, [r4, #8]
   d7d46:	58c5      	ldr	r5, [r0, r3]
   d7d48:	432a      	orrs	r2, r5
   d7d4a:	50c2      	str	r2, [r0, r3]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   d7d4c:	3601      	adds	r6, #1
   d7d4e:	3304      	adds	r3, #4
        {
            r1 = X->p[i] >> (biL - t1);
            X->p[i] <<= t1;
            X->p[i] |= r0;
            r0 = r1;
   d7d50:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   d7d54:	e7ee      	b.n	d7d34 <mbedtls_mpi_shift_l+0x7c>

000d7d56 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
   d7d56:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   d7d58:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
   d7d5a:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   d7d5c:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
   d7d5e:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   d7d62:	d801      	bhi.n	d7d68 <mbedtls_mpi_shift_r+0x12>
   d7d64:	d105      	bne.n	d7d72 <mbedtls_mpi_shift_r+0x1c>
   d7d66:	b159      	cbz	r1, d7d80 <mbedtls_mpi_shift_r+0x2a>
        return mbedtls_mpi_lset( X, 0 );
   d7d68:	2100      	movs	r1, #0
            r0 = r1;
        }
    }

    return( 0 );
}
   d7d6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
   d7d6e:	f7ff bedf 	b.w	d7b30 <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   d7d72:	b1d2      	cbz	r2, d7daa <mbedtls_mpi_shift_r+0x54>
   d7d74:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
   d7d76:	6844      	ldr	r4, [r0, #4]
   d7d78:	1aa4      	subs	r4, r4, r2
   d7d7a:	42a3      	cmp	r3, r4
   d7d7c:	d305      	bcc.n	d7d8a <mbedtls_mpi_shift_r+0x34>
   d7d7e:	e001      	b.n	d7d84 <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   d7d80:	b35a      	cbz	r2, d7dda <mbedtls_mpi_shift_r+0x84>
   d7d82:	460b      	mov	r3, r1
   d7d84:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
   d7d86:	2500      	movs	r5, #0
   d7d88:	e007      	b.n	d7d9a <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
   d7d8a:	6884      	ldr	r4, [r0, #8]
   d7d8c:	189d      	adds	r5, r3, r2
   d7d8e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   d7d92:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
   d7d96:	3301      	adds	r3, #1
   d7d98:	e7ed      	b.n	d7d76 <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   d7d9a:	6844      	ldr	r4, [r0, #4]
   d7d9c:	42a3      	cmp	r3, r4
   d7d9e:	d204      	bcs.n	d7daa <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
   d7da0:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   d7da2:	3301      	adds	r3, #1
            X->p[i] = 0;
   d7da4:	50a5      	str	r5, [r4, r2]
   d7da6:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   d7da8:	e7f7      	b.n	d7d9a <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
   d7daa:	b1b1      	cbz	r1, d7dda <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
   d7dac:	6844      	ldr	r4, [r0, #4]
   d7dae:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   d7db2:	3b01      	subs	r3, #1
   d7db4:	009b      	lsls	r3, r3, #2
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
   d7db6:	2200      	movs	r2, #0
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
   d7db8:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   d7dbc:	b16c      	cbz	r4, d7dda <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
   d7dbe:	6886      	ldr	r6, [r0, #8]
   d7dc0:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
   d7dc2:	fa25 f701 	lsr.w	r7, r5, r1
   d7dc6:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
   d7dc8:	6886      	ldr	r6, [r0, #8]
   d7dca:	58f7      	ldr	r7, [r6, r3]
   d7dcc:	433a      	orrs	r2, r7
   d7dce:	50f2      	str	r2, [r6, r3]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   d7dd0:	3c01      	subs	r4, #1
   d7dd2:	3b04      	subs	r3, #4
        {
            r1 = X->p[i - 1] << (biL - v1);
            X->p[i - 1] >>= v1;
            X->p[i - 1] |= r0;
            r0 = r1;
   d7dd4:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   d7dd8:	e7f0      	b.n	d7dbc <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
   d7dda:	2000      	movs	r0, #0
   d7ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7dde <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   d7dde:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
   d7de0:	6843      	ldr	r3, [r0, #4]
   d7de2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d7de6:	3a01      	subs	r2, #1
   d7de8:	0092      	lsls	r2, r2, #2
   d7dea:	b12b      	cbz	r3, d7df8 <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
   d7dec:	6884      	ldr	r4, [r0, #8]
   d7dee:	58a4      	ldr	r4, [r4, r2]
   d7df0:	3a04      	subs	r2, #4
   d7df2:	b90c      	cbnz	r4, d7df8 <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
   d7df4:	3b01      	subs	r3, #1
   d7df6:	e7f8      	b.n	d7dea <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   d7df8:	684c      	ldr	r4, [r1, #4]
   d7dfa:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   d7dfe:	3a01      	subs	r2, #1
   d7e00:	0092      	lsls	r2, r2, #2
   d7e02:	b1c4      	cbz	r4, d7e36 <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
   d7e04:	688d      	ldr	r5, [r1, #8]
   d7e06:	58ae      	ldr	r6, [r5, r2]
   d7e08:	3a04      	subs	r2, #4
   d7e0a:	b90e      	cbnz	r6, d7e10 <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   d7e0c:	3c01      	subs	r4, #1
   d7e0e:	e7f8      	b.n	d7e02 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
   d7e10:	429c      	cmp	r4, r3
   d7e12:	d30b      	bcc.n	d7e2c <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
   d7e14:	d913      	bls.n	d7e3e <mbedtls_mpi_cmp_abs+0x60>
   d7e16:	e00b      	b.n	d7e30 <mbedtls_mpi_cmp_abs+0x52>
   d7e18:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
   d7e1c:	d308      	bcc.n	d7e30 <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
   d7e1e:	3b01      	subs	r3, #1
   d7e20:	b193      	cbz	r3, d7e48 <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
   d7e22:	6881      	ldr	r1, [r0, #8]
   d7e24:	588c      	ldr	r4, [r1, r2]
   d7e26:	58a9      	ldr	r1, [r5, r2]
   d7e28:	428c      	cmp	r4, r1
   d7e2a:	d9f5      	bls.n	d7e18 <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
   d7e2c:	2001      	movs	r0, #1
   d7e2e:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
   d7e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7e34:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
   d7e36:	1c18      	adds	r0, r3, #0
   d7e38:	bf18      	it	ne
   d7e3a:	2001      	movne	r0, #1
   d7e3c:	bd70      	pop	{r4, r5, r6, pc}
   d7e3e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d7e42:	3a01      	subs	r2, #1
   d7e44:	0092      	lsls	r2, r2, #2
   d7e46:	e7eb      	b.n	d7e20 <mbedtls_mpi_cmp_abs+0x42>
   d7e48:	4618      	mov	r0, r3
   d7e4a:	bd70      	pop	{r4, r5, r6, pc}

000d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   d7e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e50:	b085      	sub	sp, #20
   d7e52:	4616      	mov	r6, r2
   d7e54:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   d7e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7e58:	685a      	ldr	r2, [r3, #4]
   d7e5a:	6873      	ldr	r3, [r6, #4]
   d7e5c:	3301      	adds	r3, #1
   d7e5e:	429a      	cmp	r2, r3
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   d7e60:	4681      	mov	r9, r0
   d7e62:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   d7e64:	d351      	bcc.n	d7f0a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
   d7e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7e68:	6898      	ldr	r0, [r3, #8]
   d7e6a:	2800      	cmp	r0, #0
   d7e6c:	d04d      	beq.n	d7f0a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
   d7e6e:	0092      	lsls	r2, r2, #2
   d7e70:	2100      	movs	r1, #0
   d7e72:	f00e fe8e 	bl	e6b92 <memset>

    d = T->p;
   d7e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
   d7e78:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
   d7e7c:	689b      	ldr	r3, [r3, #8]
   d7e7e:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
   d7e80:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
   d7e84:	9d00      	ldr	r5, [sp, #0]
   d7e86:	4553      	cmp	r3, sl
   d7e88:	bf28      	it	cs
   d7e8a:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
   d7e8c:	f10a 0701 	add.w	r7, sl, #1
   d7e90:	9302      	str	r3, [sp, #8]
   d7e92:	00bf      	lsls	r7, r7, #2

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
   d7e94:	2400      	movs	r4, #0
   d7e96:	4554      	cmp	r4, sl
   d7e98:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7e9c:	d01b      	beq.n	d7ed6 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   d7e9e:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
   d7ea2:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   d7ea6:	682a      	ldr	r2, [r5, #0]
   d7ea8:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
   d7eaa:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   d7eac:	fb03 2308 	mla	r3, r3, r8, r2
   d7eb0:	9a03      	ldr	r2, [sp, #12]
   d7eb2:	4353      	muls	r3, r2
   d7eb4:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
   d7eb6:	462a      	mov	r2, r5
   d7eb8:	4643      	mov	r3, r8
   d7eba:	f7ff fbfb 	bl	d76b4 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
   d7ebe:	9b01      	ldr	r3, [sp, #4]
   d7ec0:	68b1      	ldr	r1, [r6, #8]
   d7ec2:	462a      	mov	r2, r5
   d7ec4:	4650      	mov	r0, sl
   d7ec6:	f7ff fbf5 	bl	d76b4 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
   d7eca:	f845 8b04 	str.w	r8, [r5], #4
   d7ece:	2300      	movs	r3, #0
   d7ed0:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
   d7ed2:	3401      	adds	r4, #1
   d7ed4:	e7df      	b.n	d7e96 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
   d7ed6:	9b00      	ldr	r3, [sp, #0]
   d7ed8:	1f39      	subs	r1, r7, #4
   d7eda:	440b      	add	r3, r1
   d7edc:	463a      	mov	r2, r7
   d7ede:	4619      	mov	r1, r3
   d7ee0:	f00e fe31 	bl	e6b46 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
   d7ee4:	4631      	mov	r1, r6
   d7ee6:	4648      	mov	r0, r9
   d7ee8:	f7ff ff79 	bl	d7dde <mbedtls_mpi_cmp_abs>
   d7eec:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   d7eee:	bfb3      	iteet	lt
   d7ef0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
   d7ef2:	f8d9 2008 	ldrge.w	r2, [r9, #8]
   d7ef6:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   d7ef8:	689a      	ldrlt	r2, [r3, #8]
   d7efa:	bfb8      	it	lt
   d7efc:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
   d7f00:	4620      	mov	r0, r4
   d7f02:	f7ff fbad 	bl	d7660 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
   d7f06:	2000      	movs	r0, #0
   d7f08:	e001      	b.n	d7f0e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   d7f0a:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
   d7f0e:	b005      	add	sp, #20
   d7f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7f14 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   d7f14:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
   d7f16:	6843      	ldr	r3, [r0, #4]
   d7f18:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   d7f1c:	3a01      	subs	r2, #1
   d7f1e:	0092      	lsls	r2, r2, #2
   d7f20:	b12b      	cbz	r3, d7f2e <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
   d7f22:	6884      	ldr	r4, [r0, #8]
   d7f24:	58a4      	ldr	r4, [r4, r2]
   d7f26:	3a04      	subs	r2, #4
   d7f28:	b90c      	cbnz	r4, d7f2e <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
   d7f2a:	3b01      	subs	r3, #1
   d7f2c:	e7f8      	b.n	d7f20 <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   d7f2e:	684c      	ldr	r4, [r1, #4]
   d7f30:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   d7f34:	3a01      	subs	r2, #1
   d7f36:	0092      	lsls	r2, r2, #2
   d7f38:	b364      	cbz	r4, d7f94 <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
   d7f3a:	688d      	ldr	r5, [r1, #8]
   d7f3c:	58ae      	ldr	r6, [r5, r2]
   d7f3e:	3a04      	subs	r2, #4
   d7f40:	b90e      	cbnz	r6, d7f46 <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   d7f42:	3c01      	subs	r4, #1
   d7f44:	e7f8      	b.n	d7f38 <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
   d7f46:	429c      	cmp	r4, r3
   d7f48:	d201      	bcs.n	d7f4e <mbedtls_mpi_cmp_mpi+0x3a>
   d7f4a:	6802      	ldr	r2, [r0, #0]
   d7f4c:	e025      	b.n	d7f9a <mbedtls_mpi_cmp_mpi+0x86>
   d7f4e:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
   d7f50:	d901      	bls.n	d7f56 <mbedtls_mpi_cmp_mpi+0x42>
   d7f52:	424a      	negs	r2, r1
   d7f54:	e021      	b.n	d7f9a <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
   d7f56:	6802      	ldr	r2, [r0, #0]
   d7f58:	2a00      	cmp	r2, #0
   d7f5a:	dd01      	ble.n	d7f60 <mbedtls_mpi_cmp_mpi+0x4c>
   d7f5c:	2900      	cmp	r1, #0
   d7f5e:	db14      	blt.n	d7f8a <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   d7f60:	2900      	cmp	r1, #0
   d7f62:	dd01      	ble.n	d7f68 <mbedtls_mpi_cmp_mpi+0x54>
   d7f64:	2a00      	cmp	r2, #0
   d7f66:	db12      	blt.n	d7f8e <mbedtls_mpi_cmp_mpi+0x7a>
   d7f68:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   d7f6c:	3901      	subs	r1, #1
   d7f6e:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
   d7f70:	b193      	cbz	r3, d7f98 <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
   d7f72:	6884      	ldr	r4, [r0, #8]
   d7f74:	5866      	ldr	r6, [r4, r1]
   d7f76:	586c      	ldr	r4, [r5, r1]
   d7f78:	42a6      	cmp	r6, r4
   d7f7a:	d80e      	bhi.n	d7f9a <mbedtls_mpi_cmp_mpi+0x86>
   d7f7c:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
   d7f80:	d201      	bcs.n	d7f86 <mbedtls_mpi_cmp_mpi+0x72>
   d7f82:	4252      	negs	r2, r2
   d7f84:	e009      	b.n	d7f9a <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
   d7f86:	3b01      	subs	r3, #1
   d7f88:	e7f2      	b.n	d7f70 <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
   d7f8a:	2201      	movs	r2, #1
   d7f8c:	e005      	b.n	d7f9a <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   d7f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7f92:	e002      	b.n	d7f9a <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
   d7f94:	2b00      	cmp	r3, #0
   d7f96:	d1d8      	bne.n	d7f4a <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
   d7f98:	461a      	mov	r2, r3
}
   d7f9a:	4610      	mov	r0, r2
   d7f9c:	bd70      	pop	{r4, r5, r6, pc}

000d7f9e <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   d7f9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
   d7fa0:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
   d7fa4:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
   d7fa8:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
   d7faa:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
   d7fac:	bfb4      	ite	lt
   d7fae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   d7fb2:	2301      	movge	r3, #1
   d7fb4:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   d7fb6:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
   d7fb8:	2301      	movs	r3, #1
   d7fba:	9302      	str	r3, [sp, #8]
    Y.p = p;
   d7fbc:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   d7fc0:	f7ff ffa8 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
}
   d7fc4:	b005      	add	sp, #20
   d7fc6:	f85d fb04 	ldr.w	pc, [sp], #4

000d7fca <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
   d7fca:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d7fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7fd0:	4606      	mov	r6, r0
   d7fd2:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
   d7fd4:	d006      	beq.n	d7fe4 <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
   d7fd6:	4288      	cmp	r0, r1
   d7fd8:	d005      	beq.n	d7fe6 <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   d7fda:	f7ff fd80 	bl	d7ade <mbedtls_mpi_copy>
   d7fde:	4607      	mov	r7, r0
   d7fe0:	b108      	cbz	r0, d7fe6 <mbedtls_mpi_add_abs+0x1c>
   d7fe2:	e049      	b.n	d8078 <mbedtls_mpi_add_abs+0xae>
   d7fe4:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
   d7fe6:	2301      	movs	r3, #1
   d7fe8:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
   d7fea:	686c      	ldr	r4, [r5, #4]
   d7fec:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   d7ff0:	3b01      	subs	r3, #1
   d7ff2:	009b      	lsls	r3, r3, #2
   d7ff4:	b12c      	cbz	r4, d8002 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
   d7ff6:	68aa      	ldr	r2, [r5, #8]
   d7ff8:	58d2      	ldr	r2, [r2, r3]
   d7ffa:	3b04      	subs	r3, #4
   d7ffc:	b90a      	cbnz	r2, d8002 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
   d7ffe:	3c01      	subs	r4, #1
   d8000:	e7f8      	b.n	d7ff4 <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   d8002:	4621      	mov	r1, r4
   d8004:	4630      	mov	r0, r6
   d8006:	f7ff fd3e 	bl	d7a86 <mbedtls_mpi_grow>
   d800a:	4607      	mov	r7, r0
   d800c:	2800      	cmp	r0, #0
   d800e:	d133      	bne.n	d8078 <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
   d8010:	68b3      	ldr	r3, [r6, #8]
   d8012:	f8d5 c008 	ldr.w	ip, [r5, #8]
   d8016:	4618      	mov	r0, r3
   d8018:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   d801a:	4639      	mov	r1, r7
   d801c:	42a1      	cmp	r1, r4
   d801e:	d00f      	beq.n	d8040 <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
   d8020:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
   d8022:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
   d8026:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
   d8028:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
   d802a:	bf2c      	ite	cs
   d802c:	2201      	movcs	r2, #1
   d802e:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
   d8030:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   d8034:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
   d8036:	45ae      	cmp	lr, r5
   d8038:	bf94      	ite	ls
   d803a:	4615      	movls	r5, r2
   d803c:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   d803e:	e7ed      	b.n	d801c <mbedtls_mpi_add_abs+0x52>
   d8040:	ea4f 0884 	mov.w	r8, r4, lsl #2
   d8044:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
   d8046:	b1bd      	cbz	r5, d8078 <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
   d8048:	6872      	ldr	r2, [r6, #4]
   d804a:	4294      	cmp	r4, r2
   d804c:	f104 0401 	add.w	r4, r4, #1
   d8050:	d306      	bcc.n	d8060 <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   d8052:	4621      	mov	r1, r4
   d8054:	4630      	mov	r0, r6
   d8056:	f7ff fd16 	bl	d7a86 <mbedtls_mpi_grow>
   d805a:	b960      	cbnz	r0, d8076 <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
   d805c:	68b3      	ldr	r3, [r6, #8]
   d805e:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
   d8060:	681a      	ldr	r2, [r3, #0]
   d8062:	442a      	add	r2, r5
   d8064:	4295      	cmp	r5, r2
   d8066:	f843 2b04 	str.w	r2, [r3], #4
   d806a:	bf94      	ite	ls
   d806c:	2500      	movls	r5, #0
   d806e:	2501      	movhi	r5, #1
   d8070:	f108 0804 	add.w	r8, r8, #4
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
   d8074:	e7e7      	b.n	d8046 <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   d8076:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
   d8078:	4638      	mov	r0, r7
   d807a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d807e <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d807e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8080:	460f      	mov	r7, r1
   d8082:	b085      	sub	sp, #20
   d8084:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d8086:	4611      	mov	r1, r2
   d8088:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d808a:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d808c:	f7ff fea7 	bl	d7dde <mbedtls_mpi_cmp_abs>
   d8090:	2800      	cmp	r0, #0
   d8092:	db30      	blt.n	d80f6 <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8094:	2301      	movs	r3, #1
   d8096:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
   d8098:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
   d809a:	f04f 0300 	mov.w	r3, #0
   d809e:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   d80a0:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
   d80a2:	d106      	bne.n	d80b2 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   d80a4:	4629      	mov	r1, r5
   d80a6:	a801      	add	r0, sp, #4
   d80a8:	f7ff fd19 	bl	d7ade <mbedtls_mpi_copy>
   d80ac:	4604      	mov	r4, r0
   d80ae:	b9e8      	cbnz	r0, d80ec <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
   d80b0:	ad01      	add	r5, sp, #4
    }

    if( X != A )
   d80b2:	42b7      	cmp	r7, r6
   d80b4:	d107      	bne.n	d80c6 <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
   d80b6:	2301      	movs	r3, #1
   d80b8:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
   d80ba:	6868      	ldr	r0, [r5, #4]
   d80bc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   d80c0:	3b01      	subs	r3, #1
   d80c2:	009b      	lsls	r3, r3, #2
   d80c4:	e00b      	b.n	d80de <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   d80c6:	4639      	mov	r1, r7
   d80c8:	4630      	mov	r0, r6
   d80ca:	f7ff fd08 	bl	d7ade <mbedtls_mpi_copy>
   d80ce:	4604      	mov	r4, r0
   d80d0:	b960      	cbnz	r0, d80ec <mbedtls_mpi_sub_abs+0x6e>
   d80d2:	e7f0      	b.n	d80b6 <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
   d80d4:	68aa      	ldr	r2, [r5, #8]
   d80d6:	58d2      	ldr	r2, [r2, r3]
   d80d8:	3b04      	subs	r3, #4
   d80da:	b912      	cbnz	r2, d80e2 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
   d80dc:	3801      	subs	r0, #1
   d80de:	2800      	cmp	r0, #0
   d80e0:	d1f8      	bne.n	d80d4 <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
   d80e2:	68b2      	ldr	r2, [r6, #8]
   d80e4:	68a9      	ldr	r1, [r5, #8]
   d80e6:	f7ff fabb 	bl	d7660 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
   d80ea:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
   d80ec:	a801      	add	r0, sp, #4
   d80ee:	f7ff fcb4 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
   d80f2:	4620      	mov	r0, r4
   d80f4:	e001      	b.n	d80fa <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   d80f6:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
   d80fa:	b005      	add	sp, #20
   d80fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d80fe <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d80fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
   d8100:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
   d8102:	6813      	ldr	r3, [r2, #0]
   d8104:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d8106:	4605      	mov	r5, r0
   d8108:	460f      	mov	r7, r1
   d810a:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
   d810c:	d513      	bpl.n	d8136 <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   d810e:	4611      	mov	r1, r2
   d8110:	4638      	mov	r0, r7
   d8112:	f7ff fe64 	bl	d7dde <mbedtls_mpi_cmp_abs>
   d8116:	2800      	cmp	r0, #0
   d8118:	db05      	blt.n	d8126 <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   d811a:	4632      	mov	r2, r6
   d811c:	4639      	mov	r1, r7
   d811e:	4628      	mov	r0, r5
   d8120:	f7ff ffad 	bl	d807e <mbedtls_mpi_sub_abs>
   d8124:	e009      	b.n	d813a <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   d8126:	463a      	mov	r2, r7
   d8128:	4631      	mov	r1, r6
   d812a:	4628      	mov	r0, r5
   d812c:	f7ff ffa7 	bl	d807e <mbedtls_mpi_sub_abs>
   d8130:	b928      	cbnz	r0, d813e <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
   d8132:	4264      	negs	r4, r4
   d8134:	e002      	b.n	d813c <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   d8136:	f7ff ff48 	bl	d7fca <mbedtls_mpi_add_abs>
   d813a:	b900      	cbnz	r0, d813e <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
   d813c:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
   d813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8140 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d8140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
   d8142:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
   d8144:	6813      	ldr	r3, [r2, #0]
   d8146:	4363      	muls	r3, r4
   d8148:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d814a:	4605      	mov	r5, r0
   d814c:	460f      	mov	r7, r1
   d814e:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
   d8150:	dd13      	ble.n	d817a <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   d8152:	4611      	mov	r1, r2
   d8154:	4638      	mov	r0, r7
   d8156:	f7ff fe42 	bl	d7dde <mbedtls_mpi_cmp_abs>
   d815a:	2800      	cmp	r0, #0
   d815c:	db05      	blt.n	d816a <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   d815e:	4632      	mov	r2, r6
   d8160:	4639      	mov	r1, r7
   d8162:	4628      	mov	r0, r5
   d8164:	f7ff ff8b 	bl	d807e <mbedtls_mpi_sub_abs>
   d8168:	e009      	b.n	d817e <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   d816a:	463a      	mov	r2, r7
   d816c:	4631      	mov	r1, r6
   d816e:	4628      	mov	r0, r5
   d8170:	f7ff ff85 	bl	d807e <mbedtls_mpi_sub_abs>
   d8174:	b928      	cbnz	r0, d8182 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
   d8176:	4264      	negs	r4, r4
   d8178:	e002      	b.n	d8180 <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   d817a:	f7ff ff26 	bl	d7fca <mbedtls_mpi_add_abs>
   d817e:	b900      	cbnz	r0, d8182 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
   d8180:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
   d8182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8184 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
   d8184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
   d8186:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   d818a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   d818e:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
   d8190:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   d8192:	bfb4      	ite	lt
   d8194:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   d8198:	2301      	movge	r3, #1
   d819a:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   d819c:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
   d819e:	2301      	movs	r3, #1
   d81a0:	9302      	str	r3, [sp, #8]
    _B.p = p;
   d81a2:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   d81a6:	f7ff ffaa 	bl	d80fe <mbedtls_mpi_add_mpi>
}
   d81aa:	b005      	add	sp, #20
   d81ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d81b0 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
   d81b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
   d81b2:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   d81b6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   d81ba:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
   d81bc:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   d81be:	bfb4      	ite	lt
   d81c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   d81c4:	2301      	movge	r3, #1
   d81c6:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   d81c8:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
   d81ca:	2301      	movs	r3, #1
   d81cc:	9302      	str	r3, [sp, #8]
    _B.p = p;
   d81ce:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   d81d2:	f7ff ffb5 	bl	d8140 <mbedtls_mpi_sub_mpi>
}
   d81d6:	b005      	add	sp, #20
   d81d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d81dc <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d81dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d81e0:	b086      	sub	sp, #24
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
   d81e2:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d81e4:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   d81e6:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
   d81e8:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d81ec:	4681      	mov	r9, r0
   d81ee:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
   d81f0:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
   d81f4:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d81f6:	9203      	str	r2, [sp, #12]
    X->n = 0;
   d81f8:	9304      	str	r3, [sp, #16]
    X->p = NULL;
   d81fa:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   d81fc:	d106      	bne.n	d820c <mbedtls_mpi_mul_mpi+0x30>
   d81fe:	4668      	mov	r0, sp
   d8200:	f7ff fc6d 	bl	d7ade <mbedtls_mpi_copy>
   d8204:	4604      	mov	r4, r0
   d8206:	2800      	cmp	r0, #0
   d8208:	d14d      	bne.n	d82a6 <mbedtls_mpi_mul_mpi+0xca>
   d820a:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
   d820c:	45a9      	cmp	r9, r5
   d820e:	d107      	bne.n	d8220 <mbedtls_mpi_mul_mpi+0x44>
   d8210:	4649      	mov	r1, r9
   d8212:	a803      	add	r0, sp, #12
   d8214:	f7ff fc63 	bl	d7ade <mbedtls_mpi_copy>
   d8218:	4604      	mov	r4, r0
   d821a:	2800      	cmp	r0, #0
   d821c:	d143      	bne.n	d82a6 <mbedtls_mpi_mul_mpi+0xca>
   d821e:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
   d8220:	f8d6 a004 	ldr.w	sl, [r6, #4]
   d8224:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   d8228:	3b01      	subs	r3, #1
   d822a:	009b      	lsls	r3, r3, #2
   d822c:	f1ba 0f00 	cmp.w	sl, #0
   d8230:	d006      	beq.n	d8240 <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
   d8232:	68b2      	ldr	r2, [r6, #8]
   d8234:	58d2      	ldr	r2, [r2, r3]
   d8236:	3b04      	subs	r3, #4
   d8238:	b912      	cbnz	r2, d8240 <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
   d823a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   d823e:	e7f5      	b.n	d822c <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
   d8240:	686f      	ldr	r7, [r5, #4]
   d8242:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
   d8246:	3b01      	subs	r3, #1
   d8248:	009b      	lsls	r3, r3, #2
   d824a:	b12f      	cbz	r7, d8258 <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
   d824c:	68aa      	ldr	r2, [r5, #8]
   d824e:	58d2      	ldr	r2, [r2, r3]
   d8250:	3b04      	subs	r3, #4
   d8252:	b90a      	cbnz	r2, d8258 <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
   d8254:	3f01      	subs	r7, #1
   d8256:	e7f8      	b.n	d824a <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
   d8258:	eb0a 0107 	add.w	r1, sl, r7
   d825c:	4648      	mov	r0, r9
   d825e:	f7ff fc12 	bl	d7a86 <mbedtls_mpi_grow>
   d8262:	4604      	mov	r4, r0
   d8264:	b9f8      	cbnz	r0, d82a6 <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   d8266:	4601      	mov	r1, r0
   d8268:	4648      	mov	r0, r9
   d826a:	f7ff fc61 	bl	d7b30 <mbedtls_mpi_lset>
   d826e:	4604      	mov	r4, r0
   d8270:	b9c8      	cbnz	r0, d82a6 <mbedtls_mpi_mul_mpi+0xca>
   d8272:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
   d8276:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d827a:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
   d827e:	b16f      	cbz	r7, d829c <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
   d8280:	68ab      	ldr	r3, [r5, #8]
   d8282:	f8d9 2008 	ldr.w	r2, [r9, #8]
   d8286:	f853 3008 	ldr.w	r3, [r3, r8]
   d828a:	68b1      	ldr	r1, [r6, #8]
   d828c:	4442      	add	r2, r8
   d828e:	4650      	mov	r0, sl
   d8290:	f7ff fa10 	bl	d76b4 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
   d8294:	3f01      	subs	r7, #1
   d8296:	f1a8 0804 	sub.w	r8, r8, #4
   d829a:	e7f0      	b.n	d827e <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
   d829c:	6832      	ldr	r2, [r6, #0]
   d829e:	682b      	ldr	r3, [r5, #0]
   d82a0:	4353      	muls	r3, r2
   d82a2:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
   d82a6:	a803      	add	r0, sp, #12
   d82a8:	f7ff fbd7 	bl	d7a5a <mbedtls_mpi_free>
   d82ac:	4668      	mov	r0, sp
   d82ae:	f7ff fbd4 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
}
   d82b2:	4620      	mov	r0, r4
   d82b4:	b006      	add	sp, #24
   d82b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d82ba <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
   d82ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
   d82bc:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
   d82be:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   d82c0:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
   d82c2:	9301      	str	r3, [sp, #4]
    _B.n = 1;
   d82c4:	9302      	str	r3, [sp, #8]
    _B.p = p;
   d82c6:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   d82ca:	f7ff ff87 	bl	d81dc <mbedtls_mpi_mul_mpi>
}
   d82ce:	b005      	add	sp, #20
   d82d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d82d4 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d82d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d82d8:	b09b      	sub	sp, #108	; 0x6c
   d82da:	460f      	mov	r7, r1
   d82dc:	9001      	str	r0, [sp, #4]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   d82de:	2100      	movs	r1, #0
   d82e0:	4618      	mov	r0, r3

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d82e2:	4690      	mov	r8, r2
   d82e4:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   d82e6:	f7ff fe5a 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d82ea:	2800      	cmp	r0, #0
   d82ec:	f000 81ad 	beq.w	d864a <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
   d82f0:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d82f2:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d82f4:	9904      	ldr	r1, [sp, #16]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d82f6:	950b      	str	r5, [sp, #44]	; 0x2c
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d82f8:	4640      	mov	r0, r8
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
   d82fa:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
   d82fc:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d82fe:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
   d8300:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
   d8302:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8304:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
   d8306:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
   d8308:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d830a:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
   d830c:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
   d830e:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8310:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
   d8312:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
   d8314:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   d8316:	f7ff fd62 	bl	d7dde <mbedtls_mpi_cmp_abs>
   d831a:	42a0      	cmp	r0, r4
   d831c:	da16      	bge.n	d834c <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   d831e:	9b01      	ldr	r3, [sp, #4]
   d8320:	b90b      	cbnz	r3, d8326 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   d8322:	b94f      	cbnz	r7, d8338 <mbedtls_mpi_div_mpi+0x64>
   d8324:	e010      	b.n	d8348 <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   d8326:	4621      	mov	r1, r4
   d8328:	9801      	ldr	r0, [sp, #4]
   d832a:	f7ff fc01 	bl	d7b30 <mbedtls_mpi_lset>
   d832e:	4604      	mov	r4, r0
   d8330:	2800      	cmp	r0, #0
   d8332:	f040 8179 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
   d8336:	e7f4      	b.n	d8322 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   d8338:	4641      	mov	r1, r8
   d833a:	4638      	mov	r0, r7
   d833c:	f7ff fbcf 	bl	d7ade <mbedtls_mpi_copy>
   d8340:	4604      	mov	r4, r0
   d8342:	2800      	cmp	r0, #0
   d8344:	f040 8170 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
   d8348:	2000      	movs	r0, #0
   d834a:	e180      	b.n	d864e <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
   d834c:	4641      	mov	r1, r8
   d834e:	a80b      	add	r0, sp, #44	; 0x2c
   d8350:	f7ff fbc5 	bl	d7ade <mbedtls_mpi_copy>
   d8354:	4604      	mov	r4, r0
   d8356:	2800      	cmp	r0, #0
   d8358:	f040 8166 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
   d835c:	ae0e      	add	r6, sp, #56	; 0x38
   d835e:	9904      	ldr	r1, [sp, #16]
   d8360:	4630      	mov	r0, r6
   d8362:	f7ff fbbc 	bl	d7ade <mbedtls_mpi_copy>
   d8366:	4604      	mov	r4, r0
   d8368:	2800      	cmp	r0, #0
   d836a:	f040 815d 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   d836e:	f8d8 1004 	ldr.w	r1, [r8, #4]
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
   d8372:	950e      	str	r5, [sp, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   d8374:	3102      	adds	r1, #2
   d8376:	a811      	add	r0, sp, #68	; 0x44
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
   d8378:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   d837a:	f7ff fb84 	bl	d7a86 <mbedtls_mpi_grow>
   d837e:	4604      	mov	r4, r0
   d8380:	2800      	cmp	r0, #0
   d8382:	f040 8151 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
   d8386:	4601      	mov	r1, r0
   d8388:	a811      	add	r0, sp, #68	; 0x44
   d838a:	f7ff fbd1 	bl	d7b30 <mbedtls_mpi_lset>
   d838e:	4604      	mov	r4, r0
   d8390:	2800      	cmp	r0, #0
   d8392:	f040 8149 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
   d8396:	2102      	movs	r1, #2
   d8398:	a814      	add	r0, sp, #80	; 0x50
   d839a:	f7ff fb74 	bl	d7a86 <mbedtls_mpi_grow>
   d839e:	4604      	mov	r4, r0
   d83a0:	2800      	cmp	r0, #0
   d83a2:	f040 8141 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
   d83a6:	2103      	movs	r1, #3
   d83a8:	a817      	add	r0, sp, #92	; 0x5c
   d83aa:	f7ff fb6c 	bl	d7a86 <mbedtls_mpi_grow>
   d83ae:	4604      	mov	r4, r0
   d83b0:	2800      	cmp	r0, #0
   d83b2:	f040 8139 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
   d83b6:	4630      	mov	r0, r6
   d83b8:	f7ff fc00 	bl	d7bbc <mbedtls_mpi_bitlen>
   d83bc:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
   d83c0:	281f      	cmp	r0, #31
   d83c2:	d013      	beq.n	d83ec <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
   d83c4:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   d83c8:	4619      	mov	r1, r3
   d83ca:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
   d83cc:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   d83ce:	f7ff fc73 	bl	d7cb8 <mbedtls_mpi_shift_l>
   d83d2:	4604      	mov	r4, r0
   d83d4:	2800      	cmp	r0, #0
   d83d6:	f040 8127 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
   d83da:	9902      	ldr	r1, [sp, #8]
   d83dc:	4630      	mov	r0, r6
   d83de:	f7ff fc6b 	bl	d7cb8 <mbedtls_mpi_shift_l>
   d83e2:	4604      	mov	r4, r0
   d83e4:	2800      	cmp	r0, #0
   d83e6:	f040 811f 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>
   d83ea:	e000      	b.n	d83ee <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
   d83ec:	9402      	str	r4, [sp, #8]

    n = X.n - 1;
   d83ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
   d83f0:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
   d83f4:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
    t = Y.n - 1;
   d83f8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   d83fc:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
   d8400:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   d8402:	ea4f 134b 	mov.w	r3, fp, lsl #5
   d8406:	4619      	mov	r1, r3
   d8408:	4630      	mov	r0, r6
   d840a:	9303      	str	r3, [sp, #12]
   d840c:	f7ff fc54 	bl	d7cb8 <mbedtls_mpi_shift_l>
   d8410:	4604      	mov	r4, r0
   d8412:	2800      	cmp	r0, #0
   d8414:	f040 8108 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
   d8418:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
   d841c:	4631      	mov	r1, r6
   d841e:	a80b      	add	r0, sp, #44	; 0x2c
   d8420:	f7ff fd78 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   d8424:	2800      	cmp	r0, #0
   d8426:	db0e      	blt.n	d8446 <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
   d8428:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d842a:	f851 200b 	ldr.w	r2, [r1, fp]
   d842e:	3201      	adds	r2, #1
   d8430:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
   d8434:	a90b      	add	r1, sp, #44	; 0x2c
   d8436:	4632      	mov	r2, r6
   d8438:	4608      	mov	r0, r1
   d843a:	f7ff fe81 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d843e:	4604      	mov	r4, r0
   d8440:	2800      	cmp	r0, #0
   d8442:	d0eb      	beq.n	d841c <mbedtls_mpi_div_mpi+0x148>
   d8444:	e0f0      	b.n	d8628 <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
   d8446:	9903      	ldr	r1, [sp, #12]
   d8448:	4630      	mov	r0, r6
   d844a:	f7ff fc84 	bl	d7d56 <mbedtls_mpi_shift_r>
   d844e:	4604      	mov	r4, r0
   d8450:	2800      	cmp	r0, #0
   d8452:	f040 80e9 	bne.w	d8628 <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
   d8456:	9b00      	ldr	r3, [sp, #0]
   d8458:	009b      	lsls	r3, r3, #2
   d845a:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   d845c:	3b04      	subs	r3, #4
   d845e:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
   d8462:	9308      	str	r3, [sp, #32]
   d8464:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
   d8468:	3b01      	subs	r3, #1
   d846a:	3e01      	subs	r6, #1
   d846c:	ebca 0606 	rsb	r6, sl, r6
   d8470:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   d8474:	ebca 0a03 	rsb	sl, sl, r3
   d8478:	ea4f 134a 	mov.w	r3, sl, lsl #5
   d847c:	3d02      	subs	r5, #2
   d847e:	00b6      	lsls	r6, r6, #2
   d8480:	9303      	str	r3, [sp, #12]
   d8482:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
   d8484:	9b00      	ldr	r3, [sp, #0]
   d8486:	4599      	cmp	r9, r3
   d8488:	f240 80a8 	bls.w	d85dc <mbedtls_mpi_div_mpi+0x308>
   d848c:	1d2b      	adds	r3, r5, #4
    {
        if( X.p[i] >= Y.p[t] )
   d848e:	9805      	ldr	r0, [sp, #20]
   d8490:	990d      	ldr	r1, [sp, #52]	; 0x34
   d8492:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d8494:	9309      	str	r3, [sp, #36]	; 0x24
   d8496:	5812      	ldr	r2, [r2, r0]
   d8498:	58cb      	ldr	r3, [r1, r3]
   d849a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   d849c:	4293      	cmp	r3, r2
   d849e:	d303      	bcc.n	d84a8 <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
   d84a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d84a4:	5183      	str	r3, [r0, r6]
   d84a6:	e01b      	b.n	d84e0 <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   d84a8:	eb00 0a06 	add.w	sl, r0, r6
   d84ac:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
   d84ae:	b19a      	cbz	r2, d84d8 <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
   d84b0:	9307      	str	r3, [sp, #28]
   d84b2:	2300      	movs	r3, #0
   d84b4:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
   d84b6:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   d84ba:	ea4b 0b00 	orr.w	fp, fp, r0
   d84be:	4658      	mov	r0, fp
   d84c0:	4661      	mov	r1, ip
   d84c2:	f00e f96b 	bl	e679c <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
   d84c6:	2300      	movs	r3, #0
   d84c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d84cc:	428b      	cmp	r3, r1
   d84ce:	bf08      	it	eq
   d84d0:	4282      	cmpeq	r2, r0
   d84d2:	d203      	bcs.n	d84dc <mbedtls_mpi_div_mpi+0x208>
   d84d4:	4610      	mov	r0, r2
   d84d6:	e001      	b.n	d84dc <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
   d84d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
   d84dc:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
   d84e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d84e2:	5993      	ldr	r3, [r2, r6]
   d84e4:	3301      	adds	r3, #1
   d84e6:	5193      	str	r3, [r2, r6]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   d84e8:	f1a5 0a04 	sub.w	sl, r5, #4
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
   d84ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d84ee:	5993      	ldr	r3, [r2, r6]
   d84f0:	3b01      	subs	r3, #1
   d84f2:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
   d84f4:	2100      	movs	r1, #0
   d84f6:	a814      	add	r0, sp, #80	; 0x50
   d84f8:	f7ff fb1a 	bl	d7b30 <mbedtls_mpi_lset>
   d84fc:	2800      	cmp	r0, #0
   d84fe:	f040 8090 	bne.w	d8622 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   d8502:	9b00      	ldr	r3, [sp, #0]
   d8504:	9a16      	ldr	r2, [sp, #88]	; 0x58
   d8506:	b11b      	cbz	r3, d8510 <mbedtls_mpi_div_mpi+0x23c>
   d8508:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d850a:	9908      	ldr	r1, [sp, #32]
   d850c:	585b      	ldr	r3, [r3, r1]
   d850e:	e000      	b.n	d8512 <mbedtls_mpi_div_mpi+0x23e>
   d8510:	9b00      	ldr	r3, [sp, #0]
   d8512:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
   d8514:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d8516:	9a05      	ldr	r2, [sp, #20]
   d8518:	589a      	ldr	r2, [r3, r2]
   d851a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d851c:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
   d851e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8520:	a914      	add	r1, sp, #80	; 0x50
   d8522:	4608      	mov	r0, r1
   d8524:	599a      	ldr	r2, [r3, r6]
   d8526:	f7ff fec8 	bl	d82ba <mbedtls_mpi_mul_int>
   d852a:	4601      	mov	r1, r0
   d852c:	2800      	cmp	r0, #0
   d852e:	d17a      	bne.n	d8626 <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
   d8530:	a817      	add	r0, sp, #92	; 0x5c
   d8532:	f7ff fafd 	bl	d7b30 <mbedtls_mpi_lset>
   d8536:	2800      	cmp	r0, #0
   d8538:	d173      	bne.n	d8622 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   d853a:	f1b9 0f01 	cmp.w	r9, #1
   d853e:	bf18      	it	ne
   d8540:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
   d8542:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8544:	bf18      	it	ne
   d8546:	f852 000a 	ldrne.w	r0, [r2, sl]
   d854a:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   d854c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d854e:	595a      	ldr	r2, [r3, r5]
   d8550:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8552:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
   d8554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8556:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d8558:	589a      	ldr	r2, [r3, r2]
   d855a:	9b19      	ldr	r3, [sp, #100]	; 0x64
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   d855c:	a917      	add	r1, sp, #92	; 0x5c
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
   d855e:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   d8560:	a814      	add	r0, sp, #80	; 0x50
   d8562:	f7ff fcd7 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
   d8566:	2800      	cmp	r0, #0
   d8568:	dcc0      	bgt.n	d84ec <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
   d856a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d856c:	a90e      	add	r1, sp, #56	; 0x38
   d856e:	599a      	ldr	r2, [r3, r6]
   d8570:	a814      	add	r0, sp, #80	; 0x50
   d8572:	f7ff fea2 	bl	d82ba <mbedtls_mpi_mul_int>
   d8576:	2800      	cmp	r0, #0
   d8578:	d153      	bne.n	d8622 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
   d857a:	9903      	ldr	r1, [sp, #12]
   d857c:	a814      	add	r0, sp, #80	; 0x50
   d857e:	f7ff fb9b 	bl	d7cb8 <mbedtls_mpi_shift_l>
   d8582:	2800      	cmp	r0, #0
   d8584:	d14d      	bne.n	d8622 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
   d8586:	a90b      	add	r1, sp, #44	; 0x2c
   d8588:	4608      	mov	r0, r1
   d858a:	aa14      	add	r2, sp, #80	; 0x50
   d858c:	f7ff fdd8 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8590:	4601      	mov	r1, r0
   d8592:	2800      	cmp	r0, #0
   d8594:	d147      	bne.n	d8626 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
   d8596:	a80b      	add	r0, sp, #44	; 0x2c
   d8598:	f7ff fd01 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d859c:	2800      	cmp	r0, #0
   d859e:	da15      	bge.n	d85cc <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
   d85a0:	a90e      	add	r1, sp, #56	; 0x38
   d85a2:	a814      	add	r0, sp, #80	; 0x50
   d85a4:	f7ff fa9b 	bl	d7ade <mbedtls_mpi_copy>
   d85a8:	2800      	cmp	r0, #0
   d85aa:	d13a      	bne.n	d8622 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
   d85ac:	9903      	ldr	r1, [sp, #12]
   d85ae:	a814      	add	r0, sp, #80	; 0x50
   d85b0:	f7ff fb82 	bl	d7cb8 <mbedtls_mpi_shift_l>
   d85b4:	2800      	cmp	r0, #0
   d85b6:	d134      	bne.n	d8622 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
   d85b8:	a90b      	add	r1, sp, #44	; 0x2c
   d85ba:	aa14      	add	r2, sp, #80	; 0x50
   d85bc:	4608      	mov	r0, r1
   d85be:	f7ff fd9e 	bl	d80fe <mbedtls_mpi_add_mpi>
   d85c2:	bb70      	cbnz	r0, d8622 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
   d85c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d85c6:	5993      	ldr	r3, [r2, r6]
   d85c8:	3b01      	subs	r3, #1
   d85ca:	5193      	str	r3, [r2, r6]
   d85cc:	9b03      	ldr	r3, [sp, #12]
   d85ce:	3b20      	subs	r3, #32
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
   d85d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   d85d4:	3e04      	subs	r6, #4
   d85d6:	9303      	str	r3, [sp, #12]
   d85d8:	3d04      	subs	r5, #4
   d85da:	e753      	b.n	d8484 <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
   d85dc:	9b01      	ldr	r3, [sp, #4]
   d85de:	b15b      	cbz	r3, d85f8 <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
   d85e0:	a911      	add	r1, sp, #68	; 0x44
   d85e2:	4618      	mov	r0, r3
   d85e4:	f7ff fa7b 	bl	d7ade <mbedtls_mpi_copy>
   d85e8:	b9d8      	cbnz	r0, d8622 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
   d85ea:	9b04      	ldr	r3, [sp, #16]
   d85ec:	f8d8 2000 	ldr.w	r2, [r8]
   d85f0:	681b      	ldr	r3, [r3, #0]
   d85f2:	4353      	muls	r3, r2
   d85f4:	9a01      	ldr	r2, [sp, #4]
   d85f6:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
   d85f8:	b1b7      	cbz	r7, d8628 <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
   d85fa:	9902      	ldr	r1, [sp, #8]
   d85fc:	a80b      	add	r0, sp, #44	; 0x2c
   d85fe:	f7ff fbaa 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8602:	b970      	cbnz	r0, d8622 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
   d8604:	f8d8 3000 	ldr.w	r3, [r8]
   d8608:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
   d860a:	a90b      	add	r1, sp, #44	; 0x2c
   d860c:	4638      	mov	r0, r7
   d860e:	f7ff fa66 	bl	d7ade <mbedtls_mpi_copy>
   d8612:	4601      	mov	r1, r0
   d8614:	b938      	cbnz	r0, d8626 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
   d8616:	4638      	mov	r0, r7
   d8618:	f7ff fcc1 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d861c:	b920      	cbnz	r0, d8628 <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
   d861e:	2301      	movs	r3, #1
   d8620:	603b      	str	r3, [r7, #0]
   d8622:	4604      	mov	r4, r0
   d8624:	e000      	b.n	d8628 <mbedtls_mpi_div_mpi+0x354>
   d8626:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   d8628:	a80b      	add	r0, sp, #44	; 0x2c
   d862a:	f7ff fa16 	bl	d7a5a <mbedtls_mpi_free>
   d862e:	a80e      	add	r0, sp, #56	; 0x38
   d8630:	f7ff fa13 	bl	d7a5a <mbedtls_mpi_free>
   d8634:	a811      	add	r0, sp, #68	; 0x44
   d8636:	f7ff fa10 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   d863a:	a814      	add	r0, sp, #80	; 0x50
   d863c:	f7ff fa0d 	bl	d7a5a <mbedtls_mpi_free>
   d8640:	a817      	add	r0, sp, #92	; 0x5c
   d8642:	f7ff fa0a 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
   d8646:	4620      	mov	r0, r4
   d8648:	e001      	b.n	d864e <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   d864a:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
   d864e:	b01b      	add	sp, #108	; 0x6c
   d8650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8654 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d8654:	b570      	push	{r4, r5, r6, lr}
   d8656:	4604      	mov	r4, r0
   d8658:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   d865a:	4610      	mov	r0, r2
   d865c:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d865e:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   d8660:	f7ff fc9d 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d8664:	2800      	cmp	r0, #0
   d8666:	db22      	blt.n	d86ae <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
   d8668:	462b      	mov	r3, r5
   d866a:	4632      	mov	r2, r6
   d866c:	4621      	mov	r1, r4
   d866e:	2000      	movs	r0, #0
   d8670:	f7ff fe30 	bl	d82d4 <mbedtls_mpi_div_mpi>
   d8674:	b9f8      	cbnz	r0, d86b6 <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
   d8676:	2100      	movs	r1, #0
   d8678:	4620      	mov	r0, r4
   d867a:	f7ff fc90 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d867e:	2800      	cmp	r0, #0
   d8680:	da07      	bge.n	d8692 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
   d8682:	462a      	mov	r2, r5
   d8684:	4621      	mov	r1, r4
   d8686:	4620      	mov	r0, r4
   d8688:	f7ff fd39 	bl	d80fe <mbedtls_mpi_add_mpi>
   d868c:	2800      	cmp	r0, #0
   d868e:	d0f2      	beq.n	d8676 <mbedtls_mpi_mod_mpi+0x22>
   d8690:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
   d8692:	4629      	mov	r1, r5
   d8694:	4620      	mov	r0, r4
   d8696:	f7ff fc3d 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   d869a:	2800      	cmp	r0, #0
   d869c:	db0a      	blt.n	d86b4 <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
   d869e:	462a      	mov	r2, r5
   d86a0:	4621      	mov	r1, r4
   d86a2:	4620      	mov	r0, r4
   d86a4:	f7ff fd4c 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d86a8:	2800      	cmp	r0, #0
   d86aa:	d0f2      	beq.n	d8692 <mbedtls_mpi_mod_mpi+0x3e>
   d86ac:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   d86ae:	f06f 0009 	mvn.w	r0, #9
   d86b2:	bd70      	pop	{r4, r5, r6, pc}
   d86b4:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
   d86b6:	bd70      	pop	{r4, r5, r6, pc}

000d86b8 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
   d86b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d86bc:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
   d86c0:	4606      	mov	r6, r0
   d86c2:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   d86c4:	4618      	mov	r0, r3
   d86c6:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
   d86c8:	9202      	str	r2, [sp, #8]
   d86ca:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   d86cc:	f7ff fc67 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d86d0:	2800      	cmp	r0, #0
   d86d2:	dd05      	ble.n	d86e0 <mbedtls_mpi_exp_mod+0x28>
   d86d4:	68ab      	ldr	r3, [r5, #8]
   d86d6:	f8d3 8000 	ldr.w	r8, [r3]
   d86da:	f018 0f01 	tst.w	r8, #1
   d86de:	d102      	bne.n	d86e6 <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   d86e0:	f06f 0003 	mvn.w	r0, #3
   d86e4:	e203      	b.n	d8aee <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
   d86e6:	2100      	movs	r1, #0
   d86e8:	9802      	ldr	r0, [sp, #8]
   d86ea:	f7ff fc58 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d86ee:	2800      	cmp	r0, #0
   d86f0:	dbf6      	blt.n	d86e0 <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
   d86f2:	f108 0402 	add.w	r4, r8, #2
   d86f6:	0064      	lsls	r4, r4, #1
   d86f8:	f004 0408 	and.w	r4, r4, #8
   d86fc:	4444      	add	r4, r8
   d86fe:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
   d8700:	fb04 f308 	mul.w	r3, r4, r8
   d8704:	f1c3 0302 	rsb	r3, r3, #2
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
   d8708:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
   d870a:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
   d870e:	d1f7      	bne.n	d8700 <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8710:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   d8712:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   d8716:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8718:	9308      	str	r3, [sp, #32]
    X->n = 0;
   d871a:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
   d871c:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d871e:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
   d8720:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
   d8722:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8724:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
   d8726:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
   d8728:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   d872a:	f00e fa32 	bl	e6b92 <memset>

    i = mbedtls_mpi_bitlen( E );
   d872e:	9802      	ldr	r0, [sp, #8]
   d8730:	f7ff fa44 	bl	d7bbc <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
   d8734:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
   d8738:	d20a      	bcs.n	d8750 <mbedtls_mpi_exp_mod+0x98>
   d873a:	28ef      	cmp	r0, #239	; 0xef
   d873c:	d80b      	bhi.n	d8756 <mbedtls_mpi_exp_mod+0x9e>
   d873e:	284f      	cmp	r0, #79	; 0x4f
   d8740:	d80c      	bhi.n	d875c <mbedtls_mpi_exp_mod+0xa4>
   d8742:	2818      	cmp	r0, #24
   d8744:	bf34      	ite	cc
   d8746:	f04f 0b01 	movcc.w	fp, #1
   d874a:	f04f 0b03 	movcs.w	fp, #3
   d874e:	e007      	b.n	d8760 <mbedtls_mpi_exp_mod+0xa8>
   d8750:	f04f 0b06 	mov.w	fp, #6
   d8754:	e004      	b.n	d8760 <mbedtls_mpi_exp_mod+0xa8>
   d8756:	f04f 0b05 	mov.w	fp, #5
   d875a:	e001      	b.n	d8760 <mbedtls_mpi_exp_mod+0xa8>
   d875c:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
   d8760:	686b      	ldr	r3, [r5, #4]
   d8762:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   d8766:	4641      	mov	r1, r8
   d8768:	4630      	mov	r0, r6
   d876a:	f7ff f98c 	bl	d7a86 <mbedtls_mpi_grow>
   d876e:	4603      	mov	r3, r0
   d8770:	2800      	cmp	r0, #0
   d8772:	f040 8194 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
   d8776:	4641      	mov	r1, r8
   d8778:	a817      	add	r0, sp, #92	; 0x5c
   d877a:	f7ff f984 	bl	d7a86 <mbedtls_mpi_grow>
   d877e:	4603      	mov	r3, r0
   d8780:	2800      	cmp	r0, #0
   d8782:	f040 818c 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
   d8786:	ea4f 0148 	mov.w	r1, r8, lsl #1
   d878a:	a80b      	add	r0, sp, #44	; 0x2c
   d878c:	f7ff f97b 	bl	d7a86 <mbedtls_mpi_grow>
   d8790:	4603      	mov	r3, r0
   d8792:	2800      	cmp	r0, #0
   d8794:	f040 8183 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
   d8798:	683b      	ldr	r3, [r7, #0]
   d879a:	9304      	str	r3, [sp, #16]
    if( neg )
   d879c:	3301      	adds	r3, #1
   d879e:	d10a      	bne.n	d87b6 <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
   d87a0:	4639      	mov	r1, r7
   d87a2:	a80e      	add	r0, sp, #56	; 0x38
   d87a4:	f7ff f99b 	bl	d7ade <mbedtls_mpi_copy>
   d87a8:	4603      	mov	r3, r0
   d87aa:	2800      	cmp	r0, #0
   d87ac:	f040 8177 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
   d87b0:	2301      	movs	r3, #1
   d87b2:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
   d87b4:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
   d87b6:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   d87ba:	b10b      	cbz	r3, d87c0 <mbedtls_mpi_exp_mod+0x108>
   d87bc:	689b      	ldr	r3, [r3, #8]
   d87be:	bb2b      	cbnz	r3, d880c <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
   d87c0:	2101      	movs	r1, #1
   d87c2:	a808      	add	r0, sp, #32
   d87c4:	f7ff f9b4 	bl	d7b30 <mbedtls_mpi_lset>
   d87c8:	4603      	mov	r3, r0
   d87ca:	2800      	cmp	r0, #0
   d87cc:	f040 8167 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
   d87d0:	6869      	ldr	r1, [r5, #4]
   d87d2:	a808      	add	r0, sp, #32
   d87d4:	0189      	lsls	r1, r1, #6
   d87d6:	f7ff fa6f 	bl	d7cb8 <mbedtls_mpi_shift_l>
   d87da:	4603      	mov	r3, r0
   d87dc:	2800      	cmp	r0, #0
   d87de:	f040 815e 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
   d87e2:	a908      	add	r1, sp, #32
   d87e4:	462a      	mov	r2, r5
   d87e6:	4608      	mov	r0, r1
   d87e8:	f7ff ff34 	bl	d8654 <mbedtls_mpi_mod_mpi>
   d87ec:	4603      	mov	r3, r0
   d87ee:	2800      	cmp	r0, #0
   d87f0:	f040 8155 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
   d87f4:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   d87f8:	b183      	cbz	r3, d881c <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
   d87fa:	ab08      	add	r3, sp, #32
   d87fc:	cb03      	ldmia	r3!, {r0, r1}
   d87fe:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   d8802:	6010      	str	r0, [r2, #0]
   d8804:	6818      	ldr	r0, [r3, #0]
   d8806:	6051      	str	r1, [r2, #4]
   d8808:	6090      	str	r0, [r2, #8]
   d880a:	e007      	b.n	d881c <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
   d880c:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   d8810:	6810      	ldr	r0, [r2, #0]
   d8812:	6851      	ldr	r1, [r2, #4]
   d8814:	ab08      	add	r3, sp, #32
   d8816:	c303      	stmia	r3!, {r0, r1}
   d8818:	6890      	ldr	r0, [r2, #8]
   d881a:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
   d881c:	4629      	mov	r1, r5
   d881e:	4638      	mov	r0, r7
   d8820:	f7ff fb78 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   d8824:	2800      	cmp	r0, #0
   d8826:	db18      	blt.n	d885a <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
   d8828:	462a      	mov	r2, r5
   d882a:	4639      	mov	r1, r7
   d882c:	a817      	add	r0, sp, #92	; 0x5c
   d882e:	f7ff ff11 	bl	d8654 <mbedtls_mpi_mod_mpi>
   d8832:	4603      	mov	r3, r0
   d8834:	2800      	cmp	r0, #0
   d8836:	f040 8132 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
   d883a:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   d883c:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   d8840:	4623      	mov	r3, r4
   d8842:	f8cd 9000 	str.w	r9, [sp]
   d8846:	462a      	mov	r2, r5
   d8848:	a908      	add	r1, sp, #32
   d884a:	a817      	add	r0, sp, #92	; 0x5c
   d884c:	f7ff fafe 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d8850:	4603      	mov	r3, r0
   d8852:	2800      	cmp	r0, #0
   d8854:	f040 8123 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
   d8858:	e004      	b.n	d8864 <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
   d885a:	4639      	mov	r1, r7
   d885c:	a817      	add	r0, sp, #92	; 0x5c
   d885e:	f7ff f93e 	bl	d7ade <mbedtls_mpi_copy>
   d8862:	e7e6      	b.n	d8832 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
   d8864:	a908      	add	r1, sp, #32
   d8866:	4630      	mov	r0, r6
   d8868:	f7ff f939 	bl	d7ade <mbedtls_mpi_copy>
   d886c:	4603      	mov	r3, r0
   d886e:	2800      	cmp	r0, #0
   d8870:	f040 8115 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
   d8874:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   d8876:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
   d8878:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
   d887a:	f8cd 9000 	str.w	r9, [sp]
   d887e:	4623      	mov	r3, r4
   d8880:	462a      	mov	r2, r5
   d8882:	a911      	add	r1, sp, #68	; 0x44
   d8884:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   d8886:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
   d8888:	9711      	str	r7, [sp, #68]	; 0x44
   d888a:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
   d888c:	f7ff fade 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   d8890:	4603      	mov	r3, r0
   d8892:	2800      	cmp	r0, #0
   d8894:	f040 8103 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
   d8898:	45bb      	cmp	fp, r7
   d889a:	d05b      	beq.n	d8954 <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
   d889c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d88a0:	9303      	str	r3, [sp, #12]
   d88a2:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
   d88a4:	6869      	ldr	r1, [r5, #4]
   d88a6:	ab14      	add	r3, sp, #80	; 0x50
   d88a8:	f04f 080c 	mov.w	r8, #12
   d88ac:	fb08 3807 	mla	r8, r8, r7, r3
   d88b0:	3101      	adds	r1, #1
   d88b2:	4640      	mov	r0, r8
   d88b4:	f7ff f8e7 	bl	d7a86 <mbedtls_mpi_grow>
   d88b8:	4603      	mov	r3, r0
   d88ba:	2800      	cmp	r0, #0
   d88bc:	f040 80ef 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
   d88c0:	a917      	add	r1, sp, #92	; 0x5c
   d88c2:	4640      	mov	r0, r8
   d88c4:	f7ff f90b 	bl	d7ade <mbedtls_mpi_copy>
   d88c8:	4603      	mov	r3, r0
   d88ca:	2800      	cmp	r0, #0
   d88cc:	f040 80e7 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
   d88d0:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   d88d2:	4623      	mov	r3, r4
   d88d4:	f8cd 9000 	str.w	r9, [sp]
   d88d8:	462a      	mov	r2, r5
   d88da:	4641      	mov	r1, r8
   d88dc:	4640      	mov	r0, r8
   d88de:	f7ff fab5 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d88e2:	4603      	mov	r3, r0
   d88e4:	2800      	cmp	r0, #0
   d88e6:	f040 80da 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
   d88ea:	9b03      	ldr	r3, [sp, #12]
   d88ec:	f10a 0a01 	add.w	sl, sl, #1
   d88f0:	4553      	cmp	r3, sl
   d88f2:	d8ee      	bhi.n	d88d2 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   d88f4:	3701      	adds	r7, #1
   d88f6:	f04f 0901 	mov.w	r9, #1
   d88fa:	f04f 080c 	mov.w	r8, #12
   d88fe:	ab14      	add	r3, sp, #80	; 0x50
   d8900:	fa09 f90b 	lsl.w	r9, r9, fp
   d8904:	fb08 3807 	mla	r8, r8, r7, r3
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   d8908:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   d890c:	454f      	cmp	r7, r9
   d890e:	d221      	bcs.n	d8954 <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
   d8910:	6869      	ldr	r1, [r5, #4]
   d8912:	4640      	mov	r0, r8
   d8914:	3101      	adds	r1, #1
   d8916:	f7ff f8b6 	bl	d7a86 <mbedtls_mpi_grow>
   d891a:	4603      	mov	r3, r0
   d891c:	2800      	cmp	r0, #0
   d891e:	f040 80be 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
   d8922:	f1a8 010c 	sub.w	r1, r8, #12
   d8926:	4640      	mov	r0, r8
   d8928:	f7ff f8d9 	bl	d7ade <mbedtls_mpi_copy>
   d892c:	4603      	mov	r3, r0
   d892e:	2800      	cmp	r0, #0
   d8930:	f040 80b5 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   d8934:	4623      	mov	r3, r4
   d8936:	4640      	mov	r0, r8
   d8938:	f8cd a000 	str.w	sl, [sp]
   d893c:	462a      	mov	r2, r5
   d893e:	a917      	add	r1, sp, #92	; 0x5c
   d8940:	f7ff fa84 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d8944:	f108 080c 	add.w	r8, r8, #12
   d8948:	4603      	mov	r3, r0
   d894a:	2800      	cmp	r0, #0
   d894c:	f040 80a7 	bne.w	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   d8950:	3701      	adds	r7, #1
   d8952:	e7db      	b.n	d890c <mbedtls_mpi_exp_mod+0x254>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
   d8954:	9b02      	ldr	r3, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
   d8956:	2700      	movs	r7, #0

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
   d8958:	685b      	ldr	r3, [r3, #4]
   d895a:	9303      	str	r3, [sp, #12]
    bufsize = 0;
    nbits   = 0;
   d895c:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
   d895e:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
   d8960:	46b8      	mov	r8, r7
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
   d8962:	f1ba 0f00 	cmp.w	sl, #0
   d8966:	d10e      	bne.n	d8986 <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
   d8968:	9b03      	ldr	r3, [sp, #12]
   d896a:	b93b      	cbnz	r3, d897c <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   d896c:	2301      	movs	r3, #1
   d896e:	fa03 f30b 	lsl.w	r3, r3, fp
   d8972:	9305      	str	r3, [sp, #20]
   d8974:	9f03      	ldr	r7, [sp, #12]
   d8976:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
   d897a:	e05e      	b.n	d8a3a <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
   d897c:	9b03      	ldr	r3, [sp, #12]
   d897e:	3b01      	subs	r3, #1
   d8980:	9303      	str	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
   d8982:	f04f 0a20 	mov.w	sl, #32
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
   d8986:	9b02      	ldr	r3, [sp, #8]
   d8988:	9a03      	ldr	r2, [sp, #12]
   d898a:	689b      	ldr	r3, [r3, #8]
   d898c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
   d8990:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff

        ei = (E->p[nblimbs] >> bufsize) & 1;
   d8994:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
   d8998:	f013 0301 	ands.w	r3, r3, #1
   d899c:	d10f      	bne.n	d89be <mbedtls_mpi_exp_mod+0x306>
   d899e:	2f00      	cmp	r7, #0
   d89a0:	d0df      	beq.n	d8962 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
   d89a2:	2f01      	cmp	r7, #1
   d89a4:	d10b      	bne.n	d89be <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   d89a6:	ab0b      	add	r3, sp, #44	; 0x2c
   d89a8:	9300      	str	r3, [sp, #0]
   d89aa:	462a      	mov	r2, r5
   d89ac:	4623      	mov	r3, r4
   d89ae:	4631      	mov	r1, r6
   d89b0:	4630      	mov	r0, r6
   d89b2:	f7ff fa4b 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d89b6:	4603      	mov	r3, r0
   d89b8:	2800      	cmp	r0, #0
   d89ba:	d0d2      	beq.n	d8962 <mbedtls_mpi_exp_mod+0x2aa>
   d89bc:	e06f      	b.n	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
   d89be:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
   d89c2:	ebc9 020b 	rsb	r2, r9, fp
   d89c6:	4093      	lsls	r3, r2

        if( nbits == wsize )
   d89c8:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
   d89ca:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
   d89ce:	d001      	beq.n	d89d4 <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
   d89d0:	2702      	movs	r7, #2
   d89d2:	e7c6      	b.n	d8962 <mbedtls_mpi_exp_mod+0x2aa>
   d89d4:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   d89d6:	ab0b      	add	r3, sp, #44	; 0x2c
   d89d8:	9300      	str	r3, [sp, #0]
   d89da:	462a      	mov	r2, r5
   d89dc:	4623      	mov	r3, r4
   d89de:	4631      	mov	r1, r6
   d89e0:	4630      	mov	r0, r6
   d89e2:	f7ff fa33 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d89e6:	4603      	mov	r3, r0
   d89e8:	2800      	cmp	r0, #0
   d89ea:	d158      	bne.n	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
   d89ec:	3701      	adds	r7, #1
   d89ee:	45bb      	cmp	fp, r7
   d89f0:	d1f1      	bne.n	d89d6 <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
   d89f2:	ab0b      	add	r3, sp, #44	; 0x2c
   d89f4:	a814      	add	r0, sp, #80	; 0x50
   d89f6:	210c      	movs	r1, #12
   d89f8:	9300      	str	r3, [sp, #0]
   d89fa:	fb01 0108 	mla	r1, r1, r8, r0
   d89fe:	4623      	mov	r3, r4
   d8a00:	462a      	mov	r2, r5
   d8a02:	4630      	mov	r0, r6
   d8a04:	f7ff fa22 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d8a08:	4603      	mov	r3, r0
   d8a0a:	2800      	cmp	r0, #0
   d8a0c:	d147      	bne.n	d8a9e <mbedtls_mpi_exp_mod+0x3e6>

            state--;
   d8a0e:	2701      	movs	r7, #1
            nbits = 0;
   d8a10:	4680      	mov	r8, r0
            wbits = 0;
   d8a12:	4681      	mov	r9, r0
   d8a14:	e7a5      	b.n	d8962 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   d8a16:	4623      	mov	r3, r4
   d8a18:	f8cd a000 	str.w	sl, [sp]
   d8a1c:	462a      	mov	r2, r5
   d8a1e:	4631      	mov	r1, r6
   d8a20:	4630      	mov	r0, r6
   d8a22:	f7ff fa13 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d8a26:	4603      	mov	r3, r0
   d8a28:	2800      	cmp	r0, #0
   d8a2a:	d138      	bne.n	d8a9e <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   d8a2c:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
   d8a2e:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
   d8a32:	ea18 0f03 	tst.w	r8, r3
   d8a36:	d103      	bne.n	d8a40 <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
   d8a38:	3701      	adds	r7, #1
   d8a3a:	454f      	cmp	r7, r9
   d8a3c:	d1eb      	bne.n	d8a16 <mbedtls_mpi_exp_mod+0x35e>
   d8a3e:	e00b      	b.n	d8a58 <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
   d8a40:	4623      	mov	r3, r4
   d8a42:	f8cd a000 	str.w	sl, [sp]
   d8a46:	462a      	mov	r2, r5
   d8a48:	a917      	add	r1, sp, #92	; 0x5c
   d8a4a:	4630      	mov	r0, r6
   d8a4c:	f7ff f9fe 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   d8a50:	4603      	mov	r3, r0
   d8a52:	2800      	cmp	r0, #0
   d8a54:	d0f0      	beq.n	d8a38 <mbedtls_mpi_exp_mod+0x380>
   d8a56:	e022      	b.n	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   d8a58:	2301      	movs	r3, #1
   d8a5a:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
   d8a5c:	9311      	str	r3, [sp, #68]	; 0x44
   d8a5e:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
   d8a60:	ab07      	add	r3, sp, #28
   d8a62:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
   d8a64:	f8cd a000 	str.w	sl, [sp]
   d8a68:	4623      	mov	r3, r4
   d8a6a:	462a      	mov	r2, r5
   d8a6c:	a911      	add	r1, sp, #68	; 0x44
   d8a6e:	4630      	mov	r0, r6
   d8a70:	f7ff f9ec 	bl	d7e4c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   d8a74:	4603      	mov	r3, r0
   d8a76:	b990      	cbnz	r0, d8a9e <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
   d8a78:	9a04      	ldr	r2, [sp, #16]
   d8a7a:	3201      	adds	r2, #1
   d8a7c:	d10f      	bne.n	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
   d8a7e:	9a02      	ldr	r2, [sp, #8]
   d8a80:	6852      	ldr	r2, [r2, #4]
   d8a82:	b162      	cbz	r2, d8a9e <mbedtls_mpi_exp_mod+0x3e6>
   d8a84:	9a02      	ldr	r2, [sp, #8]
   d8a86:	6892      	ldr	r2, [r2, #8]
   d8a88:	6812      	ldr	r2, [r2, #0]
   d8a8a:	07d2      	lsls	r2, r2, #31
   d8a8c:	d507      	bpl.n	d8a9e <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
   d8a8e:	9b04      	ldr	r3, [sp, #16]
   d8a90:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
   d8a92:	4632      	mov	r2, r6
   d8a94:	4629      	mov	r1, r5
   d8a96:	4630      	mov	r0, r6
   d8a98:	f7ff fb31 	bl	d80fe <mbedtls_mpi_add_mpi>
   d8a9c:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   d8a9e:	2201      	movs	r2, #1
   d8aa0:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   d8aa4:	fa02 f404 	lsl.w	r4, r2, r4
   d8aa8:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
   d8aac:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   d8aae:	42ac      	cmp	r4, r5
   d8ab0:	9302      	str	r3, [sp, #8]
   d8ab2:	d207      	bcs.n	d8ac4 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
   d8ab4:	ab14      	add	r3, sp, #80	; 0x50
   d8ab6:	fb06 3004 	mla	r0, r6, r4, r3
   d8aba:	f7fe ffce 	bl	d7a5a <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   d8abe:	3401      	adds	r4, #1
   d8ac0:	9b02      	ldr	r3, [sp, #8]
   d8ac2:	e7f4      	b.n	d8aae <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
   d8ac4:	a817      	add	r0, sp, #92	; 0x5c
   d8ac6:	f7fe ffc8 	bl	d7a5a <mbedtls_mpi_free>
   d8aca:	a80b      	add	r0, sp, #44	; 0x2c
   d8acc:	f7fe ffc5 	bl	d7a5a <mbedtls_mpi_free>
   d8ad0:	a80e      	add	r0, sp, #56	; 0x38
   d8ad2:	f7fe ffc2 	bl	d7a5a <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
   d8ad6:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   d8ada:	9b02      	ldr	r3, [sp, #8]
   d8adc:	b10a      	cbz	r2, d8ae2 <mbedtls_mpi_exp_mod+0x42a>
   d8ade:	6892      	ldr	r2, [r2, #8]
   d8ae0:	b922      	cbnz	r2, d8aec <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
   d8ae2:	a808      	add	r0, sp, #32
   d8ae4:	9302      	str	r3, [sp, #8]
   d8ae6:	f7fe ffb8 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
   d8aea:	9b02      	ldr	r3, [sp, #8]
   d8aec:	4618      	mov	r0, r3
}
   d8aee:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
   d8af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8af6 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d8af6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8af8:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
   d8afa:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8afc:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d8afe:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   d8b00:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   d8b02:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8b04:	9601      	str	r6, [sp, #4]
    X->n = 0;
   d8b06:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   d8b08:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8b0a:	9604      	str	r6, [sp, #16]
    X->n = 0;
   d8b0c:	9305      	str	r3, [sp, #20]
    X->p = NULL;
   d8b0e:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8b10:	9607      	str	r6, [sp, #28]
    X->n = 0;
   d8b12:	9308      	str	r3, [sp, #32]
    X->p = NULL;
   d8b14:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   d8b16:	f7fe ffe2 	bl	d7ade <mbedtls_mpi_copy>
   d8b1a:	4604      	mov	r4, r0
   d8b1c:	2800      	cmp	r0, #0
   d8b1e:	d163      	bne.n	d8be8 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   d8b20:	4629      	mov	r1, r5
   d8b22:	a807      	add	r0, sp, #28
   d8b24:	f7fe ffdb 	bl	d7ade <mbedtls_mpi_copy>
   d8b28:	4604      	mov	r4, r0
   d8b2a:	2800      	cmp	r0, #0
   d8b2c:	d15c      	bne.n	d8be8 <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
   d8b2e:	a804      	add	r0, sp, #16
   d8b30:	f7ff f82b 	bl	d7b8a <mbedtls_mpi_lsb>
   d8b34:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
   d8b36:	a807      	add	r0, sp, #28
   d8b38:	f7ff f827 	bl	d7b8a <mbedtls_mpi_lsb>
   d8b3c:	4285      	cmp	r5, r0
   d8b3e:	bf28      	it	cs
   d8b40:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
   d8b42:	4629      	mov	r1, r5
   d8b44:	a804      	add	r0, sp, #16
   d8b46:	f7ff f906 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8b4a:	4604      	mov	r4, r0
   d8b4c:	2800      	cmp	r0, #0
   d8b4e:	d14b      	bne.n	d8be8 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
   d8b50:	4629      	mov	r1, r5
   d8b52:	a807      	add	r0, sp, #28
   d8b54:	f7ff f8ff 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8b58:	4604      	mov	r4, r0
   d8b5a:	2800      	cmp	r0, #0
   d8b5c:	d144      	bne.n	d8be8 <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
   d8b5e:	9607      	str	r6, [sp, #28]
   d8b60:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
   d8b62:	2100      	movs	r1, #0
   d8b64:	a804      	add	r0, sp, #16
   d8b66:	f7ff fa1a 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d8b6a:	2800      	cmp	r0, #0
   d8b6c:	d031      	beq.n	d8bd2 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
   d8b6e:	a804      	add	r0, sp, #16
   d8b70:	f7ff f80b 	bl	d7b8a <mbedtls_mpi_lsb>
   d8b74:	4601      	mov	r1, r0
   d8b76:	a804      	add	r0, sp, #16
   d8b78:	f7ff f8ed 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8b7c:	4604      	mov	r4, r0
   d8b7e:	2800      	cmp	r0, #0
   d8b80:	d132      	bne.n	d8be8 <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
   d8b82:	a807      	add	r0, sp, #28
   d8b84:	f7ff f801 	bl	d7b8a <mbedtls_mpi_lsb>
   d8b88:	4601      	mov	r1, r0
   d8b8a:	a807      	add	r0, sp, #28
   d8b8c:	f7ff f8e3 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8b90:	4604      	mov	r4, r0
   d8b92:	bb48      	cbnz	r0, d8be8 <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
   d8b94:	a907      	add	r1, sp, #28
   d8b96:	a804      	add	r0, sp, #16
   d8b98:	f7ff f9bc 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   d8b9c:	2800      	cmp	r0, #0
   d8b9e:	db09      	blt.n	d8bb4 <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
   d8ba0:	a904      	add	r1, sp, #16
   d8ba2:	aa07      	add	r2, sp, #28
   d8ba4:	4608      	mov	r0, r1
   d8ba6:	f7ff fa6a 	bl	d807e <mbedtls_mpi_sub_abs>
   d8baa:	4604      	mov	r4, r0
   d8bac:	b9e0      	cbnz	r0, d8be8 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
   d8bae:	2101      	movs	r1, #1
   d8bb0:	a804      	add	r0, sp, #16
   d8bb2:	e008      	b.n	d8bc6 <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
   d8bb4:	a907      	add	r1, sp, #28
   d8bb6:	aa04      	add	r2, sp, #16
   d8bb8:	4608      	mov	r0, r1
   d8bba:	f7ff fa60 	bl	d807e <mbedtls_mpi_sub_abs>
   d8bbe:	4604      	mov	r4, r0
   d8bc0:	b990      	cbnz	r0, d8be8 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   d8bc2:	2101      	movs	r1, #1
   d8bc4:	a807      	add	r0, sp, #28
   d8bc6:	f7ff f8c6 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8bca:	4604      	mov	r4, r0
   d8bcc:	2800      	cmp	r0, #0
   d8bce:	d0c8      	beq.n	d8b62 <mbedtls_mpi_gcd+0x6c>
   d8bd0:	e00a      	b.n	d8be8 <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
   d8bd2:	4629      	mov	r1, r5
   d8bd4:	a807      	add	r0, sp, #28
   d8bd6:	f7ff f86f 	bl	d7cb8 <mbedtls_mpi_shift_l>
   d8bda:	4604      	mov	r4, r0
   d8bdc:	b920      	cbnz	r0, d8be8 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
   d8bde:	a907      	add	r1, sp, #28
   d8be0:	4638      	mov	r0, r7
   d8be2:	f7fe ff7c 	bl	d7ade <mbedtls_mpi_copy>
   d8be6:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
   d8be8:	a801      	add	r0, sp, #4
   d8bea:	f7fe ff36 	bl	d7a5a <mbedtls_mpi_free>
   d8bee:	a804      	add	r0, sp, #16
   d8bf0:	f7fe ff33 	bl	d7a5a <mbedtls_mpi_free>
   d8bf4:	a807      	add	r0, sp, #28
   d8bf6:	f7fe ff30 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
}
   d8bfa:	4620      	mov	r0, r4
   d8bfc:	b00b      	add	sp, #44	; 0x2c
   d8bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8c00 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d8c00:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
   d8c02:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d8c06:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
   d8c0a:	4605      	mov	r5, r0
   d8c0c:	460c      	mov	r4, r1
   d8c0e:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
   d8c10:	d814      	bhi.n	d8c3c <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
   d8c12:	460a      	mov	r2, r1
   d8c14:	4618      	mov	r0, r3
   d8c16:	4669      	mov	r1, sp
   d8c18:	47b0      	blx	r6
   d8c1a:	b920      	cbnz	r0, d8c26 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
   d8c1c:	4622      	mov	r2, r4
   d8c1e:	4669      	mov	r1, sp
   d8c20:	4628      	mov	r0, r5
   d8c22:	f7fe fff1 	bl	d7c08 <mbedtls_mpi_read_binary>
   d8c26:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d8c28:	f240 4401 	movw	r4, #1025	; 0x401
   d8c2c:	4619      	mov	r1, r3
   d8c2e:	eb0d 0203 	add.w	r2, sp, r3
   d8c32:	3301      	adds	r3, #1
   d8c34:	42a3      	cmp	r3, r4
   d8c36:	d003      	beq.n	d8c40 <mbedtls_mpi_fill_random+0x40>
   d8c38:	7011      	strb	r1, [r2, #0]
   d8c3a:	e7f8      	b.n	d8c2e <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   d8c3c:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
   d8c40:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   d8c44:	bd70      	pop	{r4, r5, r6, pc}

000d8c46 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   d8c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c4a:	4680      	mov	r8, r0
   d8c4c:	b09c      	sub	sp, #112	; 0x70
   d8c4e:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   d8c50:	4610      	mov	r0, r2
   d8c52:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   d8c54:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   d8c56:	f7ff f9a2 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d8c5a:	2800      	cmp	r0, #0
   d8c5c:	f340 814c 	ble.w	d8ef8 <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
   d8c60:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c62:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   d8c64:	4632      	mov	r2, r6
   d8c66:	4639      	mov	r1, r7
   d8c68:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c6a:	9504      	str	r5, [sp, #16]
    X->n = 0;
   d8c6c:	9305      	str	r3, [sp, #20]
    X->p = NULL;
   d8c6e:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c70:	9507      	str	r5, [sp, #28]
    X->n = 0;
   d8c72:	9308      	str	r3, [sp, #32]
    X->p = NULL;
   d8c74:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c76:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
   d8c78:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
   d8c7a:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c7c:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
   d8c7e:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
   d8c80:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c82:	9501      	str	r5, [sp, #4]
    X->n = 0;
   d8c84:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   d8c86:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c88:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
   d8c8a:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
   d8c8c:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c8e:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
   d8c90:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
   d8c92:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c94:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
   d8c96:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
   d8c98:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
   d8c9a:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
   d8c9c:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
   d8c9e:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   d8ca0:	f7ff ff29 	bl	d8af6 <mbedtls_mpi_gcd>
   d8ca4:	4604      	mov	r4, r0
   d8ca6:	2800      	cmp	r0, #0
   d8ca8:	f040 8109 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   d8cac:	4629      	mov	r1, r5
   d8cae:	a801      	add	r0, sp, #4
   d8cb0:	f7ff f975 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d8cb4:	2800      	cmp	r0, #0
   d8cb6:	f040 8100 	bne.w	d8eba <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
   d8cba:	4632      	mov	r2, r6
   d8cbc:	4639      	mov	r1, r7
   d8cbe:	a804      	add	r0, sp, #16
   d8cc0:	f7ff fcc8 	bl	d8654 <mbedtls_mpi_mod_mpi>
   d8cc4:	4604      	mov	r4, r0
   d8cc6:	2800      	cmp	r0, #0
   d8cc8:	f040 80f9 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
   d8ccc:	a904      	add	r1, sp, #16
   d8cce:	a807      	add	r0, sp, #28
   d8cd0:	f7fe ff05 	bl	d7ade <mbedtls_mpi_copy>
   d8cd4:	4604      	mov	r4, r0
   d8cd6:	2800      	cmp	r0, #0
   d8cd8:	f040 80f1 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
   d8cdc:	4631      	mov	r1, r6
   d8cde:	a810      	add	r0, sp, #64	; 0x40
   d8ce0:	f7fe fefd 	bl	d7ade <mbedtls_mpi_copy>
   d8ce4:	4604      	mov	r4, r0
   d8ce6:	2800      	cmp	r0, #0
   d8ce8:	f040 80e9 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
   d8cec:	4631      	mov	r1, r6
   d8cee:	a813      	add	r0, sp, #76	; 0x4c
   d8cf0:	f7fe fef5 	bl	d7ade <mbedtls_mpi_copy>
   d8cf4:	4604      	mov	r4, r0
   d8cf6:	2800      	cmp	r0, #0
   d8cf8:	f040 80e1 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
   d8cfc:	4629      	mov	r1, r5
   d8cfe:	a80a      	add	r0, sp, #40	; 0x28
   d8d00:	f7fe ff16 	bl	d7b30 <mbedtls_mpi_lset>
   d8d04:	4604      	mov	r4, r0
   d8d06:	2800      	cmp	r0, #0
   d8d08:	f040 80d9 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
   d8d0c:	4601      	mov	r1, r0
   d8d0e:	a80d      	add	r0, sp, #52	; 0x34
   d8d10:	f7fe ff0e 	bl	d7b30 <mbedtls_mpi_lset>
   d8d14:	4604      	mov	r4, r0
   d8d16:	2800      	cmp	r0, #0
   d8d18:	f040 80d1 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
   d8d1c:	4601      	mov	r1, r0
   d8d1e:	a816      	add	r0, sp, #88	; 0x58
   d8d20:	f7fe ff06 	bl	d7b30 <mbedtls_mpi_lset>
   d8d24:	4604      	mov	r4, r0
   d8d26:	2800      	cmp	r0, #0
   d8d28:	f040 80c9 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
   d8d2c:	4629      	mov	r1, r5
   d8d2e:	a819      	add	r0, sp, #100	; 0x64
   d8d30:	f7fe fefe 	bl	d7b30 <mbedtls_mpi_lset>
   d8d34:	4604      	mov	r4, r0
   d8d36:	2800      	cmp	r0, #0
   d8d38:	f040 80c1 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
   d8d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8d3e:	681b      	ldr	r3, [r3, #0]
   d8d40:	07dd      	lsls	r5, r3, #31
   d8d42:	d44c      	bmi.n	d8dde <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
   d8d44:	2101      	movs	r1, #1
   d8d46:	a807      	add	r0, sp, #28
   d8d48:	f7ff f805 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8d4c:	4604      	mov	r4, r0
   d8d4e:	2800      	cmp	r0, #0
   d8d50:	f040 80b5 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
   d8d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8d56:	681b      	ldr	r3, [r3, #0]
   d8d58:	07dc      	lsls	r4, r3, #31
   d8d5a:	d410      	bmi.n	d8d7e <mbedtls_mpi_inv_mod+0x138>
   d8d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8d5e:	681b      	ldr	r3, [r3, #0]
   d8d60:	07d8      	lsls	r0, r3, #31
   d8d62:	d40c      	bmi.n	d8d7e <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
   d8d64:	2101      	movs	r1, #1
   d8d66:	a80a      	add	r0, sp, #40	; 0x28
   d8d68:	f7fe fff5 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8d6c:	4604      	mov	r4, r0
   d8d6e:	2800      	cmp	r0, #0
   d8d70:	f040 80a5 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
   d8d74:	2101      	movs	r1, #1
   d8d76:	a80d      	add	r0, sp, #52	; 0x34
   d8d78:	f7fe ffed 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8d7c:	e7da      	b.n	d8d34 <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
   d8d7e:	a90a      	add	r1, sp, #40	; 0x28
   d8d80:	aa10      	add	r2, sp, #64	; 0x40
   d8d82:	4608      	mov	r0, r1
   d8d84:	f7ff f9bb 	bl	d80fe <mbedtls_mpi_add_mpi>
   d8d88:	4604      	mov	r4, r0
   d8d8a:	2800      	cmp	r0, #0
   d8d8c:	f040 8097 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
   d8d90:	a90d      	add	r1, sp, #52	; 0x34
   d8d92:	aa04      	add	r2, sp, #16
   d8d94:	4608      	mov	r0, r1
   d8d96:	f7ff f9d3 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8d9a:	4604      	mov	r4, r0
   d8d9c:	2800      	cmp	r0, #0
   d8d9e:	d0e1      	beq.n	d8d64 <mbedtls_mpi_inv_mod+0x11e>
   d8da0:	e08d      	b.n	d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
   d8da2:	2101      	movs	r1, #1
   d8da4:	a813      	add	r0, sp, #76	; 0x4c
   d8da6:	f7fe ffd6 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8daa:	4604      	mov	r4, r0
   d8dac:	2800      	cmp	r0, #0
   d8dae:	f040 8086 	bne.w	d8ebe <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
   d8db2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d8db4:	681b      	ldr	r3, [r3, #0]
   d8db6:	07da      	lsls	r2, r3, #31
   d8db8:	d416      	bmi.n	d8de8 <mbedtls_mpi_inv_mod+0x1a2>
   d8dba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8dbc:	681b      	ldr	r3, [r3, #0]
   d8dbe:	07db      	lsls	r3, r3, #31
   d8dc0:	d412      	bmi.n	d8de8 <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
   d8dc2:	2101      	movs	r1, #1
   d8dc4:	a816      	add	r0, sp, #88	; 0x58
   d8dc6:	f7fe ffc6 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8dca:	4604      	mov	r4, r0
   d8dcc:	2800      	cmp	r0, #0
   d8dce:	d176      	bne.n	d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
   d8dd0:	2101      	movs	r1, #1
   d8dd2:	a819      	add	r0, sp, #100	; 0x64
   d8dd4:	f7fe ffbf 	bl	d7d56 <mbedtls_mpi_shift_r>
   d8dd8:	4604      	mov	r4, r0
   d8dda:	2800      	cmp	r0, #0
   d8ddc:	d16f      	bne.n	d8ebe <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
   d8dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8de0:	681b      	ldr	r3, [r3, #0]
   d8de2:	07d9      	lsls	r1, r3, #31
   d8de4:	d411      	bmi.n	d8e0a <mbedtls_mpi_inv_mod+0x1c4>
   d8de6:	e7dc      	b.n	d8da2 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
   d8de8:	a916      	add	r1, sp, #88	; 0x58
   d8dea:	aa10      	add	r2, sp, #64	; 0x40
   d8dec:	4608      	mov	r0, r1
   d8dee:	f7ff f986 	bl	d80fe <mbedtls_mpi_add_mpi>
   d8df2:	4604      	mov	r4, r0
   d8df4:	2800      	cmp	r0, #0
   d8df6:	d162      	bne.n	d8ebe <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
   d8df8:	a919      	add	r1, sp, #100	; 0x64
   d8dfa:	aa04      	add	r2, sp, #16
   d8dfc:	4608      	mov	r0, r1
   d8dfe:	f7ff f99f 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8e02:	4604      	mov	r4, r0
   d8e04:	2800      	cmp	r0, #0
   d8e06:	d0dc      	beq.n	d8dc2 <mbedtls_mpi_inv_mod+0x17c>
   d8e08:	e059      	b.n	d8ebe <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
   d8e0a:	a913      	add	r1, sp, #76	; 0x4c
   d8e0c:	a807      	add	r0, sp, #28
   d8e0e:	f7ff f881 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   d8e12:	2800      	cmp	r0, #0
   d8e14:	db1f      	blt.n	d8e56 <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
   d8e16:	a907      	add	r1, sp, #28
   d8e18:	aa13      	add	r2, sp, #76	; 0x4c
   d8e1a:	4608      	mov	r0, r1
   d8e1c:	f7ff f990 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8e20:	4604      	mov	r4, r0
   d8e22:	2800      	cmp	r0, #0
   d8e24:	d14b      	bne.n	d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
   d8e26:	a90a      	add	r1, sp, #40	; 0x28
   d8e28:	aa16      	add	r2, sp, #88	; 0x58
   d8e2a:	4608      	mov	r0, r1
   d8e2c:	f7ff f988 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8e30:	4604      	mov	r4, r0
   d8e32:	2800      	cmp	r0, #0
   d8e34:	d143      	bne.n	d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
   d8e36:	aa19      	add	r2, sp, #100	; 0x64
   d8e38:	a90d      	add	r1, sp, #52	; 0x34
   d8e3a:	4608      	mov	r0, r1
   d8e3c:	f7ff f980 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8e40:	4604      	mov	r4, r0
   d8e42:	2800      	cmp	r0, #0
   d8e44:	d13b      	bne.n	d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
   d8e46:	2100      	movs	r1, #0
   d8e48:	a807      	add	r0, sp, #28
   d8e4a:	f7ff f8a8 	bl	d7f9e <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
   d8e4e:	2800      	cmp	r0, #0
   d8e50:	f47f af74 	bne.w	d8d3c <mbedtls_mpi_inv_mod+0xf6>
   d8e54:	e017      	b.n	d8e86 <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
   d8e56:	a913      	add	r1, sp, #76	; 0x4c
   d8e58:	aa07      	add	r2, sp, #28
   d8e5a:	4608      	mov	r0, r1
   d8e5c:	f7ff f970 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8e60:	4604      	mov	r4, r0
   d8e62:	bb60      	cbnz	r0, d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
   d8e64:	a916      	add	r1, sp, #88	; 0x58
   d8e66:	aa0a      	add	r2, sp, #40	; 0x28
   d8e68:	4608      	mov	r0, r1
   d8e6a:	f7ff f969 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8e6e:	4604      	mov	r4, r0
   d8e70:	bb28      	cbnz	r0, d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
   d8e72:	aa0d      	add	r2, sp, #52	; 0x34
   d8e74:	a919      	add	r1, sp, #100	; 0x64
   d8e76:	e7e0      	b.n	d8e3a <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
   d8e78:	a916      	add	r1, sp, #88	; 0x58
   d8e7a:	4632      	mov	r2, r6
   d8e7c:	4608      	mov	r0, r1
   d8e7e:	f7ff f93e 	bl	d80fe <mbedtls_mpi_add_mpi>
   d8e82:	4604      	mov	r4, r0
   d8e84:	b9d8      	cbnz	r0, d8ebe <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
   d8e86:	2100      	movs	r1, #0
   d8e88:	a816      	add	r0, sp, #88	; 0x58
   d8e8a:	f7ff f888 	bl	d7f9e <mbedtls_mpi_cmp_int>
   d8e8e:	2800      	cmp	r0, #0
   d8e90:	dbf2      	blt.n	d8e78 <mbedtls_mpi_inv_mod+0x232>
   d8e92:	e006      	b.n	d8ea2 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
   d8e94:	a916      	add	r1, sp, #88	; 0x58
   d8e96:	4632      	mov	r2, r6
   d8e98:	4608      	mov	r0, r1
   d8e9a:	f7ff f951 	bl	d8140 <mbedtls_mpi_sub_mpi>
   d8e9e:	4604      	mov	r4, r0
   d8ea0:	b968      	cbnz	r0, d8ebe <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
   d8ea2:	4631      	mov	r1, r6
   d8ea4:	a816      	add	r0, sp, #88	; 0x58
   d8ea6:	f7ff f835 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   d8eaa:	2800      	cmp	r0, #0
   d8eac:	daf2      	bge.n	d8e94 <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
   d8eae:	a916      	add	r1, sp, #88	; 0x58
   d8eb0:	4640      	mov	r0, r8
   d8eb2:	f7fe fe14 	bl	d7ade <mbedtls_mpi_copy>
   d8eb6:	4604      	mov	r4, r0
   d8eb8:	e001      	b.n	d8ebe <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   d8eba:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
   d8ebe:	a804      	add	r0, sp, #16
   d8ec0:	f7fe fdcb 	bl	d7a5a <mbedtls_mpi_free>
   d8ec4:	a807      	add	r0, sp, #28
   d8ec6:	f7fe fdc8 	bl	d7a5a <mbedtls_mpi_free>
   d8eca:	a80a      	add	r0, sp, #40	; 0x28
   d8ecc:	f7fe fdc5 	bl	d7a5a <mbedtls_mpi_free>
   d8ed0:	a80d      	add	r0, sp, #52	; 0x34
   d8ed2:	f7fe fdc2 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
   d8ed6:	a801      	add	r0, sp, #4
   d8ed8:	f7fe fdbf 	bl	d7a5a <mbedtls_mpi_free>
   d8edc:	a810      	add	r0, sp, #64	; 0x40
   d8ede:	f7fe fdbc 	bl	d7a5a <mbedtls_mpi_free>
   d8ee2:	a813      	add	r0, sp, #76	; 0x4c
   d8ee4:	f7fe fdb9 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
   d8ee8:	a816      	add	r0, sp, #88	; 0x58
   d8eea:	f7fe fdb6 	bl	d7a5a <mbedtls_mpi_free>
   d8eee:	a819      	add	r0, sp, #100	; 0x64
   d8ef0:	f7fe fdb3 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
   d8ef4:	4620      	mov	r0, r4
   d8ef6:	e001      	b.n	d8efc <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   d8ef8:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
   d8efc:	b01c      	add	sp, #112	; 0x70
   d8efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d8f04 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
   d8f04:	4b05      	ldr	r3, [pc, #20]	; (d8f1c <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d8f06:	f853 2c04 	ldr.w	r2, [r3, #-4]
   d8f0a:	b122      	cbz	r2, d8f16 <mbedtls_cipher_info_from_type+0x12>
   d8f0c:	3308      	adds	r3, #8
        if( def->type == cipher_type )
   d8f0e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d8f12:	4281      	cmp	r1, r0
   d8f14:	d1f7      	bne.n	d8f06 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
   d8f16:	4610      	mov	r0, r2
   d8f18:	4770      	bx	lr
   d8f1a:	bf00      	nop
   d8f1c:	000e76c4 	.word	0x000e76c4

000d8f20 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
   d8f20:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d8f22:	4c08      	ldr	r4, [pc, #32]	; (d8f44 <mbedtls_cipher_info_from_values+0x24>)
   d8f24:	6863      	ldr	r3, [r4, #4]
   d8f26:	b15b      	cbz	r3, d8f40 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
   d8f28:	699d      	ldr	r5, [r3, #24]
   d8f2a:	782d      	ldrb	r5, [r5, #0]
   d8f2c:	4285      	cmp	r5, r0
   d8f2e:	d105      	bne.n	d8f3c <mbedtls_cipher_info_from_values+0x1c>
   d8f30:	685d      	ldr	r5, [r3, #4]
   d8f32:	428d      	cmp	r5, r1
   d8f34:	d102      	bne.n	d8f3c <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
   d8f36:	785d      	ldrb	r5, [r3, #1]
   d8f38:	4295      	cmp	r5, r2
   d8f3a:	d001      	beq.n	d8f40 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d8f3c:	3408      	adds	r4, #8
   d8f3e:	e7f1      	b.n	d8f24 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
   d8f40:	4618      	mov	r0, r3
   d8f42:	bd30      	pop	{r4, r5, pc}
   d8f44:	000e76bc 	.word	0x000e76bc

000d8f48 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d8f48:	2238      	movs	r2, #56	; 0x38
   d8f4a:	2100      	movs	r1, #0
   d8f4c:	f00d be21 	b.w	e6b92 <memset>

000d8f50 <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
   d8f50:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d8f52:	4604      	mov	r4, r0
   d8f54:	b168      	cbz	r0, d8f72 <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
   d8f56:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d8f58:	b118      	cbz	r0, d8f62 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
   d8f5a:	6823      	ldr	r3, [r4, #0]
   d8f5c:	699b      	ldr	r3, [r3, #24]
   d8f5e:	695b      	ldr	r3, [r3, #20]
   d8f60:	4798      	blx	r3
   d8f62:	f104 0238 	add.w	r2, r4, #56	; 0x38
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
   d8f66:	2300      	movs	r3, #0
   d8f68:	4294      	cmp	r4, r2
   d8f6a:	d002      	beq.n	d8f72 <mbedtls_cipher_free+0x22>
   d8f6c:	7023      	strb	r3, [r4, #0]
   d8f6e:	3401      	adds	r4, #1
   d8f70:	e7fa      	b.n	d8f68 <mbedtls_cipher_free+0x18>
   d8f72:	bd10      	pop	{r4, pc}

000d8f74 <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
   d8f74:	b538      	push	{r3, r4, r5, lr}
   d8f76:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
   d8f78:	460d      	mov	r5, r1
   d8f7a:	b161      	cbz	r1, d8f96 <mbedtls_cipher_setup+0x22>
   d8f7c:	b158      	cbz	r0, d8f96 <mbedtls_cipher_setup+0x22>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d8f7e:	2238      	movs	r2, #56	; 0x38
   d8f80:	2100      	movs	r1, #0
   d8f82:	f00d fe06 	bl	e6b92 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
   d8f86:	69ab      	ldr	r3, [r5, #24]
   d8f88:	691b      	ldr	r3, [r3, #16]
   d8f8a:	4798      	blx	r3
   d8f8c:	6360      	str	r0, [r4, #52]	; 0x34
   d8f8e:	b120      	cbz	r0, d8f9a <mbedtls_cipher_setup+0x26>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
   d8f90:	6025      	str	r5, [r4, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
   d8f92:	2000      	movs	r0, #0
   d8f94:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d8f96:	4802      	ldr	r0, [pc, #8]	; (d8fa0 <mbedtls_cipher_setup+0x2c>)
   d8f98:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
   d8f9a:	4802      	ldr	r0, [pc, #8]	; (d8fa4 <mbedtls_cipher_setup+0x30>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
   d8f9c:	bd38      	pop	{r3, r4, r5, pc}
   d8f9e:	bf00      	nop
   d8fa0:	ffff9f00 	.word	0xffff9f00
   d8fa4:	ffff9e80 	.word	0xffff9e80

000d8fa8 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
   d8fa8:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
   d8faa:	b1c8      	cbz	r0, d8fe0 <mbedtls_cipher_setkey+0x38>
   d8fac:	6804      	ldr	r4, [r0, #0]
   d8fae:	b1bc      	cbz	r4, d8fe0 <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
   d8fb0:	6925      	ldr	r5, [r4, #16]
   d8fb2:	07ad      	lsls	r5, r5, #30
   d8fb4:	d402      	bmi.n	d8fbc <mbedtls_cipher_setkey+0x14>
   d8fb6:	6865      	ldr	r5, [r4, #4]
   d8fb8:	4295      	cmp	r5, r2
   d8fba:	d111      	bne.n	d8fe0 <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d8fbc:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
   d8fbe:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
   d8fc0:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d8fc2:	d004      	beq.n	d8fce <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
   d8fc4:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d8fc6:	2d03      	cmp	r5, #3
   d8fc8:	d001      	beq.n	d8fce <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
   d8fca:	2d05      	cmp	r5, #5
   d8fcc:	d102      	bne.n	d8fd4 <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
   d8fce:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
   d8fd0:	689b      	ldr	r3, [r3, #8]
   d8fd2:	e002      	b.n	d8fda <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
   d8fd4:	b923      	cbnz	r3, d8fe0 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d8fd6:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
   d8fd8:	68db      	ldr	r3, [r3, #12]
   d8fda:	6b40      	ldr	r0, [r0, #52]	; 0x34

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d8fdc:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
   d8fde:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d8fe0:	4801      	ldr	r0, [pc, #4]	; (d8fe8 <mbedtls_cipher_setkey+0x40>)
   d8fe2:	bc30      	pop	{r4, r5}
   d8fe4:	4770      	bx	lr
   d8fe6:	bf00      	nop
   d8fe8:	ffff9f00 	.word	0xffff9f00

000d8fec <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
   d8fec:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
   d8fee:	4604      	mov	r4, r0
   d8ff0:	b1b0      	cbz	r0, d9020 <mbedtls_cipher_set_iv+0x34>
   d8ff2:	6803      	ldr	r3, [r0, #0]
   d8ff4:	b1a3      	cbz	r3, d9020 <mbedtls_cipher_set_iv+0x34>
   d8ff6:	b199      	cbz	r1, d9020 <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
   d8ff8:	2a10      	cmp	r2, #16
   d8ffa:	d80f      	bhi.n	d901c <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
   d8ffc:	6918      	ldr	r0, [r3, #16]
   d8ffe:	07c0      	lsls	r0, r0, #31
   d9000:	d403      	bmi.n	d900a <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
   d9002:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
   d9004:	42aa      	cmp	r2, r5
   d9006:	d201      	bcs.n	d900c <mbedtls_cipher_set_iv+0x20>
   d9008:	e00a      	b.n	d9020 <mbedtls_cipher_set_iv+0x34>
   d900a:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
   d900c:	462a      	mov	r2, r5
   d900e:	f104 0020 	add.w	r0, r4, #32
   d9012:	f00d fd98 	bl	e6b46 <memcpy>
    ctx->iv_size = actual_iv_size;
   d9016:	6325      	str	r5, [r4, #48]	; 0x30

    return( 0 );
   d9018:	2000      	movs	r0, #0
   d901a:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d901c:	4801      	ldr	r0, [pc, #4]	; (d9024 <mbedtls_cipher_set_iv+0x38>)
   d901e:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d9020:	4801      	ldr	r0, [pc, #4]	; (d9028 <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
   d9022:	bd38      	pop	{r3, r4, r5, pc}
   d9024:	ffff9f80 	.word	0xffff9f80
   d9028:	ffff9f00 	.word	0xffff9f00

000d902c <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
   d902c:	b128      	cbz	r0, d903a <mbedtls_cipher_reset+0xe>
   d902e:	6803      	ldr	r3, [r0, #0]
   d9030:	b11b      	cbz	r3, d903a <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d9032:	2300      	movs	r3, #0
   d9034:	61c3      	str	r3, [r0, #28]

    return( 0 );
   d9036:	4618      	mov	r0, r3
   d9038:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d903a:	4801      	ldr	r0, [pc, #4]	; (d9040 <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
   d903c:	4770      	bx	lr
   d903e:	bf00      	nop
   d9040:	ffff9f00 	.word	0xffff9f00

000d9044 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d9044:	b470      	push	{r4, r5, r6}
   d9046:	9d03      	ldr	r5, [sp, #12]
   d9048:	4614      	mov	r4, r2
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
   d904a:	b908      	cbnz	r0, d9050 <mbedtls_cipher_update+0xc>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d904c:	481d      	ldr	r0, [pc, #116]	; (d90c4 <mbedtls_cipher_update+0x80>)
   d904e:	e036      	b.n	d90be <mbedtls_cipher_update+0x7a>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
   d9050:	6802      	ldr	r2, [r0, #0]
   d9052:	2a00      	cmp	r2, #0
   d9054:	d0fa      	beq.n	d904c <mbedtls_cipher_update+0x8>
   d9056:	2d00      	cmp	r5, #0
   d9058:	d0f8      	beq.n	d904c <mbedtls_cipher_update+0x8>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
   d905a:	2200      	movs	r2, #0
   d905c:	602a      	str	r2, [r5, #0]
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
   d905e:	6806      	ldr	r6, [r0, #0]
   d9060:	b10e      	cbz	r6, d9066 <mbedtls_cipher_update+0x22>
        return 0;

    return ctx->cipher_info->block_size;
   d9062:	6972      	ldr	r2, [r6, #20]
   d9064:	e000      	b.n	d9068 <mbedtls_cipher_update+0x24>
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;
   d9066:	4632      	mov	r2, r6
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
   d9068:	7876      	ldrb	r6, [r6, #1]
   d906a:	2e01      	cmp	r6, #1
   d906c:	d10c      	bne.n	d9088 <mbedtls_cipher_update+0x44>
    {
        if( ilen != block_size )
   d906e:	4294      	cmp	r4, r2
   d9070:	d120      	bne.n	d90b4 <mbedtls_cipher_update+0x70>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
   d9072:	602c      	str	r4, [r5, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d9074:	6802      	ldr	r2, [r0, #0]
   d9076:	6992      	ldr	r2, [r2, #24]
   d9078:	6854      	ldr	r4, [r2, #4]
   d907a:	460a      	mov	r2, r1
   d907c:	46a4      	mov	ip, r4
   d907e:	f990 1008 	ldrsb.w	r1, [r0, #8]
   d9082:	6b40      	ldr	r0, [r0, #52]	; 0x34
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d9084:	bc70      	pop	{r4, r5, r6}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d9086:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
   d9088:	2e06      	cmp	r6, #6
   d908a:	d106      	bne.n	d909a <mbedtls_cipher_update+0x56>
    {
        *olen = ilen;
   d908c:	602c      	str	r4, [r5, #0]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
   d908e:	460a      	mov	r2, r1
   d9090:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d9092:	4621      	mov	r1, r4
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d9094:	bc70      	pop	{r4, r5, r6}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
   d9096:	f000 baf8 	b.w	d968a <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
   d909a:	b16a      	cbz	r2, d90b8 <mbedtls_cipher_update+0x74>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
   d909c:	4299      	cmp	r1, r3
   d909e:	d10d      	bne.n	d90bc <mbedtls_cipher_update+0x78>
   d90a0:	69c3      	ldr	r3, [r0, #28]
   d90a2:	2b00      	cmp	r3, #0
   d90a4:	d1d2      	bne.n	d904c <mbedtls_cipher_update+0x8>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
   d90a6:	fbb4 f1f2 	udiv	r1, r4, r2
   d90aa:	fb02 4411 	mls	r4, r2, r1, r4
   d90ae:	2c00      	cmp	r4, #0
   d90b0:	d1cc      	bne.n	d904c <mbedtls_cipher_update+0x8>
   d90b2:	e003      	b.n	d90bc <mbedtls_cipher_update+0x78>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d90b4:	4804      	ldr	r0, [pc, #16]	; (d90c8 <mbedtls_cipher_update+0x84>)
   d90b6:	e002      	b.n	d90be <mbedtls_cipher_update+0x7a>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
   d90b8:	4804      	ldr	r0, [pc, #16]	; (d90cc <mbedtls_cipher_update+0x88>)
   d90ba:	e000      	b.n	d90be <mbedtls_cipher_update+0x7a>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d90bc:	4804      	ldr	r0, [pc, #16]	; (d90d0 <mbedtls_cipher_update+0x8c>)
}
   d90be:	bc70      	pop	{r4, r5, r6}
   d90c0:	4770      	bx	lr
   d90c2:	bf00      	nop
   d90c4:	ffff9f00 	.word	0xffff9f00
   d90c8:	ffff9d80 	.word	0xffff9d80
   d90cc:	ffff9c80 	.word	0xffff9c80
   d90d0:	ffff9f80 	.word	0xffff9f80

000d90d4 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
   d90d4:	4603      	mov	r3, r0
   d90d6:	b1a0      	cbz	r0, d9102 <mbedtls_cipher_finish+0x2e>
   d90d8:	6801      	ldr	r1, [r0, #0]
   d90da:	b191      	cbz	r1, d9102 <mbedtls_cipher_finish+0x2e>
   d90dc:	b18a      	cbz	r2, d9102 <mbedtls_cipher_finish+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
   d90de:	2000      	movs	r0, #0
   d90e0:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
   d90e2:	681a      	ldr	r2, [r3, #0]
   d90e4:	7852      	ldrb	r2, [r2, #1]
   d90e6:	2a03      	cmp	r2, #3
   d90e8:	d00e      	beq.n	d9108 <mbedtls_cipher_finish+0x34>
   d90ea:	1f51      	subs	r1, r2, #5
   d90ec:	2902      	cmp	r1, #2
   d90ee:	d90b      	bls.n	d9108 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
   d90f0:	2a01      	cmp	r2, #1
   d90f2:	d108      	bne.n	d9106 <mbedtls_cipher_finish+0x32>
    {
        if( ctx->unprocessed_len != 0 )
   d90f4:	69db      	ldr	r3, [r3, #28]
   d90f6:	4283      	cmp	r3, r0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d90f8:	f5a0 40c5 	sub.w	r0, r0, #25216	; 0x6280
   d90fc:	bf08      	it	eq
   d90fe:	2000      	moveq	r0, #0
   d9100:	4770      	bx	lr

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d9102:	4802      	ldr	r0, [pc, #8]	; (d910c <mbedtls_cipher_finish+0x38>)
   d9104:	4770      	bx	lr
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d9106:	4802      	ldr	r0, [pc, #8]	; (d9110 <mbedtls_cipher_finish+0x3c>)
}
   d9108:	4770      	bx	lr
   d910a:	bf00      	nop
   d910c:	ffff9f00 	.word	0xffff9f00
   d9110:	ffff9f80 	.word	0xffff9f80

000d9114 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
   d9114:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9116:	b085      	sub	sp, #20
   d9118:	4605      	mov	r5, r0
   d911a:	461f      	mov	r7, r3
   d911c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d911e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
   d9120:	f7ff ff64 	bl	d8fec <mbedtls_cipher_set_iv>
   d9124:	b9b0      	cbnz	r0, d9154 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
   d9126:	4628      	mov	r0, r5
   d9128:	f7ff ff80 	bl	d902c <mbedtls_cipher_reset>
   d912c:	b990      	cbnz	r0, d9154 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
   d912e:	9400      	str	r4, [sp, #0]
   d9130:	4633      	mov	r3, r6
   d9132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d9134:	4639      	mov	r1, r7
   d9136:	4628      	mov	r0, r5
   d9138:	f7ff ff84 	bl	d9044 <mbedtls_cipher_update>
   d913c:	b950      	cbnz	r0, d9154 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
   d913e:	6821      	ldr	r1, [r4, #0]
   d9140:	aa03      	add	r2, sp, #12
   d9142:	4431      	add	r1, r6
   d9144:	4628      	mov	r0, r5
   d9146:	f7ff ffc5 	bl	d90d4 <mbedtls_cipher_finish>
   d914a:	b918      	cbnz	r0, d9154 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
   d914c:	6822      	ldr	r2, [r4, #0]
   d914e:	9b03      	ldr	r3, [sp, #12]
   d9150:	4413      	add	r3, r2
   d9152:	6023      	str	r3, [r4, #0]

    return( 0 );
}
   d9154:	b005      	add	sp, #20
   d9156:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9158 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d9158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d915c:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d915e:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d9160:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d9162:	9e08      	ldr	r6, [sp, #32]
   d9164:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
   d9168:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   d916c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9170:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d9174:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d9176:	4614      	mov	r4, r2
   d9178:	9a09      	ldr	r2, [sp, #36]	; 0x24
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d917a:	d112      	bne.n	d91a2 <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
   d917c:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
   d9180:	9308      	str	r3, [sp, #32]
   d9182:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   d9186:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   d918a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   d918e:	960a      	str	r6, [sp, #40]	; 0x28
   d9190:	9509      	str	r5, [sp, #36]	; 0x24
   d9192:	9407      	str	r4, [sp, #28]
   d9194:	460b      	mov	r3, r1
   d9196:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d9198:	2101      	movs	r1, #1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d919a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
   d919e:	f000 bb60 	b.w	d9862 <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d91a2:	4801      	ldr	r0, [pc, #4]	; (d91a8 <mbedtls_cipher_auth_encrypt+0x50>)
   d91a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d91a8:	ffff9f80 	.word	0xffff9f80

000d91ac <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d91ac:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d91ae:	6805      	ldr	r5, [r0, #0]
   d91b0:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d91b2:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d91b4:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d91b6:	460c      	mov	r4, r1
   d91b8:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d91ba:	d117      	bne.n	d91ec <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
   d91bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   d91be:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
   d91c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d91c2:	9505      	str	r5, [sp, #20]
   d91c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   d91c6:	9504      	str	r5, [sp, #16]
   d91c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   d91ca:	9503      	str	r5, [sp, #12]
   d91cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   d91ce:	9502      	str	r5, [sp, #8]
   d91d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d91d2:	e88d 0028 	stmia.w	sp, {r3, r5}
   d91d6:	4613      	mov	r3, r2
   d91d8:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d91da:	4622      	mov	r2, r4
   d91dc:	f000 fb66 	bl	d98ac <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
   d91e0:	4b04      	ldr	r3, [pc, #16]	; (d91f4 <mbedtls_cipher_auth_decrypt+0x48>)
   d91e2:	f110 0f12 	cmn.w	r0, #18
   d91e6:	bf08      	it	eq
   d91e8:	4618      	moveq	r0, r3
   d91ea:	e000      	b.n	d91ee <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d91ec:	4802      	ldr	r0, [pc, #8]	; (d91f8 <mbedtls_cipher_auth_decrypt+0x4c>)
}
   d91ee:	b007      	add	sp, #28
   d91f0:	bd30      	pop	{r4, r5, pc}
   d91f2:	bf00      	nop
   d91f4:	ffff9d00 	.word	0xffff9d00
   d91f8:	ffff9f80 	.word	0xffff9f80

000d91fc <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
   d91fc:	b510      	push	{r4, lr}
   d91fe:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
   d9200:	f000 fb83 	bl	d990a <mbedtls_gcm_free>
    mbedtls_free( ctx );
   d9204:	4620      	mov	r0, r4
}
   d9206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
   d920a:	f00a bed5 	b.w	e3fb8 <free>

000d920e <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
   d920e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
   d9210:	f44f 71c0 	mov.w	r1, #384	; 0x180
   d9214:	2001      	movs	r0, #1
   d9216:	f00d fc71 	bl	e6afc <calloc>

    if( ctx != NULL )
   d921a:	4604      	mov	r4, r0
   d921c:	b108      	cbz	r0, d9222 <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
   d921e:	f000 f8db 	bl	d93d8 <mbedtls_gcm_init>

    return( ctx );
}
   d9222:	4620      	mov	r0, r4
   d9224:	bd10      	pop	{r4, pc}

000d9226 <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
   d9226:	4613      	mov	r3, r2
   d9228:	460a      	mov	r2, r1
   d922a:	2102      	movs	r1, #2
   d922c:	f000 b8d9 	b.w	d93e2 <mbedtls_gcm_setkey>

000d9230 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
   d9230:	b510      	push	{r4, lr}
   d9232:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
   d9234:	f7fd fadb 	bl	d67ee <mbedtls_aes_free>
    mbedtls_free( ctx );
   d9238:	4620      	mov	r0, r4
}
   d923a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
   d923e:	f00a bebb 	b.w	e3fb8 <free>

000d9242 <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
   d9242:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
   d9244:	f44f 718c 	mov.w	r1, #280	; 0x118
   d9248:	2001      	movs	r0, #1
   d924a:	f00d fc57 	bl	e6afc <calloc>

    if( aes == NULL )
   d924e:	4604      	mov	r4, r0
   d9250:	b108      	cbz	r0, d9256 <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
   d9252:	f7fd fac7 	bl	d67e4 <mbedtls_aes_init>

    return( aes );
}
   d9256:	4620      	mov	r0, r4
   d9258:	bd10      	pop	{r4, pc}

000d925a <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
   d925a:	f7fd bbcd 	b.w	d69f8 <mbedtls_aes_setkey_dec>

000d925e <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
   d925e:	f7fd bad1 	b.w	d6804 <mbedtls_aes_setkey_enc>

000d9262 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
   d9262:	f7fd bfc7 	b.w	d71f4 <mbedtls_aes_crypt_ecb>
	...

000d9268 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   d9268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
   d926c:	7bcb      	ldrb	r3, [r1, #15]
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
   d926e:	f8df c164 	ldr.w	ip, [pc, #356]	; d93d4 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
   d9272:	f003 030f 	and.w	r3, r3, #15
   d9276:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   d927a:	b093      	sub	sp, #76	; 0x4c
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
   d927c:	e9d3 672e 	ldrd	r6, r7, [r3, #184]	; 0xb8
    zl = ctx->HL[lo];
   d9280:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
   d9284:	f101 0310 	add.w	r3, r1, #16
   d9288:	9310      	str	r3, [sp, #64]	; 0x40

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
   d928a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d928c:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
   d9290:	9310      	str	r3, [sp, #64]	; 0x40
   d9292:	f00e 030f 	and.w	r3, lr, #15
   d9296:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
   d9298:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d929a:	ebc1 0803 	rsb	r8, r1, r3
   d929e:	f1b8 0f0f 	cmp.w	r8, #15
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
   d92a2:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
   d92a6:	d03a      	beq.n	d931e <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   d92a8:	0733      	lsls	r3, r6, #28
   d92aa:	9309      	str	r3, [sp, #36]	; 0x24
   d92ac:	2300      	movs	r3, #0
   d92ae:	9308      	str	r3, [sp, #32]
   d92b0:	0923      	lsrs	r3, r4, #4
   d92b2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   d92b6:	9300      	str	r3, [sp, #0]
   d92b8:	092b      	lsrs	r3, r5, #4
   d92ba:	9301      	str	r3, [sp, #4]
   d92bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
   d92be:	f004 040f 	and.w	r4, r4, #15
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   d92c2:	e9dd ab00 	ldrd	sl, fp, [sp]
   d92c6:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   d92ca:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   d92ce:	0933      	lsrs	r3, r6, #4
   d92d0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   d92d4:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
   d92d8:	9302      	str	r3, [sp, #8]
   d92da:	093b      	lsrs	r3, r7, #4
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   d92dc:	ea48 080a 	orr.w	r8, r8, sl
   d92e0:	ea49 090b 	orr.w	r9, r9, fp
   d92e4:	9303      	str	r3, [sp, #12]
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   d92e6:	0423      	lsls	r3, r4, #16
   d92e8:	e9d5 672e 	ldrd	r6, r7, [r5, #184]	; 0xb8
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   d92ec:	46c2      	mov	sl, r8
   d92ee:	46cb      	mov	fp, r9
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   d92f0:	930d      	str	r3, [sp, #52]	; 0x34
   d92f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d92f6:	2300      	movs	r3, #0
   d92f8:	930c      	str	r3, [sp, #48]	; 0x30
   d92fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   d92fe:	ea89 0907 	eor.w	r9, r9, r7
   d9302:	464f      	mov	r7, r9
   d9304:	407c      	eors	r4, r7
   d9306:	ea88 0806 	eor.w	r8, r8, r6
   d930a:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
   d930c:	e9d5 450e 	ldrd	r4, r5, [r5, #56]	; 0x38
   d9310:	4646      	mov	r6, r8
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   d9312:	4073      	eors	r3, r6
   d9314:	461e      	mov	r6, r3
            zl ^= ctx->HL[lo];
   d9316:	ea84 040a 	eor.w	r4, r4, sl
   d931a:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   d931e:	0733      	lsls	r3, r6, #28
   d9320:	930b      	str	r3, [sp, #44]	; 0x2c
   d9322:	2300      	movs	r3, #0
   d9324:	930a      	str	r3, [sp, #40]	; 0x28
   d9326:	0923      	lsrs	r3, r4, #4
   d9328:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   d932c:	9304      	str	r3, [sp, #16]
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
   d932e:	f004 040f 	and.w	r4, r4, #15
            zl ^= ctx->HL[lo];

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   d9332:	092b      	lsrs	r3, r5, #4
   d9334:	9305      	str	r3, [sp, #20]
   d9336:	0933      	lsrs	r3, r6, #4
   d9338:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d933c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   d9340:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   d9344:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
   d9348:	9306      	str	r3, [sp, #24]
   d934a:	093b      	lsrs	r3, r7, #4
   d934c:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
   d9350:	9307      	str	r3, [sp, #28]
   d9352:	0423      	lsls	r3, r4, #16
   d9354:	e9de 672e 	ldrd	r6, r7, [lr, #184]	; 0xb8
            zl ^= ctx->HL[lo];

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   d9358:	ea48 080a 	orr.w	r8, r8, sl
   d935c:	ea49 090b 	orr.w	r9, r9, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   d9360:	930f      	str	r3, [sp, #60]	; 0x3c
   d9362:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   d9366:	2300      	movs	r3, #0
   d9368:	930e      	str	r3, [sp, #56]	; 0x38
   d936a:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   d936e:	ea8a 0a06 	eor.w	sl, sl, r6
   d9372:	ea8b 0b07 	eor.w	fp, fp, r7
   d9376:	4656      	mov	r6, sl
   d9378:	465f      	mov	r7, fp
   d937a:	4073      	eors	r3, r6
   d937c:	407c      	eors	r4, r7
   d937e:	461e      	mov	r6, r3
   d9380:	4627      	mov	r7, r4
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   d9382:	9b10      	ldr	r3, [sp, #64]	; 0x40
        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
   d9384:	e9de 450e 	ldrd	r4, r5, [lr, #56]	; 0x38
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   d9388:	4299      	cmp	r1, r3
        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
   d938a:	ea84 0408 	eor.w	r4, r4, r8
   d938e:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   d9392:	f47f af7a 	bne.w	d928a <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   d9396:	0e3b      	lsrs	r3, r7, #24
   d9398:	7013      	strb	r3, [r2, #0]
   d939a:	0c3b      	lsrs	r3, r7, #16
   d939c:	7053      	strb	r3, [r2, #1]
   d939e:	0a3b      	lsrs	r3, r7, #8
   d93a0:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
   d93a2:	0e33      	lsrs	r3, r6, #24
   d93a4:	7113      	strb	r3, [r2, #4]
   d93a6:	0c33      	lsrs	r3, r6, #16
   d93a8:	7153      	strb	r3, [r2, #5]
   d93aa:	0a33      	lsrs	r3, r6, #8
   d93ac:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   d93ae:	0e2b      	lsrs	r3, r5, #24
   d93b0:	7213      	strb	r3, [r2, #8]
   d93b2:	0c2b      	lsrs	r3, r5, #16
   d93b4:	7253      	strb	r3, [r2, #9]
   d93b6:	0a2b      	lsrs	r3, r5, #8
   d93b8:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
   d93ba:	0e23      	lsrs	r3, r4, #24
   d93bc:	7313      	strb	r3, [r2, #12]
   d93be:	0c23      	lsrs	r3, r4, #16
   d93c0:	7353      	strb	r3, [r2, #13]
   d93c2:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   d93c4:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
   d93c6:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   d93c8:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
   d93ca:	7393      	strb	r3, [r2, #14]
   d93cc:	73d4      	strb	r4, [r2, #15]
}
   d93ce:	b013      	add	sp, #76	; 0x4c
   d93d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93d4:	000e77c8 	.word	0x000e77c8

000d93d8 <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
   d93d8:	f44f 72c0 	mov.w	r2, #384	; 0x180
   d93dc:	2100      	movs	r1, #0
   d93de:	f00d bbd8 	b.w	e6b92 <memset>

000d93e2 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
   d93e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d93e6:	4604      	mov	r4, r0
   d93e8:	b08d      	sub	sp, #52	; 0x34
   d93ea:	4608      	mov	r0, r1
   d93ec:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   d93ee:	4619      	mov	r1, r3
   d93f0:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
   d93f2:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   d93f4:	f7ff fd94 	bl	d8f20 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
   d93f8:	2800      	cmp	r0, #0
   d93fa:	f000 809c 	beq.w	d9536 <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
   d93fe:	6945      	ldr	r5, [r0, #20]
   d9400:	9002      	str	r0, [sp, #8]
   d9402:	2d10      	cmp	r5, #16
   d9404:	f040 8097 	bne.w	d9536 <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
   d9408:	4620      	mov	r0, r4
   d940a:	f7ff fda1 	bl	d8f50 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
   d940e:	9902      	ldr	r1, [sp, #8]
   d9410:	4620      	mov	r0, r4
   d9412:	f7ff fdaf 	bl	d8f74 <mbedtls_cipher_setup>
   d9416:	4684      	mov	ip, r0
   d9418:	2800      	cmp	r0, #0
   d941a:	f040 808e 	bne.w	d953a <mbedtls_gcm_setkey+0x158>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
   d941e:	2301      	movs	r3, #1
   d9420:	4642      	mov	r2, r8
   d9422:	4649      	mov	r1, r9
   d9424:	4620      	mov	r0, r4
   d9426:	f7ff fdbf 	bl	d8fa8 <mbedtls_cipher_setkey>
   d942a:	4684      	mov	ip, r0
   d942c:	2800      	cmp	r0, #0
   d942e:	f040 8084 	bne.w	d953a <mbedtls_gcm_setkey+0x158>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
   d9432:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
   d9434:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
   d9436:	462a      	mov	r2, r5
   d9438:	a808      	add	r0, sp, #32
   d943a:	f00d fbaa 	bl	e6b92 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
   d943e:	ab07      	add	r3, sp, #28
   d9440:	9300      	str	r3, [sp, #0]
   d9442:	ab08      	add	r3, sp, #32
   d9444:	462a      	mov	r2, r5
   d9446:	4619      	mov	r1, r3
   d9448:	4620      	mov	r0, r4
   d944a:	f7ff fdfb 	bl	d9044 <mbedtls_cipher_update>
   d944e:	4684      	mov	ip, r0
   d9450:	2800      	cmp	r0, #0
   d9452:	d172      	bne.n	d953a <mbedtls_gcm_setkey+0x158>
   d9454:	9b09      	ldr	r3, [sp, #36]	; 0x24
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
   d9456:	9908      	ldr	r1, [sp, #32]

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
   d9458:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d945a:	ba18      	rev	r0, r3
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
   d945c:	ba0b      	rev	r3, r1
   d945e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d9460:	4662      	mov	r2, ip
   d9462:	fa91 fe81 	rev.w	lr, r1
   d9466:	4302      	orrs	r2, r0

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
   d9468:	ba29      	rev	r1, r5
   d946a:	ea4c 000e 	orr.w	r0, ip, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
   d946e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    ctx->HH[8] = vh;
   d9472:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
   d9476:	f04f 0900 	mov.w	r9, #0
   d947a:	f04f 0800 	mov.w	r8, #0
   d947e:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
   d9482:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
   d9486:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
   d948a:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
   d948c:	f04f 4961 	mov.w	r9, #3774873600	; 0xe1000000
   d9490:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
   d9494:	07d7      	lsls	r7, r2, #31
   d9496:	0849      	lsrs	r1, r1, #1
   d9498:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   d949c:	085b      	lsrs	r3, r3, #1
   d949e:	ea4f 0232 	mov.w	r2, r2, rrx
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
   d94a2:	2600      	movs	r6, #0
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   d94a4:	fb09 fb08 	mul.w	fp, r9, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
   d94a8:	4330      	orrs	r0, r6
   d94aa:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
   d94ae:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   d94b0:	4072      	eors	r2, r6
   d94b2:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
   d94b6:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
   d94ba:	e9c8 010e 	strd	r0, r1, [r8, #56]	; 0x38
        ctx->HH[i] = vh;
   d94be:	e9c8 232e 	strd	r2, r3, [r8, #184]	; 0xb8

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
   d94c2:	ea4f 0565 	mov.w	r5, r5, asr #1
   d94c6:	d1e3      	bne.n	d9490 <mbedtls_gcm_setkey+0xae>
   d94c8:	f04f 0803 	mov.w	r8, #3
   d94cc:	2202      	movs	r2, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
   d94ce:	f104 0938 	add.w	r9, r4, #56	; 0x38
   d94d2:	f104 0eb8 	add.w	lr, r4, #184	; 0xb8
   d94d6:	00d3      	lsls	r3, r2, #3
   d94d8:	eb09 0703 	add.w	r7, r9, r3
   d94dc:	4473      	add	r3, lr
        vh = *HiH;
   d94de:	e9d3 0100 	ldrd	r0, r1, [r3]
   d94e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
        vl = *HiL;
   d94e6:	e9d7 0100 	ldrd	r0, r1, [r7]
   d94ea:	4676      	mov	r6, lr
   d94ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d94f0:	4648      	mov	r0, r9
        for( j = 1; j < i; j++ )
   d94f2:	2101      	movs	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
   d94f4:	e9f6 4502 	ldrd	r4, r5, [r6, #8]!
   d94f8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   d94fc:	ea8a 0a04 	eor.w	sl, sl, r4
   d9500:	ea8b 0b05 	eor.w	fp, fp, r5
   d9504:	4654      	mov	r4, sl
   d9506:	465d      	mov	r5, fp
   d9508:	e9e3 4502 	strd	r4, r5, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
   d950c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d9510:	e9f0 4502 	ldrd	r4, r5, [r0, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   d9514:	3101      	adds	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
   d9516:	ea8a 0a04 	eor.w	sl, sl, r4
   d951a:	ea8b 0b05 	eor.w	fp, fp, r5
   d951e:	4654      	mov	r4, sl
   d9520:	465d      	mov	r5, fp
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   d9522:	4291      	cmp	r1, r2
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
   d9524:	e9e7 4502 	strd	r4, r5, [r7, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   d9528:	d1e4      	bne.n	d94f4 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
   d952a:	f1b8 0801 	subs.w	r8, r8, #1
   d952e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d9532:	d1d0      	bne.n	d94d6 <mbedtls_gcm_setkey+0xf4>
   d9534:	e001      	b.n	d953a <mbedtls_gcm_setkey+0x158>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   d9536:	f06f 0c13 	mvn.w	ip, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
   d953a:	4660      	mov	r0, ip
   d953c:	b00d      	add	sp, #52	; 0x34
   d953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9542 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   d9542:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9546:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   d9548:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   d954c:	4604      	mov	r4, r0
   d954e:	468b      	mov	fp, r1
   d9550:	4617      	mov	r7, r2
   d9552:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   d9556:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
   d955a:	461d      	mov	r5, r3
   d955c:	2b00      	cmp	r3, #0
   d955e:	f000 808e 	beq.w	d967e <mbedtls_gcm_starts+0x13c>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   d9562:	f500 76ac 	add.w	r6, r0, #344	; 0x158
   d9566:	2210      	movs	r2, #16
   d9568:	4649      	mov	r1, r9
   d956a:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   d956c:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   d9570:	f00d fb0f 	bl	e6b92 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   d9574:	4649      	mov	r1, r9
   d9576:	2210      	movs	r2, #16
   d9578:	4650      	mov	r0, sl
   d957a:	f00d fb0a 	bl	e6b92 <memset>

    ctx->mode = mode;
   d957e:	f8c4 b178 	str.w	fp, [r4, #376]	; 0x178
    ctx->len = 0;
   d9582:	2000      	movs	r0, #0
   d9584:	2100      	movs	r1, #0
   d9586:	f504 739c 	add.w	r3, r4, #312	; 0x138
    ctx->add_len = 0;
   d958a:	46a3      	mov	fp, r4

    if( iv_len == 12 )
   d958c:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
   d958e:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
   d9592:	e9eb 0150 	strd	r0, r1, [fp, #320]!	; 0x140

    if( iv_len == 12 )
   d9596:	d10a      	bne.n	d95ae <mbedtls_gcm_starts+0x6c>
    {
        memcpy( ctx->y, iv, iv_len );
   d9598:	683b      	ldr	r3, [r7, #0]
   d959a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   d959e:	687b      	ldr	r3, [r7, #4]
   d95a0:	6073      	str	r3, [r6, #4]
   d95a2:	68bb      	ldr	r3, [r7, #8]
   d95a4:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
   d95a6:	2301      	movs	r3, #1
   d95a8:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
   d95ac:	e03a      	b.n	d9624 <mbedtls_gcm_starts+0xe2>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
   d95ae:	2210      	movs	r2, #16
   d95b0:	4649      	mov	r1, r9
   d95b2:	a806      	add	r0, sp, #24
   d95b4:	f00d faed 	bl	e6b92 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   d95b8:	00eb      	lsls	r3, r5, #3
   d95ba:	0e1a      	lsrs	r2, r3, #24
   d95bc:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   d95c0:	0c1a      	lsrs	r2, r3, #16
   d95c2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   d95c6:	0a1a      	lsrs	r2, r3, #8
   d95c8:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
   d95cc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
   d95d0:	2d10      	cmp	r5, #16
   d95d2:	462b      	mov	r3, r5
   d95d4:	f204 1957 	addw	r9, r4, #343	; 0x157
   d95d8:	bf28      	it	cs
   d95da:	2310      	movcs	r3, #16
   d95dc:	463a      	mov	r2, r7
   d95de:	4649      	mov	r1, r9
   d95e0:	441f      	add	r7, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
   d95e2:	f812 eb01 	ldrb.w	lr, [r2], #1
   d95e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
   d95ea:	42ba      	cmp	r2, r7
                ctx->y[i] ^= p[i];
   d95ec:	ea8e 0000 	eor.w	r0, lr, r0
   d95f0:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
   d95f2:	d1f6      	bne.n	d95e2 <mbedtls_gcm_starts+0xa0>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
   d95f4:	4632      	mov	r2, r6
   d95f6:	4631      	mov	r1, r6
   d95f8:	4620      	mov	r0, r4
   d95fa:	9303      	str	r3, [sp, #12]
   d95fc:	f7ff fe34 	bl	d9268 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
   d9600:	9b03      	ldr	r3, [sp, #12]
   d9602:	1aed      	subs	r5, r5, r3
   d9604:	d1e4      	bne.n	d95d0 <mbedtls_gcm_starts+0x8e>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
   d9606:	ab06      	add	r3, sp, #24
   d9608:	f819 2f01 	ldrb.w	r2, [r9, #1]!
   d960c:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   d960e:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
   d9610:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   d9612:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
   d9614:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   d9618:	d1f5      	bne.n	d9606 <mbedtls_gcm_starts+0xc4>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
   d961a:	4632      	mov	r2, r6
   d961c:	4631      	mov	r1, r6
   d961e:	4620      	mov	r0, r4
   d9620:	f7ff fe22 	bl	d9268 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
   d9624:	ab05      	add	r3, sp, #20
   d9626:	9300      	str	r3, [sp, #0]
   d9628:	2210      	movs	r2, #16
   d962a:	f504 73a4 	add.w	r3, r4, #328	; 0x148
   d962e:	4631      	mov	r1, r6
   d9630:	4620      	mov	r0, r4
   d9632:	f7ff fd07 	bl	d9044 <mbedtls_cipher_update>
   d9636:	4605      	mov	r5, r0
   d9638:	bb18      	cbnz	r0, d9682 <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
   d963a:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
   d963e:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
   d9642:	f1b8 0f00 	cmp.w	r8, #0
   d9646:	d01c      	beq.n	d9682 <mbedtls_gcm_starts+0x140>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
   d9648:	4646      	mov	r6, r8
   d964a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d964c:	2e10      	cmp	r6, #16
   d964e:	bf28      	it	cs
   d9650:	2610      	movcs	r6, #16
   d9652:	4619      	mov	r1, r3
   d9654:	4431      	add	r1, r6
   d9656:	f204 1267 	addw	r2, r4, #359	; 0x167
   d965a:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
   d965c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9660:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   d9664:	4041      	eors	r1, r0
   d9666:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
   d9668:	9914      	ldr	r1, [sp, #80]	; 0x50
   d966a:	4299      	cmp	r1, r3
   d966c:	d1f6      	bne.n	d965c <mbedtls_gcm_starts+0x11a>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
   d966e:	4652      	mov	r2, sl
   d9670:	4651      	mov	r1, sl
   d9672:	4620      	mov	r0, r4
   d9674:	f7ff fdf8 	bl	d9268 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
   d9678:	ebc6 0808 	rsb	r8, r6, r8
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
   d967c:	e7e1      	b.n	d9642 <mbedtls_gcm_starts+0x100>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   d967e:	f06f 0513 	mvn.w	r5, #19
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
   d9682:	4628      	mov	r0, r5
   d9684:	b00b      	add	sp, #44	; 0x2c
   d9686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d968a <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   d968a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d968e:	461f      	mov	r7, r3
   d9690:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   d9692:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
   d9694:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   d9696:	4604      	mov	r4, r0
   d9698:	460e      	mov	r6, r1
   d969a:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   d969c:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
   d969e:	d902      	bls.n	d96a6 <mbedtls_gcm_update+0x1c>
   d96a0:	1abb      	subs	r3, r7, r2
   d96a2:	428b      	cmp	r3, r1
   d96a4:	d35d      	bcc.n	d9762 <mbedtls_gcm_update+0xd8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
   d96a6:	4625      	mov	r5, r4
   d96a8:	e9f5 014e 	ldrd	r0, r1, [r5, #312]!	; 0x138
   d96ac:	1982      	adds	r2, r0, r6
   d96ae:	f141 0300 	adc.w	r3, r1, #0
   d96b2:	428b      	cmp	r3, r1
   d96b4:	bf08      	it	eq
   d96b6:	4282      	cmpeq	r2, r0
   d96b8:	d353      	bcc.n	d9762 <mbedtls_gcm_update+0xd8>
   d96ba:	210f      	movs	r1, #15
   d96bc:	f06f 001f 	mvn.w	r0, #31
   d96c0:	4299      	cmp	r1, r3
   d96c2:	bf08      	it	eq
   d96c4:	4290      	cmpeq	r0, r2
   d96c6:	d34c      	bcc.n	d9762 <mbedtls_gcm_update+0xd8>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
   d96c8:	e9c5 2300 	strd	r2, r3, [r5]
   d96cc:	f504 73b2 	add.w	r3, r4, #356	; 0x164
   d96d0:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   d96d2:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   d96d6:	f10d 0a18 	add.w	sl, sp, #24
   d96da:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
   d96dc:	2e00      	cmp	r6, #0
   d96de:	d043      	beq.n	d9768 <mbedtls_gcm_update+0xde>
   d96e0:	f504 75b4 	add.w	r5, r4, #360	; 0x168
    {
        use_len = ( length < 16 ) ? length : 16;
   d96e4:	2e10      	cmp	r6, #16
   d96e6:	46b1      	mov	r9, r6
   d96e8:	462a      	mov	r2, r5
   d96ea:	bf28      	it	cs
   d96ec:	f04f 0910 	movcs.w	r9, #16
   d96f0:	46ab      	mov	fp, r5

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
   d96f2:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   d96f6:	3301      	adds	r3, #1
   d96f8:	b2db      	uxtb	r3, r3
   d96fa:	7013      	strb	r3, [r2, #0]
   d96fc:	b913      	cbnz	r3, d9704 <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
   d96fe:	9b02      	ldr	r3, [sp, #8]
   d9700:	429a      	cmp	r2, r3
   d9702:	d1f6      	bne.n	d96f2 <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   d9704:	ab05      	add	r3, sp, #20
   d9706:	9300      	str	r3, [sp, #0]
   d9708:	2210      	movs	r2, #16
   d970a:	4653      	mov	r3, sl
   d970c:	9903      	ldr	r1, [sp, #12]
   d970e:	4620      	mov	r0, r4
   d9710:	f7ff fc98 	bl	d9044 <mbedtls_cipher_update>
   d9714:	bb48      	cbnz	r0, d976a <mbedtls_gcm_update+0xe0>
   d9716:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
   d9718:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   d971c:	b91b      	cbnz	r3, d9726 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
   d971e:	7829      	ldrb	r1, [r5, #0]
   d9720:	7813      	ldrb	r3, [r2, #0]
   d9722:	404b      	eors	r3, r1
   d9724:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
   d9726:	f812 1b01 	ldrb.w	r1, [r2], #1
   d972a:	f81a 3000 	ldrb.w	r3, [sl, r0]
   d972e:	404b      	eors	r3, r1
   d9730:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
   d9732:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
   d9736:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
   d9738:	bf08      	it	eq
   d973a:	7829      	ldrbeq	r1, [r5, #0]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
   d973c:	f100 0001 	add.w	r0, r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
   d9740:	bf04      	itt	eq
   d9742:	404b      	eoreq	r3, r1
   d9744:	702b      	strbeq	r3, [r5, #0]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
   d9746:	4581      	cmp	r9, r0
   d9748:	f105 0501 	add.w	r5, r5, #1
   d974c:	d1e4      	bne.n	d9718 <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
   d974e:	465a      	mov	r2, fp
   d9750:	4659      	mov	r1, fp
   d9752:	4620      	mov	r0, r4
   d9754:	f7ff fd88 	bl	d9268 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
   d9758:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
   d975c:	44c8      	add	r8, r9
        out_p += use_len;
   d975e:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
   d9760:	e7bc      	b.n	d96dc <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   d9762:	f06f 0013 	mvn.w	r0, #19
   d9766:	e000      	b.n	d976a <mbedtls_gcm_update+0xe0>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
   d9768:	4630      	mov	r0, r6
}
   d976a:	b00b      	add	sp, #44	; 0x2c
   d976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9770 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   d9770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d9774:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
   d9776:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   d977a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   d977e:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
   d9780:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
   d9784:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
   d9788:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
   d978a:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   d978e:	00cf      	lsls	r7, r1, #3
   d9790:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
   d9794:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
   d9796:	1f13      	subs	r3, r2, #4
   d9798:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   d979a:	4681      	mov	r9, r0
   d979c:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
   d979e:	d85b      	bhi.n	d9858 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
   d97a0:	f500 71a4 	add.w	r1, r0, #328	; 0x148
   d97a4:	4640      	mov	r0, r8
   d97a6:	f00d f9ce 	bl	e6b46 <memcpy>

    if( orig_len || orig_add_len )
   d97aa:	ea54 0305 	orrs.w	r3, r4, r5
   d97ae:	d104      	bne.n	d97ba <mbedtls_gcm_finish+0x4a>
   d97b0:	ea56 0307 	orrs.w	r3, r6, r7
   d97b4:	d101      	bne.n	d97ba <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
   d97b6:	2000      	movs	r0, #0
   d97b8:	e050      	b.n	d985c <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
   d97ba:	2210      	movs	r2, #16
   d97bc:	2100      	movs	r1, #0
   d97be:	4668      	mov	r0, sp
   d97c0:	f00d f9e7 	bl	e6b92 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   d97c4:	0e3b      	lsrs	r3, r7, #24
   d97c6:	f88d 3000 	strb.w	r3, [sp]
   d97ca:	0c3b      	lsrs	r3, r7, #16
   d97cc:	f88d 3001 	strb.w	r3, [sp, #1]
   d97d0:	0a3b      	lsrs	r3, r7, #8
   d97d2:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   d97d6:	0e33      	lsrs	r3, r6, #24
   d97d8:	f88d 3004 	strb.w	r3, [sp, #4]
   d97dc:	0c33      	lsrs	r3, r6, #16
   d97de:	f88d 3005 	strb.w	r3, [sp, #5]
   d97e2:	0a33      	lsrs	r3, r6, #8
   d97e4:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   d97e8:	0e2b      	lsrs	r3, r5, #24
   d97ea:	f88d 3008 	strb.w	r3, [sp, #8]
   d97ee:	0c2b      	lsrs	r3, r5, #16
   d97f0:	f88d 3009 	strb.w	r3, [sp, #9]
   d97f4:	0a2b      	lsrs	r3, r5, #8
   d97f6:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   d97fa:	0e23      	lsrs	r3, r4, #24
   d97fc:	f88d 300c 	strb.w	r3, [sp, #12]
   d9800:	0c23      	lsrs	r3, r4, #16
   d9802:	f88d 300d 	strb.w	r3, [sp, #13]
   d9806:	f88d 400f 	strb.w	r4, [sp, #15]
   d980a:	0a23      	lsrs	r3, r4, #8
   d980c:	f209 1467 	addw	r4, r9, #359	; 0x167
   d9810:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   d9814:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   d9818:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   d981c:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   d9820:	4622      	mov	r2, r4

        for( i = 0; i < 16; i++ )
   d9822:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
   d9824:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   d9828:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   d982c:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
   d982e:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   d9830:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
   d9832:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   d9834:	d1f6      	bne.n	d9824 <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
   d9836:	f509 72b4 	add.w	r2, r9, #360	; 0x168
   d983a:	4611      	mov	r1, r2
   d983c:	4648      	mov	r0, r9
   d983e:	f7ff fd13 	bl	d9268 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
   d9842:	44c2      	add	sl, r8
   d9844:	4641      	mov	r1, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
   d9846:	780a      	ldrb	r2, [r1, #0]
   d9848:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   d984c:	4053      	eors	r3, r2
   d984e:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
   d9852:	4551      	cmp	r1, sl
   d9854:	d1f7      	bne.n	d9846 <mbedtls_gcm_finish+0xd6>
   d9856:	e7ae      	b.n	d97b6 <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   d9858:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
   d985c:	b004      	add	sp, #16
   d985e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9862 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   d9862:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9866:	4617      	mov	r7, r2
   d9868:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   d986a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d986c:	9301      	str	r3, [sp, #4]
   d986e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9870:	9300      	str	r3, [sp, #0]
   d9872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   d9874:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   d9878:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   d987c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   d987e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   d9880:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   d9882:	f7ff fe5e 	bl	d9542 <mbedtls_gcm_starts>
   d9886:	b970      	cbnz	r0, d98a6 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
   d9888:	464b      	mov	r3, r9
   d988a:	4642      	mov	r2, r8
   d988c:	4639      	mov	r1, r7
   d988e:	4620      	mov	r0, r4
   d9890:	f7ff fefb 	bl	d968a <mbedtls_gcm_update>
   d9894:	b938      	cbnz	r0, d98a6 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   d9896:	4632      	mov	r2, r6
   d9898:	4629      	mov	r1, r5
   d989a:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
   d989c:	b003      	add	sp, #12
   d989e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   d98a2:	f7ff bf65 	b.w	d9770 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
   d98a6:	b003      	add	sp, #12
   d98a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d98ac <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   d98ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d98ae:	b08d      	sub	sp, #52	; 0x34
   d98b0:	460e      	mov	r6, r1
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   d98b2:	9916      	ldr	r1, [sp, #88]	; 0x58
   d98b4:	9103      	str	r1, [sp, #12]
   d98b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   d98b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
   d98ba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   d98bc:	9102      	str	r1, [sp, #8]
   d98be:	af08      	add	r7, sp, #32
   d98c0:	9912      	ldr	r1, [sp, #72]	; 0x48
   d98c2:	9101      	str	r1, [sp, #4]
   d98c4:	9300      	str	r3, [sp, #0]
   d98c6:	9706      	str	r7, [sp, #24]
   d98c8:	4613      	mov	r3, r2
   d98ca:	9505      	str	r5, [sp, #20]
   d98cc:	9404      	str	r4, [sp, #16]
   d98ce:	4632      	mov	r2, r6
   d98d0:	2100      	movs	r1, #0
   d98d2:	f7ff ffc6 	bl	d9862 <mbedtls_gcm_crypt_and_tag>
   d98d6:	b9b0      	cbnz	r0, d9906 <mbedtls_gcm_auth_decrypt+0x5a>
   d98d8:	4602      	mov	r2, r0
   d98da:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   d98dc:	42ab      	cmp	r3, r5
   d98de:	d008      	beq.n	d98f2 <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];
   d98e0:	9914      	ldr	r1, [sp, #80]	; 0x50
   d98e2:	f811 e003 	ldrb.w	lr, [r1, r3]
   d98e6:	5cf9      	ldrb	r1, [r7, r3]
   d98e8:	ea8e 0101 	eor.w	r1, lr, r1
   d98ec:	430a      	orrs	r2, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   d98ee:	3301      	adds	r3, #1
   d98f0:	e7f4      	b.n	d98dc <mbedtls_gcm_auth_decrypt+0x30>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
   d98f2:	b142      	cbz	r2, d9906 <mbedtls_gcm_auth_decrypt+0x5a>
   d98f4:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d98f6:	2300      	movs	r3, #0
   d98f8:	42a6      	cmp	r6, r4
   d98fa:	d002      	beq.n	d9902 <mbedtls_gcm_auth_decrypt+0x56>
   d98fc:	7023      	strb	r3, [r4, #0]
   d98fe:	3401      	adds	r4, #1
   d9900:	e7fa      	b.n	d98f8 <mbedtls_gcm_auth_decrypt+0x4c>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
   d9902:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
   d9906:	b00d      	add	sp, #52	; 0x34
   d9908:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d990a <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
   d990a:	b510      	push	{r4, lr}
   d990c:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
   d990e:	f7ff fb1f 	bl	d8f50 <mbedtls_cipher_free>
   d9912:	f504 72c0 	add.w	r2, r4, #384	; 0x180
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d9916:	2300      	movs	r3, #0
   d9918:	4294      	cmp	r4, r2
   d991a:	d002      	beq.n	d9922 <mbedtls_gcm_free+0x18>
   d991c:	7023      	strb	r3, [r4, #0]
   d991e:	3401      	adds	r4, #1
   d9920:	e7fa      	b.n	d9918 <mbedtls_gcm_free+0xe>
   d9922:	bd10      	pop	{r4, pc}

000d9924 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
   d9924:	3804      	subs	r0, #4
   d9926:	b2c0      	uxtb	r0, r0
   d9928:	2804      	cmp	r0, #4
   d992a:	bf9a      	itte	ls
   d992c:	4b02      	ldrls	r3, [pc, #8]	; (d9938 <mbedtls_md_info_from_type+0x14>)
   d992e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   d9932:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
   d9934:	4770      	bx	lr
   d9936:	bf00      	nop
   d9938:	000e7848 	.word	0x000e7848

000d993c <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
   d993c:	2300      	movs	r3, #0
   d993e:	6003      	str	r3, [r0, #0]
   d9940:	6043      	str	r3, [r0, #4]
   d9942:	6083      	str	r3, [r0, #8]
   d9944:	4770      	bx	lr

000d9946 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
   d9946:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
   d9948:	4604      	mov	r4, r0
   d994a:	b1e0      	cbz	r0, d9986 <mbedtls_md_free+0x40>
   d994c:	6803      	ldr	r3, [r0, #0]
   d994e:	b1d3      	cbz	r3, d9986 <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
   d9950:	6840      	ldr	r0, [r0, #4]
   d9952:	b108      	cbz	r0, d9958 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
   d9954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9956:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
   d9958:	68a3      	ldr	r3, [r4, #8]
   d995a:	b163      	cbz	r3, d9976 <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
   d995c:	6822      	ldr	r2, [r4, #0]
   d995e:	68d2      	ldr	r2, [r2, #12]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d9960:	2100      	movs	r1, #0
   d9962:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   d9966:	429a      	cmp	r2, r3
   d9968:	d002      	beq.n	d9970 <mbedtls_md_free+0x2a>
   d996a:	7019      	strb	r1, [r3, #0]
   d996c:	3301      	adds	r3, #1
   d996e:	e7fa      	b.n	d9966 <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
   d9970:	68a0      	ldr	r0, [r4, #8]
   d9972:	f00a fb21 	bl	e3fb8 <free>
   d9976:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d997a:	2300      	movs	r3, #0
   d997c:	4294      	cmp	r4, r2
   d997e:	d002      	beq.n	d9986 <mbedtls_md_free+0x40>
   d9980:	7023      	strb	r3, [r4, #0]
   d9982:	3401      	adds	r4, #1
   d9984:	e7fa      	b.n	d997c <mbedtls_md_free+0x36>
   d9986:	bd10      	pop	{r4, pc}

000d9988 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
   d9988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d998a:	4605      	mov	r5, r0
   d998c:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
   d998e:	460c      	mov	r4, r1
   d9990:	b199      	cbz	r1, d99ba <mbedtls_md_setup+0x32>
   d9992:	b190      	cbz	r0, d99ba <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
   d9994:	6a0b      	ldr	r3, [r1, #32]
   d9996:	4798      	blx	r3
   d9998:	4606      	mov	r6, r0
   d999a:	6068      	str	r0, [r5, #4]
   d999c:	b178      	cbz	r0, d99be <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
   d999e:	b14f      	cbz	r7, d99b4 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
   d99a0:	68e1      	ldr	r1, [r4, #12]
   d99a2:	2002      	movs	r0, #2
   d99a4:	f00d f8aa 	bl	e6afc <calloc>
   d99a8:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
   d99aa:	b918      	cbnz	r0, d99b4 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
   d99ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d99ae:	4630      	mov	r0, r6
   d99b0:	4798      	blx	r3
   d99b2:	e004      	b.n	d99be <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
   d99b4:	602c      	str	r4, [r5, #0]

    return( 0 );
   d99b6:	2000      	movs	r0, #0
   d99b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   d99ba:	4802      	ldr	r0, [pc, #8]	; (d99c4 <mbedtls_md_setup+0x3c>)
   d99bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   d99be:	4802      	ldr	r0, [pc, #8]	; (d99c8 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
   d99c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d99c2:	bf00      	nop
   d99c4:	ffffaf00 	.word	0xffffaf00
   d99c8:	ffffae80 	.word	0xffffae80

000d99cc <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
   d99cc:	b120      	cbz	r0, d99d8 <mbedtls_md_starts+0xc>
   d99ce:	6803      	ldr	r3, [r0, #0]
   d99d0:	b113      	cbz	r3, d99d8 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
   d99d2:	691b      	ldr	r3, [r3, #16]
   d99d4:	6840      	ldr	r0, [r0, #4]
   d99d6:	4718      	bx	r3
}
   d99d8:	4800      	ldr	r0, [pc, #0]	; (d99dc <mbedtls_md_starts+0x10>)
   d99da:	4770      	bx	lr
   d99dc:	ffffaf00 	.word	0xffffaf00

000d99e0 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
   d99e0:	b120      	cbz	r0, d99ec <mbedtls_md_update+0xc>
   d99e2:	6803      	ldr	r3, [r0, #0]
   d99e4:	b113      	cbz	r3, d99ec <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   d99e6:	695b      	ldr	r3, [r3, #20]
   d99e8:	6840      	ldr	r0, [r0, #4]
   d99ea:	4718      	bx	r3
}
   d99ec:	4800      	ldr	r0, [pc, #0]	; (d99f0 <mbedtls_md_update+0x10>)
   d99ee:	4770      	bx	lr
   d99f0:	ffffaf00 	.word	0xffffaf00

000d99f4 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
   d99f4:	b120      	cbz	r0, d9a00 <mbedtls_md_finish+0xc>
   d99f6:	6803      	ldr	r3, [r0, #0]
   d99f8:	b113      	cbz	r3, d9a00 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   d99fa:	699b      	ldr	r3, [r3, #24]
   d99fc:	6840      	ldr	r0, [r0, #4]
   d99fe:	4718      	bx	r3
}
   d9a00:	4800      	ldr	r0, [pc, #0]	; (d9a04 <mbedtls_md_finish+0x10>)
   d9a02:	4770      	bx	lr
   d9a04:	ffffaf00 	.word	0xffffaf00

000d9a08 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
   d9a08:	b430      	push	{r4, r5}
   d9a0a:	460d      	mov	r5, r1
   d9a0c:	4611      	mov	r1, r2
    if( md_info == NULL )
   d9a0e:	b128      	cbz	r0, d9a1c <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   d9a10:	69c4      	ldr	r4, [r0, #28]
   d9a12:	461a      	mov	r2, r3
   d9a14:	4628      	mov	r0, r5
   d9a16:	4623      	mov	r3, r4
}
   d9a18:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   d9a1a:	4718      	bx	r3
}
   d9a1c:	4801      	ldr	r0, [pc, #4]	; (d9a24 <mbedtls_md+0x1c>)
   d9a1e:	bc30      	pop	{r4, r5}
   d9a20:	4770      	bx	lr
   d9a22:	bf00      	nop
   d9a24:	ffffaf00 	.word	0xffffaf00

000d9a28 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
   d9a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9a2c:	460d      	mov	r5, r1
   d9a2e:	b090      	sub	sp, #64	; 0x40
   d9a30:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   d9a32:	4604      	mov	r4, r0
   d9a34:	2800      	cmp	r0, #0
   d9a36:	d050      	beq.n	d9ada <mbedtls_md_hmac_starts+0xb2>
   d9a38:	6803      	ldr	r3, [r0, #0]
   d9a3a:	2b00      	cmp	r3, #0
   d9a3c:	d04d      	beq.n	d9ada <mbedtls_md_hmac_starts+0xb2>
   d9a3e:	6882      	ldr	r2, [r0, #8]
   d9a40:	2a00      	cmp	r2, #0
   d9a42:	d04a      	beq.n	d9ada <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
   d9a44:	68da      	ldr	r2, [r3, #12]
   d9a46:	42ba      	cmp	r2, r7
   d9a48:	d215      	bcs.n	d9a76 <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   d9a4a:	691b      	ldr	r3, [r3, #16]
   d9a4c:	6840      	ldr	r0, [r0, #4]
   d9a4e:	4798      	blx	r3
   d9a50:	2800      	cmp	r0, #0
   d9a52:	d139      	bne.n	d9ac8 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
   d9a54:	6823      	ldr	r3, [r4, #0]
   d9a56:	6860      	ldr	r0, [r4, #4]
   d9a58:	695b      	ldr	r3, [r3, #20]
   d9a5a:	463a      	mov	r2, r7
   d9a5c:	4629      	mov	r1, r5
   d9a5e:	4798      	blx	r3
   d9a60:	2800      	cmp	r0, #0
   d9a62:	d131      	bne.n	d9ac8 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
   d9a64:	6823      	ldr	r3, [r4, #0]
   d9a66:	6860      	ldr	r0, [r4, #4]
   d9a68:	699b      	ldr	r3, [r3, #24]
   d9a6a:	4669      	mov	r1, sp
   d9a6c:	4798      	blx	r3
   d9a6e:	bb58      	cbnz	r0, d9ac8 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
   d9a70:	6823      	ldr	r3, [r4, #0]
   d9a72:	689f      	ldr	r7, [r3, #8]
        key = sum;
   d9a74:	466d      	mov	r5, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   d9a76:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
   d9a78:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   d9a7a:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
   d9a7c:	2136      	movs	r1, #54	; 0x36
   d9a7e:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   d9a80:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
   d9a84:	f00d f885 	bl	e6b92 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
   d9a88:	6823      	ldr	r3, [r4, #0]
   d9a8a:	215c      	movs	r1, #92	; 0x5c
   d9a8c:	68da      	ldr	r2, [r3, #12]
   d9a8e:	4640      	mov	r0, r8
   d9a90:	f00d f87f 	bl	e6b92 <memset>

    for( i = 0; i < keylen; i++ )
   d9a94:	2300      	movs	r3, #0
   d9a96:	429f      	cmp	r7, r3
   d9a98:	d00b      	beq.n	d9ab2 <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
   d9a9a:	5cf1      	ldrb	r1, [r6, r3]
   d9a9c:	5cea      	ldrb	r2, [r5, r3]
   d9a9e:	404a      	eors	r2, r1
   d9aa0:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
   d9aa2:	f818 1003 	ldrb.w	r1, [r8, r3]
   d9aa6:	5cea      	ldrb	r2, [r5, r3]
   d9aa8:	404a      	eors	r2, r1
   d9aaa:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
   d9aae:	3301      	adds	r3, #1
   d9ab0:	e7f1      	b.n	d9a96 <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   d9ab2:	6823      	ldr	r3, [r4, #0]
   d9ab4:	6860      	ldr	r0, [r4, #4]
   d9ab6:	691b      	ldr	r3, [r3, #16]
   d9ab8:	4798      	blx	r3
   d9aba:	b928      	cbnz	r0, d9ac8 <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
   d9abc:	6823      	ldr	r3, [r4, #0]
   d9abe:	6860      	ldr	r0, [r4, #4]
   d9ac0:	695d      	ldr	r5, [r3, #20]
   d9ac2:	68da      	ldr	r2, [r3, #12]
   d9ac4:	4631      	mov	r1, r6
   d9ac6:	47a8      	blx	r5
   d9ac8:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d9aca:	4619      	mov	r1, r3
   d9acc:	eb0d 0203 	add.w	r2, sp, r3
   d9ad0:	3301      	adds	r3, #1
   d9ad2:	2b41      	cmp	r3, #65	; 0x41
   d9ad4:	d002      	beq.n	d9adc <mbedtls_md_hmac_starts+0xb4>
   d9ad6:	7011      	strb	r1, [r2, #0]
   d9ad8:	e7f8      	b.n	d9acc <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   d9ada:	4802      	ldr	r0, [pc, #8]	; (d9ae4 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
   d9adc:	b010      	add	sp, #64	; 0x40
   d9ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9ae2:	bf00      	nop
   d9ae4:	ffffaf00 	.word	0xffffaf00

000d9ae8 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
   d9ae8:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   d9aea:	b140      	cbz	r0, d9afe <mbedtls_md_hmac_update+0x16>
   d9aec:	6803      	ldr	r3, [r0, #0]
   d9aee:	b133      	cbz	r3, d9afe <mbedtls_md_hmac_update+0x16>
   d9af0:	6884      	ldr	r4, [r0, #8]
   d9af2:	b124      	cbz	r4, d9afe <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   d9af4:	695b      	ldr	r3, [r3, #20]
   d9af6:	6840      	ldr	r0, [r0, #4]
}
   d9af8:	f85d 4b04 	ldr.w	r4, [sp], #4
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   d9afc:	4718      	bx	r3
}
   d9afe:	4802      	ldr	r0, [pc, #8]	; (d9b08 <mbedtls_md_hmac_update+0x20>)
   d9b00:	f85d 4b04 	ldr.w	r4, [sp], #4
   d9b04:	4770      	bx	lr
   d9b06:	bf00      	nop
   d9b08:	ffffaf00 	.word	0xffffaf00

000d9b0c <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
   d9b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9b10:	460e      	mov	r6, r1
   d9b12:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   d9b14:	4604      	mov	r4, r0
   d9b16:	b320      	cbz	r0, d9b62 <mbedtls_md_hmac_finish+0x56>
   d9b18:	6803      	ldr	r3, [r0, #0]
   d9b1a:	b313      	cbz	r3, d9b62 <mbedtls_md_hmac_finish+0x56>
   d9b1c:	6885      	ldr	r5, [r0, #8]
   d9b1e:	b305      	cbz	r5, d9b62 <mbedtls_md_hmac_finish+0x56>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   d9b20:	f8d3 800c 	ldr.w	r8, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
   d9b24:	6840      	ldr	r0, [r0, #4]
   d9b26:	699b      	ldr	r3, [r3, #24]
   d9b28:	4669      	mov	r1, sp
   d9b2a:	4798      	blx	r3
   d9b2c:	b9d0      	cbnz	r0, d9b64 <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   d9b2e:	6823      	ldr	r3, [r4, #0]
   d9b30:	6860      	ldr	r0, [r4, #4]
   d9b32:	691b      	ldr	r3, [r3, #16]
   d9b34:	4798      	blx	r3
   d9b36:	b9a8      	cbnz	r0, d9b64 <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
   d9b38:	6823      	ldr	r3, [r4, #0]
   d9b3a:	6860      	ldr	r0, [r4, #4]
   d9b3c:	695f      	ldr	r7, [r3, #20]
   d9b3e:	68da      	ldr	r2, [r3, #12]
   d9b40:	eb05 0108 	add.w	r1, r5, r8
   d9b44:	47b8      	blx	r7
   d9b46:	b968      	cbnz	r0, d9b64 <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
   d9b48:	6823      	ldr	r3, [r4, #0]
   d9b4a:	6860      	ldr	r0, [r4, #4]
   d9b4c:	695d      	ldr	r5, [r3, #20]
   d9b4e:	689a      	ldr	r2, [r3, #8]
   d9b50:	4669      	mov	r1, sp
   d9b52:	47a8      	blx	r5
   d9b54:	b930      	cbnz	r0, d9b64 <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   d9b56:	6823      	ldr	r3, [r4, #0]
   d9b58:	6860      	ldr	r0, [r4, #4]
   d9b5a:	699b      	ldr	r3, [r3, #24]
   d9b5c:	4631      	mov	r1, r6
   d9b5e:	4798      	blx	r3
   d9b60:	e000      	b.n	d9b64 <mbedtls_md_hmac_finish+0x58>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   d9b62:	4802      	ldr	r0, [pc, #8]	; (d9b6c <mbedtls_md_hmac_finish+0x60>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
   d9b64:	b010      	add	sp, #64	; 0x40
   d9b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9b6a:	bf00      	nop
   d9b6c:	ffffaf00 	.word	0xffffaf00

000d9b70 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
   d9b70:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   d9b72:	4604      	mov	r4, r0
   d9b74:	b180      	cbz	r0, d9b98 <mbedtls_md_hmac_reset+0x28>
   d9b76:	6803      	ldr	r3, [r0, #0]
   d9b78:	b173      	cbz	r3, d9b98 <mbedtls_md_hmac_reset+0x28>
   d9b7a:	6885      	ldr	r5, [r0, #8]
   d9b7c:	b165      	cbz	r5, d9b98 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   d9b7e:	691b      	ldr	r3, [r3, #16]
   d9b80:	6840      	ldr	r0, [r0, #4]
   d9b82:	4798      	blx	r3
   d9b84:	b948      	cbnz	r0, d9b9a <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
   d9b86:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
   d9b88:	6860      	ldr	r0, [r4, #4]
   d9b8a:	695e      	ldr	r6, [r3, #20]
   d9b8c:	68da      	ldr	r2, [r3, #12]
   d9b8e:	4629      	mov	r1, r5
   d9b90:	4633      	mov	r3, r6
}
   d9b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
   d9b96:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   d9b98:	4800      	ldr	r0, [pc, #0]	; (d9b9c <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
   d9b9a:	bd70      	pop	{r4, r5, r6, pc}
   d9b9c:	ffffaf00 	.word	0xffffaf00

000d9ba0 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   d9ba0:	b100      	cbz	r0, d9ba4 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
   d9ba2:	7a00      	ldrb	r0, [r0, #8]
}
   d9ba4:	4770      	bx	lr

000d9ba6 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
   d9ba6:	f003 b829 	b.w	dcbfc <mbedtls_internal_sha1_process>

000d9baa <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
   d9baa:	f003 b808 	b.w	dcbbe <mbedtls_sha1_clone>

000d9bae <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
   d9bae:	b510      	push	{r4, lr}
   d9bb0:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
   d9bb2:	f002 fffa 	bl	dcbaa <mbedtls_sha1_free>
    mbedtls_free( ctx );
   d9bb6:	4620      	mov	r0, r4
}
   d9bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
   d9bbc:	f00a b9fc 	b.w	e3fb8 <free>

000d9bc0 <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
   d9bc0:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
   d9bc2:	215c      	movs	r1, #92	; 0x5c
   d9bc4:	2001      	movs	r0, #1
   d9bc6:	f00c ff99 	bl	e6afc <calloc>

    if( ctx != NULL )
   d9bca:	4604      	mov	r4, r0
   d9bcc:	b108      	cbz	r0, d9bd2 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
   d9bce:	f002 ffe8 	bl	dcba2 <mbedtls_sha1_init>

    return( ctx );
}
   d9bd2:	4620      	mov	r0, r4
   d9bd4:	bd10      	pop	{r4, pc}

000d9bd6 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
   d9bd6:	f003 bffb 	b.w	ddbd0 <mbedtls_sha1_finish_ret>

000d9bda <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
   d9bda:	f003 bfbf 	b.w	ddb5c <mbedtls_sha1_update_ret>

000d9bde <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
   d9bde:	f002 bff3 	b.w	dcbc8 <mbedtls_sha1_starts_ret>

000d9be2 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
   d9be2:	f004 b8eb 	b.w	dddbc <mbedtls_internal_sha256_process>

000d9be6 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
   d9be6:	f004 b894 	b.w	ddd12 <mbedtls_sha256_clone>

000d9bea <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
   d9bea:	b510      	push	{r4, lr}
   d9bec:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
   d9bee:	f004 f886 	bl	ddcfe <mbedtls_sha256_free>
    mbedtls_free( ctx );
   d9bf2:	4620      	mov	r0, r4
}
   d9bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
   d9bf8:	f00a b9de 	b.w	e3fb8 <free>

000d9bfc <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
   d9bfc:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
   d9bfe:	216c      	movs	r1, #108	; 0x6c
   d9c00:	2001      	movs	r0, #1
   d9c02:	f00c ff7b 	bl	e6afc <calloc>

    if( ctx != NULL )
   d9c06:	4604      	mov	r4, r0
   d9c08:	b108      	cbz	r0, d9c0e <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
   d9c0a:	f004 f874 	bl	ddcf6 <mbedtls_sha256_init>

    return( ctx );
}
   d9c0e:	4620      	mov	r0, r4
   d9c10:	bd10      	pop	{r4, pc}

000d9c12 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
   d9c12:	2301      	movs	r3, #1
   d9c14:	f004 bd06 	b.w	de624 <mbedtls_sha256_ret>

000d9c18 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
   d9c18:	2300      	movs	r3, #0
   d9c1a:	f004 bd03 	b.w	de624 <mbedtls_sha256_ret>

000d9c1e <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
   d9c1e:	f004 bc6d 	b.w	de4fc <mbedtls_sha256_finish_ret>

000d9c22 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
   d9c22:	f004 bc31 	b.w	de488 <mbedtls_sha256_update_ret>

000d9c26 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
   d9c26:	2101      	movs	r1, #1
   d9c28:	f004 b878 	b.w	ddd1c <mbedtls_sha256_starts_ret>

000d9c2c <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
   d9c2c:	2100      	movs	r1, #0
   d9c2e:	f004 b875 	b.w	ddd1c <mbedtls_sha256_starts_ret>

000d9c32 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
   d9c32:	f004 bdc9 	b.w	de7c8 <mbedtls_internal_sha512_process>

000d9c36 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
   d9c36:	f004 bd24 	b.w	de682 <mbedtls_sha512_clone>

000d9c3a <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
   d9c3a:	b510      	push	{r4, lr}
   d9c3c:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
   d9c3e:	f004 fd16 	bl	de66e <mbedtls_sha512_free>
    mbedtls_free( ctx );
   d9c42:	4620      	mov	r0, r4
}
   d9c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
   d9c48:	f00a b9b6 	b.w	e3fb8 <free>

000d9c4c <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
   d9c4c:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
   d9c4e:	21d8      	movs	r1, #216	; 0xd8
   d9c50:	2001      	movs	r0, #1
   d9c52:	f00c ff53 	bl	e6afc <calloc>

    if( ctx != NULL )
   d9c56:	4604      	mov	r4, r0
   d9c58:	b108      	cbz	r0, d9c5e <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
   d9c5a:	f004 fd04 	bl	de666 <mbedtls_sha512_init>

    return( ctx );
}
   d9c5e:	4620      	mov	r0, r4
   d9c60:	bd10      	pop	{r4, pc}

000d9c62 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
   d9c62:	2301      	movs	r3, #1
   d9c64:	f005 bd74 	b.w	df750 <mbedtls_sha512_ret>

000d9c68 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
   d9c68:	2300      	movs	r3, #0
   d9c6a:	f005 bd71 	b.w	df750 <mbedtls_sha512_ret>

000d9c6e <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
   d9c6e:	f005 bc3f 	b.w	df4f0 <mbedtls_sha512_finish_ret>

000d9c72 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
   d9c72:	f005 bbf5 	b.w	df460 <mbedtls_sha512_update_ret>

000d9c76 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
   d9c76:	2101      	movs	r1, #1
   d9c78:	f004 bd0a 	b.w	de690 <mbedtls_sha512_starts_ret>

000d9c7c <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
   d9c7c:	2100      	movs	r1, #0
   d9c7e:	f004 bd07 	b.w	de690 <mbedtls_sha512_starts_ret>
	...

000d9c84 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   d9c84:	b538      	push	{r3, r4, r5, lr}
   d9c86:	4605      	mov	r5, r0
   d9c88:	b160      	cbz	r0, d9ca4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
   d9c8a:	4c08      	ldr	r4, [pc, #32]	; (d9cac <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
   d9c8c:	6820      	ldr	r0, [r4, #0]
   d9c8e:	b158      	cbz	r0, d9ca8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
   d9c90:	6862      	ldr	r2, [r4, #4]
   d9c92:	686b      	ldr	r3, [r5, #4]
   d9c94:	429a      	cmp	r2, r3
   d9c96:	d103      	bne.n	d9ca0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
   d9c98:	68a9      	ldr	r1, [r5, #8]
   d9c9a:	f00c ff45 	bl	e6b28 <memcmp>
   d9c9e:	b110      	cbz	r0, d9ca6 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
   d9ca0:	3414      	adds	r4, #20
   d9ca2:	e7f3      	b.n	d9c8c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
   d9ca4:	bd38      	pop	{r3, r4, r5, pc}
   d9ca6:	4620      	mov	r0, r4
   d9ca8:	bd38      	pop	{r3, r4, r5, pc}
   d9caa:	bf00      	nop
   d9cac:	000e845c 	.word	0x000e845c

000d9cb0 <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9cb0:	b570      	push	{r4, r5, r6, lr}
   d9cb2:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
   d9cb4:	4605      	mov	r5, r0
   d9cb6:	b160      	cbz	r0, d9cd2 <mbedtls_oid_get_attr_short_name+0x22>
   d9cb8:	4c09      	ldr	r4, [pc, #36]	; (d9ce0 <mbedtls_oid_get_attr_short_name+0x30>)
   d9cba:	6820      	ldr	r0, [r4, #0]
   d9cbc:	b148      	cbz	r0, d9cd2 <mbedtls_oid_get_attr_short_name+0x22>
   d9cbe:	6862      	ldr	r2, [r4, #4]
   d9cc0:	686b      	ldr	r3, [r5, #4]
   d9cc2:	429a      	cmp	r2, r3
   d9cc4:	d103      	bne.n	d9cce <mbedtls_oid_get_attr_short_name+0x1e>
   d9cc6:	68a9      	ldr	r1, [r5, #8]
   d9cc8:	f00c ff2e 	bl	e6b28 <memcmp>
   d9ccc:	b120      	cbz	r0, d9cd8 <mbedtls_oid_get_attr_short_name+0x28>
   d9cce:	3414      	adds	r4, #20
   d9cd0:	e7f3      	b.n	d9cba <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9cd2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9cd6:	bd70      	pop	{r4, r5, r6, pc}
   d9cd8:	6923      	ldr	r3, [r4, #16]
   d9cda:	6033      	str	r3, [r6, #0]
   d9cdc:	bd70      	pop	{r4, r5, r6, pc}
   d9cde:	bf00      	nop
   d9ce0:	000e794c 	.word	0x000e794c

000d9ce4 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9ce4:	b570      	push	{r4, r5, r6, lr}
   d9ce6:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
   d9ce8:	4605      	mov	r5, r0
   d9cea:	b160      	cbz	r0, d9d06 <mbedtls_oid_get_x509_ext_type+0x22>
   d9cec:	4c09      	ldr	r4, [pc, #36]	; (d9d14 <mbedtls_oid_get_x509_ext_type+0x30>)
   d9cee:	6820      	ldr	r0, [r4, #0]
   d9cf0:	b148      	cbz	r0, d9d06 <mbedtls_oid_get_x509_ext_type+0x22>
   d9cf2:	6862      	ldr	r2, [r4, #4]
   d9cf4:	686b      	ldr	r3, [r5, #4]
   d9cf6:	429a      	cmp	r2, r3
   d9cf8:	d103      	bne.n	d9d02 <mbedtls_oid_get_x509_ext_type+0x1e>
   d9cfa:	68a9      	ldr	r1, [r5, #8]
   d9cfc:	f00c ff14 	bl	e6b28 <memcmp>
   d9d00:	b120      	cbz	r0, d9d0c <mbedtls_oid_get_x509_ext_type+0x28>
   d9d02:	3414      	adds	r4, #20
   d9d04:	e7f3      	b.n	d9cee <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9d06:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9d0a:	bd70      	pop	{r4, r5, r6, pc}
   d9d0c:	6923      	ldr	r3, [r4, #16]
   d9d0e:	6033      	str	r3, [r6, #0]
   d9d10:	bd70      	pop	{r4, r5, r6, pc}
   d9d12:	bf00      	nop
   d9d14:	000e8574 	.word	0x000e8574

000d9d18 <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d9d18:	b570      	push	{r4, r5, r6, lr}
   d9d1a:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
   d9d1c:	4605      	mov	r5, r0
   d9d1e:	b160      	cbz	r0, d9d3a <mbedtls_oid_get_extended_key_usage+0x22>
   d9d20:	4c09      	ldr	r4, [pc, #36]	; (d9d48 <mbedtls_oid_get_extended_key_usage+0x30>)
   d9d22:	6820      	ldr	r0, [r4, #0]
   d9d24:	b148      	cbz	r0, d9d3a <mbedtls_oid_get_extended_key_usage+0x22>
   d9d26:	6862      	ldr	r2, [r4, #4]
   d9d28:	686b      	ldr	r3, [r5, #4]
   d9d2a:	429a      	cmp	r2, r3
   d9d2c:	d103      	bne.n	d9d36 <mbedtls_oid_get_extended_key_usage+0x1e>
   d9d2e:	68a9      	ldr	r1, [r5, #8]
   d9d30:	f00c fefa 	bl	e6b28 <memcmp>
   d9d34:	b120      	cbz	r0, d9d40 <mbedtls_oid_get_extended_key_usage+0x28>
   d9d36:	3410      	adds	r4, #16
   d9d38:	e7f3      	b.n	d9d22 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d9d3a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9d3e:	bd70      	pop	{r4, r5, r6, pc}
   d9d40:	68e3      	ldr	r3, [r4, #12]
   d9d42:	6033      	str	r3, [r6, #0]
   d9d44:	bd70      	pop	{r4, r5, r6, pc}
   d9d46:	bf00      	nop
   d9d48:	000e7adc 	.word	0x000e7adc

000d9d4c <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
   d9d4c:	b510      	push	{r4, lr}
   d9d4e:	460c      	mov	r4, r1
   d9d50:	f7ff ff98 	bl	d9c84 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
   d9d54:	b118      	cbz	r0, d9d5e <mbedtls_oid_get_sig_alg_desc+0x12>
   d9d56:	68c3      	ldr	r3, [r0, #12]
   d9d58:	6023      	str	r3, [r4, #0]
   d9d5a:	2000      	movs	r0, #0
   d9d5c:	bd10      	pop	{r4, pc}
   d9d5e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9d62:	bd10      	pop	{r4, pc}

000d9d64 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
   d9d64:	b538      	push	{r3, r4, r5, lr}
   d9d66:	460d      	mov	r5, r1
   d9d68:	4614      	mov	r4, r2
   d9d6a:	f7ff ff8b 	bl	d9c84 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
   d9d6e:	b128      	cbz	r0, d9d7c <mbedtls_oid_get_sig_alg+0x18>
   d9d70:	7c03      	ldrb	r3, [r0, #16]
   d9d72:	702b      	strb	r3, [r5, #0]
   d9d74:	7c43      	ldrb	r3, [r0, #17]
   d9d76:	7023      	strb	r3, [r4, #0]
   d9d78:	2000      	movs	r0, #0
   d9d7a:	bd38      	pop	{r3, r4, r5, pc}
   d9d7c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9d80:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9d84 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   d9d84:	b570      	push	{r4, r5, r6, lr}
   d9d86:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
   d9d88:	4605      	mov	r5, r0
   d9d8a:	b160      	cbz	r0, d9da6 <mbedtls_oid_get_pk_alg+0x22>
   d9d8c:	4c09      	ldr	r4, [pc, #36]	; (d9db4 <mbedtls_oid_get_pk_alg+0x30>)
   d9d8e:	6820      	ldr	r0, [r4, #0]
   d9d90:	b148      	cbz	r0, d9da6 <mbedtls_oid_get_pk_alg+0x22>
   d9d92:	6862      	ldr	r2, [r4, #4]
   d9d94:	686b      	ldr	r3, [r5, #4]
   d9d96:	429a      	cmp	r2, r3
   d9d98:	d103      	bne.n	d9da2 <mbedtls_oid_get_pk_alg+0x1e>
   d9d9a:	68a9      	ldr	r1, [r5, #8]
   d9d9c:	f00c fec4 	bl	e6b28 <memcmp>
   d9da0:	b120      	cbz	r0, d9dac <mbedtls_oid_get_pk_alg+0x28>
   d9da2:	3414      	adds	r4, #20
   d9da4:	e7f3      	b.n	d9d8e <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   d9da6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9daa:	bd70      	pop	{r4, r5, r6, pc}
   d9dac:	7c23      	ldrb	r3, [r4, #16]
   d9dae:	7033      	strb	r3, [r6, #0]
   d9db0:	bd70      	pop	{r4, r5, r6, pc}
   d9db2:	bf00      	nop
   d9db4:	000e7b4c 	.word	0x000e7b4c

000d9db8 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   d9db8:	b570      	push	{r4, r5, r6, lr}
   d9dba:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
   d9dbc:	4605      	mov	r5, r0
   d9dbe:	b160      	cbz	r0, d9dda <mbedtls_oid_get_cipher_alg+0x22>
   d9dc0:	4c09      	ldr	r4, [pc, #36]	; (d9de8 <mbedtls_oid_get_cipher_alg+0x30>)
   d9dc2:	6820      	ldr	r0, [r4, #0]
   d9dc4:	b148      	cbz	r0, d9dda <mbedtls_oid_get_cipher_alg+0x22>
   d9dc6:	6862      	ldr	r2, [r4, #4]
   d9dc8:	686b      	ldr	r3, [r5, #4]
   d9dca:	429a      	cmp	r2, r3
   d9dcc:	d103      	bne.n	d9dd6 <mbedtls_oid_get_cipher_alg+0x1e>
   d9dce:	68a9      	ldr	r1, [r5, #8]
   d9dd0:	f00c feaa 	bl	e6b28 <memcmp>
   d9dd4:	b120      	cbz	r0, d9de0 <mbedtls_oid_get_cipher_alg+0x28>
   d9dd6:	3414      	adds	r4, #20
   d9dd8:	e7f3      	b.n	d9dc2 <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   d9dda:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9dde:	bd70      	pop	{r4, r5, r6, pc}
   d9de0:	7c23      	ldrb	r3, [r4, #16]
   d9de2:	7033      	strb	r3, [r6, #0]
   d9de4:	bd70      	pop	{r4, r5, r6, pc}
   d9de6:	bf00      	nop
   d9de8:	000e7b9c 	.word	0x000e7b9c

000d9dec <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
   d9dec:	b530      	push	{r4, r5, lr}
   d9dee:	4b08      	ldr	r3, [pc, #32]	; (d9e10 <mbedtls_oid_get_oid_by_md+0x24>)
   d9df0:	681c      	ldr	r4, [r3, #0]
   d9df2:	b14c      	cbz	r4, d9e08 <mbedtls_oid_get_oid_by_md+0x1c>
   d9df4:	7c1d      	ldrb	r5, [r3, #16]
   d9df6:	4285      	cmp	r5, r0
   d9df8:	d104      	bne.n	d9e04 <mbedtls_oid_get_oid_by_md+0x18>
   d9dfa:	600c      	str	r4, [r1, #0]
   d9dfc:	685b      	ldr	r3, [r3, #4]
   d9dfe:	6013      	str	r3, [r2, #0]
   d9e00:	2000      	movs	r0, #0
   d9e02:	bd30      	pop	{r4, r5, pc}
   d9e04:	3314      	adds	r3, #20
   d9e06:	e7f3      	b.n	d9df0 <mbedtls_oid_get_oid_by_md+0x4>
   d9e08:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9e0c:	bd30      	pop	{r4, r5, pc}
   d9e0e:	bf00      	nop
   d9e10:	000e83e4 	.word	0x000e83e4

000d9e14 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   d9e14:	b570      	push	{r4, r5, r6, lr}
   d9e16:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
   d9e18:	4605      	mov	r5, r0
   d9e1a:	b160      	cbz	r0, d9e36 <mbedtls_oid_get_md_hmac+0x22>
   d9e1c:	4c09      	ldr	r4, [pc, #36]	; (d9e44 <mbedtls_oid_get_md_hmac+0x30>)
   d9e1e:	6820      	ldr	r0, [r4, #0]
   d9e20:	b148      	cbz	r0, d9e36 <mbedtls_oid_get_md_hmac+0x22>
   d9e22:	6862      	ldr	r2, [r4, #4]
   d9e24:	686b      	ldr	r3, [r5, #4]
   d9e26:	429a      	cmp	r2, r3
   d9e28:	d103      	bne.n	d9e32 <mbedtls_oid_get_md_hmac+0x1e>
   d9e2a:	68a9      	ldr	r1, [r5, #8]
   d9e2c:	f00c fe7c 	bl	e6b28 <memcmp>
   d9e30:	b120      	cbz	r0, d9e3c <mbedtls_oid_get_md_hmac+0x28>
   d9e32:	3414      	adds	r4, #20
   d9e34:	e7f3      	b.n	d9e1e <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   d9e36:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9e3a:	bd70      	pop	{r4, r5, r6, pc}
   d9e3c:	7c23      	ldrb	r3, [r4, #16]
   d9e3e:	7033      	strb	r3, [r6, #0]
   d9e40:	bd70      	pop	{r4, r5, r6, pc}
   d9e42:	bf00      	nop
   d9e44:	000e84fc 	.word	0x000e84fc

000d9e48 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   d9e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9e4a:	460f      	mov	r7, r1
   d9e4c:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
   d9e4e:	4605      	mov	r5, r0
   d9e50:	b160      	cbz	r0, d9e6c <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   d9e52:	4c0a      	ldr	r4, [pc, #40]	; (d9e7c <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
   d9e54:	6820      	ldr	r0, [r4, #0]
   d9e56:	b148      	cbz	r0, d9e6c <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   d9e58:	6862      	ldr	r2, [r4, #4]
   d9e5a:	686b      	ldr	r3, [r5, #4]
   d9e5c:	429a      	cmp	r2, r3
   d9e5e:	d103      	bne.n	d9e68 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
   d9e60:	68a9      	ldr	r1, [r5, #8]
   d9e62:	f00c fe61 	bl	e6b28 <memcmp>
   d9e66:	b120      	cbz	r0, d9e72 <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
   d9e68:	3414      	adds	r4, #20
   d9e6a:	e7f3      	b.n	d9e54 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   d9e6c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9e72:	7c23      	ldrb	r3, [r4, #16]
   d9e74:	703b      	strb	r3, [r7, #0]
   d9e76:	7c63      	ldrb	r3, [r4, #17]
   d9e78:	7033      	strb	r3, [r6, #0]
   d9e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9e7c:	000e83a8 	.word	0x000e83a8

000d9e80 <mbedtls_pem_init>:
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
   d9e80:	2300      	movs	r3, #0
   d9e82:	6003      	str	r3, [r0, #0]
   d9e84:	6043      	str	r3, [r0, #4]
   d9e86:	6083      	str	r3, [r0, #8]
   d9e88:	4770      	bx	lr
	...

000d9e8c <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
   d9e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9e90:	4689      	mov	r9, r1
   d9e92:	b085      	sub	sp, #20
   d9e94:	4690      	mov	r8, r2
   d9e96:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
   d9e98:	4606      	mov	r6, r0
   d9e9a:	2800      	cmp	r0, #0
   d9e9c:	d067      	beq.n	d9f6e <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
   d9e9e:	4618      	mov	r0, r3
   d9ea0:	f00c feeb 	bl	e6c7a <strstr>

    if( s1 == NULL )
   d9ea4:	4604      	mov	r4, r0
   d9ea6:	2800      	cmp	r0, #0
   d9ea8:	d063      	beq.n	d9f72 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
   d9eaa:	4641      	mov	r1, r8
   d9eac:	4638      	mov	r0, r7
   d9eae:	f00c fee4 	bl	e6c7a <strstr>

    if( s2 == NULL || s2 <= s1 )
   d9eb2:	4605      	mov	r5, r0
   d9eb4:	2800      	cmp	r0, #0
   d9eb6:	d05c      	beq.n	d9f72 <mbedtls_pem_read_buffer+0xe6>
   d9eb8:	4284      	cmp	r4, r0
   d9eba:	d25a      	bcs.n	d9f72 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   d9ebc:	4648      	mov	r0, r9
   d9ebe:	f00c fed4 	bl	e6c6a <strlen>
    if( *s1 == ' '  ) s1++;
   d9ec2:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   d9ec4:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
   d9ec6:	2a20      	cmp	r2, #32
   d9ec8:	bf08      	it	eq
   d9eca:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
   d9ecc:	781a      	ldrb	r2, [r3, #0]
   d9ece:	2a0d      	cmp	r2, #13
   d9ed0:	bf08      	it	eq
   d9ed2:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
   d9ed4:	781a      	ldrb	r2, [r3, #0]
   d9ed6:	2a0a      	cmp	r2, #10
   d9ed8:	d14b      	bne.n	d9f72 <mbedtls_pem_read_buffer+0xe6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   d9eda:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
   d9edc:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   d9ede:	f00c fec4 	bl	e6c6a <strlen>
    if( *end == ' '  ) end++;
   d9ee2:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   d9ee4:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
   d9ee6:	2a20      	cmp	r2, #32
   d9ee8:	bf08      	it	eq
   d9eea:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
   d9eec:	781a      	ldrb	r2, [r3, #0]
   d9eee:	2a0d      	cmp	r2, #13
   d9ef0:	bf08      	it	eq
   d9ef2:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
   d9ef4:	781a      	ldrb	r2, [r3, #0]
   d9ef6:	2a0a      	cmp	r2, #10
   d9ef8:	bf08      	it	eq
   d9efa:	3301      	addeq	r3, #1
    *use_len = end - data;
   d9efc:	1bdb      	subs	r3, r3, r7
   d9efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   d9f00:	1b2f      	subs	r7, r5, r4
   d9f02:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
   d9f04:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   d9f06:	dd05      	ble.n	d9f14 <mbedtls_pem_read_buffer+0x88>
   d9f08:	2216      	movs	r2, #22
   d9f0a:	4920      	ldr	r1, [pc, #128]	; (d9f8c <mbedtls_pem_read_buffer+0x100>)
   d9f0c:	4620      	mov	r0, r4
   d9f0e:	f00c fe0b 	bl	e6b28 <memcmp>
   d9f12:	b380      	cbz	r0, d9f76 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
   d9f14:	42a5      	cmp	r5, r4
   d9f16:	d930      	bls.n	d9f7a <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
   d9f18:	2100      	movs	r1, #0
   d9f1a:	9700      	str	r7, [sp, #0]
   d9f1c:	4623      	mov	r3, r4
   d9f1e:	aa03      	add	r2, sp, #12
   d9f20:	4608      	mov	r0, r1
   d9f22:	f7fd fb05 	bl	d7530 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
   d9f26:	302c      	adds	r0, #44	; 0x2c
   d9f28:	d029      	beq.n	d9f7e <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
   d9f2a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   d9f2e:	2001      	movs	r0, #1
   d9f30:	4641      	mov	r1, r8
   d9f32:	f00c fde3 	bl	e6afc <calloc>
   d9f36:	4605      	mov	r5, r0
   d9f38:	b318      	cbz	r0, d9f82 <mbedtls_pem_read_buffer+0xf6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
   d9f3a:	4623      	mov	r3, r4
   d9f3c:	9700      	str	r7, [sp, #0]
   d9f3e:	aa03      	add	r2, sp, #12
   d9f40:	4641      	mov	r1, r8
   d9f42:	f7fd faf5 	bl	d7530 <mbedtls_base64_decode>
   d9f46:	9b03      	ldr	r3, [sp, #12]
   d9f48:	4604      	mov	r4, r0
   d9f4a:	b168      	cbz	r0, d9f68 <mbedtls_pem_read_buffer+0xdc>
   d9f4c:	442b      	add	r3, r5
    {
        mbedtls_zeroize( buf, len );
   d9f4e:	462a      	mov	r2, r5
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d9f50:	2100      	movs	r1, #0
   d9f52:	429a      	cmp	r2, r3
   d9f54:	d002      	beq.n	d9f5c <mbedtls_pem_read_buffer+0xd0>
   d9f56:	7011      	strb	r1, [r2, #0]
   d9f58:	3201      	adds	r2, #1
   d9f5a:	e7fa      	b.n	d9f52 <mbedtls_pem_read_buffer+0xc6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    {
        mbedtls_zeroize( buf, len );
        mbedtls_free( buf );
   d9f5c:	4628      	mov	r0, r5
   d9f5e:	f00a f82b 	bl	e3fb8 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   d9f62:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
   d9f66:	e00d      	b.n	d9f84 <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
   d9f68:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
   d9f6a:	6073      	str	r3, [r6, #4]

    return( 0 );
   d9f6c:	e00a      	b.n	d9f84 <mbedtls_pem_read_buffer+0xf8>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
   d9f6e:	4808      	ldr	r0, [pc, #32]	; (d9f90 <mbedtls_pem_read_buffer+0x104>)
   d9f70:	e008      	b.n	d9f84 <mbedtls_pem_read_buffer+0xf8>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
   d9f72:	4808      	ldr	r0, [pc, #32]	; (d9f94 <mbedtls_pem_read_buffer+0x108>)
   d9f74:	e006      	b.n	d9f84 <mbedtls_pem_read_buffer+0xf8>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
   d9f76:	4808      	ldr	r0, [pc, #32]	; (d9f98 <mbedtls_pem_read_buffer+0x10c>)
   d9f78:	e004      	b.n	d9f84 <mbedtls_pem_read_buffer+0xf8>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
   d9f7a:	4808      	ldr	r0, [pc, #32]	; (d9f9c <mbedtls_pem_read_buffer+0x110>)
   d9f7c:	e002      	b.n	d9f84 <mbedtls_pem_read_buffer+0xf8>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   d9f7e:	4808      	ldr	r0, [pc, #32]	; (d9fa0 <mbedtls_pem_read_buffer+0x114>)
   d9f80:	e000      	b.n	d9f84 <mbedtls_pem_read_buffer+0xf8>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   d9f82:	4808      	ldr	r0, [pc, #32]	; (d9fa4 <mbedtls_pem_read_buffer+0x118>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
   d9f84:	b005      	add	sp, #20
   d9f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9f8a:	bf00      	nop
   d9f8c:	000e85ec 	.word	0x000e85ec
   d9f90:	ffffeb80 	.word	0xffffeb80
   d9f94:	ffffef80 	.word	0xffffef80
   d9f98:	ffffec00 	.word	0xffffec00
   d9f9c:	ffffef00 	.word	0xffffef00
   d9fa0:	ffffeed4 	.word	0xffffeed4
   d9fa4:	ffffee80 	.word	0xffffee80

000d9fa8 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
   d9fa8:	b510      	push	{r4, lr}
    if( ctx->buf != NULL )
   d9faa:	6803      	ldr	r3, [r0, #0]

    return( 0 );
}

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
   d9fac:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
   d9fae:	b13b      	cbz	r3, d9fc0 <mbedtls_pem_free+0x18>
   d9fb0:	6842      	ldr	r2, [r0, #4]
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d9fb2:	2100      	movs	r1, #0
   d9fb4:	441a      	add	r2, r3
   d9fb6:	429a      	cmp	r2, r3
   d9fb8:	d002      	beq.n	d9fc0 <mbedtls_pem_free+0x18>
   d9fba:	7019      	strb	r1, [r3, #0]
   d9fbc:	3301      	adds	r3, #1
   d9fbe:	e7fa      	b.n	d9fb6 <mbedtls_pem_free+0xe>

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
   d9fc0:	6820      	ldr	r0, [r4, #0]
   d9fc2:	f009 fff9 	bl	e3fb8 <free>
    mbedtls_free( ctx->info );
   d9fc6:	68a0      	ldr	r0, [r4, #8]
   d9fc8:	f009 fff6 	bl	e3fb8 <free>
   d9fcc:	f104 020c 	add.w	r2, r4, #12
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d9fd0:	2300      	movs	r3, #0
   d9fd2:	4294      	cmp	r4, r2
   d9fd4:	d002      	beq.n	d9fdc <mbedtls_pem_free+0x34>
   d9fd6:	7023      	strb	r3, [r4, #0]
   d9fd8:	3401      	adds	r4, #1
   d9fda:	e7fa      	b.n	d9fd2 <mbedtls_pem_free+0x2a>
   d9fdc:	bd10      	pop	{r4, pc}

000d9fde <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
   d9fde:	b110      	cbz	r0, d9fe6 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
   d9fe0:	2300      	movs	r3, #0
   d9fe2:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
   d9fe4:	6043      	str	r3, [r0, #4]
   d9fe6:	4770      	bx	lr

000d9fe8 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
   d9fe8:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
   d9fea:	4604      	mov	r4, r0
   d9fec:	b160      	cbz	r0, da008 <mbedtls_pk_free+0x20>
   d9fee:	6803      	ldr	r3, [r0, #0]
   d9ff0:	b153      	cbz	r3, da008 <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
   d9ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9ff4:	6840      	ldr	r0, [r0, #4]
   d9ff6:	4798      	blx	r3
   d9ff8:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   d9ffc:	2300      	movs	r3, #0
   d9ffe:	4294      	cmp	r4, r2
   da000:	d002      	beq.n	da008 <mbedtls_pk_free+0x20>
   da002:	7023      	strb	r3, [r4, #0]
   da004:	3401      	adds	r4, #1
   da006:	e7fa      	b.n	d9ffe <mbedtls_pk_free+0x16>
   da008:	bd10      	pop	{r4, pc}
	...

000da00c <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
   da00c:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
   da00e:	4802      	ldr	r0, [pc, #8]	; (da018 <mbedtls_pk_info_from_type+0xc>)
   da010:	bf18      	it	ne
   da012:	2000      	movne	r0, #0
   da014:	4770      	bx	lr
   da016:	bf00      	nop
   da018:	000e861c 	.word	0x000e861c

000da01c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
   da01c:	b570      	push	{r4, r5, r6, lr}
   da01e:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
   da020:	4605      	mov	r5, r0
   da022:	b148      	cbz	r0, da038 <mbedtls_pk_setup+0x1c>
   da024:	b141      	cbz	r1, da038 <mbedtls_pk_setup+0x1c>
   da026:	6804      	ldr	r4, [r0, #0]
   da028:	b934      	cbnz	r4, da038 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
   da02a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   da02c:	4798      	blx	r3
   da02e:	6068      	str	r0, [r5, #4]
   da030:	b120      	cbz	r0, da03c <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
   da032:	602e      	str	r6, [r5, #0]

    return( 0 );
   da034:	4620      	mov	r0, r4
   da036:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   da038:	4801      	ldr	r0, [pc, #4]	; (da040 <mbedtls_pk_setup+0x24>)
   da03a:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   da03c:	4801      	ldr	r0, [pc, #4]	; (da044 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
   da03e:	bd70      	pop	{r4, r5, r6, pc}
   da040:	ffffc180 	.word	0xffffc180
   da044:	ffffc080 	.word	0xffffc080

000da048 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
   da048:	b120      	cbz	r0, da054 <mbedtls_pk_can_do+0xc>
   da04a:	6803      	ldr	r3, [r0, #0]
   da04c:	b113      	cbz	r3, da054 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
   da04e:	68db      	ldr	r3, [r3, #12]
   da050:	4608      	mov	r0, r1
   da052:	4718      	bx	r3
}
   da054:	2000      	movs	r0, #0
   da056:	4770      	bx	lr

000da058 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
   da058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da05c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   da060:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   da064:	460e      	mov	r6, r1
   da066:	4617      	mov	r7, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
   da068:	4604      	mov	r4, r0
   da06a:	b910      	cbnz	r0, da072 <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   da06c:	480f      	ldr	r0, [pc, #60]	; (da0ac <mbedtls_pk_verify+0x54>)
   da06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
   da072:	6802      	ldr	r2, [r0, #0]
   da074:	2a00      	cmp	r2, #0
   da076:	d0f9      	beq.n	da06c <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
   da078:	b93b      	cbnz	r3, da08a <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   da07a:	4608      	mov	r0, r1
   da07c:	f7ff fc52 	bl	d9924 <mbedtls_md_info_from_type>
   da080:	2800      	cmp	r0, #0
   da082:	d0f3      	beq.n	da06c <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
   da084:	f7ff fd8c 	bl	d9ba0 <mbedtls_md_get_size>
   da088:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
   da08a:	6822      	ldr	r2, [r4, #0]
   da08c:	6915      	ldr	r5, [r2, #16]
   da08e:	b155      	cbz	r5, da0a6 <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
   da090:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   da094:	f8cd 8020 	str.w	r8, [sp, #32]
   da098:	463a      	mov	r2, r7
   da09a:	4631      	mov	r1, r6
   da09c:	6860      	ldr	r0, [r4, #4]
   da09e:	46ac      	mov	ip, r5
}
   da0a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
   da0a4:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   da0a6:	4802      	ldr	r0, [pc, #8]	; (da0b0 <mbedtls_pk_verify+0x58>)
   da0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da0ac:	ffffc180 	.word	0xffffc180
   da0b0:	ffffc100 	.word	0xffffc100

000da0b4 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   da0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da0b8:	af08      	add	r7, sp, #32
   da0ba:	460d      	mov	r5, r1
   da0bc:	4616      	mov	r6, r2
   da0be:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
    if( ctx == NULL || ctx->pk_info == NULL ||
   da0c2:	4604      	mov	r4, r0
   da0c4:	b910      	cbnz	r0, da0cc <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   da0c6:	4813      	ldr	r0, [pc, #76]	; (da114 <mbedtls_pk_sign+0x60>)
   da0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
   da0cc:	6802      	ldr	r2, [r0, #0]
   da0ce:	2a00      	cmp	r2, #0
   da0d0:	d0f9      	beq.n	da0c6 <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
   da0d2:	b93b      	cbnz	r3, da0e4 <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   da0d4:	4608      	mov	r0, r1
   da0d6:	f7ff fc25 	bl	d9924 <mbedtls_md_info_from_type>
   da0da:	2800      	cmp	r0, #0
   da0dc:	d0f3      	beq.n	da0c6 <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
   da0de:	f7ff fd5f 	bl	d9ba0 <mbedtls_md_get_size>
   da0e2:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
   da0e4:	6822      	ldr	r2, [r4, #0]
   da0e6:	f8d2 e014 	ldr.w	lr, [r2, #20]
   da0ea:	f1be 0f00 	cmp.w	lr, #0
   da0ee:	d00d      	beq.n	da10c <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
   da0f0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   da0f4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   da0f8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   da0fc:	9708      	str	r7, [sp, #32]
   da0fe:	4632      	mov	r2, r6
   da100:	4629      	mov	r1, r5
   da102:	6860      	ldr	r0, [r4, #4]
   da104:	46f4      	mov	ip, lr
}
   da106:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
   da10a:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   da10c:	4802      	ldr	r0, [pc, #8]	; (da118 <mbedtls_pk_sign+0x64>)
   da10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da112:	bf00      	nop
   da114:	ffffc180 	.word	0xffffc180
   da118:	ffffc100 	.word	0xffffc100

000da11c <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   da11c:	b5f0      	push	{r4, r5, r6, r7, lr}
   da11e:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
   da122:	b140      	cbz	r0, da136 <mbedtls_pk_encrypt+0x1a>
   da124:	6804      	ldr	r4, [r0, #0]
   da126:	b134      	cbz	r4, da136 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
   da128:	69e4      	ldr	r4, [r4, #28]
   da12a:	b134      	cbz	r4, da13a <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
   da12c:	46a4      	mov	ip, r4
   da12e:	6840      	ldr	r0, [r0, #4]
}
   da130:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
   da134:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   da136:	4802      	ldr	r0, [pc, #8]	; (da140 <mbedtls_pk_encrypt+0x24>)
   da138:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   da13a:	4802      	ldr	r0, [pc, #8]	; (da144 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
   da13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da13e:	bf00      	nop
   da140:	ffffc180 	.word	0xffffc180
   da144:	ffffc100 	.word	0xffffc100

000da148 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   da148:	b120      	cbz	r0, da154 <mbedtls_pk_get_bitlen+0xc>
   da14a:	6803      	ldr	r3, [r0, #0]
   da14c:	b113      	cbz	r3, da154 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
   da14e:	689b      	ldr	r3, [r3, #8]
   da150:	6840      	ldr	r0, [r0, #4]
   da152:	4718      	bx	r3
}
   da154:	2000      	movs	r0, #0
   da156:	4770      	bx	lr

000da158 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   da158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da15c:	b087      	sub	sp, #28
   da15e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   da162:	4683      	mov	fp, r0
   da164:	460d      	mov	r5, r1
   da166:	461f      	mov	r7, r3
   da168:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
   da16c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
   da16e:	4614      	mov	r4, r2
   da170:	b90a      	cbnz	r2, da176 <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   da172:	4823      	ldr	r0, [pc, #140]	; (da200 <mbedtls_pk_verify_ext+0xa8>)
   da174:	e040      	b.n	da1f8 <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   da176:	6813      	ldr	r3, [r2, #0]
   da178:	2b00      	cmp	r3, #0
   da17a:	d0fa      	beq.n	da172 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
   da17c:	4601      	mov	r1, r0
   da17e:	4610      	mov	r0, r2
   da180:	f7ff ff62 	bl	da048 <mbedtls_pk_can_do>
   da184:	2800      	cmp	r0, #0
   da186:	d034      	beq.n	da1f2 <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
   da188:	f1bb 0f06 	cmp.w	fp, #6
   da18c:	d123      	bne.n	da1d6 <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
   da18e:	2d00      	cmp	r5, #0
   da190:	d0ef      	beq.n	da172 <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
   da192:	4620      	mov	r0, r4
   da194:	f7ff ffd8 	bl	da148 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
   da198:	3007      	adds	r0, #7
   da19a:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
   da19e:	d32a      	bcc.n	da1f6 <mbedtls_pk_verify_ext+0x9e>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
   da1a0:	686b      	ldr	r3, [r5, #4]
   da1a2:	9304      	str	r3, [sp, #16]
   da1a4:	e88d 0280 	stmia.w	sp, {r7, r9}
   da1a8:	782b      	ldrb	r3, [r5, #0]
   da1aa:	9303      	str	r3, [sp, #12]
   da1ac:	f8cd a014 	str.w	sl, [sp, #20]
   da1b0:	2300      	movs	r3, #0
   da1b2:	f8cd 8008 	str.w	r8, [sp, #8]
   da1b6:	461a      	mov	r2, r3
   da1b8:	4619      	mov	r1, r3
   da1ba:	6860      	ldr	r0, [r4, #4]
   da1bc:	f002 f860 	bl	dc280 <mbedtls_rsa_rsassa_pss_verify_ext>
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
        if( ret != 0 )
   da1c0:	b9d0      	cbnz	r0, da1f8 <mbedtls_pk_verify_ext+0xa0>
   da1c2:	4620      	mov	r0, r4
   da1c4:	f7ff ffc0 	bl	da148 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
   da1c8:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
   da1ca:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
   da1ce:	480d      	ldr	r0, [pc, #52]	; (da204 <mbedtls_pk_verify_ext+0xac>)
   da1d0:	bf98      	it	ls
   da1d2:	2000      	movls	r0, #0
   da1d4:	e010      	b.n	da1f8 <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
   da1d6:	2d00      	cmp	r5, #0
   da1d8:	d1cb      	bne.n	da172 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   da1da:	464b      	mov	r3, r9
   da1dc:	4642      	mov	r2, r8
   da1de:	4639      	mov	r1, r7
   da1e0:	4620      	mov	r0, r4
   da1e2:	9611      	str	r6, [sp, #68]	; 0x44
   da1e4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
   da1e8:	b007      	add	sp, #28
   da1ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   da1ee:	f7ff bf33 	b.w	da058 <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   da1f2:	4805      	ldr	r0, [pc, #20]	; (da208 <mbedtls_pk_verify_ext+0xb0>)
   da1f4:	e000      	b.n	da1f8 <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   da1f6:	4805      	ldr	r0, [pc, #20]	; (da20c <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
   da1f8:	b007      	add	sp, #28
   da1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da1fe:	bf00      	nop
   da200:	ffffc180 	.word	0xffffc180
   da204:	ffffc700 	.word	0xffffc700
   da208:	ffffc100 	.word	0xffffc100
   da20c:	ffffbc80 	.word	0xffffbc80

000da210 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   da210:	b118      	cbz	r0, da21a <mbedtls_pk_get_name+0xa>
   da212:	6803      	ldr	r3, [r0, #0]
   da214:	b10b      	cbz	r3, da21a <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
   da216:	6858      	ldr	r0, [r3, #4]
   da218:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
   da21a:	4801      	ldr	r0, [pc, #4]	; (da220 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
   da21c:	4770      	bx	lr
   da21e:	bf00      	nop
   da220:	000e8603 	.word	0x000e8603

000da224 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   da224:	b110      	cbz	r0, da22c <mbedtls_pk_get_type+0x8>
   da226:	6800      	ldr	r0, [r0, #0]
   da228:	b100      	cbz	r0, da22c <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
   da22a:	7800      	ldrb	r0, [r0, #0]
}
   da22c:	4770      	bx	lr

000da22e <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
   da22e:	2801      	cmp	r0, #1
   da230:	d002      	beq.n	da238 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
   da232:	1f83      	subs	r3, r0, #6
   da234:	4258      	negs	r0, r3
   da236:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
   da238:	4770      	bx	lr
	...

000da23c <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   da23c:	2301      	movs	r3, #1
    items->name = "rsa.N";
   da23e:	4a06      	ldr	r2, [pc, #24]	; (da258 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   da240:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
   da242:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
   da244:	730b      	strb	r3, [r1, #12]

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   da246:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
   da24a:	4b04      	ldr	r3, [pc, #16]	; (da25c <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   da24c:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   da24e:	3014      	adds	r0, #20
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
   da250:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   da252:	6148      	str	r0, [r1, #20]
   da254:	4770      	bx	lr
   da256:	bf00      	nop
   da258:	000e860e 	.word	0x000e860e
   da25c:	000e8614 	.word	0x000e8614

000da260 <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
   da260:	b510      	push	{r4, lr}
   da262:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
   da264:	f002 f984 	bl	dc570 <mbedtls_rsa_free>
    mbedtls_free( ctx );
   da268:	4620      	mov	r0, r4
}
   da26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
   da26e:	f009 bea3 	b.w	e3fb8 <free>

000da272 <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
   da272:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
   da274:	21ac      	movs	r1, #172	; 0xac
   da276:	2001      	movs	r0, #1
   da278:	f00c fc40 	bl	e6afc <calloc>

    if( ctx != NULL )
   da27c:	4604      	mov	r4, r0
   da27e:	b118      	cbz	r0, da288 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
   da280:	2200      	movs	r2, #0
   da282:	4611      	mov	r1, r2
   da284:	f001 f982 	bl	db58c <mbedtls_rsa_init>

    return( ctx );
}
   da288:	4620      	mov	r0, r4
   da28a:	bd10      	pop	{r4, pc}

000da28c <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
   da28c:	f001 b9e4 	b.w	db658 <mbedtls_rsa_check_pub_priv>

000da290 <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
   da290:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
   da292:	f001 f988 	bl	db5a6 <mbedtls_rsa_get_len>
}
   da296:	00c0      	lsls	r0, r0, #3
   da298:	bd08      	pop	{r3, pc}
	...

000da29c <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   da29c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da2a0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   da2a4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   da2a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   da2aa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   da2ac:	4604      	mov	r4, r0
   da2ae:	4688      	mov	r8, r1
   da2b0:	4617      	mov	r7, r2
   da2b2:	4699      	mov	r9, r3
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
   da2b4:	f001 f977 	bl	db5a6 <mbedtls_rsa_get_len>

    if( *olen > osize )
   da2b8:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
   da2ba:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
   da2be:	d80d      	bhi.n	da2dc <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
   da2c0:	2300      	movs	r3, #0
   da2c2:	4632      	mov	r2, r6
   da2c4:	4629      	mov	r1, r5
   da2c6:	4620      	mov	r0, r4
   da2c8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   da2cc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   da2d0:	970a      	str	r7, [sp, #40]	; 0x28
}
   da2d2:	b001      	add	sp, #4
   da2d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
   da2d8:	f001 bcdc 	b.w	dbc94 <mbedtls_rsa_pkcs1_encrypt>
}
   da2dc:	4801      	ldr	r0, [pc, #4]	; (da2e4 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
   da2de:	b001      	add	sp, #4
   da2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da2e4:	ffffbc00 	.word	0xffffbc00

000da2e8 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   da2e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da2ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   da2ee:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   da2f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   da2f4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   da2f6:	4693      	mov	fp, r2
   da2f8:	4604      	mov	r4, r0
   da2fa:	4688      	mov	r8, r1
   da2fc:	4699      	mov	r9, r3
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
   da2fe:	f001 f952 	bl	db5a6 <mbedtls_rsa_get_len>
   da302:	4558      	cmp	r0, fp
   da304:	d10f      	bne.n	da326 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
   da306:	2301      	movs	r3, #1
   da308:	4632      	mov	r2, r6
   da30a:	4629      	mov	r1, r5
   da30c:	4620      	mov	r0, r4
   da30e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   da312:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   da316:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   da31a:	970a      	str	r7, [sp, #40]	; 0x28
}
   da31c:	b001      	add	sp, #4
   da31e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
   da322:	f001 be39 	b.w	dbf98 <mbedtls_rsa_pkcs1_decrypt>
}
   da326:	4802      	ldr	r0, [pc, #8]	; (da330 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
   da328:	b001      	add	sp, #4
   da32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da32e:	bf00      	nop
   da330:	ffffbf80 	.word	0xffffbf80

000da334 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   da334:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da338:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   da33c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   da340:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   da342:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   da344:	460f      	mov	r7, r1
   da346:	4691      	mov	r9, r2
   da348:	4698      	mov	r8, r3
   da34a:	4604      	mov	r4, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
   da34c:	f001 f92b 	bl	db5a6 <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   da350:	2301      	movs	r3, #1
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
   da352:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   da356:	4632      	mov	r2, r6
   da358:	4629      	mov	r1, r5
   da35a:	4620      	mov	r0, r4
   da35c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   da360:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   da364:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   da368:	970a      	str	r7, [sp, #40]	; 0x28
}
   da36a:	b001      	add	sp, #4
   da36c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   da370:	f001 bf64 	b.w	dc23c <mbedtls_rsa_pkcs1_sign>

000da374 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   da374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da378:	b085      	sub	sp, #20
   da37a:	4606      	mov	r6, r0
   da37c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   da37e:	460f      	mov	r7, r1
   da380:	4691      	mov	r9, r2
   da382:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   da384:	f001 f90f 	bl	db5a6 <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
   da388:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   da38a:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
   da38c:	d80f      	bhi.n	da3ae <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3a>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
   da38e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da390:	9303      	str	r3, [sp, #12]
   da392:	2300      	movs	r3, #0
   da394:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
   da398:	461a      	mov	r2, r3
   da39a:	4619      	mov	r1, r3
   da39c:	4630      	mov	r0, r6
   da39e:	f002 f8c5 	bl	dc52c <mbedtls_rsa_pkcs1_verify>
   da3a2:	b928      	cbnz	r0, da3b0 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
     * We have a special error code for that so that so that callers can
     * use mbedtls_pk_verify() to check "Does the buffer start with a
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   da3a4:	4b04      	ldr	r3, [pc, #16]	; (da3b8 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
   da3a6:	42a5      	cmp	r5, r4
   da3a8:	bf38      	it	cc
   da3aa:	4618      	movcc	r0, r3
   da3ac:	e000      	b.n	da3b0 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   da3ae:	4803      	ldr	r0, [pc, #12]	; (da3bc <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x48>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
   da3b0:	b005      	add	sp, #20
   da3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da3b6:	bf00      	nop
   da3b8:	ffffc700 	.word	0xffffc700
   da3bc:	ffffbc80 	.word	0xffffbc80

000da3c0 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_DES_C)
#include "mbedtls/des.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
   da3c0:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   da3c2:	2300      	movs	r3, #0
   da3c4:	4288      	cmp	r0, r1
   da3c6:	d002      	beq.n	da3ce <_ZL15mbedtls_zeroizePvj+0xe>
   da3c8:	7003      	strb	r3, [r0, #0]
   da3ca:	3001      	adds	r0, #1
   da3cc:	e7fa      	b.n	da3c4 <_ZL15mbedtls_zeroizePvj+0x4>
   da3ce:	4770      	bx	lr

000da3d0 <_ZL18pkcs12_fill_bufferPhjPKhj>:
    return( ret );
}

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
   da3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da3d4:	4606      	mov	r6, r0
   da3d6:	460c      	mov	r4, r1
   da3d8:	4617      	mov	r7, r2
   da3da:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
   da3dc:	b15c      	cbz	r4, da3f6 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
   da3de:	4544      	cmp	r4, r8
   da3e0:	4625      	mov	r5, r4
   da3e2:	bf28      	it	cs
   da3e4:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
   da3e6:	4630      	mov	r0, r6
   da3e8:	462a      	mov	r2, r5
   da3ea:	4639      	mov	r1, r7
   da3ec:	f00c fbab 	bl	e6b46 <memcpy>
        p += use_len;
   da3f0:	442e      	add	r6, r5
        data_len -= use_len;
   da3f2:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
   da3f4:	e7f2      	b.n	da3dc <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
   da3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000da3fc <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
   da3fc:	4800      	ldr	r0, [pc, #0]	; (da400 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
   da3fe:	4770      	bx	lr
   da400:	ffffe100 	.word	0xffffe100

000da404 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   da404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da408:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   da40c:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   da40e:	9001      	str	r0, [sp, #4]
   da410:	460f      	mov	r7, r1
   da412:	4693      	mov	fp, r2
   da414:	4699      	mov	r9, r3
   da416:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   da418:	f200 80c3 	bhi.w	da5a2 <mbedtls_pkcs12_derivation+0x19e>
   da41c:	2b40      	cmp	r3, #64	; 0x40
   da41e:	f200 80c0 	bhi.w	da5a2 <mbedtls_pkcs12_derivation+0x19e>
   da422:	2d40      	cmp	r5, #64	; 0x40
   da424:	f200 80bd 	bhi.w	da5a2 <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
   da428:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
   da42c:	f7ff fa7a 	bl	d9924 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   da430:	9000      	str	r0, [sp, #0]
   da432:	2800      	cmp	r0, #0
   da434:	f000 80b7 	beq.w	da5a6 <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
   da438:	a803      	add	r0, sp, #12
   da43a:	f7ff fa7f 	bl	d993c <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   da43e:	2200      	movs	r2, #0
   da440:	9900      	ldr	r1, [sp, #0]
   da442:	a803      	add	r0, sp, #12
   da444:	f7ff faa0 	bl	d9988 <mbedtls_md_setup>
   da448:	2800      	cmp	r0, #0
   da44a:	f040 80ad 	bne.w	da5a8 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   da44e:	9800      	ldr	r0, [sp, #0]
   da450:	f7ff fba6 	bl	d9ba0 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
   da454:	2820      	cmp	r0, #32
   da456:	bf8c      	ite	hi
   da458:	2480      	movhi	r4, #128	; 0x80
   da45a:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
   da45c:	4622      	mov	r2, r4
   da45e:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   da462:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   da464:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
   da468:	a816      	add	r0, sp, #88	; 0x58
   da46a:	f00c fb92 	bl	e6b92 <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   da46e:	462b      	mov	r3, r5
   da470:	9aa0      	ldr	r2, [sp, #640]	; 0x280
   da472:	4621      	mov	r1, r4
   da474:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   da476:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   da478:	f7ff ffaa 	bl	da3d0 <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   da47c:	464b      	mov	r3, r9
   da47e:	465a      	mov	r2, fp
   da480:	4621      	mov	r1, r4
   da482:	4628      	mov	r0, r5
   da484:	f7ff ffa4 	bl	da3d0 <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   da488:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
   da48c:	2f00      	cmp	r7, #0
   da48e:	d072      	beq.n	da576 <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   da490:	a803      	add	r0, sp, #12
   da492:	f7ff fa9b 	bl	d99cc <mbedtls_md_starts>
   da496:	4606      	mov	r6, r0
   da498:	2800      	cmp	r0, #0
   da49a:	d16d      	bne.n	da578 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
   da49c:	4622      	mov	r2, r4
   da49e:	a916      	add	r1, sp, #88	; 0x58
   da4a0:	a803      	add	r0, sp, #12
   da4a2:	f7ff fa9d 	bl	d99e0 <mbedtls_md_update>
   da4a6:	4606      	mov	r6, r0
   da4a8:	2800      	cmp	r0, #0
   da4aa:	d165      	bne.n	da578 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
   da4ac:	4622      	mov	r2, r4
   da4ae:	4641      	mov	r1, r8
   da4b0:	a803      	add	r0, sp, #12
   da4b2:	f7ff fa95 	bl	d99e0 <mbedtls_md_update>
   da4b6:	4606      	mov	r6, r0
   da4b8:	2800      	cmp	r0, #0
   da4ba:	d15d      	bne.n	da578 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
   da4bc:	4622      	mov	r2, r4
   da4be:	4629      	mov	r1, r5
   da4c0:	a803      	add	r0, sp, #12
   da4c2:	f7ff fa8d 	bl	d99e0 <mbedtls_md_update>
   da4c6:	4606      	mov	r6, r0
   da4c8:	2800      	cmp	r0, #0
   da4ca:	d155      	bne.n	da578 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
   da4cc:	a906      	add	r1, sp, #24
   da4ce:	a803      	add	r0, sp, #12
   da4d0:	f7ff fa90 	bl	d99f4 <mbedtls_md_finish>
   da4d4:	4606      	mov	r6, r0
   da4d6:	2800      	cmp	r0, #0
   da4d8:	d14e      	bne.n	da578 <mbedtls_pkcs12_derivation+0x174>
   da4da:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   da4de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   da4e0:	459b      	cmp	fp, r3
   da4e2:	d20b      	bcs.n	da4fc <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
   da4e4:	ab06      	add	r3, sp, #24
   da4e6:	4652      	mov	r2, sl
   da4e8:	4619      	mov	r1, r3
   da4ea:	9800      	ldr	r0, [sp, #0]
   da4ec:	f7ff fa8c 	bl	d9a08 <mbedtls_md>
   da4f0:	4606      	mov	r6, r0
   da4f2:	2800      	cmp	r0, #0
   da4f4:	d140      	bne.n	da578 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   da4f6:	f10b 0b01 	add.w	fp, fp, #1
   da4fa:	e7f0      	b.n	da4de <mbedtls_pkcs12_derivation+0xda>
   da4fc:	4557      	cmp	r7, sl
   da4fe:	46bb      	mov	fp, r7
   da500:	bf28      	it	cs
   da502:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
   da504:	465a      	mov	r2, fp
   da506:	a906      	add	r1, sp, #24
   da508:	9801      	ldr	r0, [sp, #4]
   da50a:	f00c fb1c 	bl	e6b46 <memcpy>
        datalen -= use_len;
        p += use_len;
   da50e:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
   da510:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
   da514:	445b      	add	r3, fp
   da516:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
   da518:	d02d      	beq.n	da576 <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   da51a:	4653      	mov	r3, sl
   da51c:	aa06      	add	r2, sp, #24
   da51e:	4621      	mov	r1, r4
   da520:	4648      	mov	r0, r9
   da522:	f7ff ff55 	bl	da3d0 <_ZL18pkcs12_fill_bufferPhjPKhj>
   da526:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
   da52a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   da52e:	3201      	adds	r2, #1
   da530:	b2d2      	uxtb	r2, r2
   da532:	701a      	strb	r2, [r3, #0]
   da534:	b91a      	cbnz	r2, da53e <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
   da536:	454b      	cmp	r3, r9
   da538:	d1f7      	bne.n	da52a <mbedtls_pkcs12_derivation+0x126>
   da53a:	4623      	mov	r3, r4
   da53c:	e001      	b.n	da542 <mbedtls_pkcs12_derivation+0x13e>
   da53e:	4623      	mov	r3, r4
   da540:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
   da542:	3b01      	subs	r3, #1
   da544:	f818 0003 	ldrb.w	r0, [r8, r3]
   da548:	f813 1009 	ldrb.w	r1, [r3, r9]
   da54c:	4401      	add	r1, r0
   da54e:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
   da550:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
   da554:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
   da558:	2b00      	cmp	r3, #0
   da55a:	d1f2      	bne.n	da542 <mbedtls_pkcs12_derivation+0x13e>
   da55c:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
   da55e:	3a01      	subs	r2, #1
   da560:	5d50      	ldrb	r0, [r2, r5]
   da562:	f812 1009 	ldrb.w	r1, [r2, r9]
   da566:	4401      	add	r1, r0
   da568:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
   da56a:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
   da56e:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
   da570:	2a00      	cmp	r2, #0
   da572:	d1f4      	bne.n	da55e <mbedtls_pkcs12_derivation+0x15a>
   da574:	e78a      	b.n	da48c <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
   da576:	2600      	movs	r6, #0

exit:
    mbedtls_zeroize( salt_block, sizeof( salt_block ) );
   da578:	2180      	movs	r1, #128	; 0x80
   da57a:	4640      	mov	r0, r8
   da57c:	f7ff ff20 	bl	da3c0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
   da580:	2180      	movs	r1, #128	; 0x80
   da582:	4628      	mov	r0, r5
   da584:	f7ff ff1c 	bl	da3c0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_block, sizeof( hash_block ) );
   da588:	2180      	movs	r1, #128	; 0x80
   da58a:	a876      	add	r0, sp, #472	; 0x1d8
   da58c:	f7ff ff18 	bl	da3c0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );
   da590:	2140      	movs	r1, #64	; 0x40
   da592:	a806      	add	r0, sp, #24
   da594:	f7ff ff14 	bl	da3c0 <_ZL15mbedtls_zeroizePvj>

    mbedtls_md_free( &md_ctx );
   da598:	a803      	add	r0, sp, #12
   da59a:	f7ff f9d4 	bl	d9946 <mbedtls_md_free>

    return( ret );
   da59e:	4630      	mov	r0, r6
   da5a0:	e002      	b.n	da5a8 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   da5a2:	4803      	ldr	r0, [pc, #12]	; (da5b0 <mbedtls_pkcs12_derivation+0x1ac>)
   da5a4:	e000      	b.n	da5a8 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   da5a6:	4803      	ldr	r0, [pc, #12]	; (da5b4 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
   da5a8:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   da5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da5b0:	ffffe080 	.word	0xffffe080
   da5b4:	ffffe100 	.word	0xffffe100

000da5b8 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   da5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da5bc:	b0d9      	sub	sp, #356	; 0x164
   da5be:	4604      	mov	r4, r0
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
   da5c0:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   da5c2:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   da5c4:	468b      	mov	fp, r1
   da5c6:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
   da5c8:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   da5ca:	f7fe fc9b 	bl	d8f04 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   da5ce:	4605      	mov	r5, r0
   da5d0:	2800      	cmp	r0, #0
   da5d2:	f000 80ac 	beq.w	da72e <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   da5d6:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
   da5d8:	6847      	ldr	r7, [r0, #4]

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
   da5da:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
   da5de:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   da5e0:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
   da5e2:	ea4f 07d7 	mov.w	r7, r7, lsr #3
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   da5e6:	d860      	bhi.n	da6aa <mbedtls_pkcs12_pbe+0xf2>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
   da5e8:	4631      	mov	r1, r6
   da5ea:	f44f 7281 	mov.w	r2, #258	; 0x102
   da5ee:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
   da5f0:	9608      	str	r6, [sp, #32]
   da5f2:	9609      	str	r6, [sp, #36]	; 0x24
   da5f4:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
   da5f6:	f00c facc 	bl	e6b92 <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
   da5fa:	6863      	ldr	r3, [r4, #4]
   da5fc:	68a6      	ldr	r6, [r4, #8]
   da5fe:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da600:	6823      	ldr	r3, [r4, #0]
   da602:	2b30      	cmp	r3, #48	; 0x30

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
   da604:	f104 0a08 	add.w	sl, r4, #8
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da608:	f040 8093 	bne.w	da732 <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   da60c:	2304      	movs	r3, #4
   da60e:	aa09      	add	r2, sp, #36	; 0x24
   da610:	4631      	mov	r1, r6
   da612:	4650      	mov	r0, sl
   da614:	f7fc fe4e 	bl	d72b4 <mbedtls_asn1_get_tag>
   da618:	b950      	cbnz	r0, da630 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
   da61a:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
   da61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
   da61e:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
   da620:	4413      	add	r3, r2
   da622:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
   da624:	aa07      	add	r2, sp, #28
   da626:	4631      	mov	r1, r6
   da628:	4650      	mov	r0, sl
   da62a:	f7fc fe70 	bl	d730e <mbedtls_asn1_get_int>
   da62e:	b118      	cbz	r0, da638 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
   da630:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
   da634:	b118      	cbz	r0, da63e <mbedtls_pkcs12_pbe+0x86>
   da636:	e07f      	b.n	da738 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
   da638:	68a3      	ldr	r3, [r4, #8]
   da63a:	429e      	cmp	r6, r3
   da63c:	d17b      	bne.n	da736 <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   da63e:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
   da640:	9a63      	ldr	r2, [sp, #396]	; 0x18c
   da642:	429a      	cmp	r2, r3
   da644:	d007      	beq.n	da656 <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
   da646:	aa17      	add	r2, sp, #92	; 0x5c
   da648:	9962      	ldr	r1, [sp, #392]	; 0x188
   da64a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   da64e:	5cc9      	ldrb	r1, [r1, r3]
   da650:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
   da652:	3301      	adds	r3, #1
   da654:	e7f4      	b.n	da640 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
   da656:	9b63      	ldr	r3, [sp, #396]	; 0x18c
   da658:	f8cd 9008 	str.w	r9, [sp, #8]
   da65c:	1c5c      	adds	r4, r3, #1
   da65e:	9b07      	ldr	r3, [sp, #28]
   da660:	9304      	str	r3, [sp, #16]
   da662:	2301      	movs	r3, #1
   da664:	9303      	str	r3, [sp, #12]
   da666:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da668:	9301      	str	r3, [sp, #4]
   da66a:	0064      	lsls	r4, r4, #1
   da66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da66e:	9300      	str	r3, [sp, #0]
   da670:	aa17      	add	r2, sp, #92	; 0x5c
   da672:	4623      	mov	r3, r4
   da674:	4639      	mov	r1, r7
   da676:	a80f      	add	r0, sp, #60	; 0x3c
   da678:	f7ff fec4 	bl	da404 <mbedtls_pkcs12_derivation>
   da67c:	2800      	cmp	r0, #0
   da67e:	d15b      	bne.n	da738 <mbedtls_pkcs12_pbe+0x180>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
   da680:	f1b8 0f00 	cmp.w	r8, #0
   da684:	d013      	beq.n	da6ae <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
   da686:	9b07      	ldr	r3, [sp, #28]
   da688:	9304      	str	r3, [sp, #16]
   da68a:	2302      	movs	r3, #2
   da68c:	9303      	str	r3, [sp, #12]
   da68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da690:	9301      	str	r3, [sp, #4]
   da692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da694:	9300      	str	r3, [sp, #0]
   da696:	f8cd 9008 	str.w	r9, [sp, #8]
   da69a:	4623      	mov	r3, r4
   da69c:	aa17      	add	r2, sp, #92	; 0x5c
   da69e:	4641      	mov	r1, r8
   da6a0:	a80b      	add	r0, sp, #44	; 0x2c
   da6a2:	f7ff feaf 	bl	da404 <mbedtls_pkcs12_derivation>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
   da6a6:	b110      	cbz	r0, da6ae <mbedtls_pkcs12_pbe+0xf6>
   da6a8:	e046      	b.n	da738 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   da6aa:	4825      	ldr	r0, [pc, #148]	; (da740 <mbedtls_pkcs12_pbe+0x188>)
   da6ac:	e044      	b.n	da738 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
   da6ae:	a817      	add	r0, sp, #92	; 0x5c
   da6b0:	f7fe fc4a 	bl	d8f48 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   da6b4:	4629      	mov	r1, r5
   da6b6:	a817      	add	r0, sp, #92	; 0x5c
   da6b8:	f7fe fc5c 	bl	d8f74 <mbedtls_cipher_setup>
   da6bc:	4604      	mov	r4, r0
   da6be:	bb48      	cbnz	r0, da714 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   da6c0:	fa4f f38b 	sxtb.w	r3, fp
   da6c4:	00fa      	lsls	r2, r7, #3
   da6c6:	a90f      	add	r1, sp, #60	; 0x3c
   da6c8:	a817      	add	r0, sp, #92	; 0x5c
   da6ca:	f7fe fc6d 	bl	d8fa8 <mbedtls_cipher_setkey>
   da6ce:	4604      	mov	r4, r0
   da6d0:	bb00      	cbnz	r0, da714 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
   da6d2:	68ea      	ldr	r2, [r5, #12]
   da6d4:	a90b      	add	r1, sp, #44	; 0x2c
   da6d6:	a817      	add	r0, sp, #92	; 0x5c
   da6d8:	f7fe fc88 	bl	d8fec <mbedtls_cipher_set_iv>
   da6dc:	4604      	mov	r4, r0
   da6de:	b9c8      	cbnz	r0, da714 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
   da6e0:	a817      	add	r0, sp, #92	; 0x5c
   da6e2:	f7fe fca3 	bl	d902c <mbedtls_cipher_reset>
   da6e6:	4604      	mov	r4, r0
   da6e8:	b9a0      	cbnz	r0, da714 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
   da6ea:	ad06      	add	r5, sp, #24
   da6ec:	9500      	str	r5, [sp, #0]
   da6ee:	a964      	add	r1, sp, #400	; 0x190
   da6f0:	c90e      	ldmia	r1, {r1, r2, r3}
   da6f2:	a817      	add	r0, sp, #92	; 0x5c
   da6f4:	f7fe fca6 	bl	d9044 <mbedtls_cipher_update>
   da6f8:	4604      	mov	r4, r0
   da6fa:	b958      	cbnz	r0, da714 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
   da6fc:	6829      	ldr	r1, [r5, #0]
   da6fe:	9b66      	ldr	r3, [sp, #408]	; 0x198
   da700:	462a      	mov	r2, r5
   da702:	4419      	add	r1, r3
   da704:	a817      	add	r0, sp, #92	; 0x5c
   da706:	f7fe fce5 	bl	d90d4 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
   da70a:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
   da70e:	2800      	cmp	r0, #0
   da710:	bf08      	it	eq
   da712:	2400      	moveq	r4, #0

exit:
    mbedtls_zeroize( key, sizeof( key ) );
   da714:	2120      	movs	r1, #32
   da716:	a80f      	add	r0, sp, #60	; 0x3c
   da718:	f7ff fe52 	bl	da3c0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( iv,  sizeof( iv  ) );
   da71c:	2110      	movs	r1, #16
   da71e:	a80b      	add	r0, sp, #44	; 0x2c
   da720:	f7ff fe4e 	bl	da3c0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_cipher_free( &cipher_ctx );
   da724:	a817      	add	r0, sp, #92	; 0x5c
   da726:	f7fe fc13 	bl	d8f50 <mbedtls_cipher_free>

    return( ret );
   da72a:	4620      	mov	r0, r4
   da72c:	e004      	b.n	da738 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   da72e:	4805      	ldr	r0, [pc, #20]	; (da744 <mbedtls_pkcs12_pbe+0x18c>)
   da730:	e002      	b.n	da738 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   da732:	4805      	ldr	r0, [pc, #20]	; (da748 <mbedtls_pkcs12_pbe+0x190>)
   da734:	e000      	b.n	da738 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   da736:	4805      	ldr	r0, [pc, #20]	; (da74c <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
   da738:	b059      	add	sp, #356	; 0x164
   da73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da73e:	bf00      	nop
   da740:	ffffe080 	.word	0xffffe080
   da744:	ffffe100 	.word	0xffffe100
   da748:	ffffe11e 	.word	0xffffe11e
   da74c:	ffffe11a 	.word	0xffffe11a

000da750 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   da750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da754:	b0a5      	sub	sp, #148	; 0x94
   da756:	4604      	mov	r4, r0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   da758:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   da75a:	9301      	str	r3, [sp, #4]
   da75c:	460f      	mov	r7, r1
   da75e:	4693      	mov	fp, r2
   da760:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   da762:	f7ff fa1d 	bl	d9ba0 <mbedtls_md_get_size>
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
   da766:	2300      	movs	r3, #0
   da768:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
   da76a:	2301      	movs	r3, #1
{
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   da76c:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
    counter[3] = 1;
   da76e:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   da772:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
   da776:	2e00      	cmp	r6, #0
   da778:	d05c      	beq.n	da834 <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   da77a:	465a      	mov	r2, fp
   da77c:	4639      	mov	r1, r7
   da77e:	4620      	mov	r0, r4
   da780:	f7ff f952 	bl	d9a28 <mbedtls_md_hmac_starts>
   da784:	2800      	cmp	r0, #0
   da786:	d156      	bne.n	da836 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
   da788:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   da78a:	9901      	ldr	r1, [sp, #4]
   da78c:	4620      	mov	r0, r4
   da78e:	f7ff f9ab 	bl	d9ae8 <mbedtls_md_hmac_update>
   da792:	2800      	cmp	r0, #0
   da794:	d14f      	bne.n	da836 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
   da796:	2204      	movs	r2, #4
   da798:	a903      	add	r1, sp, #12
   da79a:	4620      	mov	r0, r4
   da79c:	f7ff f9a4 	bl	d9ae8 <mbedtls_md_hmac_update>
   da7a0:	2800      	cmp	r0, #0
   da7a2:	d148      	bne.n	da836 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   da7a4:	4641      	mov	r1, r8
   da7a6:	4620      	mov	r0, r4
   da7a8:	f7ff f9b0 	bl	d9b0c <mbedtls_md_hmac_finish>
   da7ac:	2800      	cmp	r0, #0
   da7ae:	d142      	bne.n	da836 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
   da7b0:	ad04      	add	r5, sp, #16
   da7b2:	464a      	mov	r2, r9
   da7b4:	4641      	mov	r1, r8
   da7b6:	4628      	mov	r0, r5
   da7b8:	f00c f9c5 	bl	e6b46 <memcpy>

        for( i = 1; i < iteration_count; i++ )
   da7bc:	f04f 0a01 	mov.w	sl, #1
   da7c0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   da7c2:	459a      	cmp	sl, r3
   da7c4:	d21d      	bcs.n	da802 <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   da7c6:	465a      	mov	r2, fp
   da7c8:	4639      	mov	r1, r7
   da7ca:	4620      	mov	r0, r4
   da7cc:	f7ff f92c 	bl	d9a28 <mbedtls_md_hmac_starts>
   da7d0:	bb88      	cbnz	r0, da836 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
   da7d2:	464a      	mov	r2, r9
   da7d4:	4629      	mov	r1, r5
   da7d6:	4620      	mov	r0, r4
   da7d8:	f7ff f986 	bl	d9ae8 <mbedtls_md_hmac_update>
   da7dc:	bb58      	cbnz	r0, da836 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
   da7de:	4629      	mov	r1, r5
   da7e0:	4620      	mov	r0, r4
   da7e2:	f7ff f993 	bl	d9b0c <mbedtls_md_hmac_finish>
   da7e6:	bb30      	cbnz	r0, da836 <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   da7e8:	4548      	cmp	r0, r9
   da7ea:	da07      	bge.n	da7fc <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
   da7ec:	f810 2008 	ldrb.w	r2, [r0, r8]
   da7f0:	5d43      	ldrb	r3, [r0, r5]
   da7f2:	4053      	eors	r3, r2
   da7f4:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   da7f8:	3001      	adds	r0, #1
   da7fa:	e7f5      	b.n	da7e8 <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
   da7fc:	f10a 0a01 	add.w	sl, sl, #1
   da800:	e7de      	b.n	da7c0 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
   da802:	454e      	cmp	r6, r9
   da804:	4635      	mov	r5, r6
   da806:	bf28      	it	cs
   da808:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
   da80a:	462a      	mov	r2, r5
   da80c:	4641      	mov	r1, r8
   da80e:	9831      	ldr	r0, [sp, #196]	; 0xc4
   da810:	f00c f999 	bl	e6b46 <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
   da814:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   da816:	442b      	add	r3, r5
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
   da818:	1b76      	subs	r6, r6, r5
        out_p += use_len;
   da81a:	9331      	str	r3, [sp, #196]	; 0xc4
   da81c:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
   da81e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   da822:	3301      	adds	r3, #1
   da824:	b2db      	uxtb	r3, r3
   da826:	7013      	strb	r3, [r2, #0]
   da828:	2b00      	cmp	r3, #0
   da82a:	d1a4      	bne.n	da776 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
   da82c:	ab03      	add	r3, sp, #12
   da82e:	4293      	cmp	r3, r2
   da830:	d1f5      	bne.n	da81e <mbedtls_pkcs5_pbkdf2_hmac+0xce>
   da832:	e7a0      	b.n	da776 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
   da834:	4630      	mov	r0, r6
}
   da836:	b025      	add	sp, #148	; 0x94
   da838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da83c <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
   da83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da840:	b0bb      	sub	sp, #236	; 0xec
   da842:	461f      	mov	r7, r3
    int ret, iterations = 0, keylen = 0;
   da844:	2300      	movs	r3, #0
   da846:	9306      	str	r3, [sp, #24]
   da848:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
   da84a:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
   da84c:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
   da84e:	6883      	ldr	r3, [r0, #8]
   da850:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
   da852:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da854:	6803      	ldr	r3, [r0, #0]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   da856:	f04f 0904 	mov.w	r9, #4
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da85a:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
   da85c:	460d      	mov	r5, r1
   da85e:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   da860:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da864:	f040 80c9 	bne.w	da9fa <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
   da868:	ab10      	add	r3, sp, #64	; 0x40
   da86a:	aa0a      	add	r2, sp, #40	; 0x28
   da86c:	4621      	mov	r1, r4
   da86e:	a808      	add	r0, sp, #32
   da870:	f7fc fdfd 	bl	d746e <mbedtls_asn1_get_alg>
   da874:	2800      	cmp	r0, #0
   da876:	d158      	bne.n	da92a <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   da878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da87a:	2a09      	cmp	r2, #9
   da87c:	d14c      	bne.n	da918 <mbedtls_pkcs5_pbes2+0xdc>
   da87e:	990c      	ldr	r1, [sp, #48]	; 0x30
   da880:	4861      	ldr	r0, [pc, #388]	; (daa08 <mbedtls_pkcs5_pbes2+0x1cc>)
   da882:	f00c f951 	bl	e6b28 <memcmp>
   da886:	2800      	cmp	r0, #0
   da888:	d146      	bne.n	da918 <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
   da88a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
   da88c:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
   da88e:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
   da890:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da894:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da896:	2b30      	cmp	r3, #48	; 0x30
   da898:	f040 80af 	bne.w	da9fa <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   da89c:	464b      	mov	r3, r9
   da89e:	aa17      	add	r2, sp, #92	; 0x5c
   da8a0:	4641      	mov	r1, r8
   da8a2:	a824      	add	r0, sp, #144	; 0x90
   da8a4:	f7fc fd06 	bl	d72b4 <mbedtls_asn1_get_tag>
   da8a8:	b9f8      	cbnz	r0, da8ea <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
   da8aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
   da8ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
   da8ae:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
   da8b0:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   da8b2:	4641      	mov	r1, r8
   da8b4:	aa06      	add	r2, sp, #24
   da8b6:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
   da8b8:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   da8ba:	f7fc fd28 	bl	d730e <mbedtls_asn1_get_int>
   da8be:	b9a0      	cbnz	r0, da8ea <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
   da8c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   da8c2:	4598      	cmp	r8, r3
   da8c4:	d022      	beq.n	da90c <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
   da8c6:	aa07      	add	r2, sp, #28
   da8c8:	4641      	mov	r1, r8
   da8ca:	a824      	add	r0, sp, #144	; 0x90
   da8cc:	f7fc fd1f 	bl	d730e <mbedtls_asn1_get_int>
   da8d0:	b110      	cbz	r0, da8d8 <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   da8d2:	f110 0f62 	cmn.w	r0, #98	; 0x62
   da8d6:	d108      	bne.n	da8ea <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
   da8d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   da8da:	4598      	cmp	r8, r3
   da8dc:	d016      	beq.n	da90c <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
   da8de:	aa2c      	add	r2, sp, #176	; 0xb0
   da8e0:	4641      	mov	r1, r8
   da8e2:	a824      	add	r0, sp, #144	; 0x90
   da8e4:	f7fc fe0b 	bl	d74fe <mbedtls_asn1_get_alg_null>
   da8e8:	b128      	cbz	r0, da8f6 <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   da8ea:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
   da8ee:	2800      	cmp	r0, #0
   da8f0:	f040 8086 	bne.w	daa00 <mbedtls_pkcs5_pbes2+0x1c4>
   da8f4:	e00a      	b.n	da90c <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
   da8f6:	f10d 0116 	add.w	r1, sp, #22
   da8fa:	a82c      	add	r0, sp, #176	; 0xb0
   da8fc:	f7ff fa8a 	bl	d9e14 <mbedtls_oid_get_md_hmac>
   da900:	b950      	cbnz	r0, da918 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
   da902:	9b24      	ldr	r3, [sp, #144]	; 0x90
   da904:	4598      	cmp	r8, r3
   da906:	d001      	beq.n	da90c <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   da908:	4840      	ldr	r0, [pc, #256]	; (daa0c <mbedtls_pkcs5_pbes2+0x1d0>)
   da90a:	e079      	b.n	daa00 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
   da90c:	f89d 0016 	ldrb.w	r0, [sp, #22]
   da910:	f7ff f808 	bl	d9924 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   da914:	4681      	mov	r9, r0
   da916:	b908      	cbnz	r0, da91c <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
   da918:	483d      	ldr	r0, [pc, #244]	; (daa10 <mbedtls_pkcs5_pbes2+0x1d4>)
   da91a:	e071      	b.n	daa00 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
   da91c:	ab13      	add	r3, sp, #76	; 0x4c
   da91e:	aa0d      	add	r2, sp, #52	; 0x34
   da920:	4621      	mov	r1, r4
   da922:	a808      	add	r0, sp, #32
   da924:	f7fc fda3 	bl	d746e <mbedtls_asn1_get_alg>
   da928:	b110      	cbz	r0, da930 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   da92a:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
   da92e:	e067      	b.n	daa00 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
   da930:	f10d 0117 	add.w	r1, sp, #23
   da934:	a80d      	add	r0, sp, #52	; 0x34
   da936:	f7ff fa3f 	bl	d9db8 <mbedtls_oid_get_cipher_alg>
   da93a:	2800      	cmp	r0, #0
   da93c:	d1ec      	bne.n	da918 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
   da93e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   da942:	f7fe fadf 	bl	d8f04 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   da946:	4680      	mov	r8, r0
   da948:	2800      	cmp	r0, #0
   da94a:	d0e5      	beq.n	da918 <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
   da94c:	6843      	ldr	r3, [r0, #4]
   da94e:	08db      	lsrs	r3, r3, #3
   da950:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
   da952:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da954:	2b04      	cmp	r3, #4
   da956:	d152      	bne.n	da9fe <mbedtls_pkcs5_pbes2+0x1c2>
   da958:	68c3      	ldr	r3, [r0, #12]
   da95a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da95c:	429a      	cmp	r2, r3
   da95e:	d14e      	bne.n	da9fe <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
   da960:	a819      	add	r0, sp, #100	; 0x64
   da962:	f7fe ffeb 	bl	d993c <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
   da966:	a82c      	add	r0, sp, #176	; 0xb0
   da968:	f7fe faee 	bl	d8f48 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
   da96c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da96e:	9915      	ldr	r1, [sp, #84]	; 0x54
   da970:	a824      	add	r0, sp, #144	; 0x90
   da972:	f00c f8e8 	bl	e6b46 <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   da976:	2201      	movs	r2, #1
   da978:	4649      	mov	r1, r9
   da97a:	a819      	add	r0, sp, #100	; 0x64
   da97c:	f7ff f804 	bl	d9988 <mbedtls_md_setup>
   da980:	4604      	mov	r4, r0
   da982:	2800      	cmp	r0, #0
   da984:	d131      	bne.n	da9ea <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
   da986:	9b07      	ldr	r3, [sp, #28]
   da988:	9302      	str	r3, [sp, #8]
   da98a:	9b06      	ldr	r3, [sp, #24]
   da98c:	9301      	str	r3, [sp, #4]
   da98e:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   da992:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da994:	9300      	str	r3, [sp, #0]
   da996:	f8cd 900c 	str.w	r9, [sp, #12]
   da99a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   da99c:	463a      	mov	r2, r7
   da99e:	4631      	mov	r1, r6
   da9a0:	a819      	add	r0, sp, #100	; 0x64
   da9a2:	f7ff fed5 	bl	da750 <mbedtls_pkcs5_pbkdf2_hmac>
   da9a6:	4604      	mov	r4, r0
   da9a8:	b9f8      	cbnz	r0, da9ea <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   da9aa:	4641      	mov	r1, r8
   da9ac:	a82c      	add	r0, sp, #176	; 0xb0
   da9ae:	f7fe fae1 	bl	d8f74 <mbedtls_cipher_setup>
   da9b2:	4604      	mov	r4, r0
   da9b4:	b9c8      	cbnz	r0, da9ea <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   da9b6:	9a07      	ldr	r2, [sp, #28]
   da9b8:	b26b      	sxtb	r3, r5
   da9ba:	00d2      	lsls	r2, r2, #3
   da9bc:	4649      	mov	r1, r9
   da9be:	a82c      	add	r0, sp, #176	; 0xb0
   da9c0:	f7fe faf2 	bl	d8fa8 <mbedtls_cipher_setkey>
   da9c4:	4604      	mov	r4, r0
   da9c6:	b980      	cbnz	r0, da9ea <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
   da9c8:	ab09      	add	r3, sp, #36	; 0x24
   da9ca:	9302      	str	r3, [sp, #8]
   da9cc:	9b44      	ldr	r3, [sp, #272]	; 0x110
   da9ce:	9301      	str	r3, [sp, #4]
   da9d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   da9d2:	9300      	str	r3, [sp, #0]
   da9d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da9d6:	9b42      	ldr	r3, [sp, #264]	; 0x108
   da9d8:	a924      	add	r1, sp, #144	; 0x90
   da9da:	a82c      	add	r0, sp, #176	; 0xb0
   da9dc:	f7fe fb9a 	bl	d9114 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
   da9e0:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
   da9e4:	2800      	cmp	r0, #0
   da9e6:	bf08      	it	eq
   da9e8:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
   da9ea:	a819      	add	r0, sp, #100	; 0x64
   da9ec:	f7fe ffab 	bl	d9946 <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
   da9f0:	a82c      	add	r0, sp, #176	; 0xb0
   da9f2:	f7fe faad 	bl	d8f50 <mbedtls_cipher_free>

    return( ret );
   da9f6:	4620      	mov	r0, r4
   da9f8:	e002      	b.n	daa00 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   da9fa:	4806      	ldr	r0, [pc, #24]	; (daa14 <mbedtls_pkcs5_pbes2+0x1d8>)
   da9fc:	e000      	b.n	daa00 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
   da9fe:	4806      	ldr	r0, [pc, #24]	; (daa18 <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
   daa00:	b03b      	add	sp, #236	; 0xec
   daa02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daa06:	bf00      	nop
   daa08:	000e864c 	.word	0x000e864c
   daa0c:	ffffd09a 	.word	0xffffd09a
   daa10:	ffffd180 	.word	0xffffd180
   daa14:	ffffd09e 	.word	0xffffd09e
   daa18:	ffffd100 	.word	0xffffd100

000daa1c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
   daa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   daa1e:	b08f      	sub	sp, #60	; 0x3c
   daa20:	460c      	mov	r4, r1
   daa22:	4615      	mov	r5, r2
   daa24:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
   daa26:	a80b      	add	r0, sp, #44	; 0x2c
   daa28:	f7fd f810 	bl	d7a4c <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   daa2c:	2330      	movs	r3, #48	; 0x30
   daa2e:	aa09      	add	r2, sp, #36	; 0x24
   daa30:	1961      	adds	r1, r4, r5
   daa32:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
   daa34:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   daa36:	f7fc fc3d 	bl	d72b4 <mbedtls_asn1_get_tag>
   daa3a:	b940      	cbnz	r0, daa4e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   daa3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daa3e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   daa40:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   daa42:	aa08      	add	r2, sp, #32
   daa44:	4631      	mov	r1, r6
   daa46:	a80a      	add	r0, sp, #40	; 0x28
   daa48:	f7fc fc61 	bl	d730e <mbedtls_asn1_get_int>
   daa4c:	b110      	cbz	r0, daa54 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   daa4e:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
   daa52:	e0d4      	b.n	dabfe <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
   daa54:	9d08      	ldr	r5, [sp, #32]
   daa56:	b9dd      	cbnz	r5, daa90 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   daa58:	2302      	movs	r3, #2
   daa5a:	aa09      	add	r2, sp, #36	; 0x24
   daa5c:	4631      	mov	r1, r6
   daa5e:	a80a      	add	r0, sp, #40	; 0x28
   daa60:	f7fc fc28 	bl	d72b4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   daa64:	4604      	mov	r4, r0
   daa66:	2800      	cmp	r0, #0
   daa68:	f040 80c5 	bne.w	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
   daa6c:	9006      	str	r0, [sp, #24]
   daa6e:	9005      	str	r0, [sp, #20]
   daa70:	9004      	str	r0, [sp, #16]
   daa72:	9003      	str	r0, [sp, #12]
   daa74:	9002      	str	r0, [sp, #8]
   daa76:	9001      	str	r0, [sp, #4]
   daa78:	9000      	str	r0, [sp, #0]
   daa7a:	4603      	mov	r3, r0
   daa7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   daa7e:	990a      	ldr	r1, [sp, #40]	; 0x28
   daa80:	4638      	mov	r0, r7
   daa82:	f000 fc99 	bl	db3b8 <mbedtls_rsa_import_raw>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   daa86:	4604      	mov	r4, r0
   daa88:	2800      	cmp	r0, #0
   daa8a:	f040 80b4 	bne.w	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
   daa8e:	e001      	b.n	daa94 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   daa90:	4d5c      	ldr	r5, [pc, #368]	; (dac04 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
   daa92:	e0b4      	b.n	dabfe <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   daa94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   daa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daa98:	4413      	add	r3, r2
   daa9a:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   daa9c:	aa09      	add	r2, sp, #36	; 0x24
   daa9e:	2302      	movs	r3, #2
   daaa0:	4631      	mov	r1, r6
   daaa2:	a80a      	add	r0, sp, #40	; 0x28
   daaa4:	f7fc fc06 	bl	d72b4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   daaa8:	4604      	mov	r4, r0
   daaaa:	2800      	cmp	r0, #0
   daaac:	f040 80a3 	bne.w	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   daab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daab2:	9306      	str	r3, [sp, #24]
   daab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daab6:	9305      	str	r3, [sp, #20]
   daab8:	9404      	str	r4, [sp, #16]
   daaba:	9403      	str	r4, [sp, #12]
   daabc:	9402      	str	r4, [sp, #8]
   daabe:	9401      	str	r4, [sp, #4]
   daac0:	9400      	str	r4, [sp, #0]
   daac2:	4623      	mov	r3, r4
   daac4:	4622      	mov	r2, r4
   daac6:	4621      	mov	r1, r4
   daac8:	4638      	mov	r0, r7
   daaca:	f000 fc75 	bl	db3b8 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   daace:	4604      	mov	r4, r0
   daad0:	2800      	cmp	r0, #0
   daad2:	f040 8090 	bne.w	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
   daad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   daad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daada:	4413      	add	r3, r2
   daadc:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   daade:	aa09      	add	r2, sp, #36	; 0x24
   daae0:	2302      	movs	r3, #2
   daae2:	4631      	mov	r1, r6
   daae4:	a80a      	add	r0, sp, #40	; 0x28
   daae6:	f7fc fbe5 	bl	d72b4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   daaea:	4604      	mov	r4, r0
   daaec:	2800      	cmp	r0, #0
   daaee:	f040 8082 	bne.w	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   daaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daaf4:	9304      	str	r3, [sp, #16]
   daaf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daaf8:	9406      	str	r4, [sp, #24]
   daafa:	9405      	str	r4, [sp, #20]
   daafc:	9303      	str	r3, [sp, #12]
   daafe:	9402      	str	r4, [sp, #8]
   dab00:	9401      	str	r4, [sp, #4]
   dab02:	9400      	str	r4, [sp, #0]
   dab04:	4623      	mov	r3, r4
   dab06:	4622      	mov	r2, r4
   dab08:	4621      	mov	r1, r4
   dab0a:	4638      	mov	r0, r7
   dab0c:	f000 fc54 	bl	db3b8 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dab10:	4604      	mov	r4, r0
   dab12:	2800      	cmp	r0, #0
   dab14:	d16f      	bne.n	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dab16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dab18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dab1a:	4413      	add	r3, r2
   dab1c:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dab1e:	aa09      	add	r2, sp, #36	; 0x24
   dab20:	2302      	movs	r3, #2
   dab22:	4631      	mov	r1, r6
   dab24:	a80a      	add	r0, sp, #40	; 0x28
   dab26:	f7fc fbc5 	bl	d72b4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dab2a:	4604      	mov	r4, r0
   dab2c:	2800      	cmp	r0, #0
   dab2e:	d162      	bne.n	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
   dab30:	2200      	movs	r2, #0
   dab32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dab34:	9300      	str	r3, [sp, #0]
   dab36:	9206      	str	r2, [sp, #24]
   dab38:	9205      	str	r2, [sp, #20]
   dab3a:	9204      	str	r2, [sp, #16]
   dab3c:	9203      	str	r2, [sp, #12]
   dab3e:	9202      	str	r2, [sp, #8]
   dab40:	9201      	str	r2, [sp, #4]
   dab42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dab44:	4611      	mov	r1, r2
   dab46:	4638      	mov	r0, r7
   dab48:	f000 fc36 	bl	db3b8 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dab4c:	4604      	mov	r4, r0
   dab4e:	2800      	cmp	r0, #0
   dab50:	d151      	bne.n	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dab52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dab54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dab56:	4413      	add	r3, r2
   dab58:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dab5a:	aa09      	add	r2, sp, #36	; 0x24
   dab5c:	2302      	movs	r3, #2
   dab5e:	4631      	mov	r1, r6
   dab60:	a80a      	add	r0, sp, #40	; 0x28
   dab62:	f7fc fba7 	bl	d72b4 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dab66:	4604      	mov	r4, r0
   dab68:	2800      	cmp	r0, #0
   dab6a:	d144      	bne.n	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
   dab6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dab6e:	9302      	str	r3, [sp, #8]
   dab70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dab72:	9406      	str	r4, [sp, #24]
   dab74:	9405      	str	r4, [sp, #20]
   dab76:	9404      	str	r4, [sp, #16]
   dab78:	9403      	str	r4, [sp, #12]
   dab7a:	9301      	str	r3, [sp, #4]
   dab7c:	9400      	str	r4, [sp, #0]
   dab7e:	4623      	mov	r3, r4
   dab80:	4622      	mov	r2, r4
   dab82:	4621      	mov	r1, r4
   dab84:	4638      	mov	r0, r7
   dab86:	f000 fc17 	bl	db3b8 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dab8a:	4604      	mov	r4, r0
   dab8c:	2800      	cmp	r0, #0
   dab8e:	d132      	bne.n	dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dab90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dab92:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dab94:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   dab96:	4413      	add	r3, r2
   dab98:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dab9a:	f000 fc4b 	bl	db434 <mbedtls_rsa_complete>
   dab9e:	4604      	mov	r4, r0
   daba0:	b9c8      	cbnz	r0, dabd6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   daba2:	aa0b      	add	r2, sp, #44	; 0x2c
   daba4:	4631      	mov	r1, r6
   daba6:	a80a      	add	r0, sp, #40	; 0x28
   daba8:	f7fc fbd5 	bl	d7356 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dabac:	4604      	mov	r4, r0
   dabae:	bb10      	cbnz	r0, dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
   dabb0:	aa0b      	add	r2, sp, #44	; 0x2c
   dabb2:	4631      	mov	r1, r6
   dabb4:	a80a      	add	r0, sp, #40	; 0x28
   dabb6:	f7fc fbce 	bl	d7356 <mbedtls_asn1_get_mpi>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dabba:	4604      	mov	r4, r0
   dabbc:	b9d8      	cbnz	r0, dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
   dabbe:	aa0b      	add	r2, sp, #44	; 0x2c
   dabc0:	4631      	mov	r1, r6
   dabc2:	a80a      	add	r0, sp, #40	; 0x28
   dabc4:	f7fc fbc7 	bl	d7356 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dabc8:	4604      	mov	r4, r0
   dabca:	b9a0      	cbnz	r0, dabf6 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
   dabcc:	4b0e      	ldr	r3, [pc, #56]	; (dac08 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
   dabce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dabd0:	4296      	cmp	r6, r2
   dabd2:	bf18      	it	ne
   dabd4:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
   dabd6:	a80b      	add	r0, sp, #44	; 0x2c
   dabd8:	f7fc ff3f 	bl	d7a5a <mbedtls_mpi_free>

    if( ret != 0 )
   dabdc:	b17c      	cbz	r4, dabfe <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
   dabde:	f64f 7380 	movw	r3, #65408	; 0xff80
   dabe2:	4023      	ands	r3, r4
   dabe4:	b913      	cbnz	r3, dabec <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
   dabe6:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
   dabea:	e000      	b.n	dabee <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
   dabec:	4d07      	ldr	r5, [pc, #28]	; (dac0c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
   dabee:	4638      	mov	r0, r7
   dabf0:	f001 fcbe 	bl	dc570 <mbedtls_rsa_free>
   dabf4:	e003      	b.n	dabfe <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
   dabf6:	a80b      	add	r0, sp, #44	; 0x2c
   dabf8:	f7fc ff2f 	bl	d7a5a <mbedtls_mpi_free>
   dabfc:	e7ef      	b.n	dabde <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
   dabfe:	4628      	mov	r0, r5
   dac00:	b00f      	add	sp, #60	; 0x3c
   dac02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dac04:	ffffc280 	.word	0xffffc280
   dac08:	ffffc29a 	.word	0xffffc29a
   dac0c:	ffffc300 	.word	0xffffc300

000dac10 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
   dac10:	b530      	push	{r4, r5, lr}
   dac12:	4615      	mov	r5, r2
   dac14:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
   dac16:	2200      	movs	r2, #0
   dac18:	601a      	str	r2, [r3, #0]
   dac1a:	605a      	str	r2, [r3, #4]
   dac1c:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dac1e:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
   dac20:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dac22:	f7fc fc24 	bl	d746e <mbedtls_asn1_get_alg>
   dac26:	b110      	cbz	r0, dac2e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
   dac28:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
   dac2c:	e014      	b.n	dac58 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
   dac2e:	4629      	mov	r1, r5
   dac30:	a801      	add	r0, sp, #4
   dac32:	f7ff f8a7 	bl	d9d84 <mbedtls_oid_get_pk_alg>
   dac36:	b960      	cbnz	r0, dac52 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dac38:	782b      	ldrb	r3, [r5, #0]
   dac3a:	2b01      	cmp	r3, #1
   dac3c:	d10c      	bne.n	dac58 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dac3e:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dac40:	2b05      	cmp	r3, #5
   dac42:	d000      	beq.n	dac46 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dac44:	b93b      	cbnz	r3, dac56 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
   dac46:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dac48:	4804      	ldr	r0, [pc, #16]	; (dac5c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
   dac4a:	2b00      	cmp	r3, #0
   dac4c:	bf08      	it	eq
   dac4e:	2000      	moveq	r0, #0
   dac50:	e002      	b.n	dac58 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dac52:	4803      	ldr	r0, [pc, #12]	; (dac60 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
   dac54:	e000      	b.n	dac58 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dac56:	4801      	ldr	r0, [pc, #4]	; (dac5c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
   dac58:	b005      	add	sp, #20
   dac5a:	bd30      	pop	{r4, r5, pc}
   dac5c:	ffffc580 	.word	0xffffc580
   dac60:	ffffc380 	.word	0xffffc380

000dac64 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   dac64:	b530      	push	{r4, r5, lr}
   dac66:	b089      	sub	sp, #36	; 0x24
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dac68:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   dac6a:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   dac6c:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dac6e:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dac72:	4411      	add	r1, r2
   dac74:	2330      	movs	r3, #48	; 0x30
   dac76:	aa03      	add	r2, sp, #12
   dac78:	a804      	add	r0, sp, #16
   dac7a:	f7fc fb1b 	bl	d72b4 <mbedtls_asn1_get_tag>
   dac7e:	b9c8      	cbnz	r0, dacb4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dac80:	9b03      	ldr	r3, [sp, #12]
   dac82:	9c04      	ldr	r4, [sp, #16]
   dac84:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dac86:	aa02      	add	r2, sp, #8
   dac88:	4621      	mov	r1, r4
   dac8a:	a804      	add	r0, sp, #16
   dac8c:	f7fc fb3f 	bl	d730e <mbedtls_asn1_get_int>
   dac90:	b980      	cbnz	r0, dacb4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
   dac92:	9b02      	ldr	r3, [sp, #8]
   dac94:	bb7b      	cbnz	r3, dacf6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
   dac96:	ab05      	add	r3, sp, #20
   dac98:	f10d 0207 	add.w	r2, sp, #7
   dac9c:	4621      	mov	r1, r4
   dac9e:	a804      	add	r0, sp, #16
   daca0:	f7ff ffb6 	bl	dac10 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   daca4:	b930      	cbnz	r0, dacb4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   daca6:	2304      	movs	r3, #4
   daca8:	aa03      	add	r2, sp, #12
   dacaa:	4621      	mov	r1, r4
   dacac:	a804      	add	r0, sp, #16
   dacae:	f7fc fb01 	bl	d72b4 <mbedtls_asn1_get_tag>
   dacb2:	b110      	cbz	r0, dacba <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x56>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dacb4:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   dacb8:	e022      	b.n	dad00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( len < 1 )
   dacba:	9b03      	ldr	r3, [sp, #12]
   dacbc:	b1eb      	cbz	r3, dacfa <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x96>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dacbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   dacc2:	f7ff f9a3 	bl	da00c <mbedtls_pk_info_from_type>
   dacc6:	4601      	mov	r1, r0
   dacc8:	b908      	cbnz	r0, dacce <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dacca:	480e      	ldr	r0, [pc, #56]	; (dad04 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa0>)
   daccc:	e018      	b.n	dad00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dacce:	4628      	mov	r0, r5
   dacd0:	f7ff f9a4 	bl	da01c <mbedtls_pk_setup>
   dacd4:	b9a0      	cbnz	r0, dad00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
   dacd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   dacda:	2b01      	cmp	r3, #1
   dacdc:	d1f5      	bne.n	dacca <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x66>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
   dacde:	9a03      	ldr	r2, [sp, #12]
   dace0:	9904      	ldr	r1, [sp, #16]
   dace2:	6868      	ldr	r0, [r5, #4]
   dace4:	f7ff fe9a 	bl	daa1c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
   dace8:	4604      	mov	r4, r0
   dacea:	b140      	cbz	r0, dacfe <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9a>
        {
            mbedtls_pk_free( pk );
   dacec:	4628      	mov	r0, r5
   dacee:	f7ff f97b 	bl	d9fe8 <mbedtls_pk_free>
            return( ret );
   dacf2:	4620      	mov	r0, r4
   dacf4:	e004      	b.n	dad00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
   dacf6:	4804      	ldr	r0, [pc, #16]	; (dad08 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa4>)
   dacf8:	e002      	b.n	dad00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dacfa:	4804      	ldr	r0, [pc, #16]	; (dad0c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa8>)
   dacfc:	e000      	b.n	dad00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
   dacfe:	2000      	movs	r0, #0
}
   dad00:	b009      	add	sp, #36	; 0x24
   dad02:	bd30      	pop	{r4, r5, pc}
   dad04:	ffffc380 	.word	0xffffc380
   dad08:	ffffc280 	.word	0xffffc280
   dad0c:	ffffc2a0 	.word	0xffffc2a0

000dad10 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   dad10:	b5f0      	push	{r4, r5, r6, r7, lr}
   dad12:	b091      	sub	sp, #68	; 0x44
   dad14:	4606      	mov	r6, r0
   dad16:	9d16      	ldr	r5, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
   dad18:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   dad1a:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
   dad1c:	4411      	add	r1, r2

    if( pwdlen == 0 )
   dad1e:	2d00      	cmp	r5, #0
   dad20:	d066      	beq.n	dadf0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dad22:	2330      	movs	r3, #48	; 0x30
   dad24:	aa08      	add	r2, sp, #32
   dad26:	a809      	add	r0, sp, #36	; 0x24
   dad28:	f7fc fac4 	bl	d72b4 <mbedtls_asn1_get_tag>
   dad2c:	b980      	cbnz	r0, dad50 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   dad2e:	9b08      	ldr	r3, [sp, #32]
   dad30:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dad32:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   dad34:	aa0a      	add	r2, sp, #40	; 0x28
   dad36:	ab0d      	add	r3, sp, #52	; 0x34
   dad38:	4621      	mov	r1, r4
   dad3a:	a809      	add	r0, sp, #36	; 0x24
   dad3c:	f7fc fb97 	bl	d746e <mbedtls_asn1_get_alg>
   dad40:	b930      	cbnz	r0, dad50 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dad42:	2304      	movs	r3, #4
   dad44:	aa08      	add	r2, sp, #32
   dad46:	4621      	mov	r1, r4
   dad48:	a809      	add	r0, sp, #36	; 0x24
   dad4a:	f7fc fab3 	bl	d72b4 <mbedtls_asn1_get_tag>
   dad4e:	b110      	cbz	r0, dad56 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dad50:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   dad54:	e055      	b.n	dae02 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dad56:	f10d 011f 	add.w	r1, sp, #31
   dad5a:	f10d 021e 	add.w	r2, sp, #30
   dad5e:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
   dad60:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dad62:	f7ff f871 	bl	d9e48 <mbedtls_oid_get_pkcs12_pbe_alg>
   dad66:	4601      	mov	r1, r0
   dad68:	b9a0      	cbnz	r0, dad94 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
   dad6a:	9808      	ldr	r0, [sp, #32]
   dad6c:	9003      	str	r0, [sp, #12]
   dad6e:	9809      	ldr	r0, [sp, #36]	; 0x24
   dad70:	9002      	str	r0, [sp, #8]
   dad72:	f89d 301f 	ldrb.w	r3, [sp, #31]
   dad76:	f89d 201e 	ldrb.w	r2, [sp, #30]
   dad7a:	9404      	str	r4, [sp, #16]
   dad7c:	9501      	str	r5, [sp, #4]
   dad7e:	9700      	str	r7, [sp, #0]
   dad80:	a80d      	add	r0, sp, #52	; 0x34
   dad82:	f7ff fc19 	bl	da5b8 <mbedtls_pkcs12_pbe>
   dad86:	2800      	cmp	r0, #0
   dad88:	d036      	beq.n	dadf8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
   dad8a:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
   dad8e:	d138      	bne.n	dae02 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dad90:	481d      	ldr	r0, [pc, #116]	; (dae08 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
   dad92:	e036      	b.n	dae02 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
   dad94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dad96:	2a0a      	cmp	r2, #10
   dad98:	d114      	bne.n	dadc4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
   dad9a:	990c      	ldr	r1, [sp, #48]	; 0x30
   dad9c:	481b      	ldr	r0, [pc, #108]	; (dae0c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
   dad9e:	f00b fec3 	bl	e6b28 <memcmp>
   dada2:	4601      	mov	r1, r0
   dada4:	bb30      	cbnz	r0, dadf4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
   dada6:	9b08      	ldr	r3, [sp, #32]
   dada8:	9301      	str	r3, [sp, #4]
   dadaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dadac:	9300      	str	r3, [sp, #0]
   dadae:	9402      	str	r4, [sp, #8]
   dadb0:	462b      	mov	r3, r5
   dadb2:	463a      	mov	r2, r7
   dadb4:	a80d      	add	r0, sp, #52	; 0x34
   dadb6:	f7ff fb21 	bl	da3fc <mbedtls_pkcs12_pbe_sha1_rc4_128>
   dadba:	bb10      	cbnz	r0, dae02 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dadbc:	7823      	ldrb	r3, [r4, #0]
   dadbe:	2b30      	cmp	r3, #48	; 0x30
   dadc0:	d01a      	beq.n	dadf8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
   dadc2:	e7e5      	b.n	dad90 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
   dadc4:	2a09      	cmp	r2, #9
   dadc6:	d115      	bne.n	dadf4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
   dadc8:	990c      	ldr	r1, [sp, #48]	; 0x30
   dadca:	4811      	ldr	r0, [pc, #68]	; (dae10 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
   dadcc:	f00b feac 	bl	e6b28 <memcmp>
   dadd0:	4601      	mov	r1, r0
   dadd2:	b978      	cbnz	r0, dadf4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
   dadd4:	9b08      	ldr	r3, [sp, #32]
   dadd6:	9301      	str	r3, [sp, #4]
   dadd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dadda:	9300      	str	r3, [sp, #0]
   daddc:	9402      	str	r4, [sp, #8]
   dadde:	462b      	mov	r3, r5
   dade0:	463a      	mov	r2, r7
   dade2:	a80d      	add	r0, sp, #52	; 0x34
   dade4:	f7ff fd2a 	bl	da83c <mbedtls_pkcs5_pbes2>
   dade8:	b130      	cbz	r0, dadf8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
   dadea:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
   dadee:	e7ce      	b.n	dad8e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dadf0:	4808      	ldr	r0, [pc, #32]	; (dae14 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
   dadf2:	e006      	b.n	dae02 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   dadf4:	4808      	ldr	r0, [pc, #32]	; (dae18 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
   dadf6:	e004      	b.n	dae02 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
   dadf8:	9a08      	ldr	r2, [sp, #32]
   dadfa:	4621      	mov	r1, r4
   dadfc:	4630      	mov	r0, r6
   dadfe:	f7ff ff31 	bl	dac64 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
   dae02:	b011      	add	sp, #68	; 0x44
   dae04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dae06:	bf00      	nop
   dae08:	ffffc480 	.word	0xffffc480
   dae0c:	000e8656 	.word	0x000e8656
   dae10:	000e8661 	.word	0x000e8661
   dae14:	ffffc400 	.word	0xffffc400
   dae18:	ffffc680 	.word	0xffffc680

000dae1c <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dae1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dae1e:	b08f      	sub	sp, #60	; 0x3c
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dae20:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dae22:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dae24:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dae28:	aa09      	add	r2, sp, #36	; 0x24
   dae2a:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   dae2c:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dae2e:	f7fc fa41 	bl	d72b4 <mbedtls_asn1_get_tag>
   dae32:	b110      	cbz	r0, dae3a <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dae34:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   dae38:	e090      	b.n	daf5c <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
   dae3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dae3c:	682e      	ldr	r6, [r5, #0]
   dae3e:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
   dae40:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   dae44:	ab0b      	add	r3, sp, #44	; 0x2c
   dae46:	4631      	mov	r1, r6
   dae48:	4628      	mov	r0, r5
   dae4a:	f7ff fee1 	bl	dac10 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dae4e:	2800      	cmp	r0, #0
   dae50:	f040 8084 	bne.w	daf5c <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   dae54:	aa09      	add	r2, sp, #36	; 0x24
   dae56:	4631      	mov	r1, r6
   dae58:	4628      	mov	r0, r5
   dae5a:	f7fc fab4 	bl	d73c6 <mbedtls_asn1_get_bitstring_null>
   dae5e:	b110      	cbz	r0, dae66 <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dae60:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
   dae64:	e07a      	b.n	daf5c <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
   dae66:	682a      	ldr	r2, [r5, #0]
   dae68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dae6a:	4413      	add	r3, r2
   dae6c:	429e      	cmp	r6, r3
   dae6e:	d169      	bne.n	daf44 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dae70:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   dae74:	f7ff f8ca 	bl	da00c <mbedtls_pk_info_from_type>
   dae78:	4601      	mov	r1, r0
   dae7a:	2800      	cmp	r0, #0
   dae7c:	d064      	beq.n	daf48 <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dae7e:	4638      	mov	r0, r7
   dae80:	f7ff f8cc 	bl	da01c <mbedtls_pk_setup>
   dae84:	4604      	mov	r4, r0
   dae86:	2800      	cmp	r0, #0
   dae88:	d160      	bne.n	daf4c <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
   dae8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   dae8e:	2b01      	cmp	r3, #1
   dae90:	d162      	bne.n	daf58 <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dae92:	2330      	movs	r3, #48	; 0x30
   dae94:	aa0a      	add	r2, sp, #40	; 0x28
   dae96:	4631      	mov	r1, r6
   dae98:	4628      	mov	r0, r5
   dae9a:	687c      	ldr	r4, [r7, #4]
   dae9c:	f7fc fa0a 	bl	d72b4 <mbedtls_asn1_get_tag>
   daea0:	bb28      	cbnz	r0, daeee <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
   daea2:	682a      	ldr	r2, [r5, #0]
   daea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daea6:	4413      	add	r3, r2
   daea8:	429e      	cmp	r6, r3
   daeaa:	d146      	bne.n	daf3a <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   daeac:	2302      	movs	r3, #2
   daeae:	aa0a      	add	r2, sp, #40	; 0x28
   daeb0:	4631      	mov	r1, r6
   daeb2:	4628      	mov	r0, r5
   daeb4:	f7fc f9fe 	bl	d72b4 <mbedtls_asn1_get_tag>
   daeb8:	b9c8      	cbnz	r0, daeee <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
   daeba:	2300      	movs	r3, #0
   daebc:	9306      	str	r3, [sp, #24]
   daebe:	9305      	str	r3, [sp, #20]
   daec0:	9304      	str	r3, [sp, #16]
   daec2:	9303      	str	r3, [sp, #12]
   daec4:	9302      	str	r3, [sp, #8]
   daec6:	9301      	str	r3, [sp, #4]
   daec8:	9300      	str	r3, [sp, #0]
   daeca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   daecc:	6829      	ldr	r1, [r5, #0]
   daece:	4620      	mov	r0, r4
   daed0:	f000 fa72 	bl	db3b8 <mbedtls_rsa_import_raw>
   daed4:	2800      	cmp	r0, #0
   daed6:	d13d      	bne.n	daf54 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
   daed8:	682a      	ldr	r2, [r5, #0]
   daeda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daedc:	4413      	add	r3, r2
   daede:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   daee0:	aa0a      	add	r2, sp, #40	; 0x28
   daee2:	2302      	movs	r3, #2
   daee4:	4631      	mov	r1, r6
   daee6:	4628      	mov	r0, r5
   daee8:	f7fc f9e4 	bl	d72b4 <mbedtls_asn1_get_tag>
   daeec:	b118      	cbz	r0, daef6 <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   daeee:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
   daef2:	b1fc      	cbz	r4, daf34 <mbedtls_pk_parse_subpubkey+0x118>
   daef4:	e022      	b.n	daf3c <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   daef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daef8:	9306      	str	r3, [sp, #24]
   daefa:	682b      	ldr	r3, [r5, #0]
   daefc:	9305      	str	r3, [sp, #20]
   daefe:	9004      	str	r0, [sp, #16]
   daf00:	9003      	str	r0, [sp, #12]
   daf02:	9002      	str	r0, [sp, #8]
   daf04:	9001      	str	r0, [sp, #4]
   daf06:	9000      	str	r0, [sp, #0]
   daf08:	4603      	mov	r3, r0
   daf0a:	4602      	mov	r2, r0
   daf0c:	4601      	mov	r1, r0
   daf0e:	4620      	mov	r0, r4
   daf10:	f000 fa52 	bl	db3b8 <mbedtls_rsa_import_raw>
   daf14:	b9f0      	cbnz	r0, daf54 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
   daf16:	682a      	ldr	r2, [r5, #0]
   daf18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daf1a:	4413      	add	r3, r2
   daf1c:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
   daf1e:	4620      	mov	r0, r4
   daf20:	f000 fa88 	bl	db434 <mbedtls_rsa_complete>
   daf24:	b9b0      	cbnz	r0, daf54 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
   daf26:	4620      	mov	r0, r4
   daf28:	f000 fb40 	bl	db5ac <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
   daf2c:	b990      	cbnz	r0, daf54 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
   daf2e:	682b      	ldr	r3, [r5, #0]
   daf30:	429e      	cmp	r6, r3
   daf32:	d102      	bne.n	daf3a <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
   daf34:	682b      	ldr	r3, [r5, #0]
   daf36:	429e      	cmp	r6, r3
   daf38:	d00a      	beq.n	daf50 <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   daf3a:	4c09      	ldr	r4, [pc, #36]	; (daf60 <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
   daf3c:	4638      	mov	r0, r7
   daf3e:	f7ff f853 	bl	d9fe8 <mbedtls_pk_free>
   daf42:	e003      	b.n	daf4c <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   daf44:	4806      	ldr	r0, [pc, #24]	; (daf60 <mbedtls_pk_parse_subpubkey+0x144>)
   daf46:	e009      	b.n	daf5c <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   daf48:	4806      	ldr	r0, [pc, #24]	; (daf64 <mbedtls_pk_parse_subpubkey+0x148>)
   daf4a:	e007      	b.n	daf5c <mbedtls_pk_parse_subpubkey+0x140>
   daf4c:	4620      	mov	r0, r4
   daf4e:	e005      	b.n	daf5c <mbedtls_pk_parse_subpubkey+0x140>
   daf50:	2000      	movs	r0, #0
   daf52:	e003      	b.n	daf5c <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
   daf54:	4c04      	ldr	r4, [pc, #16]	; (daf68 <mbedtls_pk_parse_subpubkey+0x14c>)
   daf56:	e7f1      	b.n	daf3c <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
   daf58:	4c02      	ldr	r4, [pc, #8]	; (daf64 <mbedtls_pk_parse_subpubkey+0x148>)
   daf5a:	e7ef      	b.n	daf3c <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
   daf5c:	b00f      	add	sp, #60	; 0x3c
   daf5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   daf60:	ffffc49a 	.word	0xffffc49a
   daf64:	ffffc380 	.word	0xffffc380
   daf68:	ffffc500 	.word	0xffffc500

000daf6c <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
   daf6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   daf70:	b089      	sub	sp, #36	; 0x24
   daf72:	4605      	mov	r5, r0
   daf74:	4616      	mov	r6, r2

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
   daf76:	a805      	add	r0, sp, #20
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
   daf78:	460c      	mov	r4, r1
   daf7a:	461f      	mov	r7, r3
   daf7c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
   daf80:	f7fe ff7e 	bl	d9e80 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
   daf84:	2e00      	cmp	r6, #0
   daf86:	f000 80b8 	beq.w	db0fa <mbedtls_pk_parse_key+0x18e>
   daf8a:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
   daf8e:	f814 3009 	ldrb.w	r3, [r4, r9]
   daf92:	b11b      	cbz	r3, daf9c <mbedtls_pk_parse_key+0x30>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
   daf94:	f814 3009 	ldrb.w	r3, [r4, r9]
   daf98:	bb6b      	cbnz	r3, daff6 <mbedtls_pk_parse_key+0x8a>
   daf9a:	e031      	b.n	db000 <mbedtls_pk_parse_key+0x94>
#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   daf9c:	ab04      	add	r3, sp, #16
   daf9e:	9302      	str	r3, [sp, #8]
   dafa0:	e88d 0180 	stmia.w	sp, {r7, r8}
   dafa4:	4623      	mov	r3, r4
   dafa6:	4a57      	ldr	r2, [pc, #348]	; (db104 <mbedtls_pk_parse_key+0x198>)
   dafa8:	4957      	ldr	r1, [pc, #348]	; (db108 <mbedtls_pk_parse_key+0x19c>)
   dafaa:	a805      	add	r0, sp, #20
   dafac:	f7fe ff6e 	bl	d9e8c <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );

    if( ret == 0 )
   dafb0:	b978      	cbnz	r0, dafd2 <mbedtls_pk_parse_key+0x66>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dafb2:	2001      	movs	r0, #1
   dafb4:	f7ff f82a 	bl	da00c <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dafb8:	4601      	mov	r1, r0
   dafba:	4628      	mov	r0, r5
   dafbc:	f7ff f82e 	bl	da01c <mbedtls_pk_setup>
   dafc0:	4604      	mov	r4, r0
   dafc2:	2800      	cmp	r0, #0
   dafc4:	d160      	bne.n	db088 <mbedtls_pk_parse_key+0x11c>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   dafc6:	9a06      	ldr	r2, [sp, #24]
   dafc8:	9905      	ldr	r1, [sp, #20]
   dafca:	6868      	ldr	r0, [r5, #4]
   dafcc:	f7ff fd26 	bl	daa1c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
   dafd0:	e058      	b.n	db084 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dafd2:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dafd6:	d101      	bne.n	dafdc <mbedtls_pk_parse_key+0x70>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dafd8:	484c      	ldr	r0, [pc, #304]	; (db10c <mbedtls_pk_parse_key+0x1a0>)
   dafda:	e08f      	b.n	db0fc <mbedtls_pk_parse_key+0x190>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dafdc:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dafe0:	f000 8084 	beq.w	db0ec <mbedtls_pk_parse_key+0x180>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dafe4:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dafe8:	f040 8088 	bne.w	db0fc <mbedtls_pk_parse_key+0x190>
   dafec:	e7d2      	b.n	daf94 <mbedtls_pk_parse_key+0x28>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dafee:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   daff2:	f040 8083 	bne.w	db0fc <mbedtls_pk_parse_key+0x190>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
   daff6:	19a3      	adds	r3, r4, r6
   daff8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   daffc:	b9ab      	cbnz	r3, db02a <mbedtls_pk_parse_key+0xbe>
   daffe:	e02d      	b.n	db05c <mbedtls_pk_parse_key+0xf0>

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   db000:	aa04      	add	r2, sp, #16
   db002:	9202      	str	r2, [sp, #8]
   db004:	9301      	str	r3, [sp, #4]
   db006:	9300      	str	r3, [sp, #0]
   db008:	4a41      	ldr	r2, [pc, #260]	; (db110 <mbedtls_pk_parse_key+0x1a4>)
   db00a:	4942      	ldr	r1, [pc, #264]	; (db114 <mbedtls_pk_parse_key+0x1a8>)
   db00c:	4623      	mov	r3, r4
   db00e:	a805      	add	r0, sp, #20
   db010:	f7fe ff3c 	bl	d9e8c <mbedtls_pem_read_buffer>
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
   db014:	2800      	cmp	r0, #0
   db016:	d1ea      	bne.n	dafee <mbedtls_pk_parse_key+0x82>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
   db018:	9a06      	ldr	r2, [sp, #24]
   db01a:	9905      	ldr	r1, [sp, #20]
   db01c:	4628      	mov	r0, r5
   db01e:	f7ff fe21 	bl	dac64 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   db022:	e02f      	b.n	db084 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   db024:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   db028:	d168      	bne.n	db0fc <mbedtls_pk_parse_key+0x190>
        unsigned char *key_copy;

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
   db02a:	4631      	mov	r1, r6
   db02c:	2001      	movs	r0, #1
   db02e:	f00b fd65 	bl	e6afc <calloc>
   db032:	4681      	mov	r9, r0
   db034:	2800      	cmp	r0, #0
   db036:	d05b      	beq.n	db0f0 <mbedtls_pk_parse_key+0x184>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
   db038:	4632      	mov	r2, r6
   db03a:	4621      	mov	r1, r4
   db03c:	f00b fd83 	bl	e6b46 <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   db040:	463b      	mov	r3, r7
   db042:	4632      	mov	r2, r6
   db044:	4649      	mov	r1, r9
   db046:	f8cd 8000 	str.w	r8, [sp]
   db04a:	4628      	mov	r0, r5
   db04c:	f7ff fe60 	bl	dad10 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
   db050:	eb09 0106 	add.w	r1, r9, r6
   db054:	4607      	mov	r7, r0
   db056:	464b      	mov	r3, r9

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   db058:	2200      	movs	r2, #0
   db05a:	e01d      	b.n	db098 <mbedtls_pk_parse_key+0x12c>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   db05c:	aa04      	add	r2, sp, #16
   db05e:	9202      	str	r2, [sp, #8]
   db060:	9301      	str	r3, [sp, #4]
   db062:	9300      	str	r3, [sp, #0]
   db064:	4a2c      	ldr	r2, [pc, #176]	; (db118 <mbedtls_pk_parse_key+0x1ac>)
   db066:	492d      	ldr	r1, [pc, #180]	; (db11c <mbedtls_pk_parse_key+0x1b0>)
   db068:	4623      	mov	r3, r4
   db06a:	a805      	add	r0, sp, #20
   db06c:	f7fe ff0e 	bl	d9e8c <mbedtls_pem_read_buffer>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
   db070:	2800      	cmp	r0, #0
   db072:	d1d7      	bne.n	db024 <mbedtls_pk_parse_key+0xb8>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   db074:	f8cd 8000 	str.w	r8, [sp]
   db078:	463b      	mov	r3, r7
   db07a:	9a06      	ldr	r2, [sp, #24]
   db07c:	9905      	ldr	r1, [sp, #20]
   db07e:	4628      	mov	r0, r5
   db080:	f7ff fe46 	bl	dad10 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
   db084:	4604      	mov	r4, r0
   db086:	b110      	cbz	r0, db08e <mbedtls_pk_parse_key+0x122>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
   db088:	4628      	mov	r0, r5
   db08a:	f7fe ffad 	bl	d9fe8 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
   db08e:	a805      	add	r0, sp, #20
   db090:	f7fe ff8a 	bl	d9fa8 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   db094:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
   db096:	e031      	b.n	db0fc <mbedtls_pk_parse_key+0x190>

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   db098:	428b      	cmp	r3, r1
   db09a:	d002      	beq.n	db0a2 <mbedtls_pk_parse_key+0x136>
   db09c:	701a      	strb	r2, [r3, #0]
   db09e:	3301      	adds	r3, #1
   db0a0:	e7fa      	b.n	db098 <mbedtls_pk_parse_key+0x12c>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );

        mbedtls_zeroize( key_copy, keylen );
        mbedtls_free( key_copy );
   db0a2:	4648      	mov	r0, r9
   db0a4:	f008 ff88 	bl	e3fb8 <free>
    }

    if( ret == 0 )
   db0a8:	b90f      	cbnz	r7, db0ae <mbedtls_pk_parse_key+0x142>
        return( 0 );
   db0aa:	2000      	movs	r0, #0
   db0ac:	e026      	b.n	db0fc <mbedtls_pk_parse_key+0x190>

    mbedtls_pk_free( pk );
   db0ae:	4628      	mov	r0, r5
   db0b0:	f7fe ff9a 	bl	d9fe8 <mbedtls_pk_free>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
   db0b4:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
   db0b8:	d08e      	beq.n	dafd8 <mbedtls_pk_parse_key+0x6c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
   db0ba:	4632      	mov	r2, r6
   db0bc:	4621      	mov	r1, r4
   db0be:	4628      	mov	r0, r5
   db0c0:	f7ff fdd0 	bl	dac64 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   db0c4:	2800      	cmp	r0, #0
   db0c6:	d0f0      	beq.n	db0aa <mbedtls_pk_parse_key+0x13e>
        return( 0 );

    mbedtls_pk_free( pk );
   db0c8:	4628      	mov	r0, r5
   db0ca:	f7fe ff8d 	bl	d9fe8 <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   db0ce:	2001      	movs	r0, #1
   db0d0:	f7fe ff9c 	bl	da00c <mbedtls_pk_info_from_type>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   db0d4:	4601      	mov	r1, r0
   db0d6:	4628      	mov	r0, r5
   db0d8:	f7fe ffa0 	bl	da01c <mbedtls_pk_setup>
   db0dc:	b950      	cbnz	r0, db0f4 <mbedtls_pk_parse_key+0x188>
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   db0de:	4632      	mov	r2, r6
   db0e0:	4621      	mov	r1, r4
   db0e2:	6868      	ldr	r0, [r5, #4]
   db0e4:	f7ff fc9a 	bl	daa1c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
    mbedtls_pk_free( pk );

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   db0e8:	b920      	cbnz	r0, db0f4 <mbedtls_pk_parse_key+0x188>
   db0ea:	e7de      	b.n	db0aa <mbedtls_pk_parse_key+0x13e>
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   db0ec:	480c      	ldr	r0, [pc, #48]	; (db120 <mbedtls_pk_parse_key+0x1b4>)
   db0ee:	e005      	b.n	db0fc <mbedtls_pk_parse_key+0x190>

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   db0f0:	480c      	ldr	r0, [pc, #48]	; (db124 <mbedtls_pk_parse_key+0x1b8>)
   db0f2:	e003      	b.n	db0fc <mbedtls_pk_parse_key+0x190>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
                                        key, keylen ) ) != 0 )
    {
        mbedtls_pk_free( pk );
   db0f4:	4628      	mov	r0, r5
   db0f6:	f7fe ff77 	bl	d9fe8 <mbedtls_pk_free>
        return( 0 );
    }

#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   db0fa:	480b      	ldr	r0, [pc, #44]	; (db128 <mbedtls_pk_parse_key+0x1bc>)
}
   db0fc:	b009      	add	sp, #36	; 0x24
   db0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db102:	bf00      	nop
   db104:	000e866b 	.word	0x000e866b
   db108:	000e8689 	.word	0x000e8689
   db10c:	ffffc480 	.word	0xffffc480
   db110:	000e86a9 	.word	0x000e86a9
   db114:	000e86c3 	.word	0x000e86c3
   db118:	000e86df 	.word	0x000e86df
   db11c:	000e8703 	.word	0x000e8703
   db120:	ffffc400 	.word	0xffffc400
   db124:	ffffc080 	.word	0xffffc080
   db128:	ffffc300 	.word	0xffffc300

000db12c <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
   db12c:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
   db12e:	2300      	movs	r3, #0
   db130:	4288      	cmp	r0, r1
   db132:	d002      	beq.n	db13a <_ZL15mbedtls_zeroizePvj+0xe>
   db134:	7003      	strb	r3, [r0, #0]
   db136:	3001      	adds	r0, #1
   db138:	e7fa      	b.n	db130 <_ZL15mbedtls_zeroizePvj+0x4>
   db13a:	4770      	bx	lr

000db13c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   db13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db140:	b095      	sub	sp, #84	; 0x54
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   db142:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   db144:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   db146:	9301      	str	r3, [sp, #4]
   db148:	4607      	mov	r7, r0
   db14a:	460c      	mov	r4, r1
   db14c:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   db14e:	2100      	movs	r1, #0
   db150:	2240      	movs	r2, #64	; 0x40
   db152:	4630      	mov	r0, r6
    memset( counter, 0, 4 );
   db154:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   db158:	f00b fd1b 	bl	e6b92 <memset>
    memset( counter, 0, 4 );
   db15c:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   db15e:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
   db160:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   db164:	f7fe fd1c 	bl	d9ba0 <mbedtls_md_get_size>
   db168:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   db16a:	b37c      	cbz	r4, db1cc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
   db16c:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
   db16e:	4628      	mov	r0, r5
   db170:	46a3      	mov	fp, r4
   db172:	bf28      	it	cs
   db174:	46d3      	movcs	fp, sl
   db176:	f7fe fc29 	bl	d99cc <mbedtls_md_starts>
   db17a:	4602      	mov	r2, r0
   db17c:	bb38      	cbnz	r0, db1ce <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
   db17e:	9a01      	ldr	r2, [sp, #4]
   db180:	4649      	mov	r1, r9
   db182:	4628      	mov	r0, r5
   db184:	f7fe fc2c 	bl	d99e0 <mbedtls_md_update>
   db188:	4602      	mov	r2, r0
   db18a:	bb00      	cbnz	r0, db1ce <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
   db18c:	2204      	movs	r2, #4
   db18e:	4641      	mov	r1, r8
   db190:	4628      	mov	r0, r5
   db192:	f7fe fc25 	bl	d99e0 <mbedtls_md_update>
   db196:	4602      	mov	r2, r0
   db198:	b9c8      	cbnz	r0, db1ce <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
   db19a:	4631      	mov	r1, r6
   db19c:	4628      	mov	r0, r5
   db19e:	f7fe fc29 	bl	d99f4 <mbedtls_md_finish>
   db1a2:	4602      	mov	r2, r0
   db1a4:	b998      	cbnz	r0, db1ce <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
   db1a6:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
   db1a8:	455a      	cmp	r2, fp
   db1aa:	d007      	beq.n	db1bc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
   db1ac:	f813 0b01 	ldrb.w	r0, [r3], #1
   db1b0:	5cb1      	ldrb	r1, [r6, r2]
   db1b2:	4041      	eors	r1, r0
   db1b4:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
   db1b8:	3201      	adds	r2, #1
   db1ba:	e7f5      	b.n	db1a8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
   db1bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   db1c0:	3301      	adds	r3, #1
   db1c2:	4417      	add	r7, r2
   db1c4:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
   db1c8:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   db1ca:	e7ce      	b.n	db16a <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
   db1cc:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
   db1ce:	4630      	mov	r0, r6
   db1d0:	2140      	movs	r1, #64	; 0x40
   db1d2:	f7ff ffab 	bl	db12c <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
   db1d6:	4610      	mov	r0, r2
   db1d8:	b015      	add	sp, #84	; 0x54
   db1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db1e0 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   db1e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   db1e4:	461d      	mov	r5, r3
    size_t oid_size  = 0;
   db1e6:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   db1e8:	460e      	mov	r6, r1
   db1ea:	4691      	mov	r9, r2
   db1ec:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
   db1f0:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
   db1f2:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
   db1f4:	4604      	mov	r4, r0
   db1f6:	b328      	cbz	r0, db244 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   db1f8:	f7fe fb94 	bl	d9924 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   db1fc:	4606      	mov	r6, r0
   db1fe:	2800      	cmp	r0, #0
   db200:	d063      	beq.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
   db202:	4620      	mov	r0, r4
   db204:	466a      	mov	r2, sp
   db206:	a901      	add	r1, sp, #4
   db208:	f7fe fdf0 	bl	d9dec <mbedtls_oid_get_oid_by_md>
   db20c:	4604      	mov	r4, r0
   db20e:	2800      	cmp	r0, #0
   db210:	d15b      	bne.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   db212:	4630      	mov	r0, r6
   db214:	f7fe fcc4 	bl	d9ba0 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
   db218:	9f00      	ldr	r7, [sp, #0]
   db21a:	4407      	add	r7, r0
   db21c:	f107 0308 	add.w	r3, r7, #8
   db220:	2b7f      	cmp	r3, #127	; 0x7f
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   db222:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
   db224:	d851      	bhi.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
   db226:	f110 020a 	adds.w	r2, r0, #10
   db22a:	d24e      	bcs.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
   db22c:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
   db230:	429a      	cmp	r2, r3
   db232:	d84a      	bhi.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
   db234:	429d      	cmp	r5, r3
   db236:	d348      	bcc.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
   db238:	f1a5 030a 	sub.w	r3, r5, #10
   db23c:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
   db23e:	2f0a      	cmp	r7, #10
   db240:	d806      	bhi.n	db250 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
   db242:	e042      	b.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
   db244:	428d      	cmp	r5, r1
   db246:	d340      	bcc.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
   db248:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
   db24a:	2d0a      	cmp	r5, #10
   db24c:	d93d      	bls.n	db2ca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
   db24e:	e03e      	b.n	db2ce <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   db250:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
   db252:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   db254:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
   db258:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
   db25a:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
   db25c:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
   db260:	21ff      	movs	r1, #255	; 0xff
   db262:	4650      	mov	r0, sl
   db264:	f00b fc95 	bl	e6b92 <memset>
    p += nb_pad;
   db268:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   db26c:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
   db26e:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   db272:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   db274:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   db276:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   db278:	f107 0208 	add.w	r2, r7, #8
   db27c:	4432      	add	r2, r6
   db27e:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
   db280:	b2fa      	uxtb	r2, r7
   db282:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
   db284:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
   db288:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
   db28a:	2106      	movs	r1, #6
   db28c:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
   db28e:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
   db290:	9901      	ldr	r1, [sp, #4]
   db292:	463a      	mov	r2, r7
   db294:	4650      	mov	r0, sl
   db296:	f00b fc56 	bl	e6b46 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
   db29a:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
   db29c:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
   db2a0:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   db2a4:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
   db2a6:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   db2a8:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
   db2aa:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
   db2ac:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
   db2ae:	4632      	mov	r2, r6
   db2b0:	4649      	mov	r1, r9
   db2b2:	4638      	mov	r0, r7
   db2b4:	f00b fc47 	bl	e6b46 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
   db2b8:	443e      	add	r6, r7
   db2ba:	eb08 0305 	add.w	r3, r8, r5
   db2be:	429e      	cmp	r6, r3
   db2c0:	d019      	beq.n	db2f6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
   db2c2:	4629      	mov	r1, r5
   db2c4:	4640      	mov	r0, r8
   db2c6:	f7ff ff31 	bl	db12c <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   db2ca:	4c0d      	ldr	r4, [pc, #52]	; (db300 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
   db2cc:	e013      	b.n	db2f6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   db2ce:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
   db2d0:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   db2d2:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
   db2d6:	2201      	movs	r2, #1
   db2d8:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
   db2dc:	21ff      	movs	r1, #255	; 0xff
   db2de:	463a      	mov	r2, r7
   db2e0:	4618      	mov	r0, r3
   db2e2:	f00b fc56 	bl	e6b92 <memset>
   db2e6:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
   db2e8:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
   db2ea:	1ea8      	subs	r0, r5, #2
   db2ec:	4632      	mov	r2, r6
   db2ee:	4649      	mov	r1, r9
   db2f0:	4418      	add	r0, r3
   db2f2:	f00b fc28 	bl	e6b46 <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
   db2f6:	4620      	mov	r0, r4
   db2f8:	b002      	add	sp, #8
   db2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db2fe:	bf00      	nop
   db300:	ffffbf80 	.word	0xffffbf80

000db304 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   db304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   db306:	f100 0508 	add.w	r5, r0, #8
   db30a:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   db30c:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   db30e:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   db310:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   db312:	f7fc fc73 	bl	d7bfc <mbedtls_mpi_size>
   db316:	4287      	cmp	r7, r0
   db318:	d117      	bne.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
   db31a:	6863      	ldr	r3, [r4, #4]
   db31c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   db320:	d813      	bhi.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   db322:	2100      	movs	r1, #0
   db324:	4628      	mov	r0, r5
   db326:	f7fc fe3a 	bl	d7f9e <mbedtls_mpi_cmp_int>
   db32a:	2800      	cmp	r0, #0
   db32c:	dd0d      	ble.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
   db32e:	2100      	movs	r1, #0
   db330:	4628      	mov	r0, r5
   db332:	f7fc fc19 	bl	d7b68 <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   db336:	b140      	cbz	r0, db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
   db338:	b1ee      	cbz	r6, db376 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   db33a:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   db33e:	2100      	movs	r1, #0
   db340:	4628      	mov	r0, r5
   db342:	f7fc fe2c 	bl	d7f9e <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
   db346:	2800      	cmp	r0, #0
   db348:	dc01      	bgt.n	db34e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   db34a:	481a      	ldr	r0, [pc, #104]	; (db3b4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
   db34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   db34e:	2100      	movs	r1, #0
   db350:	4628      	mov	r0, r5
   db352:	f7fc fc09 	bl	d7b68 <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   db356:	2800      	cmp	r0, #0
   db358:	d0f7      	beq.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   db35a:	f104 0538 	add.w	r5, r4, #56	; 0x38
   db35e:	2100      	movs	r1, #0
   db360:	4628      	mov	r0, r5
   db362:	f7fc fe1c 	bl	d7f9e <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   db366:	2800      	cmp	r0, #0
   db368:	ddef      	ble.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
   db36a:	2100      	movs	r1, #0
   db36c:	4628      	mov	r0, r5
   db36e:	f7fc fbfb 	bl	d7b68 <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   db372:	2800      	cmp	r0, #0
   db374:	d0e9      	beq.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
   db376:	2100      	movs	r1, #0
   db378:	f104 0014 	add.w	r0, r4, #20
   db37c:	f7fc fe0f 	bl	d7f9e <mbedtls_mpi_cmp_int>
   db380:	2800      	cmp	r0, #0
   db382:	dde2      	ble.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
   db384:	b1a6      	cbz	r6, db3b0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   db386:	2100      	movs	r1, #0
   db388:	f104 0044 	add.w	r0, r4, #68	; 0x44
   db38c:	f7fc fe07 	bl	d7f9e <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
   db390:	2800      	cmp	r0, #0
   db392:	ddda      	ble.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
   db394:	2100      	movs	r1, #0
   db396:	f104 0050 	add.w	r0, r4, #80	; 0x50
   db39a:	f7fc fe00 	bl	d7f9e <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   db39e:	2800      	cmp	r0, #0
   db3a0:	ddd3      	ble.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
   db3a2:	2100      	movs	r1, #0
   db3a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   db3a8:	f7fc fdf9 	bl	d7f9e <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
   db3ac:	2800      	cmp	r0, #0
   db3ae:	ddcc      	ble.n	db34a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
   db3b0:	2000      	movs	r0, #0
   db3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db3b4:	ffffbf80 	.word	0xffffbf80

000db3b8 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
   db3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db3bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
   db3be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   db3c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   db3c2:	4604      	mov	r4, r0
   db3c4:	4698      	mov	r8, r3
    int ret = 0;

    if( N != NULL )
   db3c6:	b149      	cbz	r1, db3dc <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
   db3c8:	f100 0908 	add.w	r9, r0, #8
   db3cc:	4648      	mov	r0, r9
   db3ce:	f7fc fc1b 	bl	d7c08 <mbedtls_mpi_read_binary>
   db3d2:	bb50      	cbnz	r0, db42a <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
   db3d4:	4648      	mov	r0, r9
   db3d6:	f7fc fc11 	bl	d7bfc <mbedtls_mpi_size>
   db3da:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
   db3dc:	f1b8 0f00 	cmp.w	r8, #0
   db3e0:	d101      	bne.n	db3e6 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
   db3e2:	b947      	cbnz	r7, db3f6 <mbedtls_rsa_import_raw+0x3e>
   db3e4:	e00e      	b.n	db404 <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
   db3e6:	9a08      	ldr	r2, [sp, #32]
   db3e8:	4641      	mov	r1, r8
   db3ea:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   db3ee:	f7fc fc0b 	bl	d7c08 <mbedtls_mpi_read_binary>
   db3f2:	b9d0      	cbnz	r0, db42a <mbedtls_rsa_import_raw+0x72>
   db3f4:	e7f5      	b.n	db3e2 <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
   db3f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   db3f8:	4639      	mov	r1, r7
   db3fa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   db3fe:	f7fc fc03 	bl	d7c08 <mbedtls_mpi_read_binary>
   db402:	b990      	cbnz	r0, db42a <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
   db404:	b136      	cbz	r6, db414 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
   db406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   db408:	4631      	mov	r1, r6
   db40a:	f104 0020 	add.w	r0, r4, #32
   db40e:	f7fc fbfb 	bl	d7c08 <mbedtls_mpi_read_binary>
   db412:	b950      	cbnz	r0, db42a <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
   db414:	b135      	cbz	r5, db424 <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
   db416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   db418:	4629      	mov	r1, r5
   db41a:	f104 0014 	add.w	r0, r4, #20
   db41e:	f7fc fbf3 	bl	d7c08 <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
   db422:	b910      	cbnz	r0, db42a <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
   db424:	2000      	movs	r0, #0
   db426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   db42a:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
   db42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000db434 <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
   db434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   db438:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
   db43c:	b087      	sub	sp, #28
   db43e:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   db440:	2100      	movs	r1, #0
   db442:	4658      	mov	r0, fp
   db444:	f7fc fdab 	bl	d7f9e <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   db448:	f107 092c 	add.w	r9, r7, #44	; 0x2c
   db44c:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   db44e:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   db450:	4648      	mov	r0, r9
   db452:	f7fc fda4 	bl	d7f9e <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   db456:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   db45a:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   db45c:	2100      	movs	r1, #0
   db45e:	4650      	mov	r0, sl
   db460:	f7fc fd9d 	bl	d7f9e <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   db464:	f107 0320 	add.w	r3, r7, #32
   db468:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   db46a:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   db46c:	4618      	mov	r0, r3
   db46e:	9302      	str	r3, [sp, #8]
   db470:	f7fc fd95 	bl	d7f9e <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   db474:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   db478:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   db47a:	2100      	movs	r1, #0
   db47c:	4618      	mov	r0, r3
   db47e:	9303      	str	r3, [sp, #12]
   db480:	f7fc fd8d 	bl	d7f9e <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   db484:	9b05      	ldr	r3, [sp, #20]
   db486:	9a04      	ldr	r2, [sp, #16]
   db488:	b14b      	cbz	r3, db49e <mbedtls_rsa_complete+0x6a>
   db48a:	b125      	cbz	r5, db496 <mbedtls_rsa_complete+0x62>
   db48c:	b12a      	cbz	r2, db49a <mbedtls_rsa_complete+0x66>
   db48e:	1c06      	adds	r6, r0, #0
   db490:	bf18      	it	ne
   db492:	2601      	movne	r6, #1
   db494:	e013      	b.n	db4be <mbedtls_rsa_complete+0x8a>
   db496:	462e      	mov	r6, r5
   db498:	e011      	b.n	db4be <mbedtls_rsa_complete+0x8a>
   db49a:	4616      	mov	r6, r2
   db49c:	e00f      	b.n	db4be <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   db49e:	f1b8 0f00 	cmp.w	r8, #0
   db4a2:	d103      	bne.n	db4ac <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
   db4a4:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   db4a6:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   db4a8:	2200      	movs	r2, #0
   db4aa:	e024      	b.n	db4f6 <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   db4ac:	b9cd      	cbnz	r5, db4e2 <mbedtls_rsa_complete+0xae>
   db4ae:	b11a      	cbz	r2, db4b8 <mbedtls_rsa_complete+0x84>
   db4b0:	b9f0      	cbnz	r0, db4f0 <mbedtls_rsa_complete+0xbc>
   db4b2:	4606      	mov	r6, r0
   db4b4:	4604      	mov	r4, r0
   db4b6:	e00e      	b.n	db4d6 <mbedtls_rsa_complete+0xa2>
   db4b8:	462e      	mov	r6, r5
   db4ba:	462c      	mov	r4, r5
   db4bc:	e00d      	b.n	db4da <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
   db4be:	b1ad      	cbz	r5, db4ec <mbedtls_rsa_complete+0xb8>
   db4c0:	b992      	cbnz	r2, db4e8 <mbedtls_rsa_complete+0xb4>
   db4c2:	1c04      	adds	r4, r0, #0
   db4c4:	bf18      	it	ne
   db4c6:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   db4c8:	f1b8 0f00 	cmp.w	r8, #0
   db4cc:	d0ec      	beq.n	db4a8 <mbedtls_rsa_complete+0x74>
   db4ce:	2b00      	cmp	r3, #0
   db4d0:	d1ea      	bne.n	db4a8 <mbedtls_rsa_complete+0x74>
   db4d2:	2d00      	cmp	r5, #0
   db4d4:	d1e8      	bne.n	db4a8 <mbedtls_rsa_complete+0x74>
   db4d6:	2a00      	cmp	r2, #0
   db4d8:	d1e6      	bne.n	db4a8 <mbedtls_rsa_complete+0x74>
   db4da:	2800      	cmp	r0, #0
   db4dc:	d0e4      	beq.n	db4a8 <mbedtls_rsa_complete+0x74>
   db4de:	2201      	movs	r2, #1
   db4e0:	e009      	b.n	db4f6 <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
   db4e2:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   db4e4:	461e      	mov	r6, r3
   db4e6:	e7df      	b.n	db4a8 <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
   db4e8:	2400      	movs	r4, #0
   db4ea:	e7ed      	b.n	db4c8 <mbedtls_rsa_complete+0x94>
   db4ec:	462c      	mov	r4, r5
   db4ee:	e7db      	b.n	db4a8 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   db4f0:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
   db4f2:	462c      	mov	r4, r5
   db4f4:	e002      	b.n	db4fc <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
   db4f6:	2e00      	cmp	r6, #0
   db4f8:	d03d      	beq.n	db576 <mbedtls_rsa_complete+0x142>
   db4fa:	2600      	movs	r6, #0
   db4fc:	9404      	str	r4, [sp, #16]
   db4fe:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
   db500:	f1b8 0f00 	cmp.w	r8, #0
   db504:	d10b      	bne.n	db51e <mbedtls_rsa_complete+0xea>
   db506:	b153      	cbz	r3, db51e <mbedtls_rsa_complete+0xea>
   db508:	b14d      	cbz	r5, db51e <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
   db50a:	4652      	mov	r2, sl
   db50c:	4649      	mov	r1, r9
   db50e:	4658      	mov	r0, fp
   db510:	f7fc fe64 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db514:	bb28      	cbnz	r0, db562 <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
   db516:	4658      	mov	r0, fp
   db518:	f7fc fb70 	bl	d7bfc <mbedtls_mpi_size>
   db51c:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
   db51e:	b146      	cbz	r6, db532 <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
   db520:	f8cd a000 	str.w	sl, [sp]
   db524:	464b      	mov	r3, r9
   db526:	9a02      	ldr	r2, [sp, #8]
   db528:	9903      	ldr	r1, [sp, #12]
   db52a:	4658      	mov	r0, fp
   db52c:	f001 f858 	bl	dc5e0 <mbedtls_rsa_deduce_primes>
   db530:	e007      	b.n	db542 <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
   db532:	9b04      	ldr	r3, [sp, #16]
   db534:	b133      	cbz	r3, db544 <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
   db536:	9b02      	ldr	r3, [sp, #8]
   db538:	9a03      	ldr	r2, [sp, #12]
   db53a:	4651      	mov	r1, sl
   db53c:	4648      	mov	r0, r9
   db53e:	f001 f94b 	bl	dc7d8 <mbedtls_rsa_deduce_private_exponent>
   db542:	b970      	cbnz	r0, db562 <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
   db544:	b184      	cbz	r4, db568 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   db546:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
   db54a:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   db54c:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
   db550:	9300      	str	r3, [sp, #0]
   db552:	9a02      	ldr	r2, [sp, #8]
   db554:	f107 0344 	add.w	r3, r7, #68	; 0x44
   db558:	4651      	mov	r1, sl
   db55a:	4648      	mov	r0, r9
   db55c:	f001 fae0 	bl	dcb20 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
   db560:	b110      	cbz	r0, db568 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   db562:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
   db566:	e00c      	b.n	db582 <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
   db568:	4621      	mov	r1, r4
   db56a:	4638      	mov	r0, r7
}
   db56c:	b007      	add	sp, #28
   db56e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
   db572:	f7ff bec7 	b.w	db304 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
   db576:	b90c      	cbnz	r4, db57c <mbedtls_rsa_complete+0x148>
   db578:	b112      	cbz	r2, db580 <mbedtls_rsa_complete+0x14c>
   db57a:	4626      	mov	r6, r4
   db57c:	9404      	str	r4, [sp, #16]
   db57e:	e7bf      	b.n	db500 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   db580:	4801      	ldr	r0, [pc, #4]	; (db588 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
   db582:	b007      	add	sp, #28
   db584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db588:	ffffbf80 	.word	0xffffbf80

000db58c <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
   db58c:	b570      	push	{r4, r5, r6, lr}
   db58e:	4604      	mov	r4, r0
   db590:	460e      	mov	r6, r1
   db592:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
   db594:	2100      	movs	r1, #0
   db596:	22ac      	movs	r2, #172	; 0xac
   db598:	f00b fafb 	bl	e6b92 <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
   db59c:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
   db5a0:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
   db5a4:	bd70      	pop	{r4, r5, r6, pc}

000db5a6 <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
   db5a6:	6840      	ldr	r0, [r0, #4]
   db5a8:	4770      	bx	lr
	...

000db5ac <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
   db5ac:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   db5ae:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
   db5b0:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   db5b2:	f7ff fea7 	bl	db304 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   db5b6:	4605      	mov	r5, r0
   db5b8:	b9b8      	cbnz	r0, db5ea <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
   db5ba:	f104 0608 	add.w	r6, r4, #8
   db5be:	4630      	mov	r0, r6
   db5c0:	f7fc fafc 	bl	d7bbc <mbedtls_mpi_bitlen>
   db5c4:	287f      	cmp	r0, #127	; 0x7f
   db5c6:	d910      	bls.n	db5ea <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   db5c8:	3414      	adds	r4, #20
   db5ca:	4629      	mov	r1, r5
   db5cc:	4620      	mov	r0, r4
   db5ce:	f7fc facb 	bl	d7b68 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   db5d2:	b150      	cbz	r0, db5ea <mbedtls_rsa_check_pubkey+0x3e>
   db5d4:	4620      	mov	r0, r4
   db5d6:	f7fc faf1 	bl	d7bbc <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   db5da:	2801      	cmp	r0, #1
   db5dc:	d905      	bls.n	db5ea <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
   db5de:	4631      	mov	r1, r6
   db5e0:	4620      	mov	r0, r4
   db5e2:	f7fc fc97 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   db5e6:	2800      	cmp	r0, #0
   db5e8:	db00      	blt.n	db5ec <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   db5ea:	4d01      	ldr	r5, [pc, #4]	; (db5f0 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
   db5ec:	4628      	mov	r0, r5
   db5ee:	bd70      	pop	{r4, r5, r6, pc}
   db5f0:	ffffbe00 	.word	0xffffbe00

000db5f4 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
   db5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   db5f6:	b085      	sub	sp, #20
   db5f8:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   db5fa:	f7ff ffd7 	bl	db5ac <mbedtls_rsa_check_pubkey>
   db5fe:	bb28      	cbnz	r0, db64c <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
   db600:	2101      	movs	r1, #1
   db602:	4620      	mov	r0, r4
   db604:	f7ff fe7e 	bl	db304 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   db608:	bb00      	cbnz	r0, db64c <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
   db60a:	f104 0314 	add.w	r3, r4, #20
   db60e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   db612:	f104 0638 	add.w	r6, r4, #56	; 0x38
   db616:	f104 0720 	add.w	r7, r4, #32
   db61a:	9002      	str	r0, [sp, #8]
   db61c:	9001      	str	r0, [sp, #4]
   db61e:	9300      	str	r3, [sp, #0]
   db620:	4632      	mov	r2, r6
   db622:	463b      	mov	r3, r7
   db624:	4629      	mov	r1, r5
   db626:	f104 0008 	add.w	r0, r4, #8
   db62a:	f001 f9b3 	bl	dc994 <mbedtls_rsa_validate_params>
   db62e:	b968      	cbnz	r0, db64c <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
   db630:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   db634:	9301      	str	r3, [sp, #4]
   db636:	f104 0350 	add.w	r3, r4, #80	; 0x50
   db63a:	9300      	str	r3, [sp, #0]
   db63c:	463a      	mov	r2, r7
   db63e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   db642:	4631      	mov	r1, r6
   db644:	4628      	mov	r0, r5
   db646:	f001 f925 	bl	dc894 <mbedtls_rsa_validate_crt>
   db64a:	b100      	cbz	r0, db64e <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   db64c:	4801      	ldr	r0, [pc, #4]	; (db654 <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
   db64e:	b005      	add	sp, #20
   db650:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db652:	bf00      	nop
   db654:	ffffbe00 	.word	0xffffbe00

000db658 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
   db658:	b538      	push	{r3, r4, r5, lr}
   db65a:	4605      	mov	r5, r0
   db65c:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   db65e:	f7ff ffa5 	bl	db5ac <mbedtls_rsa_check_pubkey>
   db662:	b950      	cbnz	r0, db67a <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
   db664:	4620      	mov	r0, r4
   db666:	f7ff ffc5 	bl	db5f4 <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   db66a:	b930      	cbnz	r0, db67a <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   db66c:	f104 0108 	add.w	r1, r4, #8
   db670:	f105 0008 	add.w	r0, r5, #8
   db674:	f7fc fc4e 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   db678:	b108      	cbz	r0, db67e <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   db67a:	4805      	ldr	r0, [pc, #20]	; (db690 <mbedtls_rsa_check_pub_priv+0x38>)
   db67c:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
   db67e:	f104 0114 	add.w	r1, r4, #20
   db682:	f105 0014 	add.w	r0, r5, #20
   db686:	f7fc fc45 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   db68a:	2800      	cmp	r0, #0
   db68c:	d1f5      	bne.n	db67a <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
   db68e:	bd38      	pop	{r3, r4, r5, pc}
   db690:	ffffbe00 	.word	0xffffbe00

000db694 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
   db694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db698:	460c      	mov	r4, r1
   db69a:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   db69c:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
   db69e:	4605      	mov	r5, r0
   db6a0:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   db6a2:	f7ff fe2f 	bl	db304 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   db6a6:	4606      	mov	r6, r0
   db6a8:	bb78      	cbnz	r0, db70a <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
   db6aa:	a803      	add	r0, sp, #12
   db6ac:	f7fc f9ce 	bl	d7a4c <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   db6b0:	4621      	mov	r1, r4
   db6b2:	686a      	ldr	r2, [r5, #4]
   db6b4:	a803      	add	r0, sp, #12
   db6b6:	f7fc faa7 	bl	d7c08 <mbedtls_mpi_read_binary>
   db6ba:	4604      	mov	r4, r0
   db6bc:	b9f0      	cbnz	r0, db6fc <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   db6be:	f105 0408 	add.w	r4, r5, #8
   db6c2:	4621      	mov	r1, r4
   db6c4:	a803      	add	r0, sp, #12
   db6c6:	f7fc fc25 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   db6ca:	2800      	cmp	r0, #0
   db6cc:	da14      	bge.n	db6f8 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   db6ce:	f105 0368 	add.w	r3, r5, #104	; 0x68
   db6d2:	a903      	add	r1, sp, #12
   db6d4:	9300      	str	r3, [sp, #0]
   db6d6:	f105 0214 	add.w	r2, r5, #20
   db6da:	4623      	mov	r3, r4
   db6dc:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
   db6de:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   db6e2:	f7fc ffe9 	bl	d86b8 <mbedtls_mpi_exp_mod>
   db6e6:	4604      	mov	r4, r0
   db6e8:	b940      	cbnz	r0, db6fc <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   db6ea:	4642      	mov	r2, r8
   db6ec:	4639      	mov	r1, r7
   db6ee:	a803      	add	r0, sp, #12
   db6f0:	f7fc fabf 	bl	d7c72 <mbedtls_mpi_write_binary>
   db6f4:	4604      	mov	r4, r0
   db6f6:	e001      	b.n	db6fc <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   db6f8:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
   db6fc:	a803      	add	r0, sp, #12
   db6fe:	f7fc f9ac 	bl	d7a5a <mbedtls_mpi_free>

    if( ret != 0 )
   db702:	b11c      	cbz	r4, db70c <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
   db704:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
   db708:	e000      	b.n	db70c <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   db70a:	4e02      	ldr	r6, [pc, #8]	; (db714 <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
   db70c:	4630      	mov	r0, r6
   db70e:	b006      	add	sp, #24
   db710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db714:	ffffbf80 	.word	0xffffbf80

000db718 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
   db718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db71c:	460e      	mov	r6, r1
   db71e:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
   db720:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
   db722:	4604      	mov	r4, r0
   db724:	4692      	mov	sl, r2
   db726:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
   db728:	f7ff fdec 	bl	db304 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   db72c:	9003      	str	r0, [sp, #12]
   db72e:	2800      	cmp	r0, #0
   db730:	f040 819b 	bne.w	dba6a <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
   db734:	a806      	add	r0, sp, #24
   db736:	f7fc f989 	bl	d7a4c <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
   db73a:	a809      	add	r0, sp, #36	; 0x24
   db73c:	f7fc f986 	bl	d7a4c <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
   db740:	a80c      	add	r0, sp, #48	; 0x30
   db742:	f7fc f983 	bl	d7a4c <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
   db746:	a80f      	add	r0, sp, #60	; 0x3c
   db748:	f7fc f980 	bl	d7a4c <mbedtls_mpi_init>

    if( f_rng != NULL )
   db74c:	b12e      	cbz	r6, db75a <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
   db74e:	a818      	add	r0, sp, #96	; 0x60
   db750:	f7fc f97c 	bl	d7a4c <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
   db754:	a81b      	add	r0, sp, #108	; 0x6c
   db756:	f7fc f979 	bl	d7a4c <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
   db75a:	a812      	add	r0, sp, #72	; 0x48
   db75c:	f7fc f976 	bl	d7a4c <mbedtls_mpi_init>
   db760:	a815      	add	r0, sp, #84	; 0x54
   db762:	f7fc f973 	bl	d7a4c <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
   db766:	a81e      	add	r0, sp, #120	; 0x78
   db768:	f7fc f970 	bl	d7a4c <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
   db76c:	a821      	add	r0, sp, #132	; 0x84
   db76e:	f7fc f96d 	bl	d7a4c <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   db772:	6862      	ldr	r2, [r4, #4]
   db774:	4629      	mov	r1, r5
   db776:	a806      	add	r0, sp, #24
   db778:	f7fc fa46 	bl	d7c08 <mbedtls_mpi_read_binary>
   db77c:	4607      	mov	r7, r0
   db77e:	2800      	cmp	r0, #0
   db780:	f040 8150 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   db784:	f104 0508 	add.w	r5, r4, #8
   db788:	4629      	mov	r1, r5
   db78a:	a806      	add	r0, sp, #24
   db78c:	f7fc fbc2 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   db790:	2800      	cmp	r0, #0
   db792:	f280 8143 	bge.w	dba1c <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
   db796:	a906      	add	r1, sp, #24
   db798:	a81e      	add	r0, sp, #120	; 0x78
   db79a:	f7fc f9a0 	bl	d7ade <mbedtls_mpi_copy>
   db79e:	4607      	mov	r7, r0
   db7a0:	2800      	cmp	r0, #0
   db7a2:	f040 813f 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
   db7a6:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
   db7aa:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
   db7ae:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
   db7b0:	2e00      	cmp	r6, #0
   db7b2:	f000 80c5 	beq.w	db940 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
   db7b6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   db7ba:	b323      	cbz	r3, db806 <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   db7bc:	f104 088c 	add.w	r8, r4, #140	; 0x8c
   db7c0:	4642      	mov	r2, r8
   db7c2:	4641      	mov	r1, r8
   db7c4:	4640      	mov	r0, r8
   db7c6:	f7fc fd09 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db7ca:	4607      	mov	r7, r0
   db7cc:	2800      	cmp	r0, #0
   db7ce:	f040 8129 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
   db7d2:	462a      	mov	r2, r5
   db7d4:	4641      	mov	r1, r8
   db7d6:	4640      	mov	r0, r8
   db7d8:	f7fc ff3c 	bl	d8654 <mbedtls_mpi_mod_mpi>
   db7dc:	4607      	mov	r7, r0
   db7de:	2800      	cmp	r0, #0
   db7e0:	f040 8120 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   db7e4:	f104 0898 	add.w	r8, r4, #152	; 0x98
   db7e8:	4642      	mov	r2, r8
   db7ea:	4641      	mov	r1, r8
   db7ec:	4640      	mov	r0, r8
   db7ee:	f7fc fcf5 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db7f2:	4607      	mov	r7, r0
   db7f4:	2800      	cmp	r0, #0
   db7f6:	f040 8115 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
   db7fa:	462a      	mov	r2, r5
   db7fc:	4641      	mov	r1, r8
   db7fe:	4640      	mov	r0, r8
   db800:	f7fc ff28 	bl	d8654 <mbedtls_mpi_mod_mpi>
   db804:	e037      	b.n	db876 <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
   db806:	230c      	movs	r3, #12
   db808:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   db80a:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   db80e:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
   db812:	9b05      	ldr	r3, [sp, #20]
   db814:	3b01      	subs	r3, #1
   db816:	9305      	str	r3, [sp, #20]
   db818:	f000 812a 	beq.w	dba70 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   db81c:	6861      	ldr	r1, [r4, #4]
   db81e:	4653      	mov	r3, sl
   db820:	4632      	mov	r2, r6
   db822:	3901      	subs	r1, #1
   db824:	4658      	mov	r0, fp
   db826:	f7fd f9eb 	bl	d8c00 <mbedtls_mpi_fill_random>
   db82a:	4607      	mov	r7, r0
   db82c:	2800      	cmp	r0, #0
   db82e:	f040 80f9 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   db832:	462a      	mov	r2, r5
   db834:	4659      	mov	r1, fp
   db836:	4640      	mov	r0, r8
   db838:	f7fd f95d 	bl	d8af6 <mbedtls_mpi_gcd>
   db83c:	4607      	mov	r7, r0
   db83e:	2800      	cmp	r0, #0
   db840:	f040 80f0 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
   db844:	2101      	movs	r1, #1
   db846:	4640      	mov	r0, r8
   db848:	f7fc fba9 	bl	d7f9e <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
   db84c:	2800      	cmp	r0, #0
   db84e:	d1e0      	bne.n	db812 <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   db850:	462a      	mov	r2, r5
   db852:	4659      	mov	r1, fp
   db854:	4640      	mov	r0, r8
   db856:	f7fd f9f6 	bl	d8c46 <mbedtls_mpi_inv_mod>
   db85a:	4607      	mov	r7, r0
   db85c:	2800      	cmp	r0, #0
   db85e:	f040 80e1 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
   db862:	f104 0368 	add.w	r3, r4, #104	; 0x68
   db866:	9300      	str	r3, [sp, #0]
   db868:	f104 0214 	add.w	r2, r4, #20
   db86c:	462b      	mov	r3, r5
   db86e:	4641      	mov	r1, r8
   db870:	4640      	mov	r0, r8
   db872:	f7fc ff21 	bl	d86b8 <mbedtls_mpi_exp_mod>
   db876:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
   db878:	2800      	cmp	r0, #0
   db87a:	f040 80d3 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
   db87e:	a906      	add	r1, sp, #24
   db880:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   db884:	4608      	mov	r0, r1
   db886:	f7fc fca9 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db88a:	4607      	mov	r7, r0
   db88c:	2800      	cmp	r0, #0
   db88e:	f040 80c9 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   db892:	a906      	add	r1, sp, #24
   db894:	462a      	mov	r2, r5
   db896:	4608      	mov	r0, r1
   db898:	f7fc fedc 	bl	d8654 <mbedtls_mpi_mod_mpi>
   db89c:	4607      	mov	r7, r0
   db89e:	2800      	cmp	r0, #0
   db8a0:	f040 80c0 	bne.w	dba24 <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   db8a4:	2201      	movs	r2, #1
   db8a6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   db8aa:	a809      	add	r0, sp, #36	; 0x24
   db8ac:	f7fc fc80 	bl	d81b0 <mbedtls_mpi_sub_int>
   db8b0:	4607      	mov	r7, r0
   db8b2:	2800      	cmp	r0, #0
   db8b4:	f040 80b6 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   db8b8:	2201      	movs	r2, #1
   db8ba:	f104 0138 	add.w	r1, r4, #56	; 0x38
   db8be:	a80c      	add	r0, sp, #48	; 0x30
   db8c0:	f7fc fc76 	bl	d81b0 <mbedtls_mpi_sub_int>
   db8c4:	4607      	mov	r7, r0
   db8c6:	2800      	cmp	r0, #0
   db8c8:	f040 80ac 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   db8cc:	4653      	mov	r3, sl
   db8ce:	4632      	mov	r2, r6
   db8d0:	211c      	movs	r1, #28
   db8d2:	a80f      	add	r0, sp, #60	; 0x3c
   db8d4:	f7fd f994 	bl	d8c00 <mbedtls_mpi_fill_random>
   db8d8:	4607      	mov	r7, r0
   db8da:	2800      	cmp	r0, #0
   db8dc:	f040 80a2 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
   db8e0:	aa0f      	add	r2, sp, #60	; 0x3c
   db8e2:	a909      	add	r1, sp, #36	; 0x24
   db8e4:	a818      	add	r0, sp, #96	; 0x60
   db8e6:	f7fc fc79 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db8ea:	4607      	mov	r7, r0
   db8ec:	2800      	cmp	r0, #0
   db8ee:	f040 8099 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
   db8f2:	a918      	add	r1, sp, #96	; 0x60
   db8f4:	464a      	mov	r2, r9
   db8f6:	4608      	mov	r0, r1
   db8f8:	f7fc fc01 	bl	d80fe <mbedtls_mpi_add_mpi>
   db8fc:	4607      	mov	r7, r0
   db8fe:	2800      	cmp	r0, #0
   db900:	f040 8090 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   db904:	4653      	mov	r3, sl
   db906:	4632      	mov	r2, r6
   db908:	211c      	movs	r1, #28
   db90a:	a80f      	add	r0, sp, #60	; 0x3c
   db90c:	f7fd f978 	bl	d8c00 <mbedtls_mpi_fill_random>
   db910:	4607      	mov	r7, r0
   db912:	2800      	cmp	r0, #0
   db914:	f040 8086 	bne.w	dba24 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
   db918:	aa0f      	add	r2, sp, #60	; 0x3c
   db91a:	a90c      	add	r1, sp, #48	; 0x30
   db91c:	a81b      	add	r0, sp, #108	; 0x6c
   db91e:	f7fc fc5d 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db922:	4607      	mov	r7, r0
   db924:	2800      	cmp	r0, #0
   db926:	d17d      	bne.n	dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
   db928:	a91b      	add	r1, sp, #108	; 0x6c
   db92a:	9a04      	ldr	r2, [sp, #16]
   db92c:	4608      	mov	r0, r1
   db92e:	f7fc fbe6 	bl	d80fe <mbedtls_mpi_add_mpi>
   db932:	4607      	mov	r7, r0
   db934:	2800      	cmp	r0, #0
   db936:	d175      	bne.n	dba24 <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
   db938:	ab1b      	add	r3, sp, #108	; 0x6c
   db93a:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
   db93c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
   db940:	f104 0374 	add.w	r3, r4, #116	; 0x74
   db944:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   db948:	9300      	str	r3, [sp, #0]
   db94a:	464a      	mov	r2, r9
   db94c:	4643      	mov	r3, r8
   db94e:	a906      	add	r1, sp, #24
   db950:	a812      	add	r0, sp, #72	; 0x48
   db952:	f7fc feb1 	bl	d86b8 <mbedtls_mpi_exp_mod>
   db956:	4607      	mov	r7, r0
   db958:	2800      	cmp	r0, #0
   db95a:	d163      	bne.n	dba24 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
   db95c:	f104 0380 	add.w	r3, r4, #128	; 0x80
   db960:	f104 0938 	add.w	r9, r4, #56	; 0x38
   db964:	9300      	str	r3, [sp, #0]
   db966:	9a04      	ldr	r2, [sp, #16]
   db968:	464b      	mov	r3, r9
   db96a:	a906      	add	r1, sp, #24
   db96c:	a815      	add	r0, sp, #84	; 0x54
   db96e:	f7fc fea3 	bl	d86b8 <mbedtls_mpi_exp_mod>
   db972:	4607      	mov	r7, r0
   db974:	2800      	cmp	r0, #0
   db976:	d155      	bne.n	dba24 <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
   db978:	aa15      	add	r2, sp, #84	; 0x54
   db97a:	a912      	add	r1, sp, #72	; 0x48
   db97c:	a806      	add	r0, sp, #24
   db97e:	f7fc fbdf 	bl	d8140 <mbedtls_mpi_sub_mpi>
   db982:	4607      	mov	r7, r0
   db984:	2800      	cmp	r0, #0
   db986:	d14d      	bne.n	dba24 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
   db988:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   db98c:	a906      	add	r1, sp, #24
   db98e:	a812      	add	r0, sp, #72	; 0x48
   db990:	f7fc fc24 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db994:	4607      	mov	r7, r0
   db996:	2800      	cmp	r0, #0
   db998:	d144      	bne.n	dba24 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
   db99a:	4642      	mov	r2, r8
   db99c:	a912      	add	r1, sp, #72	; 0x48
   db99e:	a806      	add	r0, sp, #24
   db9a0:	f7fc fe58 	bl	d8654 <mbedtls_mpi_mod_mpi>
   db9a4:	4607      	mov	r7, r0
   db9a6:	2800      	cmp	r0, #0
   db9a8:	d13c      	bne.n	dba24 <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
   db9aa:	464a      	mov	r2, r9
   db9ac:	a906      	add	r1, sp, #24
   db9ae:	a812      	add	r0, sp, #72	; 0x48
   db9b0:	f7fc fc14 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db9b4:	4607      	mov	r7, r0
   db9b6:	2800      	cmp	r0, #0
   db9b8:	d134      	bne.n	dba24 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
   db9ba:	aa12      	add	r2, sp, #72	; 0x48
   db9bc:	a915      	add	r1, sp, #84	; 0x54
   db9be:	a806      	add	r0, sp, #24
   db9c0:	f7fc fb9d 	bl	d80fe <mbedtls_mpi_add_mpi>
   db9c4:	4607      	mov	r7, r0
   db9c6:	bb68      	cbnz	r0, dba24 <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
   db9c8:	b966      	cbnz	r6, db9e4 <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
   db9ca:	f104 0368 	add.w	r3, r4, #104	; 0x68
   db9ce:	9300      	str	r3, [sp, #0]
   db9d0:	f104 0214 	add.w	r2, r4, #20
   db9d4:	462b      	mov	r3, r5
   db9d6:	a906      	add	r1, sp, #24
   db9d8:	a821      	add	r0, sp, #132	; 0x84
   db9da:	f7fc fe6d 	bl	d86b8 <mbedtls_mpi_exp_mod>
   db9de:	4607      	mov	r7, r0
   db9e0:	bb00      	cbnz	r0, dba24 <mbedtls_rsa_private+0x30c>
   db9e2:	e00f      	b.n	dba04 <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
   db9e4:	a906      	add	r1, sp, #24
   db9e6:	f104 0298 	add.w	r2, r4, #152	; 0x98
   db9ea:	4608      	mov	r0, r1
   db9ec:	f7fc fbf6 	bl	d81dc <mbedtls_mpi_mul_mpi>
   db9f0:	4607      	mov	r7, r0
   db9f2:	b9b8      	cbnz	r0, dba24 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   db9f4:	a906      	add	r1, sp, #24
   db9f6:	462a      	mov	r2, r5
   db9f8:	4608      	mov	r0, r1
   db9fa:	f7fc fe2b 	bl	d8654 <mbedtls_mpi_mod_mpi>
   db9fe:	4607      	mov	r7, r0
   dba00:	b980      	cbnz	r0, dba24 <mbedtls_rsa_private+0x30c>
   dba02:	e7e2      	b.n	db9ca <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
   dba04:	a91e      	add	r1, sp, #120	; 0x78
   dba06:	a821      	add	r0, sp, #132	; 0x84
   dba08:	f7fc fa84 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
   dba0c:	b948      	cbnz	r0, dba22 <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   dba0e:	6862      	ldr	r2, [r4, #4]
   dba10:	992e      	ldr	r1, [sp, #184]	; 0xb8
   dba12:	a806      	add	r0, sp, #24
   dba14:	f7fc f92d 	bl	d7c72 <mbedtls_mpi_write_binary>
   dba18:	4607      	mov	r7, r0
   dba1a:	e003      	b.n	dba24 <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   dba1c:	f06f 0703 	mvn.w	r7, #3
   dba20:	e000      	b.n	dba24 <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   dba22:	4f16      	ldr	r7, [pc, #88]	; (dba7c <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
   dba24:	a809      	add	r0, sp, #36	; 0x24
   dba26:	f7fc f818 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
   dba2a:	a80c      	add	r0, sp, #48	; 0x30
   dba2c:	f7fc f815 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
   dba30:	a80f      	add	r0, sp, #60	; 0x3c
   dba32:	f7fc f812 	bl	d7a5a <mbedtls_mpi_free>

    if( f_rng != NULL )
   dba36:	b12e      	cbz	r6, dba44 <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
   dba38:	a818      	add	r0, sp, #96	; 0x60
   dba3a:	f7fc f80e 	bl	d7a5a <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
   dba3e:	a81b      	add	r0, sp, #108	; 0x6c
   dba40:	f7fc f80b 	bl	d7a5a <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
   dba44:	a806      	add	r0, sp, #24
   dba46:	f7fc f808 	bl	d7a5a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
   dba4a:	a812      	add	r0, sp, #72	; 0x48
   dba4c:	f7fc f805 	bl	d7a5a <mbedtls_mpi_free>
   dba50:	a815      	add	r0, sp, #84	; 0x54
   dba52:	f7fc f802 	bl	d7a5a <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
   dba56:	a821      	add	r0, sp, #132	; 0x84
   dba58:	f7fb ffff 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
   dba5c:	a81e      	add	r0, sp, #120	; 0x78
   dba5e:	f7fb fffc 	bl	d7a5a <mbedtls_mpi_free>

    if( ret != 0 )
   dba62:	b13f      	cbz	r7, dba74 <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
   dba64:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
   dba68:	e000      	b.n	dba6c <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dba6a:	4b05      	ldr	r3, [pc, #20]	; (dba80 <mbedtls_rsa_private+0x368>)
   dba6c:	9303      	str	r3, [sp, #12]
   dba6e:	e001      	b.n	dba74 <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
   dba70:	4f04      	ldr	r7, [pc, #16]	; (dba84 <mbedtls_rsa_private+0x36c>)
   dba72:	e7d7      	b.n	dba24 <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
   dba74:	9803      	ldr	r0, [sp, #12]
   dba76:	b025      	add	sp, #148	; 0x94
   dba78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dba7c:	ffffbc80 	.word	0xffffbc80
   dba80:	ffffbf80 	.word	0xffffbf80
   dba84:	ffffbb80 	.word	0xffffbb80

000dba88 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
   dba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dba8c:	b08d      	sub	sp, #52	; 0x34
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dba8e:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
   dba90:	4680      	mov	r8, r0
   dba92:	468b      	mov	fp, r1
   dba94:	9205      	str	r2, [sp, #20]
   dba96:	9306      	str	r3, [sp, #24]
   dba98:	9f18      	ldr	r7, [sp, #96]	; 0x60
   dba9a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dba9c:	d105      	bne.n	dbaaa <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
   dba9e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dbaa2:	2b01      	cmp	r3, #1
   dbaa4:	d001      	beq.n	dbaaa <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dbaa6:	4b41      	ldr	r3, [pc, #260]	; (dbbac <mbedtls_rsa_rsaes_oaep_encrypt+0x124>)
   dbaa8:	e07b      	b.n	dbba2 <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>

    if( f_rng == NULL )
   dbaaa:	f1bb 0f00 	cmp.w	fp, #0
   dbaae:	d0fa      	beq.n	dbaa6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   dbab0:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
   dbab4:	f7fd ff36 	bl	d9924 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dbab8:	9003      	str	r0, [sp, #12]
   dbaba:	2800      	cmp	r0, #0
   dbabc:	d0f3      	beq.n	dbaa6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   dbabe:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
   dbac2:	f7fe f86d 	bl	d9ba0 <mbedtls_md_get_size>
   dbac6:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   dbac8:	b200      	sxth	r0, r0
   dbaca:	0043      	lsls	r3, r0, #1
   dbacc:	9304      	str	r3, [sp, #16]
   dbace:	9a04      	ldr	r2, [sp, #16]
   dbad0:	1cbb      	adds	r3, r7, #2
   dbad2:	4413      	add	r3, r2
   dbad4:	429f      	cmp	r7, r3
   dbad6:	d8e6      	bhi.n	dbaa6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
   dbad8:	429c      	cmp	r4, r3
   dbada:	d3e4      	bcc.n	dbaa6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
   dbadc:	4622      	mov	r2, r4
   dbade:	2100      	movs	r1, #0
   dbae0:	4630      	mov	r0, r6
   dbae2:	f00b f856 	bl	e6b92 <memset>

    *p++ = 0;
   dbae6:	f106 0901 	add.w	r9, r6, #1
   dbaea:	2300      	movs	r3, #0
   dbaec:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
   dbaee:	462a      	mov	r2, r5
   dbaf0:	4649      	mov	r1, r9
   dbaf2:	9805      	ldr	r0, [sp, #20]
   dbaf4:	47d8      	blx	fp
   dbaf6:	b110      	cbz	r0, dbafe <mbedtls_rsa_rsaes_oaep_encrypt+0x76>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   dbaf8:	f5a0 4389 	sub.w	r3, r0, #17536	; 0x4480
   dbafc:	e051      	b.n	dbba2 <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>

    p += hlen;
   dbafe:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
   dbb02:	4653      	mov	r3, sl
   dbb04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dbb06:	9916      	ldr	r1, [sp, #88]	; 0x58
   dbb08:	9803      	ldr	r0, [sp, #12]
   dbb0a:	f7fd ff7d 	bl	d9a08 <mbedtls_md>
   dbb0e:	4603      	mov	r3, r0
   dbb10:	2800      	cmp	r0, #0
   dbb12:	d146      	bne.n	dbba2 <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>
   dbb14:	9007      	str	r0, [sp, #28]
   dbb16:	1ea0      	subs	r0, r4, #2
   dbb18:	9b04      	ldr	r3, [sp, #16]
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
   dbb1a:	9919      	ldr	r1, [sp, #100]	; 0x64
   dbb1c:	1bc0      	subs	r0, r0, r7
   dbb1e:	4428      	add	r0, r5
   dbb20:	1ac0      	subs	r0, r0, r3
    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
   dbb22:	2201      	movs	r2, #1
   dbb24:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
   dbb28:	4410      	add	r0, r2
   dbb2a:	4450      	add	r0, sl
   dbb2c:	463a      	mov	r2, r7

    mbedtls_md_init( &md_ctx );
   dbb2e:	af09      	add	r7, sp, #36	; 0x24
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
   dbb30:	f00b f809 	bl	e6b46 <memcpy>

    mbedtls_md_init( &md_ctx );
   dbb34:	4638      	mov	r0, r7
   dbb36:	f7fd ff01 	bl	d993c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   dbb3a:	9b07      	ldr	r3, [sp, #28]
   dbb3c:	9903      	ldr	r1, [sp, #12]
   dbb3e:	461a      	mov	r2, r3
   dbb40:	4638      	mov	r0, r7
   dbb42:	f7fd ff21 	bl	d9988 <mbedtls_md_setup>
   dbb46:	4603      	mov	r3, r0
   dbb48:	b9a8      	cbnz	r0, dbb76 <mbedtls_rsa_rsaes_oaep_encrypt+0xee>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
   dbb4a:	f105 0a01 	add.w	sl, r5, #1
   dbb4e:	3c01      	subs	r4, #1
   dbb50:	44b2      	add	sl, r6
   dbb52:	1b64      	subs	r4, r4, r5
   dbb54:	462b      	mov	r3, r5
   dbb56:	9700      	str	r7, [sp, #0]
   dbb58:	464a      	mov	r2, r9
   dbb5a:	4621      	mov	r1, r4
   dbb5c:	4650      	mov	r0, sl
   dbb5e:	f7ff faed 	bl	db13c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   dbb62:	4603      	mov	r3, r0
   dbb64:	b938      	cbnz	r0, dbb76 <mbedtls_rsa_rsaes_oaep_encrypt+0xee>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
   dbb66:	4623      	mov	r3, r4
   dbb68:	9700      	str	r7, [sp, #0]
   dbb6a:	4652      	mov	r2, sl
   dbb6c:	4629      	mov	r1, r5
   dbb6e:	4648      	mov	r0, r9
   dbb70:	f7ff fae4 	bl	db13c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   dbb74:	4603      	mov	r3, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
   dbb76:	a809      	add	r0, sp, #36	; 0x24
   dbb78:	9303      	str	r3, [sp, #12]
   dbb7a:	f7fd fee4 	bl	d9946 <mbedtls_md_free>

    if( ret != 0 )
   dbb7e:	9b03      	ldr	r3, [sp, #12]
   dbb80:	b97b      	cbnz	r3, dbba2 <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   dbb82:	9b06      	ldr	r3, [sp, #24]
   dbb84:	b92b      	cbnz	r3, dbb92 <mbedtls_rsa_rsaes_oaep_encrypt+0x10a>
   dbb86:	4632      	mov	r2, r6
   dbb88:	4631      	mov	r1, r6
   dbb8a:	4640      	mov	r0, r8
   dbb8c:	f7ff fd82 	bl	db694 <mbedtls_rsa_public>
   dbb90:	e006      	b.n	dbba0 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
   dbb92:	9600      	str	r6, [sp, #0]
   dbb94:	4633      	mov	r3, r6
   dbb96:	9a05      	ldr	r2, [sp, #20]
   dbb98:	4659      	mov	r1, fp
   dbb9a:	4640      	mov	r0, r8
   dbb9c:	f7ff fdbc 	bl	db718 <mbedtls_rsa_private>
   dbba0:	4603      	mov	r3, r0
}
   dbba2:	4618      	mov	r0, r3
   dbba4:	b00d      	add	sp, #52	; 0x34
   dbba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbbaa:	bf00      	nop
   dbbac:	ffffbf80 	.word	0xffffbf80

000dbbb0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
   dbbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbbb4:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dbbb6:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
   dbbba:	4607      	mov	r7, r0
   dbbbc:	4689      	mov	r9, r1
   dbbbe:	4693      	mov	fp, r2
   dbbc0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dbbc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dbbc6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dbbc8:	d103      	bne.n	dbbd2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
   dbbca:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   dbbce:	2a00      	cmp	r2, #0
   dbbd0:	d155      	bne.n	dbc7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
   dbbd2:	f1b9 0f00 	cmp.w	r9, #0
   dbbd6:	d052      	beq.n	dbc7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
   dbbd8:	2b00      	cmp	r3, #0
   dbbda:	d050      	beq.n	dbc7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
   dbbdc:	2e00      	cmp	r6, #0
   dbbde:	d04e      	beq.n	dbc7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
   dbbe0:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   dbbe4:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
   dbbe6:	d24a      	bcs.n	dbc7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
   dbbe8:	4294      	cmp	r4, r2
   dbbea:	d348      	bcc.n	dbc7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
   dbbec:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
   dbbee:	3c03      	subs	r4, #3

    *p++ = 0;
   dbbf0:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
   dbbf2:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
   dbbf6:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
   dbbfa:	f1ba 0f00 	cmp.w	sl, #0
   dbbfe:	d118      	bne.n	dbc32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
   dbc00:	2202      	movs	r2, #2
   dbc02:	7072      	strb	r2, [r6, #1]
   dbc04:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
   dbc06:	42a5      	cmp	r5, r4
   dbc08:	d01c      	beq.n	dbc44 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
   dbc0a:	2264      	movs	r2, #100	; 0x64
   dbc0c:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
   dbc0e:	2201      	movs	r2, #1
   dbc10:	4629      	mov	r1, r5
   dbc12:	4658      	mov	r0, fp
   dbc14:	9301      	str	r3, [sp, #4]
   dbc16:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
   dbc18:	782a      	ldrb	r2, [r5, #0]
   dbc1a:	9b01      	ldr	r3, [sp, #4]
   dbc1c:	bb8a      	cbnz	r2, dbc82 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
   dbc1e:	9a00      	ldr	r2, [sp, #0]
   dbc20:	3a01      	subs	r2, #1
   dbc22:	9200      	str	r2, [sp, #0]
   dbc24:	d102      	bne.n	dbc2c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   dbc26:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   dbc2a:	e02e      	b.n	dbc8a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
   dbc2c:	2800      	cmp	r0, #0
   dbc2e:	d0ee      	beq.n	dbc0e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
   dbc30:	e7f9      	b.n	dbc26 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
   dbc32:	2201      	movs	r2, #1
   dbc34:	7072      	strb	r2, [r6, #1]
   dbc36:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
   dbc38:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
   dbc3a:	42ac      	cmp	r4, r5
   dbc3c:	d002      	beq.n	dbc44 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
   dbc3e:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
   dbc42:	e7fa      	b.n	dbc3a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
   dbc44:	4620      	mov	r0, r4
   dbc46:	2200      	movs	r2, #0
   dbc48:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
   dbc4c:	4619      	mov	r1, r3
   dbc4e:	4642      	mov	r2, r8
   dbc50:	f00a ff79 	bl	e6b46 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   dbc54:	f1ba 0f00 	cmp.w	sl, #0
   dbc58:	d107      	bne.n	dbc6a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
   dbc5a:	4632      	mov	r2, r6
   dbc5c:	4631      	mov	r1, r6
   dbc5e:	4638      	mov	r0, r7
}
   dbc60:	b003      	add	sp, #12
   dbc62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   dbc66:	f7ff bd15 	b.w	db694 <mbedtls_rsa_public>
   dbc6a:	4633      	mov	r3, r6
   dbc6c:	465a      	mov	r2, fp
   dbc6e:	4649      	mov	r1, r9
   dbc70:	4638      	mov	r0, r7
   dbc72:	960c      	str	r6, [sp, #48]	; 0x30
}
   dbc74:	b003      	add	sp, #12
   dbc76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   dbc7a:	f7ff bd4d 	b.w	db718 <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dbc7e:	4804      	ldr	r0, [pc, #16]	; (dbc90 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
   dbc80:	e003      	b.n	dbc8a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
   dbc82:	2800      	cmp	r0, #0
   dbc84:	d1cf      	bne.n	dbc26 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
   dbc86:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
   dbc88:	e7bd      	b.n	dbc06 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
   dbc8a:	b003      	add	sp, #12
   dbc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc90:	ffffbf80 	.word	0xffffbf80

000dbc94 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
   dbc94:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbc96:	b087      	sub	sp, #28
    switch( ctx->padding )
   dbc98:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
   dbc9c:	ac0c      	add	r4, sp, #48	; 0x30
   dbc9e:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
   dbca0:	b157      	cbz	r7, dbcb8 <mbedtls_rsa_pkcs1_encrypt+0x24>
   dbca2:	2f01      	cmp	r7, #1
   dbca4:	d110      	bne.n	dbcc8 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
   dbca6:	9402      	str	r4, [sp, #8]
   dbca8:	2400      	movs	r4, #0
   dbcaa:	9604      	str	r6, [sp, #16]
   dbcac:	9503      	str	r5, [sp, #12]
   dbcae:	9401      	str	r4, [sp, #4]
   dbcb0:	9400      	str	r4, [sp, #0]
   dbcb2:	f7ff fee9 	bl	dba88 <mbedtls_rsa_rsaes_oaep_encrypt>
   dbcb6:	e008      	b.n	dbcca <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
   dbcb8:	960e      	str	r6, [sp, #56]	; 0x38
   dbcba:	950d      	str	r5, [sp, #52]	; 0x34
   dbcbc:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dbcbe:	b007      	add	sp, #28
   dbcc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
   dbcc4:	f7ff bf74 	b.w	dbbb0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   dbcc8:	4801      	ldr	r0, [pc, #4]	; (dbcd0 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
   dbcca:	b007      	add	sp, #28
   dbccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbcce:	bf00      	nop
   dbcd0:	ffffbf00 	.word	0xffffbf00

000dbcd4 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
   dbcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbcd8:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dbcdc:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
   dbcde:	4606      	mov	r6, r0
   dbce0:	468a      	mov	sl, r1
   dbce2:	9203      	str	r2, [sp, #12]
   dbce4:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dbce6:	d105      	bne.n	dbcf4 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
   dbce8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dbcec:	2b01      	cmp	r3, #1
   dbcee:	d001      	beq.n	dbcf4 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dbcf0:	485c      	ldr	r0, [pc, #368]	; (dbe64 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
   dbcf2:	e0b2      	b.n	dbe5a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
   dbcf4:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
   dbcf6:	f1a7 0310 	sub.w	r3, r7, #16
   dbcfa:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   dbcfe:	d8f7      	bhi.n	dbcf0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   dbd00:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
   dbd04:	f7fd fe0e 	bl	d9924 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dbd08:	9002      	str	r0, [sp, #8]
   dbd0a:	2800      	cmp	r0, #0
   dbd0c:	d0f0      	beq.n	dbcf0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dbd0e:	f7fd ff47 	bl	d9ba0 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
   dbd12:	f100 0801 	add.w	r8, r0, #1
   dbd16:	ea4f 0548 	mov.w	r5, r8, lsl #1
   dbd1a:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dbd1c:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
   dbd1e:	d3e7      	bcc.n	dbcf0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
   dbd20:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   dbd24:	f1bb 0f00 	cmp.w	fp, #0
   dbd28:	d106      	bne.n	dbd38 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
   dbd2a:	464a      	mov	r2, r9
   dbd2c:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
   dbd30:	4630      	mov	r0, r6
   dbd32:	f7ff fcaf 	bl	db694 <mbedtls_rsa_public>
   dbd36:	e008      	b.n	dbd4a <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
   dbd38:	f8cd 9000 	str.w	r9, [sp]
   dbd3c:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
   dbd40:	9a03      	ldr	r2, [sp, #12]
   dbd42:	4651      	mov	r1, sl
   dbd44:	4630      	mov	r0, r6
   dbd46:	f7ff fce7 	bl	db718 <mbedtls_rsa_private>
   dbd4a:	4682      	mov	sl, r0

    if( ret != 0 )
   dbd4c:	2800      	cmp	r0, #0
   dbd4e:	d13c      	bne.n	dbdca <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
   dbd50:	ae05      	add	r6, sp, #20
   dbd52:	4630      	mov	r0, r6
   dbd54:	f7fd fdf2 	bl	d993c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   dbd58:	4652      	mov	r2, sl
   dbd5a:	9902      	ldr	r1, [sp, #8]
   dbd5c:	4630      	mov	r0, r6
   dbd5e:	f7fd fe13 	bl	d9988 <mbedtls_md_setup>
   dbd62:	4682      	mov	sl, r0
   dbd64:	b108      	cbz	r0, dbd6a <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
   dbd66:	4630      	mov	r0, r6
   dbd68:	e03b      	b.n	dbde2 <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
   dbd6a:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
   dbd6e:	44c8      	add	r8, r9
   dbd70:	ebc4 0b0b 	rsb	fp, r4, fp
   dbd74:	9600      	str	r6, [sp, #0]
   dbd76:	465b      	mov	r3, fp
   dbd78:	4642      	mov	r2, r8
   dbd7a:	4621      	mov	r1, r4
   dbd7c:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   dbd80:	f7ff f9dc 	bl	db13c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
   dbd84:	4682      	mov	sl, r0
   dbd86:	bb58      	cbnz	r0, dbde0 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
   dbd88:	9600      	str	r6, [sp, #0]
   dbd8a:	4623      	mov	r3, r4
   dbd8c:	f10d 0261 	add.w	r2, sp, #97	; 0x61
   dbd90:	4659      	mov	r1, fp
   dbd92:	4640      	mov	r0, r8
   dbd94:	f7ff f9d2 	bl	db13c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
                          &md_ctx ) ) != 0 ||
   dbd98:	4682      	mov	sl, r0
   dbd9a:	bb08      	cbnz	r0, dbde0 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
   dbd9c:	e024      	b.n	dbde8 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
   dbd9e:	5c88      	ldrb	r0, [r1, r2]
   dbda0:	f080 0001 	eor.w	r0, r0, #1
   dbda4:	ea50 030e 	orrs.w	r3, r0, lr
   dbda8:	d151      	bne.n	dbe4e <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
   dbdaa:	3201      	adds	r2, #1
   dbdac:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
   dbdae:	aa18      	add	r2, sp, #96	; 0x60
   dbdb0:	1a8a      	subs	r2, r1, r2
   dbdb2:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
   dbdb6:	1aba      	subs	r2, r7, r2
   dbdb8:	4282      	cmp	r2, r0
   dbdba:	d84b      	bhi.n	dbe54 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
   dbdbc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   dbdc0:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
   dbdc2:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
   dbdc6:	f00a febe 	bl	e6b46 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
   dbdca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   dbdce:	a818      	add	r0, sp, #96	; 0x60
   dbdd0:	f7ff f9ac 	bl	db12c <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
   dbdd4:	a808      	add	r0, sp, #32
   dbdd6:	2140      	movs	r1, #64	; 0x40
   dbdd8:	f7ff f9a8 	bl	db12c <_ZL15mbedtls_zeroizePvj>

    return( ret );
   dbddc:	4650      	mov	r0, sl
   dbdde:	e03c      	b.n	dbe5a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
   dbde0:	a805      	add	r0, sp, #20
   dbde2:	f7fd fdb0 	bl	d9946 <mbedtls_md_free>
        goto cleanup;
   dbde6:	e7f0      	b.n	dbdca <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
   dbde8:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   dbdea:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
   dbdec:	f7fd fdab 	bl	d9946 <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   dbdf0:	4633      	mov	r3, r6
   dbdf2:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   dbdf6:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
   dbdfa:	9802      	ldr	r0, [sp, #8]
   dbdfc:	f7fd fe04 	bl	d9a08 <mbedtls_md>
   dbe00:	4682      	mov	sl, r0
   dbe02:	2800      	cmp	r0, #0
   dbe04:	d1e1      	bne.n	dbdca <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
   dbe06:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
   dbe0a:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
   dbe0e:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
   dbe10:	4650      	mov	r0, sl
   dbe12:	42a0      	cmp	r0, r4
   dbe14:	d208      	bcs.n	dbe28 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
   dbe16:	5c32      	ldrb	r2, [r6, r0]
   dbe18:	f811 c000 	ldrb.w	ip, [r1, r0]
   dbe1c:	ea82 0c0c 	eor.w	ip, r2, ip
   dbe20:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
   dbe24:	3001      	adds	r0, #1
   dbe26:	e7f4      	b.n	dbe12 <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
   dbe28:	4421      	add	r1, r4
   dbe2a:	1b7d      	subs	r5, r7, r5

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   dbe2c:	2400      	movs	r4, #0
   dbe2e:	460e      	mov	r6, r1
   dbe30:	440d      	add	r5, r1
   dbe32:	4622      	mov	r2, r4
   dbe34:	42b5      	cmp	r5, r6
   dbe36:	d0b2      	beq.n	dbd9e <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
   dbe38:	f816 0b01 	ldrb.w	r0, [r6], #1
   dbe3c:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   dbe3e:	4260      	negs	r0, r4
   dbe40:	4320      	orrs	r0, r4
   dbe42:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   dbe46:	f080 0001 	eor.w	r0, r0, #1
   dbe4a:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   dbe4c:	e7f2      	b.n	dbe34 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   dbe4e:	f8df a018 	ldr.w	sl, [pc, #24]	; dbe68 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
   dbe52:	e7ba      	b.n	dbdca <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   dbe54:	f8df a014 	ldr.w	sl, [pc, #20]	; dbe6c <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
   dbe58:	e7b7      	b.n	dbdca <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
   dbe5a:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   dbe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbe62:	bf00      	nop
   dbe64:	ffffbf80 	.word	0xffffbf80
   dbe68:	ffffbf00 	.word	0xffffbf00
   dbe6c:	ffffbc00 	.word	0xffffbc00

000dbe70 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
   dbe70:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dbe72:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
   dbe74:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
   dbe78:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dbe7a:	d103      	bne.n	dbe84 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
   dbe7c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dbe80:	2b00      	cmp	r3, #0
   dbe82:	d17f      	bne.n	dbf84 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
   dbe84:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
   dbe86:	f1a7 0310 	sub.w	r3, r7, #16
   dbe8a:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   dbe8e:	d879      	bhi.n	dbf84 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
   dbe90:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   dbe92:	b945      	cbnz	r5, dbea6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
   dbe94:	4632      	mov	r2, r6
   dbe96:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
   dbe9a:	f7ff fbfb 	bl	db694 <mbedtls_rsa_public>

    if( ret != 0 )
   dbe9e:	4604      	mov	r4, r0
   dbea0:	2800      	cmp	r0, #0
   dbea2:	d168      	bne.n	dbf76 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
   dbea4:	e02f      	b.n	dbf06 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   dbea6:	9600      	str	r6, [sp, #0]
   dbea8:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
   dbeac:	f7ff fc34 	bl	db718 <mbedtls_rsa_private>

    if( ret != 0 )
   dbeb0:	4604      	mov	r4, r0
   dbeb2:	2800      	cmp	r0, #0
   dbeb4:	d15f      	bne.n	dbf76 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
   dbeb6:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
   dbeb8:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
   dbeba:	d125      	bne.n	dbf08 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
   dbebc:	7873      	ldrb	r3, [r6, #1]
   dbebe:	f083 0302 	eor.w	r3, r3, #2
   dbec2:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
   dbec4:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
   dbec6:	4686      	mov	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
   dbec8:	1efd      	subs	r5, r7, #3
   dbeca:	42a9      	cmp	r1, r5
   dbecc:	d212      	bcs.n	dbef4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
   dbece:	1872      	adds	r2, r6, r1
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
   dbed0:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
   dbed2:	7890      	ldrb	r0, [r2, #2]
   dbed4:	4242      	negs	r2, r0
   dbed6:	4310      	orrs	r0, r2
   dbed8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   dbedc:	f080 0001 	eor.w	r0, r0, #1
   dbee0:	4304      	orrs	r4, r0
   dbee2:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   dbee4:	4262      	negs	r2, r4
   dbee6:	4322      	orrs	r2, r4
   dbee8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   dbeec:	f082 0201 	eor.w	r2, r2, #1
   dbef0:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
   dbef2:	e7ea      	b.n	dbeca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
   dbef4:	f10d 020a 	add.w	r2, sp, #10
   dbef8:	f10e 0101 	add.w	r1, lr, #1
   dbefc:	4411      	add	r1, r2
   dbefe:	f812 200e 	ldrb.w	r2, [r2, lr]
   dbf02:	4313      	orrs	r3, r2
   dbf04:	e01e      	b.n	dbf44 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
   dbf06:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
   dbf08:	7873      	ldrb	r3, [r6, #1]
   dbf0a:	f083 0301 	eor.w	r3, r3, #1
   dbf0e:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
   dbf10:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
   dbf12:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
   dbf14:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
   dbf16:	1efc      	subs	r4, r7, #3
   dbf18:	42a1      	cmp	r1, r4
   dbf1a:	d20b      	bcs.n	dbf34 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
   dbf1c:	1870      	adds	r0, r6, r1
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
   dbf1e:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
   dbf20:	7880      	ldrb	r0, [r0, #2]
   dbf22:	28ff      	cmp	r0, #255	; 0xff
   dbf24:	bf18      	it	ne
   dbf26:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
   dbf2a:	f082 0001 	eor.w	r0, r2, #1
   dbf2e:	fa5e fe80 	uxtab	lr, lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
   dbf32:	e7f1      	b.n	dbf18 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
   dbf34:	f10d 020a 	add.w	r2, sp, #10
   dbf38:	f10e 0101 	add.w	r1, lr, #1
   dbf3c:	f812 500e 	ldrb.w	r5, [r2, lr]
   dbf40:	4411      	add	r1, r2
   dbf42:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
   dbf44:	f1be 0f07 	cmp.w	lr, #7
   dbf48:	bf8c      	ite	hi
   dbf4a:	461c      	movhi	r4, r3
   dbf4c:	f043 0401 	orrls.w	r4, r3, #1
   dbf50:	b264      	sxtb	r4, r4
   dbf52:	b96c      	cbnz	r4, dbf70 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
   dbf54:	1b8a      	subs	r2, r1, r6
   dbf56:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   dbf5a:	1aba      	subs	r2, r7, r2
   dbf5c:	429a      	cmp	r2, r3
   dbf5e:	d809      	bhi.n	dbf74 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
   dbf60:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
   dbf64:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
   dbf68:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
   dbf6a:	f00a fdec 	bl	e6b46 <memcpy>
   dbf6e:	e002      	b.n	dbf76 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   dbf70:	4c06      	ldr	r4, [pc, #24]	; (dbf8c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
   dbf72:	e000      	b.n	dbf76 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   dbf74:	4c06      	ldr	r4, [pc, #24]	; (dbf90 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
   dbf76:	4630      	mov	r0, r6
   dbf78:	f44f 6180 	mov.w	r1, #1024	; 0x400
   dbf7c:	f7ff f8d6 	bl	db12c <_ZL15mbedtls_zeroizePvj>

    return( ret );
   dbf80:	4620      	mov	r0, r4
   dbf82:	e000      	b.n	dbf86 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dbf84:	4803      	ldr	r0, [pc, #12]	; (dbf94 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
   dbf86:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
   dbf8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbf8c:	ffffbf00 	.word	0xffffbf00
   dbf90:	ffffbc00 	.word	0xffffbc00
   dbf94:	ffffbf80 	.word	0xffffbf80

000dbf98 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
   dbf98:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbf9a:	b087      	sub	sp, #28
    switch( ctx->padding )
   dbf9c:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
   dbfa0:	ac0c      	add	r4, sp, #48	; 0x30
   dbfa2:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
   dbfa4:	f1be 0f00 	cmp.w	lr, #0
   dbfa8:	d00c      	beq.n	dbfc4 <mbedtls_rsa_pkcs1_decrypt+0x2c>
   dbfaa:	f1be 0f01 	cmp.w	lr, #1
   dbfae:	d112      	bne.n	dbfd6 <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
   dbfb0:	9402      	str	r4, [sp, #8]
   dbfb2:	2400      	movs	r4, #0
   dbfb4:	9705      	str	r7, [sp, #20]
   dbfb6:	9604      	str	r6, [sp, #16]
   dbfb8:	9503      	str	r5, [sp, #12]
   dbfba:	9401      	str	r4, [sp, #4]
   dbfbc:	9400      	str	r4, [sp, #0]
   dbfbe:	f7ff fe89 	bl	dbcd4 <mbedtls_rsa_rsaes_oaep_decrypt>
   dbfc2:	e009      	b.n	dbfd8 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
   dbfc4:	970f      	str	r7, [sp, #60]	; 0x3c
   dbfc6:	960e      	str	r6, [sp, #56]	; 0x38
   dbfc8:	950d      	str	r5, [sp, #52]	; 0x34
   dbfca:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dbfcc:	b007      	add	sp, #28
   dbfce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
   dbfd2:	f7ff bf4d 	b.w	dbe70 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   dbfd6:	4801      	ldr	r0, [pc, #4]	; (dbfdc <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
   dbfd8:	b007      	add	sp, #28
   dbfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbfdc:	ffffbf00 	.word	0xffffbf00

000dbfe0 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
   dbfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbfe4:	b09d      	sub	sp, #116	; 0x74
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dbfe6:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
   dbfe8:	4680      	mov	r8, r0
   dbfea:	468a      	mov	sl, r1
   dbfec:	9204      	str	r2, [sp, #16]
   dbfee:	9305      	str	r3, [sp, #20]
   dbff0:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
   dbff4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dbff6:	d105      	bne.n	dc004 <mbedtls_rsa_rsassa_pss_sign+0x24>
   dbff8:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
   dbffc:	2b01      	cmp	r3, #1
   dbffe:	d001      	beq.n	dc004 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dc000:	4859      	ldr	r0, [pc, #356]	; (dc168 <mbedtls_rsa_rsassa_pss_sign+0x188>)
   dc002:	e0ae      	b.n	dc162 <mbedtls_rsa_rsassa_pss_sign+0x182>

    if( f_rng == NULL )
   dc004:	f1ba 0f00 	cmp.w	sl, #0
   dc008:	d0fa      	beq.n	dc000 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   dc00a:	f8d8 7004 	ldr.w	r7, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
   dc00e:	b130      	cbz	r0, dc01e <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
   dc010:	f7fd fc88 	bl	d9924 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   dc014:	2800      	cmp	r0, #0
   dc016:	d0f3      	beq.n	dc000 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   dc018:	f7fd fdc2 	bl	d9ba0 <mbedtls_md_get_size>
   dc01c:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   dc01e:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
   dc022:	f7fd fc7f 	bl	d9924 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dc026:	4683      	mov	fp, r0
   dc028:	2800      	cmp	r0, #0
   dc02a:	d0e9      	beq.n	dc000 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dc02c:	f7fd fdb8 	bl	d9ba0 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
   dc030:	0043      	lsls	r3, r0, #1
   dc032:	3302      	adds	r3, #2
   dc034:	429f      	cmp	r7, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dc036:	4606      	mov	r6, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
   dc038:	d3e2      	bcc.n	dc000 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
   dc03a:	463a      	mov	r2, r7
   dc03c:	2100      	movs	r1, #0
   dc03e:	4620      	mov	r0, r4
   dc040:	f00a fda7 	bl	e6b92 <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
   dc044:	4632      	mov	r2, r6
   dc046:	a90c      	add	r1, sp, #48	; 0x30
   dc048:	9804      	ldr	r0, [sp, #16]
   dc04a:	47d0      	blx	sl
   dc04c:	b110      	cbz	r0, dc054 <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   dc04e:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   dc052:	e086      	b.n	dc162 <mbedtls_rsa_rsassa_pss_sign+0x182>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dc054:	f108 0308 	add.w	r3, r8, #8
   dc058:	9007      	str	r0, [sp, #28]
   dc05a:	4618      	mov	r0, r3
   dc05c:	9303      	str	r3, [sp, #12]
   dc05e:	f7fb fdad 	bl	d7bbc <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
   dc062:	b232      	sxth	r2, r6
   dc064:	eba7 0242 	sub.w	r2, r7, r2, lsl #1
    *p++ = 0x01;
   dc068:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   dc06c:	4422      	add	r2, r4
   dc06e:	2101      	movs	r1, #1
   dc070:	44a1      	add	r9, r4
   dc072:	f802 1c02 	strb.w	r1, [r2, #-2]
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dc076:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
   dc078:	4632      	mov	r2, r6
   dc07a:	a90c      	add	r1, sp, #48	; 0x30
    p += slen;

    mbedtls_md_init( &md_ctx );
   dc07c:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
   dc07e:	4648      	mov	r0, r9
   dc080:	f00a fd61 	bl	e6b46 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
   dc084:	4628      	mov	r0, r5
   dc086:	f7fd fc59 	bl	d993c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   dc08a:	9b07      	ldr	r3, [sp, #28]
   dc08c:	4659      	mov	r1, fp
   dc08e:	461a      	mov	r2, r3
   dc090:	4628      	mov	r0, r5
   dc092:	f7fd fc79 	bl	d9988 <mbedtls_md_setup>
   dc096:	4602      	mov	r2, r0
   dc098:	2800      	cmp	r0, #0
   dc09a:	d14b      	bne.n	dc134 <mbedtls_rsa_rsassa_pss_sign+0x154>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   dc09c:	4628      	mov	r0, r5
   dc09e:	f7fd fc95 	bl	d99cc <mbedtls_md_starts>
   dc0a2:	4602      	mov	r2, r0
   dc0a4:	2800      	cmp	r0, #0
   dc0a6:	d145      	bne.n	dc134 <mbedtls_rsa_rsassa_pss_sign+0x154>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
   dc0a8:	eb09 0b06 	add.w	fp, r9, r6
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
   dc0ac:	2208      	movs	r2, #8
   dc0ae:	4659      	mov	r1, fp
   dc0b0:	4628      	mov	r0, r5
   dc0b2:	f7fd fc95 	bl	d99e0 <mbedtls_md_update>
   dc0b6:	4602      	mov	r2, r0
   dc0b8:	2800      	cmp	r0, #0
   dc0ba:	d13b      	bne.n	dc134 <mbedtls_rsa_rsassa_pss_sign+0x154>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
   dc0bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   dc0be:	9928      	ldr	r1, [sp, #160]	; 0xa0
   dc0c0:	4628      	mov	r0, r5
   dc0c2:	f7fd fc8d 	bl	d99e0 <mbedtls_md_update>
   dc0c6:	4602      	mov	r2, r0
   dc0c8:	bba0      	cbnz	r0, dc134 <mbedtls_rsa_rsassa_pss_sign+0x154>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
   dc0ca:	4632      	mov	r2, r6
   dc0cc:	a90c      	add	r1, sp, #48	; 0x30
   dc0ce:	4628      	mov	r0, r5
   dc0d0:	f7fd fc86 	bl	d99e0 <mbedtls_md_update>
   dc0d4:	4602      	mov	r2, r0
   dc0d6:	bb68      	cbnz	r0, dc134 <mbedtls_rsa_rsassa_pss_sign+0x154>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
   dc0d8:	4659      	mov	r1, fp
   dc0da:	4628      	mov	r0, r5
   dc0dc:	f7fd fc8a 	bl	d99f4 <mbedtls_md_finish>
   dc0e0:	4602      	mov	r2, r0
   dc0e2:	bb38      	cbnz	r0, dc134 <mbedtls_rsa_rsassa_pss_sign+0x154>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
   dc0e4:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   dc0e6:	9500      	str	r5, [sp, #0]
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
   dc0e8:	3b01      	subs	r3, #1
   dc0ea:	f013 0f07 	tst.w	r3, #7
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   dc0ee:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
   dc0f2:	bf0c      	ite	eq
   dc0f4:	2001      	moveq	r0, #1
   dc0f6:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   dc0f8:	1b89      	subs	r1, r1, r6
   dc0fa:	465a      	mov	r2, fp
   dc0fc:	1a09      	subs	r1, r1, r0
   dc0fe:	4633      	mov	r3, r6
   dc100:	4420      	add	r0, r4
   dc102:	f7ff f81b 	bl	db13c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   dc106:	4602      	mov	r2, r0
   dc108:	b9a0      	cbnz	r0, dc134 <mbedtls_rsa_rsassa_pss_sign+0x154>
   dc10a:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dc10c:	9803      	ldr	r0, [sp, #12]
   dc10e:	f7fb fd55 	bl	d7bbc <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   dc112:	ebc0 00c7 	rsb	r0, r0, r7, lsl #3
   dc116:	7823      	ldrb	r3, [r4, #0]
   dc118:	3001      	adds	r0, #1
   dc11a:	27ff      	movs	r7, #255	; 0xff
   dc11c:	fa47 f000 	asr.w	r0, r7, r0
   dc120:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
   dc122:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   dc124:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
   dc126:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
   dc128:	f809 3016 	strb.w	r3, [r9, r6, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
   dc12c:	a80c      	add	r0, sp, #48	; 0x30
   dc12e:	f7fe fffd 	bl	db12c <_ZL15mbedtls_zeroizePvj>
   dc132:	9a06      	ldr	r2, [sp, #24]
   dc134:	9203      	str	r2, [sp, #12]

exit:
    mbedtls_md_free( &md_ctx );
   dc136:	4628      	mov	r0, r5
   dc138:	f7fd fc05 	bl	d9946 <mbedtls_md_free>

    if( ret != 0 )
   dc13c:	9a03      	ldr	r2, [sp, #12]
   dc13e:	b97a      	cbnz	r2, dc160 <mbedtls_rsa_rsassa_pss_sign+0x180>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
   dc140:	9b05      	ldr	r3, [sp, #20]
   dc142:	b92b      	cbnz	r3, dc150 <mbedtls_rsa_rsassa_pss_sign+0x170>
   dc144:	4622      	mov	r2, r4
   dc146:	4621      	mov	r1, r4
   dc148:	4640      	mov	r0, r8
   dc14a:	f7ff faa3 	bl	db694 <mbedtls_rsa_public>
   dc14e:	e008      	b.n	dc162 <mbedtls_rsa_rsassa_pss_sign+0x182>
   dc150:	9400      	str	r4, [sp, #0]
   dc152:	4623      	mov	r3, r4
   dc154:	9a04      	ldr	r2, [sp, #16]
   dc156:	4651      	mov	r1, sl
   dc158:	4640      	mov	r0, r8
   dc15a:	f7ff fadd 	bl	db718 <mbedtls_rsa_private>
   dc15e:	e000      	b.n	dc162 <mbedtls_rsa_rsassa_pss_sign+0x182>
   dc160:	4610      	mov	r0, r2
}
   dc162:	b01d      	add	sp, #116	; 0x74
   dc164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc168:	ffffbf80 	.word	0xffffbf80

000dc16c <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   dc16c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dc170:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   dc172:	4689      	mov	r9, r1
   dc174:	a90b      	add	r1, sp, #44	; 0x2c
   dc176:	4605      	mov	r5, r0
   dc178:	4692      	mov	sl, r2
   dc17a:	461c      	mov	r4, r3
   dc17c:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   dc180:	c986      	ldmia	r1, {r1, r2, r7}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dc182:	d103      	bne.n	dc18c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
   dc184:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   dc188:	2b00      	cmp	r3, #0
   dc18a:	d14b      	bne.n	dc224 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
   dc18c:	9700      	str	r7, [sp, #0]
   dc18e:	686b      	ldr	r3, [r5, #4]
   dc190:	f7ff f826 	bl	db1e0 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   dc194:	2800      	cmp	r0, #0
   dc196:	d149      	bne.n	dc22c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
   dc198:	b93c      	cbnz	r4, dc1aa <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   dc19a:	463a      	mov	r2, r7
   dc19c:	4639      	mov	r1, r7
   dc19e:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   dc1a0:	b002      	add	sp, #8
   dc1a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   dc1a6:	f7ff ba75 	b.w	db694 <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   dc1aa:	686c      	ldr	r4, [r5, #4]
   dc1ac:	2001      	movs	r0, #1
   dc1ae:	4621      	mov	r1, r4
   dc1b0:	f00a fca4 	bl	e6afc <calloc>
    if( sig_try == NULL )
   dc1b4:	4606      	mov	r6, r0
   dc1b6:	b3b8      	cbz	r0, dc228 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   dc1b8:	4621      	mov	r1, r4
   dc1ba:	2001      	movs	r0, #1
   dc1bc:	f00a fc9e 	bl	e6afc <calloc>
    if( verif == NULL )
   dc1c0:	4680      	mov	r8, r0
   dc1c2:	b918      	cbnz	r0, dc1cc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
   dc1c4:	4630      	mov	r0, r6
   dc1c6:	f007 fef7 	bl	e3fb8 <free>
   dc1ca:	e02d      	b.n	dc228 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
   dc1cc:	9600      	str	r6, [sp, #0]
   dc1ce:	463b      	mov	r3, r7
   dc1d0:	4652      	mov	r2, sl
   dc1d2:	4649      	mov	r1, r9
   dc1d4:	4628      	mov	r0, r5
   dc1d6:	f7ff fa9f 	bl	db718 <mbedtls_rsa_private>
   dc1da:	4604      	mov	r4, r0
   dc1dc:	b9d0      	cbnz	r0, dc214 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
   dc1de:	4642      	mov	r2, r8
   dc1e0:	4631      	mov	r1, r6
   dc1e2:	4628      	mov	r0, r5
   dc1e4:	f7ff fa56 	bl	db694 <mbedtls_rsa_public>
   dc1e8:	4604      	mov	r4, r0
   dc1ea:	b998      	cbnz	r0, dc214 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   dc1ec:	686d      	ldr	r5, [r5, #4]
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
   dc1ee:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
   dc1f0:	4602      	mov	r2, r0
   dc1f2:	42aa      	cmp	r2, r5
   dc1f4:	d007      	beq.n	dc206 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
   dc1f6:	f818 0002 	ldrb.w	r0, [r8, r2]
   dc1fa:	5cb9      	ldrb	r1, [r7, r2]
   dc1fc:	4041      	eors	r1, r0
   dc1fe:	430b      	orrs	r3, r1
   dc200:	b2db      	uxtb	r3, r3
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dc202:	3201      	adds	r2, #1
   dc204:	e7f5      	b.n	dc1f2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   dc206:	b923      	cbnz	r3, dc212 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
   dc208:	4631      	mov	r1, r6
   dc20a:	4638      	mov	r0, r7
   dc20c:	f00a fc9b 	bl	e6b46 <memcpy>
   dc210:	e000      	b.n	dc214 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
   dc212:	4c08      	ldr	r4, [pc, #32]	; (dc234 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
   dc214:	4630      	mov	r0, r6
   dc216:	f007 fecf 	bl	e3fb8 <free>
    mbedtls_free( verif );
   dc21a:	4640      	mov	r0, r8
   dc21c:	f007 fecc 	bl	e3fb8 <free>

    return( ret );
   dc220:	4620      	mov	r0, r4
   dc222:	e003      	b.n	dc22c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dc224:	4804      	ldr	r0, [pc, #16]	; (dc238 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
   dc226:	e001      	b.n	dc22c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   dc228:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   dc22c:	b002      	add	sp, #8
   dc22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc232:	bf00      	nop
   dc234:	ffffbd00 	.word	0xffffbd00
   dc238:	ffffbf80 	.word	0xffffbf80

000dc23c <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   dc23c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
   dc23e:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   dc242:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dc246:	ad06      	add	r5, sp, #24
   dc248:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
   dc24a:	f1be 0f00 	cmp.w	lr, #0
   dc24e:	d00a      	beq.n	dc266 <mbedtls_rsa_pkcs1_sign+0x2a>
   dc250:	f1be 0f01 	cmp.w	lr, #1
   dc254:	d10f      	bne.n	dc276 <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
   dc256:	9708      	str	r7, [sp, #32]
   dc258:	9607      	str	r6, [sp, #28]
   dc25a:	9506      	str	r5, [sp, #24]
   dc25c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dc25e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
   dc262:	f7ff bebd 	b.w	dbfe0 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
   dc266:	9708      	str	r7, [sp, #32]
   dc268:	9607      	str	r6, [sp, #28]
   dc26a:	9506      	str	r5, [sp, #24]
   dc26c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dc26e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
   dc272:	f7ff bf7b 	b.w	dc16c <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dc276:	4801      	ldr	r0, [pc, #4]	; (dc27c <mbedtls_rsa_pkcs1_sign+0x40>)
   dc278:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc27a:	bf00      	nop
   dc27c:	ffffbf00 	.word	0xffffbf00

000dc280 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   dc280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc284:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dc288:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   dc28a:	4605      	mov	r5, r0
   dc28c:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   dc290:	d105      	bne.n	dc29e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
   dc292:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   dc296:	2801      	cmp	r0, #1
   dc298:	d001      	beq.n	dc29e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dc29a:	4861      	ldr	r0, [pc, #388]	; (dc420 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
   dc29c:	e0bb      	b.n	dc416 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
   dc29e:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
   dc2a0:	f1a7 0010 	sub.w	r0, r7, #16
   dc2a4:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
   dc2a8:	d8f7      	bhi.n	dc29a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
   dc2aa:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   dc2ac:	b933      	cbnz	r3, dc2bc <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
   dc2ae:	4632      	mov	r2, r6
   dc2b0:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
   dc2b4:	4628      	mov	r0, r5
   dc2b6:	f7ff f9ed 	bl	db694 <mbedtls_rsa_public>
   dc2ba:	e005      	b.n	dc2c8 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
   dc2bc:	9600      	str	r6, [sp, #0]
   dc2be:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
   dc2c2:	4628      	mov	r0, r5
   dc2c4:	f7ff fa28 	bl	db718 <mbedtls_rsa_private>

    if( ret != 0 )
   dc2c8:	2800      	cmp	r0, #0
   dc2ca:	f040 80a4 	bne.w	dc416 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
   dc2ce:	1e7c      	subs	r4, r7, #1
   dc2d0:	5d33      	ldrb	r3, [r6, r4]
   dc2d2:	2bbc      	cmp	r3, #188	; 0xbc
   dc2d4:	f040 809e 	bne.w	dc414 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
   dc2d8:	f1b8 0f00 	cmp.w	r8, #0
   dc2dc:	d008      	beq.n	dc2f0 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
   dc2de:	4640      	mov	r0, r8
   dc2e0:	f7fd fb20 	bl	d9924 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   dc2e4:	2800      	cmp	r0, #0
   dc2e6:	d0d8      	beq.n	dc29a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   dc2e8:	f7fd fc5a 	bl	d9ba0 <mbedtls_md_get_size>
   dc2ec:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
   dc2f0:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
   dc2f4:	f7fd fb16 	bl	d9924 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   dc2f8:	4681      	mov	r9, r0
   dc2fa:	2800      	cmp	r0, #0
   dc2fc:	d0cd      	beq.n	dc29a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dc2fe:	f7fd fc4f 	bl	d9ba0 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
   dc302:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   dc304:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dc306:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
   dc30a:	9303      	str	r3, [sp, #12]
   dc30c:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dc30e:	f7fb fc55 	bl	d7bbc <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   dc312:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   dc314:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   dc318:	7832      	ldrb	r2, [r6, #0]
   dc31a:	f1c3 0308 	rsb	r3, r3, #8
   dc31e:	4443      	add	r3, r8
   dc320:	fa52 f303 	asrs.w	r3, r2, r3
   dc324:	d1b9      	bne.n	dc29a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
   dc326:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
   dc32a:	bf08      	it	eq
   dc32c:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
   dc32e:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
   dc332:	bf0c      	ite	eq
   dc334:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
   dc338:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
   dc33a:	429f      	cmp	r7, r3
   dc33c:	d3ad      	bcc.n	dc29a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
   dc33e:	ac05      	add	r4, sp, #20
   dc340:	4620      	mov	r0, r4
   dc342:	f7fd fafb 	bl	d993c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   dc346:	2200      	movs	r2, #0
   dc348:	4649      	mov	r1, r9
   dc34a:	4620      	mov	r0, r4
   dc34c:	f7fd fb1c 	bl	d9988 <mbedtls_md_setup>
   dc350:	4683      	mov	fp, r0
   dc352:	2800      	cmp	r0, #0
   dc354:	d159      	bne.n	dc40a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
   dc356:	ea6f 010a 	mvn.w	r1, sl
   dc35a:	4439      	add	r1, r7
   dc35c:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
   dc360:	9400      	str	r4, [sp, #0]
   dc362:	4653      	mov	r3, sl
   dc364:	464a      	mov	r2, r9
   dc366:	4628      	mov	r0, r5
   dc368:	f7fe fee8 	bl	db13c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
   dc36c:	4683      	mov	fp, r0
   dc36e:	2800      	cmp	r0, #0
   dc370:	d14b      	bne.n	dc40a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
   dc372:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
   dc376:	7833      	ldrb	r3, [r6, #0]
   dc378:	f04f 08ff 	mov.w	r8, #255	; 0xff
   dc37c:	fa48 f707 	asr.w	r7, r8, r7
   dc380:	401f      	ands	r7, r3
   dc382:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
   dc384:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   dc388:	4295      	cmp	r5, r2
   dc38a:	4629      	mov	r1, r5
   dc38c:	d203      	bcs.n	dc396 <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
   dc38e:	780b      	ldrb	r3, [r1, #0]
   dc390:	3501      	adds	r5, #1
   dc392:	2b00      	cmp	r3, #0
   dc394:	d0f8      	beq.n	dc388 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
   dc396:	780b      	ldrb	r3, [r1, #0]
   dc398:	2b01      	cmp	r3, #1
   dc39a:	d134      	bne.n	dc406 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   dc39c:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
   dc3a0:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   dc3a2:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
   dc3a4:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   dc3a8:	d001      	beq.n	dc3ae <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
   dc3aa:	429e      	cmp	r6, r3
   dc3ac:	d12b      	bne.n	dc406 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
   dc3ae:	4620      	mov	r0, r4
   dc3b0:	f7fd fb0c 	bl	d99cc <mbedtls_md_starts>
    if ( ret != 0 )
   dc3b4:	4683      	mov	fp, r0
   dc3b6:	bb40      	cbnz	r0, dc40a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
   dc3b8:	2208      	movs	r2, #8
   dc3ba:	a903      	add	r1, sp, #12
   dc3bc:	4620      	mov	r0, r4
   dc3be:	f7fd fb0f 	bl	d99e0 <mbedtls_md_update>
    if ( ret != 0 )
   dc3c2:	4683      	mov	fp, r0
   dc3c4:	bb08      	cbnz	r0, dc40a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
   dc3c6:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   dc3ca:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   dc3ce:	4620      	mov	r0, r4
   dc3d0:	f7fd fb06 	bl	d99e0 <mbedtls_md_update>
    if ( ret != 0 )
   dc3d4:	4683      	mov	fp, r0
   dc3d6:	b9c0      	cbnz	r0, dc40a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
   dc3d8:	4632      	mov	r2, r6
   dc3da:	4629      	mov	r1, r5
   dc3dc:	4620      	mov	r0, r4
   dc3de:	f7fd faff 	bl	d99e0 <mbedtls_md_update>
    if ( ret != 0 )
   dc3e2:	4683      	mov	fp, r0
   dc3e4:	b988      	cbnz	r0, dc40a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
   dc3e6:	a908      	add	r1, sp, #32
   dc3e8:	4620      	mov	r0, r4
   dc3ea:	f7fd fb03 	bl	d99f4 <mbedtls_md_finish>
    if ( ret != 0 )
   dc3ee:	4683      	mov	fp, r0
   dc3f0:	b958      	cbnz	r0, dc40a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
   dc3f2:	4652      	mov	r2, sl
   dc3f4:	a908      	add	r1, sp, #32
   dc3f6:	4648      	mov	r0, r9
   dc3f8:	f00a fb96 	bl	e6b28 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   dc3fc:	4a09      	ldr	r2, [pc, #36]	; (dc424 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
   dc3fe:	2800      	cmp	r0, #0
   dc400:	bf18      	it	ne
   dc402:	4693      	movne	fp, r2
   dc404:	e001      	b.n	dc40a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   dc406:	f8df b020 	ldr.w	fp, [pc, #32]	; dc428 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
   dc40a:	4620      	mov	r0, r4
   dc40c:	f7fd fa9b 	bl	d9946 <mbedtls_md_free>

    return( ret );
   dc410:	4658      	mov	r0, fp
   dc412:	e000      	b.n	dc416 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   dc414:	4804      	ldr	r0, [pc, #16]	; (dc428 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
   dc416:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   dc41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc41e:	bf00      	nop
   dc420:	ffffbf80 	.word	0xffffbf80
   dc424:	ffffbc80 	.word	0xffffbc80
   dc428:	ffffbf00 	.word	0xffffbf00

000dc42c <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   dc42c:	b570      	push	{r4, r5, r6, lr}
   dc42e:	b086      	sub	sp, #24
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
   dc430:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   dc434:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
   dc438:	b10c      	cbz	r4, dc43e <mbedtls_rsa_rsassa_pss_verify+0x12>
   dc43a:	b2e4      	uxtb	r4, r4
   dc43c:	e000      	b.n	dc440 <mbedtls_rsa_rsassa_pss_verify+0x14>
   dc43e:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
   dc440:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   dc442:	9403      	str	r4, [sp, #12]
   dc444:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dc446:	9605      	str	r6, [sp, #20]
   dc448:	9402      	str	r4, [sp, #8]
   dc44a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc44e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dc450:	9604      	str	r6, [sp, #16]
   dc452:	9401      	str	r4, [sp, #4]
   dc454:	9500      	str	r5, [sp, #0]
   dc456:	f7ff ff13 	bl	dc280 <mbedtls_rsa_rsassa_pss_verify_ext>

}
   dc45a:	b006      	add	sp, #24
   dc45c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc460 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   dc460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dc464:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   dc466:	4680      	mov	r8, r0
   dc468:	468a      	mov	sl, r1
   dc46a:	4693      	mov	fp, r2
   dc46c:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
   dc46e:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   dc470:	d102      	bne.n	dc478 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
   dc472:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   dc476:	b9eb      	cbnz	r3, dc4b4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
   dc478:	4629      	mov	r1, r5
   dc47a:	2001      	movs	r0, #1
   dc47c:	f00a fb3e 	bl	e6afc <calloc>
   dc480:	4606      	mov	r6, r0
   dc482:	b1c8      	cbz	r0, dc4b8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
   dc484:	4629      	mov	r1, r5
   dc486:	2001      	movs	r0, #1
   dc488:	f00a fb38 	bl	e6afc <calloc>
   dc48c:	4607      	mov	r7, r0
   dc48e:	b9c0      	cbnz	r0, dc4c2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   dc490:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
   dc494:	4630      	mov	r0, r6
   dc496:	4629      	mov	r1, r5
   dc498:	f7fe fe48 	bl	db12c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
   dc49c:	4630      	mov	r0, r6
   dc49e:	f007 fd8b 	bl	e3fb8 <free>
    }

    if( encoded_expected != NULL )
   dc4a2:	b167      	cbz	r7, dc4be <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
   dc4a4:	4638      	mov	r0, r7
   dc4a6:	4629      	mov	r1, r5
   dc4a8:	f7fe fe40 	bl	db12c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
   dc4ac:	4638      	mov	r0, r7
   dc4ae:	f007 fd83 	bl	e3fb8 <free>
   dc4b2:	e004      	b.n	dc4be <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   dc4b4:	481b      	ldr	r0, [pc, #108]	; (dc524 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
   dc4b6:	e031      	b.n	dc51c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   dc4b8:	f06f 000f 	mvn.w	r0, #15
   dc4bc:	e02e      	b.n	dc51c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
   dc4be:	4620      	mov	r0, r4
   dc4c0:	e02c      	b.n	dc51c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
   dc4c2:	9000      	str	r0, [sp, #0]
   dc4c4:	462b      	mov	r3, r5
   dc4c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   dc4c8:	990d      	ldr	r1, [sp, #52]	; 0x34
   dc4ca:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   dc4ce:	f7fe fe87 	bl	db1e0 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   dc4d2:	4604      	mov	r4, r0
   dc4d4:	2800      	cmp	r0, #0
   dc4d6:	d1dd      	bne.n	dc494 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   dc4d8:	f1b9 0f00 	cmp.w	r9, #0
   dc4dc:	d105      	bne.n	dc4ea <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
   dc4de:	4632      	mov	r2, r6
   dc4e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   dc4e2:	4640      	mov	r0, r8
   dc4e4:	f7ff f8d6 	bl	db694 <mbedtls_rsa_public>
   dc4e8:	e006      	b.n	dc4f8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
   dc4ea:	9600      	str	r6, [sp, #0]
   dc4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc4ee:	465a      	mov	r2, fp
   dc4f0:	4651      	mov	r1, sl
   dc4f2:	4640      	mov	r0, r8
   dc4f4:	f7ff f910 	bl	db718 <mbedtls_rsa_private>
   dc4f8:	4604      	mov	r4, r0
    if( ret != 0 )
   dc4fa:	2800      	cmp	r0, #0
   dc4fc:	d1ca      	bne.n	dc494 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
   dc4fe:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dc500:	429d      	cmp	r5, r3
   dc502:	d006      	beq.n	dc512 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
   dc504:	5cf0      	ldrb	r0, [r6, r3]
   dc506:	5cfa      	ldrb	r2, [r7, r3]
   dc508:	4050      	eors	r0, r2
   dc50a:	4304      	orrs	r4, r0
   dc50c:	b2e4      	uxtb	r4, r4
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   dc50e:	3301      	adds	r3, #1
   dc510:	e7f6      	b.n	dc500 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   dc512:	2c00      	cmp	r4, #0
   dc514:	4c04      	ldr	r4, [pc, #16]	; (dc528 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
   dc516:	bf08      	it	eq
   dc518:	2400      	moveq	r4, #0
   dc51a:	e7bb      	b.n	dc494 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
   dc51c:	b003      	add	sp, #12
   dc51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc522:	bf00      	nop
   dc524:	ffffbf80 	.word	0xffffbf80
   dc528:	ffffbc80 	.word	0xffffbc80

000dc52c <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   dc52c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
   dc52e:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   dc532:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dc536:	ad06      	add	r5, sp, #24
   dc538:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
   dc53a:	f1be 0f00 	cmp.w	lr, #0
   dc53e:	d00a      	beq.n	dc556 <mbedtls_rsa_pkcs1_verify+0x2a>
   dc540:	f1be 0f01 	cmp.w	lr, #1
   dc544:	d10f      	bne.n	dc566 <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
   dc546:	9708      	str	r7, [sp, #32]
   dc548:	9607      	str	r6, [sp, #28]
   dc54a:	9506      	str	r5, [sp, #24]
   dc54c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dc54e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
   dc552:	f7ff bf6b 	b.w	dc42c <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
   dc556:	9708      	str	r7, [sp, #32]
   dc558:	9607      	str	r6, [sp, #28]
   dc55a:	9506      	str	r5, [sp, #24]
   dc55c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dc55e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
   dc562:	f7ff bf7d 	b.w	dc460 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   dc566:	4801      	ldr	r0, [pc, #4]	; (dc56c <mbedtls_rsa_pkcs1_verify+0x40>)
   dc568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc56a:	bf00      	nop
   dc56c:	ffffbf00 	.word	0xffffbf00

000dc570 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
   dc570:	b510      	push	{r4, lr}
   dc572:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
   dc574:	308c      	adds	r0, #140	; 0x8c
   dc576:	f7fb fa70 	bl	d7a5a <mbedtls_mpi_free>
   dc57a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   dc57e:	f7fb fa6c 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
   dc582:	f104 0068 	add.w	r0, r4, #104	; 0x68
   dc586:	f7fb fa68 	bl	d7a5a <mbedtls_mpi_free>
   dc58a:	f104 0020 	add.w	r0, r4, #32
   dc58e:	f7fb fa64 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
   dc592:	f104 0038 	add.w	r0, r4, #56	; 0x38
   dc596:	f7fb fa60 	bl	d7a5a <mbedtls_mpi_free>
   dc59a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   dc59e:	f7fb fa5c 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
   dc5a2:	f104 0014 	add.w	r0, r4, #20
   dc5a6:	f7fb fa58 	bl	d7a5a <mbedtls_mpi_free>
   dc5aa:	f104 0008 	add.w	r0, r4, #8
   dc5ae:	f7fb fa54 	bl	d7a5a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
   dc5b2:	f104 0080 	add.w	r0, r4, #128	; 0x80
   dc5b6:	f7fb fa50 	bl	d7a5a <mbedtls_mpi_free>
   dc5ba:	f104 0074 	add.w	r0, r4, #116	; 0x74
   dc5be:	f7fb fa4c 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
   dc5c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   dc5c6:	f7fb fa48 	bl	d7a5a <mbedtls_mpi_free>
   dc5ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
   dc5ce:	f7fb fa44 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
   dc5d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
   dc5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
   dc5da:	f7fb ba3e 	b.w	d7a5a <mbedtls_mpi_free>
	...

000dc5e0 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   dc5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc5e4:	b096      	sub	sp, #88	; 0x58
   dc5e6:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
   dc5e8:	4b7a      	ldr	r3, [pc, #488]	; (dc7d4 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   dc5ea:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
   dc5ee:	4615      	mov	r5, r2
   dc5f0:	4606      	mov	r6, r0
   dc5f2:	4688      	mov	r8, r1
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
   dc5f4:	aa08      	add	r2, sp, #32
   dc5f6:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   dc5fa:	6818      	ldr	r0, [r3, #0]
   dc5fc:	6859      	ldr	r1, [r3, #4]
   dc5fe:	4614      	mov	r4, r2
   dc600:	c403      	stmia	r4!, {r0, r1}
   dc602:	3308      	adds	r3, #8
   dc604:	4573      	cmp	r3, lr
   dc606:	4622      	mov	r2, r4
   dc608:	d1f7      	bne.n	dc5fa <mbedtls_rsa_deduce_primes+0x1a>
   dc60a:	6818      	ldr	r0, [r3, #0]
   dc60c:	889b      	ldrh	r3, [r3, #4]
   dc60e:	6020      	str	r0, [r4, #0]
   dc610:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   dc612:	2f00      	cmp	r7, #0
   dc614:	f000 80b8 	beq.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>
   dc618:	f1b9 0f00 	cmp.w	r9, #0
   dc61c:	f000 80b4 	beq.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>
   dc620:	68bb      	ldr	r3, [r7, #8]
   dc622:	2b00      	cmp	r3, #0
   dc624:	f040 80b0 	bne.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>
   dc628:	f8d9 1008 	ldr.w	r1, [r9, #8]
   dc62c:	2900      	cmp	r1, #0
   dc62e:	f040 80ab 	bne.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   dc632:	4630      	mov	r0, r6
   dc634:	f7fb fcb3 	bl	d7f9e <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   dc638:	2800      	cmp	r0, #0
   dc63a:	f340 80a5 	ble.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   dc63e:	2101      	movs	r1, #1
   dc640:	4628      	mov	r0, r5
   dc642:	f7fb fcac 	bl	d7f9e <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   dc646:	2800      	cmp	r0, #0
   dc648:	f340 809e 	ble.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   dc64c:	4631      	mov	r1, r6
   dc64e:	4628      	mov	r0, r5
   dc650:	f7fb fc60 	bl	d7f14 <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   dc654:	2800      	cmp	r0, #0
   dc656:	f280 8097 	bge.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   dc65a:	2101      	movs	r1, #1
   dc65c:	4640      	mov	r0, r8
   dc65e:	f7fb fc9e 	bl	d7f9e <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   dc662:	2800      	cmp	r0, #0
   dc664:	f340 8090 	ble.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   dc668:	4631      	mov	r1, r6
   dc66a:	4640      	mov	r0, r8
   dc66c:	f7fb fc52 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   dc670:	2800      	cmp	r0, #0
   dc672:	f280 8089 	bge.w	dc788 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
   dc676:	a805      	add	r0, sp, #20
   dc678:	f7fb f9e8 	bl	d7a4c <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
   dc67c:	a802      	add	r0, sp, #8
   dc67e:	f7fb f9e5 	bl	d7a4c <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
   dc682:	4642      	mov	r2, r8
   dc684:	4629      	mov	r1, r5
   dc686:	a802      	add	r0, sp, #8
   dc688:	f7fb fda8 	bl	d81dc <mbedtls_mpi_mul_mpi>
   dc68c:	4604      	mov	r4, r0
   dc68e:	2800      	cmp	r0, #0
   dc690:	d172      	bne.n	dc778 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
   dc692:	a902      	add	r1, sp, #8
   dc694:	2201      	movs	r2, #1
   dc696:	4608      	mov	r0, r1
   dc698:	f7fb fd8a 	bl	d81b0 <mbedtls_mpi_sub_int>
   dc69c:	4604      	mov	r4, r0
   dc69e:	2800      	cmp	r0, #0
   dc6a0:	d16a      	bne.n	dc778 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
   dc6a2:	a802      	add	r0, sp, #8
   dc6a4:	f7fb fa71 	bl	d7b8a <mbedtls_mpi_lsb>
   dc6a8:	fa1f fa80 	uxth.w	sl, r0
   dc6ac:	f1ba 0f00 	cmp.w	sl, #0
   dc6b0:	d102      	bne.n	dc6b8 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   dc6b2:	f06f 0403 	mvn.w	r4, #3
   dc6b6:	e05f      	b.n	dc778 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
   dc6b8:	4651      	mov	r1, sl
   dc6ba:	a802      	add	r0, sp, #8
   dc6bc:	f7fb fb4b 	bl	d7d56 <mbedtls_mpi_shift_r>
   dc6c0:	4604      	mov	r4, r0
   dc6c2:	2800      	cmp	r0, #0
   dc6c4:	d158      	bne.n	dc778 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
   dc6c6:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
   dc6c8:	681d      	ldr	r5, [r3, #0]
   dc6ca:	f005 0507 	and.w	r5, r5, #7
   dc6ce:	1e6b      	subs	r3, r5, #1
   dc6d0:	425d      	negs	r5, r3
   dc6d2:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
   dc6d4:	ab16      	add	r3, sp, #88	; 0x58
   dc6d6:	442b      	add	r3, r5
   dc6d8:	a805      	add	r0, sp, #20
   dc6da:	f813 1c38 	ldrb.w	r1, [r3, #-56]
   dc6de:	f7fb fa27 	bl	d7b30 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   dc6e2:	4632      	mov	r2, r6
   dc6e4:	a905      	add	r1, sp, #20
   dc6e6:	4638      	mov	r0, r7
   dc6e8:	f7fc fa05 	bl	d8af6 <mbedtls_mpi_gcd>
   dc6ec:	4604      	mov	r4, r0
   dc6ee:	2800      	cmp	r0, #0
   dc6f0:	d142      	bne.n	dc778 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
   dc6f2:	2101      	movs	r1, #1
   dc6f4:	4638      	mov	r0, r7
   dc6f6:	f7fb fc52 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc6fa:	b120      	cbz	r0, dc706 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
   dc6fc:	3501      	adds	r5, #1
   dc6fe:	b2ad      	uxth	r5, r5
   dc700:	2d36      	cmp	r5, #54	; 0x36
   dc702:	d1e7      	bne.n	dc6d4 <mbedtls_rsa_deduce_primes+0xf4>
   dc704:	e7d5      	b.n	dc6b2 <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
   dc706:	a905      	add	r1, sp, #20
   dc708:	f8cd 9000 	str.w	r9, [sp]
   dc70c:	4633      	mov	r3, r6
   dc70e:	aa02      	add	r2, sp, #8
   dc710:	4608      	mov	r0, r1
   dc712:	f7fb ffd1 	bl	d86b8 <mbedtls_mpi_exp_mod>
   dc716:	4604      	mov	r4, r0
   dc718:	bb70      	cbnz	r0, dc778 <mbedtls_rsa_deduce_primes+0x198>
   dc71a:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
   dc71e:	2101      	movs	r1, #1
   dc720:	a805      	add	r0, sp, #20
   dc722:	f7fb fc3c 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc726:	b930      	cbnz	r0, dc736 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
   dc728:	2101      	movs	r1, #1
   dc72a:	a805      	add	r0, sp, #20
   dc72c:	f7fb fc37 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc730:	2800      	cmp	r0, #0
   dc732:	d0e3      	beq.n	dc6fc <mbedtls_rsa_deduce_primes+0x11c>
   dc734:	e7bd      	b.n	dc6b2 <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
   dc736:	a905      	add	r1, sp, #20
   dc738:	2201      	movs	r2, #1
   dc73a:	4608      	mov	r0, r1
   dc73c:	f7fb fd22 	bl	d8184 <mbedtls_mpi_add_int>
   dc740:	4604      	mov	r4, r0
   dc742:	b9c8      	cbnz	r0, dc778 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   dc744:	4632      	mov	r2, r6
   dc746:	a905      	add	r1, sp, #20
   dc748:	4638      	mov	r0, r7
   dc74a:	f7fc f9d4 	bl	d8af6 <mbedtls_mpi_gcd>
   dc74e:	4604      	mov	r4, r0
   dc750:	b990      	cbnz	r0, dc778 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   dc752:	2101      	movs	r1, #1
   dc754:	4638      	mov	r0, r7
   dc756:	f7fb fc22 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc75a:	2801      	cmp	r0, #1
   dc75c:	d117      	bne.n	dc78e <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
   dc75e:	4631      	mov	r1, r6
   dc760:	4638      	mov	r0, r7
   dc762:	f7fb fbd7 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   dc766:	3001      	adds	r0, #1
   dc768:	d111      	bne.n	dc78e <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
   dc76a:	4621      	mov	r1, r4
   dc76c:	463b      	mov	r3, r7
   dc76e:	4632      	mov	r2, r6
   dc770:	4648      	mov	r0, r9
   dc772:	f7fb fdaf 	bl	d82d4 <mbedtls_mpi_div_mpi>
   dc776:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
   dc778:	a805      	add	r0, sp, #20
   dc77a:	f7fb f96e 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
   dc77e:	a802      	add	r0, sp, #8
   dc780:	f7fb f96b 	bl	d7a5a <mbedtls_mpi_free>
    return( ret );
   dc784:	4620      	mov	r0, r4
   dc786:	e021      	b.n	dc7cc <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   dc788:	f06f 0003 	mvn.w	r0, #3
   dc78c:	e01e      	b.n	dc7cc <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   dc78e:	a905      	add	r1, sp, #20
   dc790:	2201      	movs	r2, #1
   dc792:	4608      	mov	r0, r1
   dc794:	f7fb fd0c 	bl	d81b0 <mbedtls_mpi_sub_int>
   dc798:	4604      	mov	r4, r0
   dc79a:	2800      	cmp	r0, #0
   dc79c:	d1ec      	bne.n	dc778 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
   dc79e:	aa05      	add	r2, sp, #20
   dc7a0:	4611      	mov	r1, r2
   dc7a2:	4610      	mov	r0, r2
   dc7a4:	f7fb fd1a 	bl	d81dc <mbedtls_mpi_mul_mpi>
   dc7a8:	4604      	mov	r4, r0
   dc7aa:	2800      	cmp	r0, #0
   dc7ac:	d1e4      	bne.n	dc778 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
   dc7ae:	a905      	add	r1, sp, #20
   dc7b0:	4632      	mov	r2, r6
   dc7b2:	4608      	mov	r0, r1
   dc7b4:	f7fb ff4e 	bl	d8654 <mbedtls_mpi_mod_mpi>
   dc7b8:	4604      	mov	r4, r0
   dc7ba:	2800      	cmp	r0, #0
   dc7bc:	d1dc      	bne.n	dc778 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
   dc7be:	f108 0801 	add.w	r8, r8, #1
   dc7c2:	fa1f f888 	uxth.w	r8, r8
   dc7c6:	45c2      	cmp	sl, r8
   dc7c8:	d2a9      	bcs.n	dc71e <mbedtls_rsa_deduce_primes+0x13e>
   dc7ca:	e7ad      	b.n	dc728 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
   dc7cc:	b016      	add	sp, #88	; 0x58
   dc7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc7d2:	bf00      	nop
   dc7d4:	000e875d 	.word	0x000e875d

000dc7d8 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
   dc7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc7dc:	4604      	mov	r4, r0
   dc7de:	b086      	sub	sp, #24
   dc7e0:	460e      	mov	r6, r1
   dc7e2:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   dc7e4:	461d      	mov	r5, r3
   dc7e6:	b18b      	cbz	r3, dc80c <mbedtls_rsa_deduce_private_exponent+0x34>
   dc7e8:	2100      	movs	r1, #0
   dc7ea:	4618      	mov	r0, r3
   dc7ec:	f7fb fbd7 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc7f0:	4680      	mov	r8, r0
   dc7f2:	b958      	cbnz	r0, dc80c <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   dc7f4:	2101      	movs	r1, #1
   dc7f6:	4620      	mov	r0, r4
   dc7f8:	f7fb fbd1 	bl	d7f9e <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   dc7fc:	2800      	cmp	r0, #0
   dc7fe:	dd05      	ble.n	dc80c <mbedtls_rsa_deduce_private_exponent+0x34>
   dc800:	2101      	movs	r1, #1
   dc802:	4630      	mov	r0, r6
   dc804:	f7fb fbcb 	bl	d7f9e <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   dc808:	2800      	cmp	r0, #0
   dc80a:	dc02      	bgt.n	dc812 <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   dc80c:	f06f 0003 	mvn.w	r0, #3
   dc810:	e03c      	b.n	dc88c <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
   dc812:	4641      	mov	r1, r8
   dc814:	4638      	mov	r0, r7
   dc816:	f7fb fbc2 	bl	d7f9e <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   dc81a:	2800      	cmp	r0, #0
   dc81c:	d0f6      	beq.n	dc80c <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
   dc81e:	4668      	mov	r0, sp
   dc820:	f7fb f914 	bl	d7a4c <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   dc824:	a803      	add	r0, sp, #12
   dc826:	f7fb f911 	bl	d7a4c <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   dc82a:	4621      	mov	r1, r4
   dc82c:	2201      	movs	r2, #1
   dc82e:	4668      	mov	r0, sp
   dc830:	f7fb fcbe 	bl	d81b0 <mbedtls_mpi_sub_int>
   dc834:	4604      	mov	r4, r0
   dc836:	bb10      	cbnz	r0, dc87e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   dc838:	2201      	movs	r2, #1
   dc83a:	4631      	mov	r1, r6
   dc83c:	a803      	add	r0, sp, #12
   dc83e:	f7fb fcb7 	bl	d81b0 <mbedtls_mpi_sub_int>
   dc842:	4604      	mov	r4, r0
   dc844:	b9d8      	cbnz	r0, dc87e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
   dc846:	aa03      	add	r2, sp, #12
   dc848:	4669      	mov	r1, sp
   dc84a:	4628      	mov	r0, r5
   dc84c:	f7fc f953 	bl	d8af6 <mbedtls_mpi_gcd>
   dc850:	4604      	mov	r4, r0
   dc852:	b9a0      	cbnz	r0, dc87e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
   dc854:	aa03      	add	r2, sp, #12
   dc856:	4669      	mov	r1, sp
   dc858:	4668      	mov	r0, sp
   dc85a:	f7fb fcbf 	bl	d81dc <mbedtls_mpi_mul_mpi>
   dc85e:	4604      	mov	r4, r0
   dc860:	b968      	cbnz	r0, dc87e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
   dc862:	4601      	mov	r1, r0
   dc864:	462b      	mov	r3, r5
   dc866:	466a      	mov	r2, sp
   dc868:	4668      	mov	r0, sp
   dc86a:	f7fb fd33 	bl	d82d4 <mbedtls_mpi_div_mpi>
   dc86e:	4604      	mov	r4, r0
   dc870:	b928      	cbnz	r0, dc87e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
   dc872:	466a      	mov	r2, sp
   dc874:	4639      	mov	r1, r7
   dc876:	4628      	mov	r0, r5
   dc878:	f7fc f9e5 	bl	d8c46 <mbedtls_mpi_inv_mod>
   dc87c:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
   dc87e:	4668      	mov	r0, sp
   dc880:	f7fb f8eb 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   dc884:	a803      	add	r0, sp, #12
   dc886:	f7fb f8e8 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
   dc88a:	4620      	mov	r0, r4
}
   dc88c:	b006      	add	sp, #24
   dc88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000dc894 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   dc894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc898:	b087      	sub	sp, #28
   dc89a:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   dc89c:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   dc89e:	4699      	mov	r9, r3
   dc8a0:	460d      	mov	r5, r1
   dc8a2:	4690      	mov	r8, r2
   dc8a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   dc8a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   dc8a8:	f7fb f8d0 	bl	d7a4c <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   dc8ac:	a803      	add	r0, sp, #12
   dc8ae:	f7fb f8cd 	bl	d7a4c <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
   dc8b2:	f1b9 0f00 	cmp.w	r9, #0
   dc8b6:	d101      	bne.n	dc8bc <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
   dc8b8:	b9f7      	cbnz	r7, dc8f8 <mbedtls_rsa_validate_crt+0x64>
   dc8ba:	e035      	b.n	dc928 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
   dc8bc:	2c00      	cmp	r4, #0
   dc8be:	d058      	beq.n	dc972 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   dc8c0:	2201      	movs	r2, #1
   dc8c2:	4621      	mov	r1, r4
   dc8c4:	4668      	mov	r0, sp
   dc8c6:	f7fb fc73 	bl	d81b0 <mbedtls_mpi_sub_int>
   dc8ca:	2800      	cmp	r0, #0
   dc8cc:	d148      	bne.n	dc960 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
   dc8ce:	4642      	mov	r2, r8
   dc8d0:	4649      	mov	r1, r9
   dc8d2:	a803      	add	r0, sp, #12
   dc8d4:	f7fb fc34 	bl	d8140 <mbedtls_mpi_sub_mpi>
   dc8d8:	2800      	cmp	r0, #0
   dc8da:	d141      	bne.n	dc960 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   dc8dc:	a903      	add	r1, sp, #12
   dc8de:	466a      	mov	r2, sp
   dc8e0:	4608      	mov	r0, r1
   dc8e2:	f7fb feb7 	bl	d8654 <mbedtls_mpi_mod_mpi>
   dc8e6:	2800      	cmp	r0, #0
   dc8e8:	d13a      	bne.n	dc960 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   dc8ea:	4601      	mov	r1, r0
   dc8ec:	a803      	add	r0, sp, #12
   dc8ee:	f7fb fb56 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc8f2:	2800      	cmp	r0, #0
   dc8f4:	d13f      	bne.n	dc976 <mbedtls_rsa_validate_crt+0xe2>
   dc8f6:	e7df      	b.n	dc8b8 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
   dc8f8:	b3dd      	cbz	r5, dc972 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
   dc8fa:	2201      	movs	r2, #1
   dc8fc:	4629      	mov	r1, r5
   dc8fe:	4668      	mov	r0, sp
   dc900:	f7fb fc56 	bl	d81b0 <mbedtls_mpi_sub_int>
   dc904:	bb60      	cbnz	r0, dc960 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
   dc906:	4642      	mov	r2, r8
   dc908:	4639      	mov	r1, r7
   dc90a:	a803      	add	r0, sp, #12
   dc90c:	f7fb fc18 	bl	d8140 <mbedtls_mpi_sub_mpi>
   dc910:	bb30      	cbnz	r0, dc960 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   dc912:	a903      	add	r1, sp, #12
   dc914:	466a      	mov	r2, sp
   dc916:	4608      	mov	r0, r1
   dc918:	f7fb fe9c 	bl	d8654 <mbedtls_mpi_mod_mpi>
   dc91c:	bb00      	cbnz	r0, dc960 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   dc91e:	4601      	mov	r1, r0
   dc920:	a803      	add	r0, sp, #12
   dc922:	f7fb fb3c 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc926:	bb30      	cbnz	r0, dc976 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
   dc928:	b1c6      	cbz	r6, dc95c <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
   dc92a:	b314      	cbz	r4, dc972 <mbedtls_rsa_validate_crt+0xde>
   dc92c:	b30d      	cbz	r5, dc972 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
   dc92e:	462a      	mov	r2, r5
   dc930:	4631      	mov	r1, r6
   dc932:	4668      	mov	r0, sp
   dc934:	f7fb fc52 	bl	d81dc <mbedtls_mpi_mul_mpi>
   dc938:	b990      	cbnz	r0, dc960 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   dc93a:	2201      	movs	r2, #1
   dc93c:	4669      	mov	r1, sp
   dc93e:	4668      	mov	r0, sp
   dc940:	f7fb fc36 	bl	d81b0 <mbedtls_mpi_sub_int>
   dc944:	b960      	cbnz	r0, dc960 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   dc946:	4622      	mov	r2, r4
   dc948:	4669      	mov	r1, sp
   dc94a:	4668      	mov	r0, sp
   dc94c:	f7fb fe82 	bl	d8654 <mbedtls_mpi_mod_mpi>
   dc950:	b930      	cbnz	r0, dc960 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   dc952:	4601      	mov	r1, r0
   dc954:	4668      	mov	r0, sp
   dc956:	f7fb fb22 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc95a:	b960      	cbnz	r0, dc976 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   dc95c:	2400      	movs	r4, #0
   dc95e:	e00b      	b.n	dc978 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
   dc960:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
   dc964:	d007      	beq.n	dc976 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
   dc966:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
   dc96a:	d002      	beq.n	dc972 <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   dc96c:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
   dc970:	e002      	b.n	dc978 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   dc972:	4c06      	ldr	r4, [pc, #24]	; (dc98c <mbedtls_rsa_validate_crt+0xf8>)
   dc974:	e000      	b.n	dc978 <mbedtls_rsa_validate_crt+0xe4>
   dc976:	4c06      	ldr	r4, [pc, #24]	; (dc990 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
   dc978:	4668      	mov	r0, sp
   dc97a:	f7fb f86e 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   dc97e:	a803      	add	r0, sp, #12
   dc980:	f7fb f86b 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
}
   dc984:	4620      	mov	r0, r4
   dc986:	b007      	add	sp, #28
   dc988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc98c:	ffffbf80 	.word	0xffffbf80
   dc990:	ffffbe00 	.word	0xffffbe00

000dc994 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   dc994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc998:	b087      	sub	sp, #28
   dc99a:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   dc99c:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   dc99e:	4688      	mov	r8, r1
   dc9a0:	4691      	mov	r9, r2
   dc9a2:	461e      	mov	r6, r3
   dc9a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   dc9a6:	f7fb f851 	bl	d7a4c <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   dc9aa:	a803      	add	r0, sp, #12
   dc9ac:	f7fb f84e 	bl	d7a4c <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
   dc9b0:	f1b8 0f00 	cmp.w	r8, #0
   dc9b4:	d018      	beq.n	dc9e8 <mbedtls_rsa_validate_params+0x54>
   dc9b6:	f1b9 0f00 	cmp.w	r9, #0
   dc9ba:	d015      	beq.n	dc9e8 <mbedtls_rsa_validate_params+0x54>
   dc9bc:	b90d      	cbnz	r5, dc9c2 <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   dc9be:	b9de      	cbnz	r6, dc9f8 <mbedtls_rsa_validate_params+0x64>
   dc9c0:	e018      	b.n	dc9f4 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
   dc9c2:	464a      	mov	r2, r9
   dc9c4:	4641      	mov	r1, r8
   dc9c6:	4668      	mov	r0, sp
   dc9c8:	f7fb fc08 	bl	d81dc <mbedtls_mpi_mul_mpi>
   dc9cc:	4604      	mov	r4, r0
   dc9ce:	bb68      	cbnz	r0, dca2c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   dc9d0:	2101      	movs	r1, #1
   dc9d2:	4628      	mov	r0, r5
   dc9d4:	f7fb fae3 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dc9d8:	2800      	cmp	r0, #0
   dc9da:	dd26      	ble.n	dca2a <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
   dc9dc:	4629      	mov	r1, r5
   dc9de:	4668      	mov	r0, sp
   dc9e0:	f7fb fa98 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   dc9e4:	bb08      	cbnz	r0, dca2a <mbedtls_rsa_validate_params+0x96>
   dc9e6:	e016      	b.n	dca16 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
   dc9e8:	b125      	cbz	r5, dc9f4 <mbedtls_rsa_validate_params+0x60>
   dc9ea:	b9b6      	cbnz	r6, dca1a <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   dc9ec:	f1b8 0f00 	cmp.w	r8, #0
   dc9f0:	f040 808a 	bne.w	dcb08 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   dc9f4:	2400      	movs	r4, #0
   dc9f6:	e019      	b.n	dca2c <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   dc9f8:	2f00      	cmp	r7, #0
   dc9fa:	d0fb      	beq.n	dc9f4 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   dc9fc:	2101      	movs	r1, #1
   dc9fe:	4640      	mov	r0, r8
   dca00:	f7fb facd 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dca04:	2800      	cmp	r0, #0
   dca06:	dd10      	ble.n	dca2a <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
   dca08:	2101      	movs	r1, #1
   dca0a:	4648      	mov	r0, r9
   dca0c:	f7fb fac7 	bl	d7f9e <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   dca10:	2800      	cmp	r0, #0
   dca12:	dc19      	bgt.n	dca48 <mbedtls_rsa_validate_params+0xb4>
   dca14:	e009      	b.n	dca2a <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
   dca16:	2e00      	cmp	r6, #0
   dca18:	d0ec      	beq.n	dc9f4 <mbedtls_rsa_validate_params+0x60>
   dca1a:	2f00      	cmp	r7, #0
   dca1c:	d0e6      	beq.n	dc9ec <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   dca1e:	2101      	movs	r1, #1
   dca20:	4630      	mov	r0, r6
   dca22:	f7fb fabc 	bl	d7f9e <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   dca26:	2800      	cmp	r0, #0
   dca28:	dc5b      	bgt.n	dcae2 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   dca2a:	4c3c      	ldr	r4, [pc, #240]	; (dcb1c <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
   dca2c:	4668      	mov	r0, sp
   dca2e:	f7fb f814 	bl	d7a5a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   dca32:	a803      	add	r0, sp, #12
   dca34:	f7fb f811 	bl	d7a5a <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
   dca38:	2c00      	cmp	r4, #0
   dca3a:	d06a      	beq.n	dcb12 <mbedtls_rsa_validate_params+0x17e>
   dca3c:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
   dca40:	d067      	beq.n	dcb12 <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   dca42:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
   dca46:	e064      	b.n	dcb12 <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   dca48:	463a      	mov	r2, r7
   dca4a:	4631      	mov	r1, r6
   dca4c:	4668      	mov	r0, sp
   dca4e:	f7fb fbc5 	bl	d81dc <mbedtls_mpi_mul_mpi>
   dca52:	4604      	mov	r4, r0
   dca54:	2800      	cmp	r0, #0
   dca56:	d1e9      	bne.n	dca2c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   dca58:	2201      	movs	r2, #1
   dca5a:	4669      	mov	r1, sp
   dca5c:	4668      	mov	r0, sp
   dca5e:	f7fb fba7 	bl	d81b0 <mbedtls_mpi_sub_int>
   dca62:	4604      	mov	r4, r0
   dca64:	2800      	cmp	r0, #0
   dca66:	d1e1      	bne.n	dca2c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
   dca68:	2201      	movs	r2, #1
   dca6a:	4641      	mov	r1, r8
   dca6c:	a803      	add	r0, sp, #12
   dca6e:	f7fb fb9f 	bl	d81b0 <mbedtls_mpi_sub_int>
   dca72:	4604      	mov	r4, r0
   dca74:	2800      	cmp	r0, #0
   dca76:	d1d9      	bne.n	dca2c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   dca78:	aa03      	add	r2, sp, #12
   dca7a:	4669      	mov	r1, sp
   dca7c:	4668      	mov	r0, sp
   dca7e:	f7fb fde9 	bl	d8654 <mbedtls_mpi_mod_mpi>
   dca82:	4604      	mov	r4, r0
   dca84:	2800      	cmp	r0, #0
   dca86:	d1d1      	bne.n	dca2c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   dca88:	4601      	mov	r1, r0
   dca8a:	4668      	mov	r0, sp
   dca8c:	f7fb fa87 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dca90:	2800      	cmp	r0, #0
   dca92:	d1ca      	bne.n	dca2a <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   dca94:	463a      	mov	r2, r7
   dca96:	4631      	mov	r1, r6
   dca98:	4668      	mov	r0, sp
   dca9a:	f7fb fb9f 	bl	d81dc <mbedtls_mpi_mul_mpi>
   dca9e:	4604      	mov	r4, r0
   dcaa0:	2800      	cmp	r0, #0
   dcaa2:	d1c3      	bne.n	dca2c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   dcaa4:	2201      	movs	r2, #1
   dcaa6:	4669      	mov	r1, sp
   dcaa8:	4668      	mov	r0, sp
   dcaaa:	f7fb fb81 	bl	d81b0 <mbedtls_mpi_sub_int>
   dcaae:	4604      	mov	r4, r0
   dcab0:	2800      	cmp	r0, #0
   dcab2:	d1bb      	bne.n	dca2c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   dcab4:	2201      	movs	r2, #1
   dcab6:	4649      	mov	r1, r9
   dcab8:	a803      	add	r0, sp, #12
   dcaba:	f7fb fb79 	bl	d81b0 <mbedtls_mpi_sub_int>
   dcabe:	4604      	mov	r4, r0
   dcac0:	2800      	cmp	r0, #0
   dcac2:	d1b3      	bne.n	dca2c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   dcac4:	aa03      	add	r2, sp, #12
   dcac6:	4669      	mov	r1, sp
   dcac8:	4668      	mov	r0, sp
   dcaca:	f7fb fdc3 	bl	d8654 <mbedtls_mpi_mod_mpi>
   dcace:	4604      	mov	r4, r0
   dcad0:	2800      	cmp	r0, #0
   dcad2:	d1ab      	bne.n	dca2c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   dcad4:	4601      	mov	r1, r0
   dcad6:	4668      	mov	r0, sp
   dcad8:	f7fb fa61 	bl	d7f9e <mbedtls_mpi_cmp_int>
   dcadc:	2800      	cmp	r0, #0
   dcade:	d089      	beq.n	dc9f4 <mbedtls_rsa_validate_params+0x60>
   dcae0:	e7a3      	b.n	dca2a <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   dcae2:	2101      	movs	r1, #1
   dcae4:	4638      	mov	r0, r7
   dcae6:	f7fb fa5a 	bl	d7f9e <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   dcaea:	2800      	cmp	r0, #0
   dcaec:	dd9d      	ble.n	dca2a <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   dcaee:	4629      	mov	r1, r5
   dcaf0:	4630      	mov	r0, r6
   dcaf2:	f7fb fa0f 	bl	d7f14 <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   dcaf6:	2800      	cmp	r0, #0
   dcaf8:	da97      	bge.n	dca2a <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   dcafa:	4629      	mov	r1, r5
   dcafc:	4638      	mov	r0, r7
   dcafe:	f7fb fa09 	bl	d7f14 <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   dcb02:	2800      	cmp	r0, #0
   dcb04:	da91      	bge.n	dca2a <mbedtls_rsa_validate_params+0x96>
   dcb06:	e771      	b.n	dc9ec <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   dcb08:	f1b9 0f00 	cmp.w	r9, #0
   dcb0c:	f47f af57 	bne.w	dc9be <mbedtls_rsa_validate_params+0x2a>
   dcb10:	e770      	b.n	dc9f4 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
   dcb12:	4620      	mov	r0, r4
   dcb14:	b007      	add	sp, #28
   dcb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcb1a:	bf00      	nop
   dcb1c:	ffffbe00 	.word	0xffffbe00

000dcb20 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   dcb20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   dcb24:	4607      	mov	r7, r0
   dcb26:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   dcb28:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   dcb2a:	460e      	mov	r6, r1
   dcb2c:	4691      	mov	r9, r2
   dcb2e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dcb32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   dcb34:	f7fa ff8a 	bl	d7a4c <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
   dcb38:	f1ba 0f00 	cmp.w	sl, #0
   dcb3c:	d103      	bne.n	dcb46 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
   dcb3e:	f1b8 0f00 	cmp.w	r8, #0
   dcb42:	d110      	bne.n	dcb66 <mbedtls_rsa_deduce_crt+0x46>
   dcb44:	e01d      	b.n	dcb82 <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
   dcb46:	2201      	movs	r2, #1
   dcb48:	4639      	mov	r1, r7
   dcb4a:	a801      	add	r0, sp, #4
   dcb4c:	f7fb fb30 	bl	d81b0 <mbedtls_mpi_sub_int>
   dcb50:	4604      	mov	r4, r0
   dcb52:	b9f8      	cbnz	r0, dcb94 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
   dcb54:	aa01      	add	r2, sp, #4
   dcb56:	4649      	mov	r1, r9
   dcb58:	4650      	mov	r0, sl
   dcb5a:	f7fb fd7b 	bl	d8654 <mbedtls_mpi_mod_mpi>
   dcb5e:	4604      	mov	r4, r0
   dcb60:	2800      	cmp	r0, #0
   dcb62:	d0ec      	beq.n	dcb3e <mbedtls_rsa_deduce_crt+0x1e>
   dcb64:	e016      	b.n	dcb94 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
   dcb66:	2201      	movs	r2, #1
   dcb68:	4631      	mov	r1, r6
   dcb6a:	a801      	add	r0, sp, #4
   dcb6c:	f7fb fb20 	bl	d81b0 <mbedtls_mpi_sub_int>
   dcb70:	4604      	mov	r4, r0
   dcb72:	b978      	cbnz	r0, dcb94 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
   dcb74:	aa01      	add	r2, sp, #4
   dcb76:	4649      	mov	r1, r9
   dcb78:	4640      	mov	r0, r8
   dcb7a:	f7fb fd6b 	bl	d8654 <mbedtls_mpi_mod_mpi>
   dcb7e:	4604      	mov	r4, r0
   dcb80:	b940      	cbnz	r0, dcb94 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
   dcb82:	b90d      	cbnz	r5, dcb88 <mbedtls_rsa_deduce_crt+0x68>
   dcb84:	462c      	mov	r4, r5
   dcb86:	e005      	b.n	dcb94 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
   dcb88:	463a      	mov	r2, r7
   dcb8a:	4631      	mov	r1, r6
   dcb8c:	4628      	mov	r0, r5
   dcb8e:	f7fc f85a 	bl	d8c46 <mbedtls_mpi_inv_mod>
   dcb92:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
   dcb94:	a801      	add	r0, sp, #4
   dcb96:	f7fa ff60 	bl	d7a5a <mbedtls_mpi_free>

    return( ret );
}
   dcb9a:	4620      	mov	r0, r4
   dcb9c:	b004      	add	sp, #16
   dcb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dcba2 <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
   dcba2:	225c      	movs	r2, #92	; 0x5c
   dcba4:	2100      	movs	r1, #0
   dcba6:	f009 bff4 	b.w	e6b92 <memset>

000dcbaa <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
   dcbaa:	b138      	cbz	r0, dcbbc <mbedtls_sha1_free+0x12>
   dcbac:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
   dcbb0:	2300      	movs	r3, #0
   dcbb2:	4290      	cmp	r0, r2
   dcbb4:	d002      	beq.n	dcbbc <mbedtls_sha1_free+0x12>
   dcbb6:	7003      	strb	r3, [r0, #0]
   dcbb8:	3001      	adds	r0, #1
   dcbba:	e7fa      	b.n	dcbb2 <mbedtls_sha1_free+0x8>
   dcbbc:	4770      	bx	lr

000dcbbe <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
   dcbbe:	b508      	push	{r3, lr}
    *dst = *src;
   dcbc0:	225c      	movs	r2, #92	; 0x5c
   dcbc2:	f009 ffc0 	bl	e6b46 <memcpy>
   dcbc6:	bd08      	pop	{r3, pc}

000dcbc8 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
   dcbc8:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
   dcbca:	4a0a      	ldr	r2, [pc, #40]	; (dcbf4 <mbedtls_sha1_starts_ret+0x2c>)
   dcbcc:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
   dcbce:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
   dcbd2:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
   dcbd4:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
   dcbd8:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
   dcbdc:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
   dcbe0:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
   dcbe2:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
   dcbe6:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
   dcbe8:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
   dcbea:	4a03      	ldr	r2, [pc, #12]	; (dcbf8 <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
   dcbec:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
   dcbee:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
   dcbf0:	619a      	str	r2, [r3, #24]

    return( 0 );
}
   dcbf2:	4770      	bx	lr
   dcbf4:	67452301 	.word	0x67452301
   dcbf8:	c3d2e1f0 	.word	0xc3d2e1f0

000dcbfc <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   dcbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
   dcc00:	784b      	ldrb	r3, [r1, #1]
   dcc02:	780a      	ldrb	r2, [r1, #0]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
   dcc04:	f891 c008 	ldrb.w	ip, [r1, #8]
    GET_UINT32_BE( W[ 3], data, 12 );
   dcc08:	f891 800c 	ldrb.w	r8, [r1, #12]
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
   dcc0c:	f891 e014 	ldrb.w	lr, [r1, #20]
    GET_UINT32_BE( W[ 6], data, 24 );
   dcc10:	7e0f      	ldrb	r7, [r1, #24]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
   dcc12:	041b      	lsls	r3, r3, #16
   dcc14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   dcc18:	78ca      	ldrb	r2, [r1, #3]
   dcc1a:	4313      	orrs	r3, r2
   dcc1c:	788a      	ldrb	r2, [r1, #2]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   dcc1e:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
   dcc20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   dcc24:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
   dcc26:	794b      	ldrb	r3, [r1, #5]
   dcc28:	790a      	ldrb	r2, [r1, #4]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   dcc2a:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
   dcc2c:	041b      	lsls	r3, r3, #16
   dcc2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   dcc32:	79ca      	ldrb	r2, [r1, #7]
   dcc34:	4313      	orrs	r3, r2
   dcc36:	798a      	ldrb	r2, [r1, #6]
   dcc38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   dcc3c:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
   dcc3e:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
   dcc40:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
   dcc42:	041b      	lsls	r3, r3, #16
   dcc44:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   dcc48:	f891 c00b 	ldrb.w	ip, [r1, #11]
   dcc4c:	ea43 030c 	orr.w	r3, r3, ip
   dcc50:	f891 c00a 	ldrb.w	ip, [r1, #10]
   dcc54:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
   dcc58:	7b4b      	ldrb	r3, [r1, #13]
   dcc5a:	041b      	lsls	r3, r3, #16
   dcc5c:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   dcc60:	f891 800f 	ldrb.w	r8, [r1, #15]
   dcc64:	ea43 0308 	orr.w	r3, r3, r8
   dcc68:	f891 800e 	ldrb.w	r8, [r1, #14]
   dcc6c:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
   dcc70:	7c4b      	ldrb	r3, [r1, #17]
   dcc72:	041b      	lsls	r3, r3, #16
   dcc74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   dcc78:	7cca      	ldrb	r2, [r1, #19]
   dcc7a:	4313      	orrs	r3, r2
   dcc7c:	7c8a      	ldrb	r2, [r1, #18]
   dcc7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   dcc82:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
   dcc84:	7d4b      	ldrb	r3, [r1, #21]
   dcc86:	041b      	lsls	r3, r3, #16
   dcc88:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
   dcc8c:	f891 e017 	ldrb.w	lr, [r1, #23]
   dcc90:	ea43 030e 	orr.w	r3, r3, lr
   dcc94:	f891 e016 	ldrb.w	lr, [r1, #22]
   dcc98:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   dcc9c:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
   dcc9e:	7e4b      	ldrb	r3, [r1, #25]
   dcca0:	041b      	lsls	r3, r3, #16
   dcca2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
   dcca6:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
   dcca8:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 8], data, 32 );
   dccaa:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 9], data, 36 );
   dccae:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
   dccb2:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
   dccb6:	433b      	orrs	r3, r7
   dccb8:	7e8f      	ldrb	r7, [r1, #26]
   dccba:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
   dccbe:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
   dccc0:	7f4b      	ldrb	r3, [r1, #29]
   dccc2:	041b      	lsls	r3, r3, #16
   dccc4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   dccc8:	7fce      	ldrb	r6, [r1, #31]
   dccca:	4333      	orrs	r3, r6
   dcccc:	7f8e      	ldrb	r6, [r1, #30]
   dccce:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
   dccd2:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
   dccd4:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
   dccd8:	041b      	lsls	r3, r3, #16
   dccda:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   dccde:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
   dcce2:	4323      	orrs	r3, r4
   dcce4:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   dcce8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   dccec:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
   dccee:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
   dccf2:	041b      	lsls	r3, r3, #16
   dccf4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   dccf8:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
   dccfc:	4313      	orrs	r3, r2
   dccfe:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   dcd02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   dcd06:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
   dcd08:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
   dcd0c:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   dcd10:	041b      	lsls	r3, r3, #16
   dcd12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   dcd16:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
   dcd1a:	4313      	orrs	r3, r2
   dcd1c:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
   dcd20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   dcd24:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
   dcd26:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   dcd2a:	041b      	lsls	r3, r3, #16
   dcd2c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   dcd30:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
   dcd34:	4303      	orrs	r3, r0
   dcd36:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
   dcd3a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   dcd3e:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
   dcd40:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
   dcd44:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   dcd48:	041b      	lsls	r3, r3, #16
   dcd4a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   dcd4e:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
   dcd52:	4303      	orrs	r3, r0
   dcd54:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
   dcd58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   dcd5c:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
   dcd5e:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
   dcd62:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
    GET_UINT32_BE( W[14], data, 56 );
   dcd66:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
   dcd6a:	041b      	lsls	r3, r3, #16
   dcd6c:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   dcd70:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
   dcd74:	ea43 0309 	orr.w	r3, r3, r9
   dcd78:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
   dcd7c:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   dcd80:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
   dcd82:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   dcd86:	041b      	lsls	r3, r3, #16
   dcd88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   dcd8c:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
   dcd90:	4313      	orrs	r3, r2
   dcd92:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
   dcd96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   dcd9a:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
   dcd9c:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
   dcda0:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
   dcda4:	041b      	lsls	r3, r3, #16
   dcda6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   dcdaa:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
   dcdae:	4313      	orrs	r3, r2
   dcdb0:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
   dcdb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   dcdb8:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
   dcdba:	9b01      	ldr	r3, [sp, #4]
   dcdbc:	689b      	ldr	r3, [r3, #8]
   dcdbe:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
   dcdc0:	9b01      	ldr	r3, [sp, #4]
   dcdc2:	68db      	ldr	r3, [r3, #12]
   dcdc4:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
   dcdc6:	9b01      	ldr	r3, [sp, #4]
   dcdc8:	691b      	ldr	r3, [r3, #16]
   dcdca:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
   dcdcc:	9b01      	ldr	r3, [sp, #4]
   dcdce:	695b      	ldr	r3, [r3, #20]
   dcdd0:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
   dcdd2:	9b01      	ldr	r3, [sp, #4]
   dcdd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dcdd6:	699b      	ldr	r3, [r3, #24]
   dcdd8:	9315      	str	r3, [sp, #84]	; 0x54
   dcdda:	9b05      	ldr	r3, [sp, #20]
   dcddc:	ea83 0e02 	eor.w	lr, r3, r2
   dcde0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcde2:	9912      	ldr	r1, [sp, #72]	; 0x48
   dcde4:	9c11      	ldr	r4, [sp, #68]	; 0x44
   dcde6:	ea0e 0e03 	and.w	lr, lr, r3
   dcdea:	ea8e 0e02 	eor.w	lr, lr, r2
   dcdee:	4bdd      	ldr	r3, [pc, #884]	; (dd164 <mbedtls_internal_sha1_process+0x568>)
   dcdf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   dcdf2:	441a      	add	r2, r3
   dcdf4:	eb02 62f1 	add.w	r2, r2, r1, ror #27
   dcdf8:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   dcdfa:	9a06      	ldr	r2, [sp, #24]
   dcdfc:	4496      	add	lr, r2
   dcdfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dce00:	ea4f 00b2 	mov.w	r0, r2, ror #2
   dce04:	9a05      	ldr	r2, [sp, #20]
   dce06:	ea82 0700 	eor.w	r7, r2, r0
   dce0a:	9a05      	ldr	r2, [sp, #20]
   dce0c:	400f      	ands	r7, r1
   dce0e:	4057      	eors	r7, r2
   dce10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dce12:	441a      	add	r2, r3
   dce14:	4417      	add	r7, r2
   dce16:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, W[1]  );
   dce18:	ea4f 01b1 	mov.w	r1, r1, ror #2
   dce1c:	4417      	add	r7, r2
   dce1e:	9a05      	ldr	r2, [sp, #20]
   dce20:	ea80 0901 	eor.w	r9, r0, r1
   dce24:	ea09 090e 	and.w	r9, r9, lr
   dce28:	441a      	add	r2, r3
   dce2a:	eb07 67fe 	add.w	r7, r7, lr, ror #27
   dce2e:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
   dce30:	ea4f 0ebe 	mov.w	lr, lr, ror #2
   dce34:	ea89 0900 	eor.w	r9, r9, r0
   dce38:	4491      	add	r9, r2
   dce3a:	ea81 020e 	eor.w	r2, r1, lr
   dce3e:	18c5      	adds	r5, r0, r3
   dce40:	403a      	ands	r2, r7
   dce42:	eb09 69f7 	add.w	r9, r9, r7, ror #27
   dce46:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
   dce48:	ea4f 07b7 	mov.w	r7, r7, ror #2
   dce4c:	4445      	add	r5, r8
   dce4e:	18c8      	adds	r0, r1, r3
   dce50:	4415      	add	r5, r2
   dce52:	990e      	ldr	r1, [sp, #56]	; 0x38
   dce54:	ea8e 0207 	eor.w	r2, lr, r7
   dce58:	ea02 0209 	and.w	r2, r2, r9
   dce5c:	eb05 65f9 	add.w	r5, r5, r9, ror #27
   dce60:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
   dce64:	ea4f 09b9 	mov.w	r9, r9, ror #2
   dce68:	4408      	add	r0, r1
   dce6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   dce6c:	4410      	add	r0, r2
   dce6e:	ea87 0209 	eor.w	r2, r7, r9
   dce72:	18ce      	adds	r6, r1, r3
   dce74:	402a      	ands	r2, r5
   dce76:	407a      	eors	r2, r7
   dce78:	4476      	add	r6, lr
   dce7a:	eb00 60f5 	add.w	r0, r0, r5, ror #27
   dce7e:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
   dce80:	ea4f 05b5 	mov.w	r5, r5, ror #2
   dce84:	9a10      	ldr	r2, [sp, #64]	; 0x40
   dce86:	ea89 0105 	eor.w	r1, r9, r5
   dce8a:	4001      	ands	r1, r0
   dce8c:	441a      	add	r2, r3
   dce8e:	eb06 66f0 	add.w	r6, r6, r0, ror #27
   dce92:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
   dce96:	ea4f 00b0 	mov.w	r0, r0, ror #2
   dce9a:	443a      	add	r2, r7
   dce9c:	440a      	add	r2, r1
   dce9e:	ea85 0100 	eor.w	r1, r5, r0
   dcea2:	eb04 0b03 	add.w	fp, r4, r3
   dcea6:	4031      	ands	r1, r6
   dcea8:	eb02 62f6 	add.w	r2, r2, r6, ror #27
   dceac:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
   dceae:	ea4f 06b6 	mov.w	r6, r6, ror #2
   dceb2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dceb4:	44cb      	add	fp, r9
   dceb6:	448b      	add	fp, r1
   dceb8:	ea80 0106 	eor.w	r1, r0, r6
   dcebc:	4011      	ands	r1, r2
   dcebe:	441c      	add	r4, r3
   dcec0:	4041      	eors	r1, r0
   dcec2:	442c      	add	r4, r5
   dcec4:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
   dcec8:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
   dceca:	ea4f 02b2 	mov.w	r2, r2, ror #2
   dcece:	990a      	ldr	r1, [sp, #40]	; 0x28
   dced0:	ea86 0502 	eor.w	r5, r6, r2
   dced4:	ea05 050b 	and.w	r5, r5, fp
   dced8:	4419      	add	r1, r3
   dceda:	4075      	eors	r5, r6
   dcedc:	4401      	add	r1, r0
   dcede:	eb04 64fb 	add.w	r4, r4, fp, ror #27
   dcee2:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
   dcee4:	ea4f 0bbb 	mov.w	fp, fp, ror #2
   dcee8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   dceea:	ea82 000b 	eor.w	r0, r2, fp
   dceee:	eb05 0a03 	add.w	sl, r5, r3
   dcef2:	4020      	ands	r0, r4
   dcef4:	eb01 61f4 	add.w	r1, r1, r4, ror #27
   dcef8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
   dcefa:	ea4f 04b4 	mov.w	r4, r4, ror #2
   dcefe:	4050      	eors	r0, r2
   dcf00:	44b2      	add	sl, r6
   dcf02:	4482      	add	sl, r0
   dcf04:	ea8b 0004 	eor.w	r0, fp, r4
   dcf08:	eb05 0903 	add.w	r9, r5, r3
   dcf0c:	4008      	ands	r0, r1
   dcf0e:	ea80 000b 	eor.w	r0, r0, fp
   dcf12:	4491      	add	r9, r2
   dcf14:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
   dcf18:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
   dcf1a:	ea4f 01b1 	mov.w	r1, r1, ror #2
   dcf1e:	980d      	ldr	r0, [sp, #52]	; 0x34
   dcf20:	ea84 0201 	eor.w	r2, r4, r1
   dcf24:	eb00 0e03 	add.w	lr, r0, r3
   dcf28:	ea02 020a 	and.w	r2, r2, sl
   dcf2c:	eb09 69fa 	add.w	r9, r9, sl, ror #27
   dcf30:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
   dcf32:	ea4f 0aba 	mov.w	sl, sl, ror #2
   dcf36:	4062      	eors	r2, r4
   dcf38:	44de      	add	lr, fp
   dcf3a:	4496      	add	lr, r2
   dcf3c:	ea81 020a 	eor.w	r2, r1, sl
   dcf40:	18c5      	adds	r5, r0, r3
   dcf42:	ea02 0209 	and.w	r2, r2, r9
   dcf46:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
   dcf4a:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
   dcf4c:	ea4f 09b9 	mov.w	r9, r9, ror #2
   dcf50:	9803      	ldr	r0, [sp, #12]
   dcf52:	4425      	add	r5, r4
   dcf54:	4415      	add	r5, r2
   dcf56:	ea8a 0209 	eor.w	r2, sl, r9
   dcf5a:	ea02 020e 	and.w	r2, r2, lr
   dcf5e:	4418      	add	r0, r3
   dcf60:	eb05 65fe 	add.w	r5, r5, lr, ror #27
   dcf64:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
   dcf68:	ea4f 0ebe 	mov.w	lr, lr, ror #2
   dcf6c:	4408      	add	r0, r1
   dcf6e:	9904      	ldr	r1, [sp, #16]
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   dcf70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dcf72:	4410      	add	r0, r2
   dcf74:	ea89 020e 	eor.w	r2, r9, lr
   dcf78:	18cf      	adds	r7, r1, r3
   dcf7a:	402a      	ands	r2, r5
   dcf7c:	ea82 0209 	eor.w	r2, r2, r9
   dcf80:	4457      	add	r7, sl
   dcf82:	4417      	add	r7, r2
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   dcf84:	9a06      	ldr	r2, [sp, #24]
   dcf86:	9909      	ldr	r1, [sp, #36]	; 0x24
   dcf88:	ea82 020c 	eor.w	r2, r2, ip
   dcf8c:	404a      	eors	r2, r1
   dcf8e:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
   dcf90:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   dcf94:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   dcf96:	ea4f 05b5 	mov.w	r5, r5, ror #2
   dcf9a:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
   dcf9e:	ea4f 72f2 	mov.w	r2, r2, ror #31
   dcfa2:	9206      	str	r2, [sp, #24]
   dcfa4:	4001      	ands	r1, r0
   dcfa6:	441a      	add	r2, r3
   dcfa8:	ea81 010e 	eor.w	r1, r1, lr
   dcfac:	444a      	add	r2, r9
   dcfae:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
   dcfb0:	9907      	ldr	r1, [sp, #28]
   dcfb2:	ea81 0108 	eor.w	r1, r1, r8
   dcfb6:	4061      	eors	r1, r4
   dcfb8:	9c03      	ldr	r4, [sp, #12]
   dcfba:	4061      	eors	r1, r4
   dcfbc:	ea4f 71f1 	mov.w	r1, r1, ror #31
   dcfc0:	9107      	str	r1, [sp, #28]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   dcfc2:	eb07 67f0 	add.w	r7, r7, r0, ror #27
   dcfc6:	9c07      	ldr	r4, [sp, #28]
    P( E, A, B, C, D, R(16) );
   dcfc8:	ea4f 00b0 	mov.w	r0, r0, ror #2
   dcfcc:	ea85 0100 	eor.w	r1, r5, r0
   dcfd0:	18e6      	adds	r6, r4, r3
   dcfd2:	4039      	ands	r1, r7
   dcfd4:	4069      	eors	r1, r5
   dcfd6:	4476      	add	r6, lr
   dcfd8:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   dcfda:	990e      	ldr	r1, [sp, #56]	; 0x38
   dcfdc:	ea8c 0c01 	eor.w	ip, ip, r1
   dcfe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dcfe2:	ea8c 0c01 	eor.w	ip, ip, r1
   dcfe6:	9904      	ldr	r1, [sp, #16]
   dcfe8:	ea8c 0c01 	eor.w	ip, ip, r1
   dcfec:	ea4f 71fc 	mov.w	r1, ip, ror #31
   dcff0:	9108      	str	r1, [sp, #32]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   dcff2:	eb02 62f7 	add.w	r2, r2, r7, ror #27
   dcff6:	9c08      	ldr	r4, [sp, #32]
    P( D, E, A, B, C, R(17) );
   dcff8:	ea4f 07b7 	mov.w	r7, r7, ror #2
   dcffc:	ea80 0107 	eor.w	r1, r0, r7
   dd000:	4011      	ands	r1, r2
   dd002:	441c      	add	r4, r3
   dd004:	4041      	eors	r1, r0
   dd006:	442c      	add	r4, r5
   dd008:	440c      	add	r4, r1
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   dd00a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   dd00c:	ea88 0801 	eor.w	r8, r8, r1
   dd010:	990c      	ldr	r1, [sp, #48]	; 0x30
   dd012:	ea88 0801 	eor.w	r8, r8, r1
   dd016:	9906      	ldr	r1, [sp, #24]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   dd018:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   dd01c:	ea88 0801 	eor.w	r8, r8, r1
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   dd020:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
   dd024:	ea4f 78f8 	mov.w	r8, r8, ror #31
   dd028:	ea87 0502 	eor.w	r5, r7, r2
   dd02c:	4035      	ands	r5, r6
   dd02e:	4443      	add	r3, r8
   dd030:	407d      	eors	r5, r7
   dd032:	4403      	add	r3, r0
   dd034:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   dd036:	9810      	ldr	r0, [sp, #64]	; 0x40
   dd038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dd03a:	4d4b      	ldr	r5, [pc, #300]	; (dd168 <mbedtls_internal_sha1_process+0x56c>)
   dd03c:	ea83 0c00 	eor.w	ip, r3, r0
   dd040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
   dd042:	9811      	ldr	r0, [sp, #68]	; 0x44
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   dd044:	ea8c 0c03 	eor.w	ip, ip, r3
   dd048:	9b07      	ldr	r3, [sp, #28]
   dd04a:	ea8c 0c03 	eor.w	ip, ip, r3
   dd04e:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   dd052:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( B, C, D, E, A, R(19) );
   dd056:	ea4f 06b6 	mov.w	r6, r6, ror #2
   dd05a:	ea82 0306 	eor.w	r3, r2, r6
   dd05e:	eb0c 0b05 	add.w	fp, ip, r5
   dd062:	4063      	eors	r3, r4
   dd064:	44bb      	add	fp, r7
   dd066:	449b      	add	fp, r3

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
   dd068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd06a:	ea83 0e00 	eor.w	lr, r3, r0
   dd06e:	9b02      	ldr	r3, [sp, #8]
   dd070:	ea8e 0e03 	eor.w	lr, lr, r3
   dd074:	9b08      	ldr	r3, [sp, #32]
   dd076:	ea8e 0e03 	eor.w	lr, lr, r3
   dd07a:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   dd07e:	eb01 61f4 	add.w	r1, r1, r4, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   dd082:	ea4f 04b4 	mov.w	r4, r4, ror #2
   dd086:	ea86 0004 	eor.w	r0, r6, r4
   dd08a:	eb0e 0305 	add.w	r3, lr, r5
   dd08e:	4048      	eors	r0, r1
   dd090:	4413      	add	r3, r2
   dd092:	4403      	add	r3, r0
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   dd094:	9a10      	ldr	r2, [sp, #64]	; 0x40
   dd096:	9809      	ldr	r0, [sp, #36]	; 0x24
   dd098:	ea82 0700 	eor.w	r7, r2, r0
   dd09c:	9a03      	ldr	r2, [sp, #12]
    P( C, D, E, A, B, R(23) );
   dd09e:	980a      	ldr	r0, [sp, #40]	; 0x28
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   dd0a0:	4057      	eors	r7, r2
   dd0a2:	ea87 0708 	eor.w	r7, r7, r8
   dd0a6:	ea4f 77f7 	mov.w	r7, r7, ror #31
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   dd0aa:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
   dd0ae:	ea4f 01b1 	mov.w	r1, r1, ror #2
   dd0b2:	ea84 0201 	eor.w	r2, r4, r1
   dd0b6:	eb07 0a05 	add.w	sl, r7, r5
   dd0ba:	ea82 020b 	eor.w	r2, r2, fp
   dd0be:	44b2      	add	sl, r6
   dd0c0:	4492      	add	sl, r2
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
   dd0c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dd0c4:	ea82 0600 	eor.w	r6, r2, r0
   dd0c8:	9a04      	ldr	r2, [sp, #16]
    P( B, C, D, E, A, R(24) );
   dd0ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
   dd0cc:	4056      	eors	r6, r2
   dd0ce:	ea86 060c 	eor.w	r6, r6, ip
   dd0d2:	ea4f 76f6 	mov.w	r6, r6, ror #31

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
   dd0d6:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
   dd0da:	ea4f 0bbb 	mov.w	fp, fp, ror #2
   dd0de:	ea81 020b 	eor.w	r2, r1, fp
   dd0e2:	eb06 0905 	add.w	r9, r6, r5
   dd0e6:	405a      	eors	r2, r3
   dd0e8:	44a1      	add	r9, r4
   dd0ea:	4491      	add	r9, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
   dd0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dd0ee:	ea82 0400 	eor.w	r4, r2, r0
   dd0f2:	9a06      	ldr	r2, [sp, #24]
   dd0f4:	4054      	eors	r4, r2
   dd0f6:	ea84 040e 	eor.w	r4, r4, lr
   dd0fa:	ea4f 72f4 	mov.w	r2, r4, ror #31
   dd0fe:	9209      	str	r2, [sp, #36]	; 0x24
   dd100:	9809      	ldr	r0, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   dd102:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
   dd106:	ea4f 03b3 	mov.w	r3, r3, ror #2
   dd10a:	ea8b 0203 	eor.w	r2, fp, r3
   dd10e:	4428      	add	r0, r5
   dd110:	ea82 020a 	eor.w	r2, r2, sl
   dd114:	4408      	add	r0, r1
   dd116:	4410      	add	r0, r2
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   dd118:	990c      	ldr	r1, [sp, #48]	; 0x30
   dd11a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dd11c:	404a      	eors	r2, r1
   dd11e:	9907      	ldr	r1, [sp, #28]
   dd120:	404a      	eors	r2, r1
   dd122:	407a      	eors	r2, r7
   dd124:	ea4f 72f2 	mov.w	r2, r2, ror #31
   dd128:	920a      	str	r2, [sp, #40]	; 0x28
   dd12a:	990a      	ldr	r1, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
   dd12c:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
   dd130:	ea4f 0aba 	mov.w	sl, sl, ror #2
   dd134:	ea83 020a 	eor.w	r2, r3, sl
   dd138:	4429      	add	r1, r5
   dd13a:	ea82 0209 	eor.w	r2, r2, r9
   dd13e:	4459      	add	r1, fp
   dd140:	4411      	add	r1, r2
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   dd142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dd144:	4614      	mov	r4, r2
   dd146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   dd148:	4062      	eors	r2, r4
   dd14a:	9c08      	ldr	r4, [sp, #32]
   dd14c:	4062      	eors	r2, r4
   dd14e:	4072      	eors	r2, r6

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
   dd150:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   dd154:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   dd158:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
   dd15c:	920b      	str	r2, [sp, #44]	; 0x2c
   dd15e:	ea8a 0b09 	eor.w	fp, sl, r9
   dd162:	e003      	b.n	dd16c <mbedtls_internal_sha1_process+0x570>
   dd164:	5a827999 	.word	0x5a827999
   dd168:	6ed9eba1 	.word	0x6ed9eba1
   dd16c:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
   dd16e:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   dd170:	eb01 61f0 	add.w	r1, r1, r0, ror #27
   dd174:	ea8b 0b00 	eor.w	fp, fp, r0
   dd178:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
   dd17a:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
   dd17e:	980c      	ldr	r0, [sp, #48]	; 0x30
   dd180:	4060      	eors	r0, r4
   dd182:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dd184:	ea80 0008 	eor.w	r0, r0, r8
   dd188:	4060      	eors	r0, r4
   dd18a:	ea4f 70f0 	mov.w	r0, r0, ror #31
   dd18e:	900c      	str	r0, [sp, #48]	; 0x30
   dd190:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dd192:	ea89 0003 	eor.w	r0, r9, r3
   dd196:	445a      	add	r2, fp
   dd198:	eb04 0b05 	add.w	fp, r4, r5
   dd19c:	4048      	eors	r0, r1
   dd19e:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
   dd1a0:	9c03      	ldr	r4, [sp, #12]
   dd1a2:	4482      	add	sl, r0
   dd1a4:	980d      	ldr	r0, [sp, #52]	; 0x34
   dd1a6:	4060      	eors	r0, r4
   dd1a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dd1aa:	ea80 000c 	eor.w	r0, r0, ip
   dd1ae:	4060      	eors	r0, r4
   dd1b0:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
   dd1b4:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
   dd1b6:	900d      	str	r0, [sp, #52]	; 0x34
   dd1b8:	4428      	add	r0, r5
   dd1ba:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
   dd1bc:	46a1      	mov	r9, r4
   dd1be:	9c04      	ldr	r4, [sp, #16]
   dd1c0:	ea89 0904 	eor.w	r9, r9, r4
   dd1c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dd1c6:	ea89 090e 	eor.w	r9, r9, lr
   dd1ca:	ea89 0904 	eor.w	r9, r9, r4
   dd1ce:	ea4f 74f9 	mov.w	r4, r9, ror #31
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   dd1d2:	eb02 62f1 	add.w	r2, r2, r1, ror #27
   dd1d6:	eb04 0905 	add.w	r9, r4, r5
    P( D, E, A, B, C, R(27) );
   dd1da:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
   dd1de:	9402      	str	r4, [sp, #8]
   dd1e0:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
   dd1e4:	9c06      	ldr	r4, [sp, #24]
   dd1e6:	4499      	add	r9, r3
   dd1e8:	9b03      	ldr	r3, [sp, #12]
   dd1ea:	4063      	eors	r3, r4
   dd1ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dd1ee:	407b      	eors	r3, r7
   dd1f0:	4063      	eors	r3, r4
   dd1f2:	ea4f 73f3 	mov.w	r3, r3, ror #31
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
   dd1f6:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   dd1fa:	9303      	str	r3, [sp, #12]
   dd1fc:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
   dd200:	ea4f 02b2 	mov.w	r2, r2, ror #2
   dd204:	9c03      	ldr	r4, [sp, #12]
   dd206:	4458      	add	r0, fp
   dd208:	ea81 0b02 	eor.w	fp, r1, r2
   dd20c:	eb00 60fa 	add.w	r0, r0, sl, ror #27
   dd210:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
   dd214:	ea4f 0aba 	mov.w	sl, sl, ror #2
   dd218:	ea82 030a 	eor.w	r3, r2, sl
   dd21c:	44d9      	add	r9, fp
   dd21e:	eb04 0b05 	add.w	fp, r4, r5
   dd222:	4043      	eors	r3, r0
   dd224:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   dd226:	9c07      	ldr	r4, [sp, #28]
   dd228:	4419      	add	r1, r3
   dd22a:	9b04      	ldr	r3, [sp, #16]
   dd22c:	4063      	eors	r3, r4
   dd22e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dd230:	4073      	eors	r3, r6
   dd232:	4063      	eors	r3, r4
   dd234:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dd238:	9304      	str	r3, [sp, #16]
   dd23a:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
   dd23c:	9c08      	ldr	r4, [sp, #32]
   dd23e:	4413      	add	r3, r2
   dd240:	9a06      	ldr	r2, [sp, #24]
   dd242:	4062      	eors	r2, r4
   dd244:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dd246:	4062      	eors	r2, r4
   dd248:	9c02      	ldr	r4, [sp, #8]
   dd24a:	4062      	eors	r2, r4
   dd24c:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
   dd250:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
   dd254:	9206      	str	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   dd256:	ea4f 00b0 	mov.w	r0, r0, ror #2
   dd25a:	9c06      	ldr	r4, [sp, #24]
   dd25c:	ea8a 0b00 	eor.w	fp, sl, r0
   dd260:	eb01 61f9 	add.w	r1, r1, r9, ror #27
   dd264:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(31) );
   dd268:	ea4f 09b9 	mov.w	r9, r9, ror #2
   dd26c:	ea80 0209 	eor.w	r2, r0, r9
   dd270:	445b      	add	r3, fp
   dd272:	eb04 0b05 	add.w	fp, r4, r5
   dd276:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
   dd278:	9c07      	ldr	r4, [sp, #28]
   dd27a:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   dd27c:	eb03 63f1 	add.w	r3, r3, r1, ror #27
   dd280:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
   dd282:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
   dd286:	ea84 0a08 	eor.w	sl, r4, r8
   dd28a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dd28c:	ea8a 0a04 	eor.w	sl, sl, r4
   dd290:	9c03      	ldr	r4, [sp, #12]
   dd292:	ea8a 0a04 	eor.w	sl, sl, r4
   dd296:	ea4f 74fa 	mov.w	r4, sl, ror #31
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
   dd29a:	ea4f 01b1 	mov.w	r1, r1, ror #2
   dd29e:	eb04 0b05 	add.w	fp, r4, r5
   dd2a2:	ea89 0a01 	eor.w	sl, r9, r1
   dd2a6:	4458      	add	r0, fp
   dd2a8:	ea8a 0a03 	eor.w	sl, sl, r3
   dd2ac:	4482      	add	sl, r0
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
   dd2ae:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
   dd2b0:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
   dd2b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dd2b4:	ea80 000c 	eor.w	r0, r0, ip
   dd2b8:	4060      	eors	r0, r4
   dd2ba:	9c04      	ldr	r4, [sp, #16]
   dd2bc:	4060      	eors	r0, r4
   dd2be:	ea4f 70f0 	mov.w	r0, r0, ror #31
   dd2c2:	9008      	str	r0, [sp, #32]
   dd2c4:	9c08      	ldr	r4, [sp, #32]
   dd2c6:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
   dd2ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dd2cc:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
   dd2d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
   dd2d4:	ea88 0804 	eor.w	r8, r8, r4
   dd2d8:	9c06      	ldr	r4, [sp, #24]
   dd2da:	ea81 0003 	eor.w	r0, r1, r3
   dd2de:	4050      	eors	r0, r2
   dd2e0:	ea88 0804 	eor.w	r8, r8, r4
   dd2e4:	44d9      	add	r9, fp
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
   dd2e6:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
   dd2ea:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
   dd2ee:	ea4f 02b2 	mov.w	r2, r2, ror #2
   dd2f2:	4481      	add	r9, r0
   dd2f4:	eb09 60fa 	add.w	r0, r9, sl, ror #27
   dd2f8:	ea83 0802 	eor.w	r8, r3, r2
   dd2fc:	eb0b 0905 	add.w	r9, fp, r5
   dd300:	ea88 080a 	eor.w	r8, r8, sl
   dd304:	4449      	add	r1, r9
   dd306:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
   dd308:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
   dd30c:	990d      	ldr	r1, [sp, #52]	; 0x34
   dd30e:	ea8c 0c07 	eor.w	ip, ip, r7
   dd312:	ea8c 0c01 	eor.w	ip, ip, r1
   dd316:	9907      	ldr	r1, [sp, #28]
   dd318:	ea8c 0c01 	eor.w	ip, ip, r1
   dd31c:	ea4f 71fc 	mov.w	r1, ip, ror #31
   dd320:	910e      	str	r1, [sp, #56]	; 0x38
   dd322:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
   dd324:	ea4f 0aba 	mov.w	sl, sl, ror #2
   dd328:	eb04 0c05 	add.w	ip, r4, r5
   dd32c:	ea82 010a 	eor.w	r1, r2, sl
   dd330:	4041      	eors	r1, r0
   dd332:	4463      	add	r3, ip
   dd334:	440b      	add	r3, r1
    P( E, A, B, C, D, R(36) );
   dd336:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
   dd33a:	9b02      	ldr	r3, [sp, #8]
   dd33c:	ea8e 0e06 	eor.w	lr, lr, r6
   dd340:	ea8e 0e03 	eor.w	lr, lr, r3
   dd344:	9b08      	ldr	r3, [sp, #32]
   dd346:	ea8e 0e03 	eor.w	lr, lr, r3
   dd34a:	ea4f 73fe 	mov.w	r3, lr, ror #31
   dd34e:	930f      	str	r3, [sp, #60]	; 0x3c
   dd350:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
   dd352:	ea4f 00b0 	mov.w	r0, r0, ror #2
   dd356:	eb04 0e05 	add.w	lr, r4, r5
   dd35a:	ea8a 0300 	eor.w	r3, sl, r0
   dd35e:	ea83 0308 	eor.w	r3, r3, r8
   dd362:	4472      	add	r2, lr
   dd364:	441a      	add	r2, r3
    P( D, E, A, B, C, R(37) );
   dd366:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
   dd36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dd36c:	4057      	eors	r7, r2
   dd36e:	9a03      	ldr	r2, [sp, #12]
   dd370:	4057      	eors	r7, r2
   dd372:	ea87 070b 	eor.w	r7, r7, fp
   dd376:	ea4f 72f7 	mov.w	r2, r7, ror #31
   dd37a:	9210      	str	r2, [sp, #64]	; 0x40
   dd37c:	9c10      	ldr	r4, [sp, #64]	; 0x40
   dd37e:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
   dd380:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dd382:	4066      	eors	r6, r4
   dd384:	9c04      	ldr	r4, [sp, #16]
   dd386:	4066      	eors	r6, r4
   dd388:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   dd38a:	4066      	eors	r6, r4
   dd38c:	ea4f 74f6 	mov.w	r4, r6, ror #31
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
   dd390:	ea4f 08b8 	mov.w	r8, r8, ror #2
   dd394:	4425      	add	r5, r4
   dd396:	ea80 0208 	eor.w	r2, r0, r8
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   dd39a:	9411      	str	r4, [sp, #68]	; 0x44
   dd39c:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   dd39e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dd3a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   dd3a2:	4065      	eors	r5, r4
   dd3a4:	462c      	mov	r4, r5
   dd3a6:	9d06      	ldr	r5, [sp, #24]
   dd3a8:	404a      	eors	r2, r1
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
   dd3aa:	ea4f 01b1 	mov.w	r1, r1, ror #2
   dd3ae:	ea88 0601 	eor.w	r6, r8, r1
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   dd3b2:	406c      	eors	r4, r5
   dd3b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   dd3b6:	405e      	eors	r6, r3
   dd3b8:	44ba      	add	sl, r7
   dd3ba:	4492      	add	sl, r2
   dd3bc:	4430      	add	r0, r6
   dd3be:	406c      	eors	r4, r5
   dd3c0:	4ed5      	ldr	r6, [pc, #852]	; (dd718 <mbedtls_internal_sha1_process+0xb1c>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
   dd3c2:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   dd3c6:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   dd3ca:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   dd3ce:	9409      	str	r4, [sp, #36]	; 0x24
   dd3d0:	ea42 0503 	orr.w	r5, r2, r3
   dd3d4:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   dd3d6:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   dd3da:	400d      	ands	r5, r1
   dd3dc:	44a0      	add	r8, r4
   dd3de:	ea02 0403 	and.w	r4, r2, r3
   dd3e2:	432c      	orrs	r4, r5
   dd3e4:	eb08 68f0 	add.w	r8, r8, r0, ror #27
   dd3e8:	ea4f 0ab2 	mov.w	sl, r2, ror #2
   dd3ec:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
   dd3ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dd3f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dd3f2:	4062      	eors	r2, r4
   dd3f4:	9c07      	ldr	r4, [sp, #28]
   dd3f6:	4062      	eors	r2, r4
   dd3f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
   dd3fa:	4062      	eors	r2, r4
   dd3fc:	ea4f 72f2 	mov.w	r2, r2, ror #31
   dd400:	920a      	str	r2, [sp, #40]	; 0x28
   dd402:	ea40 020a 	orr.w	r2, r0, sl
   dd406:	ea02 0403 	and.w	r4, r2, r3
   dd40a:	ea00 020a 	and.w	r2, r0, sl
   dd40e:	4322      	orrs	r2, r4
   dd410:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dd412:	4434      	add	r4, r6
   dd414:	4421      	add	r1, r4
   dd416:	ea4f 0cb0 	mov.w	ip, r0, ror #2
   dd41a:	4411      	add	r1, r2
    P( D, E, A, B, C, R(42) );
   dd41c:	980d      	ldr	r0, [sp, #52]	; 0x34
   dd41e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dd420:	4042      	eors	r2, r0
   dd422:	9808      	ldr	r0, [sp, #32]
   dd424:	4042      	eors	r2, r0
   dd426:	9811      	ldr	r0, [sp, #68]	; 0x44
   dd428:	4042      	eors	r2, r0
   dd42a:	ea4f 72f2 	mov.w	r2, r2, ror #31
   dd42e:	920b      	str	r2, [sp, #44]	; 0x2c
   dd430:	ea48 000c 	orr.w	r0, r8, ip
   dd434:	4432      	add	r2, r6

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
   dd436:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
   dd43a:	ea00 000a 	and.w	r0, r0, sl
   dd43e:	4413      	add	r3, r2
   dd440:	ea08 020c 	and.w	r2, r8, ip
   dd444:	4302      	orrs	r2, r0
   dd446:	eb03 63f1 	add.w	r3, r3, r1, ror #27
   dd44a:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
   dd44c:	9802      	ldr	r0, [sp, #8]
   dd44e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dd450:	4050      	eors	r0, r2
   dd452:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dd454:	ea80 000b 	eor.w	r0, r0, fp
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
   dd458:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
   dd45c:	4050      	eors	r0, r2
   dd45e:	ea4f 72f0 	mov.w	r2, r0, ror #31
   dd462:	ea41 0008 	orr.w	r0, r1, r8
   dd466:	920c      	str	r2, [sp, #48]	; 0x30
   dd468:	ea00 000c 	and.w	r0, r0, ip
   dd46c:	ea01 0208 	and.w	r2, r1, r8
   dd470:	4310      	orrs	r0, r2
   dd472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dd474:	4432      	add	r2, r6
   dd476:	4452      	add	r2, sl
   dd478:	4402      	add	r2, r0
   dd47a:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
   dd47e:	9803      	ldr	r0, [sp, #12]
   dd480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   dd482:	4050      	eors	r0, r2
   dd484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   dd486:	4050      	eors	r0, r2
   dd488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dd48a:	4050      	eors	r0, r2
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
   dd48c:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(44) );
   dd490:	ea4f 72f0 	mov.w	r2, r0, ror #31
   dd494:	1990      	adds	r0, r2, r6
   dd496:	ea43 0401 	orr.w	r4, r3, r1
   dd49a:	920d      	str	r2, [sp, #52]	; 0x34
   dd49c:	ea04 0408 	and.w	r4, r4, r8
   dd4a0:	ea03 0201 	and.w	r2, r3, r1
   dd4a4:	4460      	add	r0, ip
   dd4a6:	4322      	orrs	r2, r4
   dd4a8:	eb00 60fa 	add.w	r0, r0, sl, ror #27
   dd4ac:	ea4f 07b3 	mov.w	r7, r3, ror #2
   dd4b0:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
   dd4b2:	9b02      	ldr	r3, [sp, #8]
   dd4b4:	9a04      	ldr	r2, [sp, #16]
   dd4b6:	4053      	eors	r3, r2
   dd4b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dd4ba:	4053      	eors	r3, r2
   dd4bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dd4be:	4053      	eors	r3, r2
   dd4c0:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dd4c4:	9302      	str	r3, [sp, #8]
   dd4c6:	9a02      	ldr	r2, [sp, #8]
   dd4c8:	ea4a 0307 	orr.w	r3, sl, r7
   dd4cc:	ea03 0e01 	and.w	lr, r3, r1
   dd4d0:	ea0a 0307 	and.w	r3, sl, r7
   dd4d4:	ea4e 0303 	orr.w	r3, lr, r3
   dd4d8:	eb02 0e06 	add.w	lr, r2, r6
   dd4dc:	44f0      	add	r8, lr
   dd4de:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
   dd4e0:	9a06      	ldr	r2, [sp, #24]
   dd4e2:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
   dd4e4:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
   dd4e8:	ea83 0802 	eor.w	r8, r3, r2
   dd4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dd4ee:	ea88 0803 	eor.w	r8, r8, r3
   dd4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dd4f4:	ea88 0803 	eor.w	r8, r8, r3
   dd4f8:	ea4f 73f8 	mov.w	r3, r8, ror #31
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
   dd4fc:	ea4f 09ba 	mov.w	r9, sl, ror #2
   dd500:	199c      	adds	r4, r3, r6
   dd502:	4421      	add	r1, r4
    P( E, A, B, C, D, R(46) );
   dd504:	ea40 0409 	orr.w	r4, r0, r9
   dd508:	9303      	str	r3, [sp, #12]
   dd50a:	403c      	ands	r4, r7
   dd50c:	ea00 0309 	and.w	r3, r0, r9
   dd510:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
   dd512:	9b04      	ldr	r3, [sp, #16]
   dd514:	9a07      	ldr	r2, [sp, #28]
   dd516:	ea83 0c02 	eor.w	ip, r3, r2
   dd51a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( C, D, E, A, B, R(48) );
   dd51c:	9a08      	ldr	r2, [sp, #32]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   dd51e:	ea8c 0c03 	eor.w	ip, ip, r3
   dd522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
   dd524:	ea4f 00b0 	mov.w	r0, r0, ror #2
   dd528:	eb01 61fe 	add.w	r1, r1, lr, ror #27
    P( D, E, A, B, C, R(47) );
   dd52c:	ea8c 0c03 	eor.w	ip, ip, r3
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
   dd530:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
   dd532:	ea4f 73fc 	mov.w	r3, ip, ror #31
   dd536:	ea4e 0100 	orr.w	r1, lr, r0
   dd53a:	9304      	str	r3, [sp, #16]
   dd53c:	ea01 0109 	and.w	r1, r1, r9
   dd540:	ea0e 0300 	and.w	r3, lr, r0
   dd544:	4319      	orrs	r1, r3
   dd546:	9b04      	ldr	r3, [sp, #16]
   dd548:	4433      	add	r3, r6
   dd54a:	443b      	add	r3, r7
   dd54c:	18cf      	adds	r7, r1, r3
    P( C, D, E, A, B, R(48) );
   dd54e:	9b06      	ldr	r3, [sp, #24]
   dd550:	ea83 0802 	eor.w	r8, r3, r2
   dd554:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd556:	ea88 0803 	eor.w	r8, r8, r3
   dd55a:	9b02      	ldr	r3, [sp, #8]
   dd55c:	ea88 0803 	eor.w	r8, r8, r3
   dd560:	ea4f 73f8 	mov.w	r3, r8, ror #31
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   dd564:	ea4f 01be 	mov.w	r1, lr, ror #2
   dd568:	199a      	adds	r2, r3, r6
   dd56a:	4491      	add	r9, r2
    P( C, D, E, A, B, R(48) );
   dd56c:	ea44 0201 	orr.w	r2, r4, r1
   dd570:	9306      	str	r3, [sp, #24]
   dd572:	4002      	ands	r2, r0
   dd574:	ea04 0301 	and.w	r3, r4, r1
   dd578:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
   dd57a:	9b07      	ldr	r3, [sp, #28]
   dd57c:	ea83 0c0b 	eor.w	ip, r3, fp
   dd580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd582:	ea8c 0c03 	eor.w	ip, ip, r3
   dd586:	9b03      	ldr	r3, [sp, #12]
   dd588:	ea8c 0c03 	eor.w	ip, ip, r3
   dd58c:	ea4f 73fc 	mov.w	r3, ip, ror #31
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   dd590:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
   dd594:	9307      	str	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
   dd596:	ea4f 04b4 	mov.w	r4, r4, ror #2
   dd59a:	ea47 0304 	orr.w	r3, r7, r4
   dd59e:	9d07      	ldr	r5, [sp, #28]
   dd5a0:	ea03 0c01 	and.w	ip, r3, r1
   dd5a4:	ea07 0304 	and.w	r3, r7, r4
   dd5a8:	ea4c 0303 	orr.w	r3, ip, r3
   dd5ac:	eb05 0c06 	add.w	ip, r5, r6
   dd5b0:	eb09 69f7 	add.w	r9, r9, r7, ror #27
   dd5b4:	4460      	add	r0, ip
   dd5b6:	444a      	add	r2, r9
   dd5b8:	4418      	add	r0, r3
    P( B, C, D, E, A, R(49) );
   dd5ba:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
   dd5be:	9b08      	ldr	r3, [sp, #32]
   dd5c0:	980e      	ldr	r0, [sp, #56]	; 0x38
   dd5c2:	ea83 0500 	eor.w	r5, r3, r0
   dd5c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dd5c8:	405d      	eors	r5, r3
   dd5ca:	9b04      	ldr	r3, [sp, #16]
   dd5cc:	405d      	eors	r5, r3
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
   dd5ce:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( A, B, C, D, E, R(50) );
   dd5d2:	ea4f 77f5 	mov.w	r7, r5, ror #31
   dd5d6:	19bb      	adds	r3, r7, r6
   dd5d8:	ea42 000a 	orr.w	r0, r2, sl
   dd5dc:	4419      	add	r1, r3
   dd5de:	eb01 63fc 	add.w	r3, r1, ip, ror #27
   dd5e2:	4020      	ands	r0, r4
   dd5e4:	ea02 010a 	and.w	r1, r2, sl
   dd5e8:	4301      	orrs	r1, r0
   dd5ea:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
   dd5ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd5ee:	ea8b 0903 	eor.w	r9, fp, r3
   dd5f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dd5f4:	ea89 0903 	eor.w	r9, r9, r3
   dd5f8:	9b06      	ldr	r3, [sp, #24]
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
   dd5fa:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
   dd5fe:	ea89 0903 	eor.w	r9, r9, r3
   dd602:	ea4c 0302 	orr.w	r3, ip, r2
   dd606:	ea4f 7ef9 	mov.w	lr, r9, ror #31
   dd60a:	ea03 050a 	and.w	r5, r3, sl
   dd60e:	ea0c 0302 	and.w	r3, ip, r2
   dd612:	432b      	orrs	r3, r5
   dd614:	eb0e 0506 	add.w	r5, lr, r6
   dd618:	4425      	add	r5, r4
   dd61a:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
   dd61c:	9c10      	ldr	r4, [sp, #64]	; 0x40
   dd61e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dd620:	4063      	eors	r3, r4
   dd622:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dd624:	4063      	eors	r3, r4
   dd626:	9c07      	ldr	r4, [sp, #28]
   dd628:	4063      	eors	r3, r4
   dd62a:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dd62e:	9308      	str	r3, [sp, #32]
   dd630:	4433      	add	r3, r6
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
   dd632:	ea4f 00bc 	mov.w	r0, ip, ror #2
   dd636:	eb05 65f1 	add.w	r5, r5, r1, ror #27
   dd63a:	449a      	add	sl, r3
   dd63c:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
    P( D, E, A, B, C, R(52) );
   dd640:	ea41 0a00 	orr.w	sl, r1, r0
   dd644:	ea01 0400 	and.w	r4, r1, r0
   dd648:	ea0a 0a02 	and.w	sl, sl, r2
   dd64c:	ea4a 0a04 	orr.w	sl, sl, r4
   dd650:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
   dd652:	9c11      	ldr	r4, [sp, #68]	; 0x44
   dd654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd656:	4063      	eors	r3, r4
   dd658:	9c02      	ldr	r4, [sp, #8]
   dd65a:	4063      	eors	r3, r4
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
   dd65c:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
   dd660:	407b      	eors	r3, r7
   dd662:	ea45 0401 	orr.w	r4, r5, r1
   dd666:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dd66a:	930e      	str	r3, [sp, #56]	; 0x38
   dd66c:	4004      	ands	r4, r0
   dd66e:	ea05 0301 	and.w	r3, r5, r1
   dd672:	431c      	orrs	r4, r3
   dd674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dd676:	4433      	add	r3, r6
   dd678:	4413      	add	r3, r2
   dd67a:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
   dd67c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   dd67e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dd680:	ea82 0804 	eor.w	r8, r2, r4
   dd684:	9a03      	ldr	r2, [sp, #12]
   dd686:	ea88 0802 	eor.w	r8, r8, r2
   dd68a:	ea88 080e 	eor.w	r8, r8, lr
   dd68e:	ea4f 72f8 	mov.w	r2, r8, ror #31
   dd692:	eb02 0806 	add.w	r8, r2, r6
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   dd696:	eb03 63fa 	add.w	r3, r3, sl, ror #27
   dd69a:	ea4f 05b5 	mov.w	r5, r5, ror #2
   dd69e:	4480      	add	r8, r0
   dd6a0:	eb08 60f3 	add.w	r0, r8, r3, ror #27
    P( B, C, D, E, A, R(54) );
   dd6a4:	ea4a 0805 	orr.w	r8, sl, r5
   dd6a8:	920f      	str	r2, [sp, #60]	; 0x3c
   dd6aa:	ea08 0801 	and.w	r8, r8, r1
   dd6ae:	ea0a 0205 	and.w	r2, sl, r5
   dd6b2:	ea48 0802 	orr.w	r8, r8, r2
   dd6b6:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
   dd6b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dd6ba:	980a      	ldr	r0, [sp, #40]	; 0x28
   dd6bc:	ea82 0c00 	eor.w	ip, r2, r0
   dd6c0:	9a04      	ldr	r2, [sp, #16]
   dd6c2:	ea8c 0c02 	eor.w	ip, ip, r2
   dd6c6:	9a08      	ldr	r2, [sp, #32]
   dd6c8:	ea8c 0c02 	eor.w	ip, ip, r2
   dd6cc:	ea4f 72fc 	mov.w	r2, ip, ror #31
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
   dd6d0:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
   dd6d4:	9210      	str	r2, [sp, #64]	; 0x40
   dd6d6:	9810      	ldr	r0, [sp, #64]	; 0x40
   dd6d8:	ea43 020a 	orr.w	r2, r3, sl
   dd6dc:	ea02 0c05 	and.w	ip, r2, r5
   dd6e0:	ea03 020a 	and.w	r2, r3, sl
   dd6e4:	ea4c 0202 	orr.w	r2, ip, r2
   dd6e8:	eb00 0c06 	add.w	ip, r0, r6
   dd6ec:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
   dd6ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dd6f0:	4494      	add	ip, r2
   dd6f2:	9a06      	ldr	r2, [sp, #24]
   dd6f4:	404c      	eors	r4, r1
   dd6f6:	4054      	eors	r4, r2
   dd6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   dd6fa:	4054      	eors	r4, r2
   dd6fc:	ea4f 72f4 	mov.w	r2, r4, ror #31
   dd700:	9209      	str	r2, [sp, #36]	; 0x24
   dd702:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
   dd704:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
   dd708:	ea4f 03b3 	mov.w	r3, r3, ror #2
   dd70c:	4415      	add	r5, r2
   dd70e:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
   dd712:	ea48 0503 	orr.w	r5, r8, r3
   dd716:	e001      	b.n	dd71c <mbedtls_internal_sha1_process+0xb20>
   dd718:	8f1bbcdc 	.word	0x8f1bbcdc
   dd71c:	ea08 0103 	and.w	r1, r8, r3
   dd720:	ea05 050a 	and.w	r5, r5, sl
   dd724:	430d      	orrs	r5, r1
   dd726:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
   dd728:	990c      	ldr	r1, [sp, #48]	; 0x30
   dd72a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dd72c:	ea82 0b01 	eor.w	fp, r2, r1
   dd730:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
   dd732:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   dd734:	ea8b 0b02 	eor.w	fp, fp, r2
   dd738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
   dd73a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
   dd73e:	ea8b 0b02 	eor.w	fp, fp, r2
   dd742:	ea4c 0208 	orr.w	r2, ip, r8
   dd746:	ea4f 7bfb 	mov.w	fp, fp, ror #31
   dd74a:	ea02 0903 	and.w	r9, r2, r3
   dd74e:	ea0c 0208 	and.w	r2, ip, r8
   dd752:	ea49 0202 	orr.w	r2, r9, r2
   dd756:	eb0b 0906 	add.w	r9, fp, r6
   dd75a:	44d1      	add	r9, sl
   dd75c:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
   dd75e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dd760:	ea82 0a01 	eor.w	sl, r2, r1
   dd764:	ea8a 0a07 	eor.w	sl, sl, r7
   dd768:	ea8a 0a00 	eor.w	sl, sl, r0
   dd76c:	ea4f 72fa 	mov.w	r2, sl, ror #31
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   dd770:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
   dd774:	920a      	str	r2, [sp, #40]	; 0x28
   dd776:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   dd778:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
   dd77c:	ea45 010c 	orr.w	r1, r5, ip
   dd780:	441a      	add	r2, r3
   dd782:	eb02 63f9 	add.w	r3, r2, r9, ror #27
   dd786:	ea01 0108 	and.w	r1, r1, r8
   dd78a:	ea05 020c 	and.w	r2, r5, ip
   dd78e:	430a      	orrs	r2, r1
   dd790:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
   dd792:	9902      	ldr	r1, [sp, #8]
   dd794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dd796:	ea83 0001 	eor.w	r0, r3, r1
   dd79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd79c:	ea80 000e 	eor.w	r0, r0, lr
   dd7a0:	4058      	eors	r0, r3
   dd7a2:	ea4f 73f0 	mov.w	r3, r0, ror #31
   dd7a6:	930b      	str	r3, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
   dd7a8:	ea4f 05b5 	mov.w	r5, r5, ror #2
   dd7ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dd7ae:	ea49 0005 	orr.w	r0, r9, r5
   dd7b2:	ea00 000c 	and.w	r0, r0, ip
   dd7b6:	ea09 0305 	and.w	r3, r9, r5
   dd7ba:	440e      	add	r6, r1
   dd7bc:	4446      	add	r6, r8
   dd7be:	4303      	orrs	r3, r0
   dd7c0:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   dd7c2:	9903      	ldr	r1, [sp, #12]
   dd7c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dd7c6:	4ed8      	ldr	r6, [pc, #864]	; (ddb28 <mbedtls_internal_sha1_process+0xf2c>)
   dd7c8:	4059      	eors	r1, r3
   dd7ca:	9b08      	ldr	r3, [sp, #32]
   dd7cc:	4059      	eors	r1, r3
   dd7ce:	ea81 010b 	eor.w	r1, r1, fp
   dd7d2:	ea4f 73f1 	mov.w	r3, r1, ror #31
   dd7d6:	930c      	str	r3, [sp, #48]	; 0x30
   dd7d8:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   dd7da:	ea4f 09b9 	mov.w	r9, r9, ror #2
   dd7de:	ea85 0309 	eor.w	r3, r5, r9
   dd7e2:	4431      	add	r1, r6
   dd7e4:	4053      	eors	r3, r2
   dd7e6:	4461      	add	r1, ip
   dd7e8:	4419      	add	r1, r3

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dd7ea:	9b02      	ldr	r3, [sp, #8]
   dd7ec:	9c04      	ldr	r4, [sp, #16]
   dd7ee:	4063      	eors	r3, r4
   dd7f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   dd7f2:	4063      	eors	r3, r4
   dd7f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dd7f6:	4063      	eors	r3, r4
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   dd7f8:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dd7fc:	ea4f 73f3 	mov.w	r3, r3, ror #31
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   dd800:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
   dd804:	9302      	str	r3, [sp, #8]
   dd806:	ea89 0402 	eor.w	r4, r9, r2
   dd80a:	4433      	add	r3, r6
   dd80c:	4044      	eors	r4, r0
   dd80e:	442b      	add	r3, r5
   dd810:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
   dd812:	9d06      	ldr	r5, [sp, #24]
   dd814:	9c03      	ldr	r4, [sp, #12]
   dd816:	ea84 0805 	eor.w	r8, r4, r5
   dd81a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   dd81c:	ea88 0804 	eor.w	r8, r8, r4
   dd820:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dd822:	ea88 0804 	eor.w	r8, r8, r4
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   dd826:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dd82a:	ea4f 74f8 	mov.w	r4, r8, ror #31

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dd82e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
   dd832:	9403      	str	r4, [sp, #12]
   dd834:	ea82 0500 	eor.w	r5, r2, r0
   dd838:	4434      	add	r4, r6
   dd83a:	404d      	eors	r5, r1
   dd83c:	444c      	add	r4, r9
   dd83e:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
   dd840:	9d04      	ldr	r5, [sp, #16]
   dd842:	46ac      	mov	ip, r5
   dd844:	9d07      	ldr	r5, [sp, #28]
   dd846:	ea8c 0c05 	eor.w	ip, ip, r5
   dd84a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   dd84c:	ea8c 0c05 	eor.w	ip, ip, r5
   dd850:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   dd852:	ea8c 0c05 	eor.w	ip, ip, r5

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   dd856:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   dd85a:	ea4f 75fc 	mov.w	r5, ip, ror #31
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dd85e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
   dd862:	9504      	str	r5, [sp, #16]
   dd864:	ea80 0501 	eor.w	r5, r0, r1
   dd868:	ea85 0c03 	eor.w	ip, r5, r3
   dd86c:	9d04      	ldr	r5, [sp, #16]
   dd86e:	eb05 0a06 	add.w	sl, r5, r6
   dd872:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
   dd874:	9a06      	ldr	r2, [sp, #24]
   dd876:	ea82 0807 	eor.w	r8, r2, r7
   dd87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dd87c:	ea88 0802 	eor.w	r8, r8, r2
   dd880:	9a02      	ldr	r2, [sp, #8]
   dd882:	ea88 0802 	eor.w	r8, r8, r2
   dd886:	ea4f 72f8 	mov.w	r2, r8, ror #31
   dd88a:	9206      	str	r2, [sp, #24]
   dd88c:	9d06      	ldr	r5, [sp, #24]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   dd88e:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
   dd892:	ea4f 03b3 	mov.w	r3, r3, ror #2
   dd896:	ea81 0203 	eor.w	r2, r1, r3
   dd89a:	eb05 0806 	add.w	r8, r5, r6
   dd89e:	4062      	eors	r2, r4
   dd8a0:	4480      	add	r8, r0
   dd8a2:	4490      	add	r8, r2
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dd8a4:	9a07      	ldr	r2, [sp, #28]
   dd8a6:	44e2      	add	sl, ip
   dd8a8:	ea82 0c0e 	eor.w	ip, r2, lr
   dd8ac:	9a03      	ldr	r2, [sp, #12]
   dd8ae:	ea8c 0c0b 	eor.w	ip, ip, fp
   dd8b2:	ea8c 0c02 	eor.w	ip, ip, r2
   dd8b6:	ea4f 72fc 	mov.w	r2, ip, ror #31
   dd8ba:	9207      	str	r2, [sp, #28]
   dd8bc:	9807      	ldr	r0, [sp, #28]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   dd8be:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
   dd8c2:	ea4f 04b4 	mov.w	r4, r4, ror #2
   dd8c6:	ea83 0204 	eor.w	r2, r3, r4
   dd8ca:	eb00 0c06 	add.w	ip, r0, r6
   dd8ce:	ea82 020a 	eor.w	r2, r2, sl
   dd8d2:	448c      	add	ip, r1
   dd8d4:	4494      	add	ip, r2
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   dd8d6:	9a08      	ldr	r2, [sp, #32]
   dd8d8:	ea87 0502 	eor.w	r5, r7, r2
   dd8dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dd8de:	4055      	eors	r5, r2
   dd8e0:	9a04      	ldr	r2, [sp, #16]
   dd8e2:	4055      	eors	r5, r2
   dd8e4:	ea4f 75f5 	mov.w	r5, r5, ror #31
   dd8e8:	19af      	adds	r7, r5, r6
   dd8ea:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
   dd8ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dd8ee:	ea8e 0903 	eor.w	r9, lr, r3
   dd8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dd8f4:	ea89 0903 	eor.w	r9, r9, r3
   dd8f8:	9b06      	ldr	r3, [sp, #24]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   dd8fa:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
   dd8fe:	ea4f 0aba 	mov.w	sl, sl, ror #2
   dd902:	ea84 020a 	eor.w	r2, r4, sl
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dd906:	ea89 0903 	eor.w	r9, r9, r3
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   dd90a:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
   dd90e:	ea82 0208 	eor.w	r2, r2, r8
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dd912:	ea4f 79f9 	mov.w	r9, r9, ror #31
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   dd916:	ea4f 08b8 	mov.w	r8, r8, ror #2
   dd91a:	ea8a 0308 	eor.w	r3, sl, r8
   dd91e:	eb09 0e06 	add.w	lr, r9, r6
   dd922:	ea83 030c 	eor.w	r3, r3, ip
   dd926:	44a6      	add	lr, r4
   dd928:	4417      	add	r7, r2
   dd92a:	449e      	add	lr, r3
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
   dd92c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dd92e:	9b08      	ldr	r3, [sp, #32]
   dd930:	4053      	eors	r3, r2
   dd932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
   dd934:	9910      	ldr	r1, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
   dd936:	4053      	eors	r3, r2
   dd938:	4043      	eors	r3, r0
   dd93a:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dd93e:	9308      	str	r3, [sp, #32]
   dd940:	9a08      	ldr	r2, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   dd942:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
   dd946:	ea4f 0cbc 	mov.w	ip, ip, ror #2
   dd94a:	ea88 030c 	eor.w	r3, r8, ip
   dd94e:	4432      	add	r2, r6
   dd950:	407b      	eors	r3, r7
   dd952:	4452      	add	r2, sl
   dd954:	441a      	add	r2, r3
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   dd956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dd958:	404b      	eors	r3, r1
   dd95a:	9902      	ldr	r1, [sp, #8]
   dd95c:	404b      	eors	r3, r1
   dd95e:	406b      	eors	r3, r5
   dd960:	ea4f 73f3 	mov.w	r3, r3, ror #31
   dd964:	930d      	str	r3, [sp, #52]	; 0x34
   dd966:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   dd968:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
   dd96c:	ea4f 07b7 	mov.w	r7, r7, ror #2
   dd970:	ea8c 0307 	eor.w	r3, ip, r7
   dd974:	1988      	adds	r0, r1, r6
   dd976:	ea83 030e 	eor.w	r3, r3, lr
   dd97a:	4440      	add	r0, r8
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   dd97c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dd97e:	4418      	add	r0, r3
   dd980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd982:	ea83 0801 	eor.w	r8, r3, r1
   dd986:	9b03      	ldr	r3, [sp, #12]
   dd988:	ea88 0803 	eor.w	r8, r8, r3
   dd98c:	ea88 0809 	eor.w	r8, r8, r9
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
   dd990:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   dd994:	ea4f 78f8 	mov.w	r8, r8, ror #31
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   dd998:	ea4f 0ebe 	mov.w	lr, lr, ror #2
   dd99c:	ea87 030e 	eor.w	r3, r7, lr
   dd9a0:	eb08 0106 	add.w	r1, r8, r6
   dd9a4:	4053      	eors	r3, r2
   dd9a6:	4461      	add	r1, ip
   dd9a8:	4419      	add	r1, r3
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   dd9aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dd9ac:	ea83 0c0b 	eor.w	ip, r3, fp
   dd9b0:	9b04      	ldr	r3, [sp, #16]
   dd9b2:	ea8c 0c03 	eor.w	ip, ip, r3
   dd9b6:	9b08      	ldr	r3, [sp, #32]
   dd9b8:	ea8c 0c03 	eor.w	ip, ip, r3
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   dd9bc:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   dd9c0:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   dd9c4:	ea4f 02b2 	mov.w	r2, r2, ror #2
   dd9c8:	ea8e 0402 	eor.w	r4, lr, r2
   dd9cc:	eb0c 0306 	add.w	r3, ip, r6
   dd9d0:	4044      	eors	r4, r0
   dd9d2:	443b      	add	r3, r7
   dd9d4:	4423      	add	r3, r4
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   dd9d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   dd9d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dd9da:	4067      	eors	r7, r4
   dd9dc:	9c06      	ldr	r4, [sp, #24]
   dd9de:	4067      	eors	r7, r4
   dd9e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dd9e2:	4067      	eors	r7, r4
   dd9e4:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
   dd9e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   dd9ea:	9409      	str	r4, [sp, #36]	; 0x24
   dd9ec:	4434      	add	r4, r6
   dd9ee:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
   dd9f0:	ea8b 0e07 	eor.w	lr, fp, r7
   dd9f4:	9f07      	ldr	r7, [sp, #28]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   dd9f6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   dd9fa:	ea8e 0e07 	eor.w	lr, lr, r7
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   dd9fe:	ea4f 00b0 	mov.w	r0, r0, ror #2
   dda02:	ea82 0a00 	eor.w	sl, r2, r0
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   dda06:	ea8e 0e08 	eor.w	lr, lr, r8
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   dda0a:	eb03 63f1 	add.w	r3, r3, r1, ror #27
   dda0e:	ea8a 0a01 	eor.w	sl, sl, r1
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   dda12:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   dda16:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   dda1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   dda1c:	eb0e 0b06 	add.w	fp, lr, r6
   dda20:	4454      	add	r4, sl
   dda22:	ea80 0a01 	eor.w	sl, r0, r1
   dda26:	ea8a 0a03 	eor.w	sl, sl, r3
   dda2a:	445a      	add	r2, fp
   dda2c:	4452      	add	r2, sl
   dda2e:	46ba      	mov	sl, r7
   dda30:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   dda32:	ea8a 0a07 	eor.w	sl, sl, r7
   dda36:	ea8a 0505 	eor.w	r5, sl, r5
   dda3a:	ea85 050c 	eor.w	r5, r5, ip
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   dda3e:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   dda42:	ea4f 75f5 	mov.w	r5, r5, ror #31
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   dda46:	ea4f 03b3 	mov.w	r3, r3, ror #2
   dda4a:	eb05 0b06 	add.w	fp, r5, r6
   dda4e:	ea81 0a03 	eor.w	sl, r1, r3
   dda52:	4458      	add	r0, fp
   dda54:	ea8a 0a04 	eor.w	sl, sl, r4
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   dda58:	9f02      	ldr	r7, [sp, #8]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   dda5a:	950a      	str	r5, [sp, #40]	; 0x28
   dda5c:	4482      	add	sl, r0
    P( A, B, C, D, E, R(75) );
   dda5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   dda60:	4078      	eors	r0, r7
   dda62:	ea80 0909 	eor.w	r9, r0, r9
   dda66:	9809      	ldr	r0, [sp, #36]	; 0x24
   dda68:	ea89 0700 	eor.w	r7, r9, r0
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   dda6c:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   dda70:	ea4f 77f7 	mov.w	r7, r7, ror #31
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   dda74:	ea4f 04b4 	mov.w	r4, r4, ror #2
   dda78:	eb07 0906 	add.w	r9, r7, r6
   dda7c:	ea83 0004 	eor.w	r0, r3, r4
   dda80:	4449      	add	r1, r9
   dda82:	4050      	eors	r0, r2
   dda84:	4408      	add	r0, r1
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   dda86:	990c      	ldr	r1, [sp, #48]	; 0x30
   dda88:	460d      	mov	r5, r1
   dda8a:	9903      	ldr	r1, [sp, #12]
   dda8c:	4069      	eors	r1, r5
   dda8e:	9d08      	ldr	r5, [sp, #32]
   dda90:	4069      	eors	r1, r5
   dda92:	ea81 0e0e 	eor.w	lr, r1, lr
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   dda96:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   dda9a:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   dda9e:	ea4f 02b2 	mov.w	r2, r2, ror #2
   ddaa2:	eb0e 0906 	add.w	r9, lr, r6
   ddaa6:	ea84 0102 	eor.w	r1, r4, r2
   ddaaa:	444b      	add	r3, r9
   ddaac:	ea81 010a 	eor.w	r1, r1, sl
   ddab0:	9d04      	ldr	r5, [sp, #16]
   ddab2:	4419      	add	r1, r3
   ddab4:	9b02      	ldr	r3, [sp, #8]
   ddab6:	406b      	eors	r3, r5
   ddab8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   ddaba:	406b      	eors	r3, r5
   ddabc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   ddabe:	406b      	eors	r3, r5
   ddac0:	eb06 73f3 	add.w	r3, r6, r3, ror #31
   ddac4:	9d06      	ldr	r5, [sp, #24]
   ddac6:	441c      	add	r4, r3
   ddac8:	9b03      	ldr	r3, [sp, #12]
   ddaca:	eb00 60fa 	add.w	r0, r0, sl, ror #27
   ddace:	406b      	eors	r3, r5
    P( E, A, B, C, D, R(76) );
   ddad0:	ea4f 0aba 	mov.w	sl, sl, ror #2
   ddad4:	ea82 090a 	eor.w	r9, r2, sl
   ddad8:	ea83 0808 	eor.w	r8, r3, r8
   ddadc:	eb01 61f0 	add.w	r1, r1, r0, ror #27
   ddae0:	ea89 0900 	eor.w	r9, r9, r0
   ddae4:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
   ddae8:	ea4f 00b0 	mov.w	r0, r0, ror #2
   ddaec:	eb06 78f8 	add.w	r8, r6, r8, ror #31
   ddaf0:	ea8a 0500 	eor.w	r5, sl, r0
   ddaf4:	404d      	eors	r5, r1
   ddaf6:	4442      	add	r2, r8
   ddaf8:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   ddafa:	9b04      	ldr	r3, [sp, #16]
   ddafc:	9d07      	ldr	r5, [sp, #28]
   ddafe:	406b      	eors	r3, r5
   ddb00:	ea83 0c0c 	eor.w	ip, r3, ip
   ddb04:	9b12      	ldr	r3, [sp, #72]	; 0x48
   ddb06:	444c      	add	r4, r9
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   ddb08:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   ddb0c:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   ddb0e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   ddb12:	ea8c 0e0e 	eor.w	lr, ip, lr
   ddb16:	ea80 0501 	eor.w	r5, r0, r1
   ddb1a:	eb06 7efe 	add.w	lr, r6, lr, ror #31
   ddb1e:	4065      	eors	r5, r4
   ddb20:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   ddb22:	eb02 62f4 	add.w	r2, r2, r4, ror #27
   ddb26:	e001      	b.n	ddb2c <mbedtls_internal_sha1_process+0xf30>
   ddb28:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   ddb2c:	eb0a 0305 	add.w	r3, sl, r5
   ddb30:	9d01      	ldr	r5, [sp, #4]
   ddb32:	eb03 63f2 	add.w	r3, r3, r2, ror #27
   ddb36:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
   ddb38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ddb3a:	441a      	add	r2, r3
    ctx->state[2] += C;
   ddb3c:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
   ddb3e:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
   ddb40:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
   ddb44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
   ddb46:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
   ddb48:	4419      	add	r1, r3
    ctx->state[4] += E;
   ddb4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
   ddb4c:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
   ddb4e:	4418      	add	r0, r3
   ddb50:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
   ddb52:	2000      	movs	r0, #0
   ddb54:	b017      	add	sp, #92	; 0x5c
   ddb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddb5a:	bf00      	nop

000ddb5c <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   ddb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ddb60:	4604      	mov	r4, r0
   ddb62:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   ddb64:	4615      	mov	r5, r2
   ddb66:	b382      	cbz	r2, ddbca <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
   ddb68:	6803      	ldr	r3, [r0, #0]
   ddb6a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   ddb6e:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   ddb70:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   ddb72:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
   ddb74:	bf82      	ittt	hi
   ddb76:	6863      	ldrhi	r3, [r4, #4]
   ddb78:	3301      	addhi	r3, #1
   ddb7a:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
   ddb7c:	b180      	cbz	r0, ddba0 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
   ddb7e:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   ddb82:	42ba      	cmp	r2, r7
   ddb84:	d31b      	bcc.n	ddbbe <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   ddb86:	f104 081c 	add.w	r8, r4, #28
   ddb8a:	463a      	mov	r2, r7
   ddb8c:	4440      	add	r0, r8
   ddb8e:	f008 ffda 	bl	e6b46 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   ddb92:	4641      	mov	r1, r8
   ddb94:	4620      	mov	r0, r4
   ddb96:	f7ff f831 	bl	dcbfc <mbedtls_internal_sha1_process>
   ddb9a:	b9b8      	cbnz	r0, ddbcc <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
   ddb9c:	443e      	add	r6, r7
        ilen  -= fill;
   ddb9e:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   ddba0:	462f      	mov	r7, r5
   ddba2:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   ddba4:	2f3f      	cmp	r7, #63	; 0x3f
   ddba6:	4431      	add	r1, r6
   ddba8:	d905      	bls.n	ddbb6 <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
   ddbaa:	4620      	mov	r0, r4
   ddbac:	f7ff f826 	bl	dcbfc <mbedtls_internal_sha1_process>
   ddbb0:	b960      	cbnz	r0, ddbcc <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
   ddbb2:	3f40      	subs	r7, #64	; 0x40
   ddbb4:	e7f5      	b.n	ddba2 <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
   ddbb6:	b147      	cbz	r7, ddbca <mbedtls_sha1_update_ret+0x6e>
   ddbb8:	463d      	mov	r5, r7
   ddbba:	460e      	mov	r6, r1
   ddbbc:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   ddbbe:	341c      	adds	r4, #28
   ddbc0:	462a      	mov	r2, r5
   ddbc2:	4631      	mov	r1, r6
   ddbc4:	4420      	add	r0, r4
   ddbc6:	f008 ffbe 	bl	e6b46 <memcpy>

    return( 0 );
   ddbca:	2000      	movs	r0, #0
}
   ddbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ddbd0 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   ddbd0:	b570      	push	{r4, r5, r6, lr}
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   ddbd2:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   ddbd4:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   ddbd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   ddbda:	1c58      	adds	r0, r3, #1
   ddbdc:	4423      	add	r3, r4
   ddbde:	2280      	movs	r2, #128	; 0x80

    if( used <= 56 )
   ddbe0:	2838      	cmp	r0, #56	; 0x38
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   ddbe2:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
   ddbe4:	771a      	strb	r2, [r3, #28]
   ddbe6:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
   ddbea:	d804      	bhi.n	ddbf6 <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   ddbec:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   ddbf0:	2100      	movs	r1, #0
   ddbf2:	4430      	add	r0, r6
   ddbf4:	e00e      	b.n	ddc14 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
   ddbf6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   ddbfa:	2100      	movs	r1, #0
   ddbfc:	4430      	add	r0, r6
   ddbfe:	f008 ffc8 	bl	e6b92 <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   ddc02:	4631      	mov	r1, r6
   ddc04:	4620      	mov	r0, r4
   ddc06:	f7fe fff9 	bl	dcbfc <mbedtls_internal_sha1_process>
   ddc0a:	2800      	cmp	r0, #0
   ddc0c:	d153      	bne.n	ddcb6 <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
   ddc0e:	4601      	mov	r1, r0
   ddc10:	2238      	movs	r2, #56	; 0x38
   ddc12:	4630      	mov	r0, r6
   ddc14:	f008 ffbd 	bl	e6b92 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   ddc18:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
   ddc1a:	6861      	ldr	r1, [r4, #4]
   ddc1c:	0f5a      	lsrs	r2, r3, #29
   ddc1e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   ddc22:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   ddc24:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   ddc26:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
   ddc2a:	0c11      	lsrs	r1, r2, #16
   ddc2c:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
   ddc30:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
   ddc34:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   ddc36:	0e1a      	lsrs	r2, r3, #24
   ddc38:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
   ddc3c:	0c1a      	lsrs	r2, r3, #16
   ddc3e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
   ddc42:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   ddc44:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   ddc48:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
   ddc4c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   ddc50:	4631      	mov	r1, r6
   ddc52:	4620      	mov	r0, r4
   ddc54:	f7fe ffd2 	bl	dcbfc <mbedtls_internal_sha1_process>
   ddc58:	2800      	cmp	r0, #0
   ddc5a:	d12c      	bne.n	ddcb6 <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   ddc5c:	7ae3      	ldrb	r3, [r4, #11]
   ddc5e:	702b      	strb	r3, [r5, #0]
   ddc60:	8963      	ldrh	r3, [r4, #10]
   ddc62:	706b      	strb	r3, [r5, #1]
   ddc64:	68a3      	ldr	r3, [r4, #8]
   ddc66:	0a1b      	lsrs	r3, r3, #8
   ddc68:	70ab      	strb	r3, [r5, #2]
   ddc6a:	68a3      	ldr	r3, [r4, #8]
   ddc6c:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   ddc6e:	7be3      	ldrb	r3, [r4, #15]
   ddc70:	712b      	strb	r3, [r5, #4]
   ddc72:	89e3      	ldrh	r3, [r4, #14]
   ddc74:	716b      	strb	r3, [r5, #5]
   ddc76:	68e3      	ldr	r3, [r4, #12]
   ddc78:	0a1b      	lsrs	r3, r3, #8
   ddc7a:	71ab      	strb	r3, [r5, #6]
   ddc7c:	68e3      	ldr	r3, [r4, #12]
   ddc7e:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   ddc80:	7ce3      	ldrb	r3, [r4, #19]
   ddc82:	722b      	strb	r3, [r5, #8]
   ddc84:	8a63      	ldrh	r3, [r4, #18]
   ddc86:	726b      	strb	r3, [r5, #9]
   ddc88:	6923      	ldr	r3, [r4, #16]
   ddc8a:	0a1b      	lsrs	r3, r3, #8
   ddc8c:	72ab      	strb	r3, [r5, #10]
   ddc8e:	6923      	ldr	r3, [r4, #16]
   ddc90:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   ddc92:	7de3      	ldrb	r3, [r4, #23]
   ddc94:	732b      	strb	r3, [r5, #12]
   ddc96:	8ae3      	ldrh	r3, [r4, #22]
   ddc98:	736b      	strb	r3, [r5, #13]
   ddc9a:	6963      	ldr	r3, [r4, #20]
   ddc9c:	0a1b      	lsrs	r3, r3, #8
   ddc9e:	73ab      	strb	r3, [r5, #14]
   ddca0:	6963      	ldr	r3, [r4, #20]
   ddca2:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   ddca4:	7ee3      	ldrb	r3, [r4, #27]
   ddca6:	742b      	strb	r3, [r5, #16]
   ddca8:	8b63      	ldrh	r3, [r4, #26]
   ddcaa:	746b      	strb	r3, [r5, #17]
   ddcac:	69a3      	ldr	r3, [r4, #24]
   ddcae:	0a1b      	lsrs	r3, r3, #8
   ddcb0:	74ab      	strb	r3, [r5, #18]
   ddcb2:	69a3      	ldr	r3, [r4, #24]
   ddcb4:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
   ddcb6:	bd70      	pop	{r4, r5, r6, pc}

000ddcb8 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   ddcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ddcba:	b099      	sub	sp, #100	; 0x64
   ddcbc:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
   ddcbe:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   ddcc0:	460f      	mov	r7, r1
   ddcc2:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
   ddcc4:	f7fe ff6d 	bl	dcba2 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
   ddcc8:	a801      	add	r0, sp, #4
   ddcca:	f7fe ff7d 	bl	dcbc8 <mbedtls_sha1_starts_ret>
   ddcce:	4604      	mov	r4, r0
   ddcd0:	b958      	cbnz	r0, ddcea <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
   ddcd2:	463a      	mov	r2, r7
   ddcd4:	4631      	mov	r1, r6
   ddcd6:	a801      	add	r0, sp, #4
   ddcd8:	f7ff ff40 	bl	ddb5c <mbedtls_sha1_update_ret>
   ddcdc:	4604      	mov	r4, r0
   ddcde:	b920      	cbnz	r0, ddcea <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
   ddce0:	4629      	mov	r1, r5
   ddce2:	a801      	add	r0, sp, #4
   ddce4:	f7ff ff74 	bl	ddbd0 <mbedtls_sha1_finish_ret>
   ddce8:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
   ddcea:	a801      	add	r0, sp, #4
   ddcec:	f7fe ff5d 	bl	dcbaa <mbedtls_sha1_free>

    return( ret );
}
   ddcf0:	4620      	mov	r0, r4
   ddcf2:	b019      	add	sp, #100	; 0x64
   ddcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ddcf6 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   ddcf6:	226c      	movs	r2, #108	; 0x6c
   ddcf8:	2100      	movs	r1, #0
   ddcfa:	f008 bf4a 	b.w	e6b92 <memset>

000ddcfe <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
   ddcfe:	b138      	cbz	r0, ddd10 <mbedtls_sha256_free+0x12>
   ddd00:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   ddd04:	2300      	movs	r3, #0
   ddd06:	4290      	cmp	r0, r2
   ddd08:	d002      	beq.n	ddd10 <mbedtls_sha256_free+0x12>
   ddd0a:	7003      	strb	r3, [r0, #0]
   ddd0c:	3001      	adds	r0, #1
   ddd0e:	e7fa      	b.n	ddd06 <mbedtls_sha256_free+0x8>
   ddd10:	4770      	bx	lr

000ddd12 <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
   ddd12:	b508      	push	{r3, lr}
    *dst = *src;
   ddd14:	226c      	movs	r2, #108	; 0x6c
   ddd16:	f008 ff16 	bl	e6b46 <memcpy>
   ddd1a:	bd08      	pop	{r3, pc}

000ddd1c <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   ddd1c:	2300      	movs	r3, #0
   ddd1e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   ddd20:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   ddd22:	b9a1      	cbnz	r1, ddd4e <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   ddd24:	4b18      	ldr	r3, [pc, #96]	; (ddd88 <mbedtls_sha256_starts_ret+0x6c>)
   ddd26:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   ddd28:	4b18      	ldr	r3, [pc, #96]	; (ddd8c <mbedtls_sha256_starts_ret+0x70>)
   ddd2a:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   ddd2c:	4b18      	ldr	r3, [pc, #96]	; (ddd90 <mbedtls_sha256_starts_ret+0x74>)
   ddd2e:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   ddd30:	4b18      	ldr	r3, [pc, #96]	; (ddd94 <mbedtls_sha256_starts_ret+0x78>)
   ddd32:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
   ddd34:	4b18      	ldr	r3, [pc, #96]	; (ddd98 <mbedtls_sha256_starts_ret+0x7c>)
   ddd36:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   ddd38:	4b18      	ldr	r3, [pc, #96]	; (ddd9c <mbedtls_sha256_starts_ret+0x80>)
   ddd3a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   ddd3c:	4b18      	ldr	r3, [pc, #96]	; (ddda0 <mbedtls_sha256_starts_ret+0x84>)
   ddd3e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   ddd40:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   ddd44:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   ddd48:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   ddd4c:	e018      	b.n	ddd80 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
   ddd4e:	4b15      	ldr	r3, [pc, #84]	; (ddda4 <mbedtls_sha256_starts_ret+0x88>)
   ddd50:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
   ddd52:	4b15      	ldr	r3, [pc, #84]	; (ddda8 <mbedtls_sha256_starts_ret+0x8c>)
   ddd54:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   ddd56:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
   ddd5a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
   ddd5e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
   ddd62:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   ddd64:	4b11      	ldr	r3, [pc, #68]	; (dddac <mbedtls_sha256_starts_ret+0x90>)
   ddd66:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   ddd68:	4b11      	ldr	r3, [pc, #68]	; (dddb0 <mbedtls_sha256_starts_ret+0x94>)
   ddd6a:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
   ddd6c:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
   ddd70:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   ddd74:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
   ddd78:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   ddd7a:	4b0e      	ldr	r3, [pc, #56]	; (dddb4 <mbedtls_sha256_starts_ret+0x98>)
   ddd7c:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   ddd7e:	4b0e      	ldr	r3, [pc, #56]	; (dddb8 <mbedtls_sha256_starts_ret+0x9c>)
   ddd80:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
   ddd82:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
   ddd84:	2000      	movs	r0, #0
   ddd86:	4770      	bx	lr
   ddd88:	6a09e667 	.word	0x6a09e667
   ddd8c:	bb67ae85 	.word	0xbb67ae85
   ddd90:	3c6ef372 	.word	0x3c6ef372
   ddd94:	a54ff53a 	.word	0xa54ff53a
   ddd98:	510e527f 	.word	0x510e527f
   ddd9c:	9b05688c 	.word	0x9b05688c
   ddda0:	1f83d9ab 	.word	0x1f83d9ab
   ddda4:	c1059ed8 	.word	0xc1059ed8
   ddda8:	367cd507 	.word	0x367cd507
   dddac:	f70e5939 	.word	0xf70e5939
   dddb0:	ffc00b31 	.word	0xffc00b31
   dddb4:	64f98fa7 	.word	0x64f98fa7
   dddb8:	befa4fa4 	.word	0xbefa4fa4

000dddbc <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   dddbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dddc0:	b0cf      	sub	sp, #316	; 0x13c
   dddc2:	1d03      	adds	r3, r0, #4
   dddc4:	9305      	str	r3, [sp, #20]
   dddc6:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
   dddc8:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
   dddca:	ac06      	add	r4, sp, #24
   dddcc:	f852 0f04 	ldr.w	r0, [r2, #4]!
   dddd0:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
   dddd4:	3301      	adds	r3, #1
   dddd6:	2b08      	cmp	r3, #8
   dddd8:	d1f7      	bne.n	dddca <mbedtls_internal_sha256_process+0xe>
   dddda:	4608      	mov	r0, r1
   ddddc:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
   dddde:	ac0e      	add	r4, sp, #56	; 0x38
   ddde0:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   ddde4:	78c3      	ldrb	r3, [r0, #3]
   ddde6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   dddea:	7845      	ldrb	r5, [r0, #1]
   dddec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dddf0:	7885      	ldrb	r5, [r0, #2]
   dddf2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   dddf6:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
   dddfa:	3201      	adds	r2, #1
   dddfc:	2a10      	cmp	r2, #16
   dddfe:	f100 0004 	add.w	r0, r0, #4
   dde02:	d1ed      	bne.n	ddde0 <mbedtls_internal_sha256_process+0x24>
   dde04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dde06:	4c9f      	ldr	r4, [pc, #636]	; (de084 <mbedtls_internal_sha256_process+0x2c8>)
   dde08:	9300      	str	r3, [sp, #0]
   dde0a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   dde0e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   dde12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   dde14:	f8dd 9018 	ldr.w	r9, [sp, #24]
   dde18:	f8dd e01c 	ldr.w	lr, [sp, #28]
   dde1c:	9f08      	ldr	r7, [sp, #32]
   dde1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dde20:	ad0f      	add	r5, sp, #60	; 0x3c
   dde22:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   dde26:	f854 0c04 	ldr.w	r0, [r4, #-4]
   dde2a:	f855 1c04 	ldr.w	r1, [r5, #-4]
   dde2e:	ea4f 22f8 	mov.w	r2, r8, ror #11
   dde32:	ea86 0c0b 	eor.w	ip, r6, fp
   dde36:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
   dde3a:	4401      	add	r1, r0
   dde3c:	ea82 6278 	eor.w	r2, r2, r8, ror #25
   dde40:	ea0c 0c08 	and.w	ip, ip, r8
   dde44:	ea8c 0c06 	eor.w	ip, ip, r6
   dde48:	440a      	add	r2, r1
   dde4a:	9900      	ldr	r1, [sp, #0]
   dde4c:	4462      	add	r2, ip
   dde4e:	ea4f 3079 	mov.w	r0, r9, ror #13
   dde52:	ea4e 0c09 	orr.w	ip, lr, r9
   dde56:	440a      	add	r2, r1
   dde58:	ea0c 0c07 	and.w	ip, ip, r7
   dde5c:	ea0e 0109 	and.w	r1, lr, r9
   dde60:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
   dde64:	ea4c 0101 	orr.w	r1, ip, r1
   dde68:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
   dde6c:	4408      	add	r0, r1
   dde6e:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   dde70:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   dde72:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   dde74:	6820      	ldr	r0, [r4, #0]
   dde76:	ea8b 0c08 	eor.w	ip, fp, r8
   dde7a:	4401      	add	r1, r0
   dde7c:	ea0c 0c03 	and.w	ip, ip, r3
   dde80:	ea4f 20f3 	mov.w	r0, r3, ror #11
   dde84:	ea8c 0c0b 	eor.w	ip, ip, fp
   dde88:	440e      	add	r6, r1
   dde8a:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
   dde8e:	eb06 010c 	add.w	r1, r6, ip
   dde92:	ea80 6073 	eor.w	r0, r0, r3, ror #25
   dde96:	180e      	adds	r6, r1, r0
   dde98:	eb06 0c07 	add.w	ip, r6, r7
   dde9c:	ea42 0009 	orr.w	r0, r2, r9
   ddea0:	ea4f 3772 	mov.w	r7, r2, ror #13
   ddea4:	ea02 0109 	and.w	r1, r2, r9
   ddea8:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
   ddeac:	ea00 000e 	and.w	r0, r0, lr
   ddeb0:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
   ddeb4:	4308      	orrs	r0, r1
   ddeb6:	4438      	add	r0, r7
   ddeb8:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   ddeba:	6869      	ldr	r1, [r5, #4]
   ddebc:	6866      	ldr	r6, [r4, #4]
   ddebe:	ea83 0708 	eor.w	r7, r3, r8
   ddec2:	440e      	add	r6, r1
   ddec4:	ea07 070c 	and.w	r7, r7, ip
   ddec8:	ea4f 21fc 	mov.w	r1, ip, ror #11
   ddecc:	ea87 0708 	eor.w	r7, r7, r8
   dded0:	44b3      	add	fp, r6
   dded2:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
   dded6:	eb0b 0607 	add.w	r6, fp, r7
   ddeda:	ea81 617c 	eor.w	r1, r1, ip, ror #25
   ddede:	eb06 0b01 	add.w	fp, r6, r1
   ddee2:	ea4f 3770 	mov.w	r7, r0, ror #13
   ddee6:	ea42 0100 	orr.w	r1, r2, r0
   ddeea:	ea02 0600 	and.w	r6, r2, r0
   ddeee:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
   ddef2:	ea01 0109 	and.w	r1, r1, r9
   ddef6:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
   ddefa:	4331      	orrs	r1, r6
   ddefc:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   ddefe:	68ae      	ldr	r6, [r5, #8]
   ddf00:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   ddf02:	4459      	add	r1, fp
   ddf04:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   ddf06:	443e      	add	r6, r7
   ddf08:	ea83 0b0c 	eor.w	fp, r3, ip
   ddf0c:	44b0      	add	r8, r6
   ddf0e:	ea0b 0b0e 	and.w	fp, fp, lr
   ddf12:	ea4f 26fe 	mov.w	r6, lr, ror #11
   ddf16:	ea8b 0b03 	eor.w	fp, fp, r3
   ddf1a:	ea86 16be 	eor.w	r6, r6, lr, ror #6
   ddf1e:	44d8      	add	r8, fp
   ddf20:	ea86 667e 	eor.w	r6, r6, lr, ror #25
   ddf24:	4446      	add	r6, r8
   ddf26:	ea4f 3b71 	mov.w	fp, r1, ror #13
   ddf2a:	ea40 0801 	orr.w	r8, r0, r1
   ddf2e:	ea00 0701 	and.w	r7, r0, r1
   ddf32:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
   ddf36:	ea08 0802 	and.w	r8, r8, r2
   ddf3a:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
   ddf3e:	ea48 0807 	orr.w	r8, r8, r7
   ddf42:	44d8      	add	r8, fp
   ddf44:	44b0      	add	r8, r6
   ddf46:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
   ddf48:	68e7      	ldr	r7, [r4, #12]
   ddf4a:	68ee      	ldr	r6, [r5, #12]
   ddf4c:	ea8c 0b0e 	eor.w	fp, ip, lr
   ddf50:	4437      	add	r7, r6
   ddf52:	ea0b 0b09 	and.w	fp, fp, r9
   ddf56:	ea8b 0b0c 	eor.w	fp, fp, ip
   ddf5a:	443b      	add	r3, r7
   ddf5c:	eb03 070b 	add.w	r7, r3, fp
   ddf60:	ea4f 23f9 	mov.w	r3, r9, ror #11
   ddf64:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
   ddf68:	ea83 6379 	eor.w	r3, r3, r9, ror #25
   ddf6c:	18fe      	adds	r6, r7, r3
   ddf6e:	1993      	adds	r3, r2, r6
   ddf70:	9300      	str	r3, [sp, #0]
   ddf72:	ea4f 3778 	mov.w	r7, r8, ror #13
   ddf76:	ea41 0308 	orr.w	r3, r1, r8
   ddf7a:	ea01 0208 	and.w	r2, r1, r8
   ddf7e:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
   ddf82:	4003      	ands	r3, r0
   ddf84:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
   ddf88:	4313      	orrs	r3, r2
   ddf8a:	443b      	add	r3, r7
   ddf8c:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
   ddf8e:	692a      	ldr	r2, [r5, #16]
   ddf90:	6926      	ldr	r6, [r4, #16]
   ddf92:	4432      	add	r2, r6
   ddf94:	4494      	add	ip, r2
   ddf96:	9a00      	ldr	r2, [sp, #0]
   ddf98:	ea8e 0609 	eor.w	r6, lr, r9
   ddf9c:	4016      	ands	r6, r2
   ddf9e:	ea4f 27f2 	mov.w	r7, r2, ror #11
   ddfa2:	ea86 060e 	eor.w	r6, r6, lr
   ddfa6:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
   ddfaa:	44b4      	add	ip, r6
   ddfac:	ea87 6772 	eor.w	r7, r7, r2, ror #25
   ddfb0:	eb0c 0207 	add.w	r2, ip, r7
   ddfb4:	ea4f 3b73 	mov.w	fp, r3, ror #13
   ddfb8:	ea48 0703 	orr.w	r7, r8, r3
   ddfbc:	1886      	adds	r6, r0, r2
   ddfbe:	400f      	ands	r7, r1
   ddfc0:	ea08 0003 	and.w	r0, r8, r3
   ddfc4:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
   ddfc8:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
   ddfcc:	4307      	orrs	r7, r0
   ddfce:	445f      	add	r7, fp
   ddfd0:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
   ddfd2:	6960      	ldr	r0, [r4, #20]
   ddfd4:	696a      	ldr	r2, [r5, #20]
   ddfd6:	4410      	add	r0, r2
   ddfd8:	9a00      	ldr	r2, [sp, #0]
   ddfda:	ea89 0c02 	eor.w	ip, r9, r2
   ddfde:	ea0c 0c06 	and.w	ip, ip, r6
   ddfe2:	4486      	add	lr, r0
   ddfe4:	ea8c 0c09 	eor.w	ip, ip, r9
   ddfe8:	eb0e 000c 	add.w	r0, lr, ip
   ddfec:	ea4f 2ef6 	mov.w	lr, r6, ror #11
   ddff0:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
   ddff4:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
   ddff8:	eb00 020e 	add.w	r2, r0, lr
   ddffc:	ea4f 3077 	mov.w	r0, r7, ror #13
   de000:	ea43 0e07 	orr.w	lr, r3, r7
   de004:	eb01 0b02 	add.w	fp, r1, r2
   de008:	ea0e 0e08 	and.w	lr, lr, r8
   de00c:	ea03 0107 	and.w	r1, r3, r7
   de010:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
   de014:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
   de018:	ea4e 0e01 	orr.w	lr, lr, r1
   de01c:	4486      	add	lr, r0
   de01e:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   de020:	69a1      	ldr	r1, [r4, #24]
   de022:	69aa      	ldr	r2, [r5, #24]
   de024:	4411      	add	r1, r2
   de026:	9a00      	ldr	r2, [sp, #0]
   de028:	ea82 0006 	eor.w	r0, r2, r6
   de02c:	ea00 000b 	and.w	r0, r0, fp
   de030:	4050      	eors	r0, r2
   de032:	4489      	add	r9, r1
   de034:	eb09 0100 	add.w	r1, r9, r0
   de038:	ea4f 29fb 	mov.w	r9, fp, ror #11
   de03c:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
   de040:	ea89 697b 	eor.w	r9, r9, fp, ror #25
   de044:	eb01 0209 	add.w	r2, r1, r9
   de048:	ea4f 307e 	mov.w	r0, lr, ror #13
   de04c:	ea47 090e 	orr.w	r9, r7, lr
   de050:	ea80 00be 	eor.w	r0, r0, lr, ror #2
   de054:	ea09 0903 	and.w	r9, r9, r3
   de058:	ea07 010e 	and.w	r1, r7, lr
   de05c:	ea80 50be 	eor.w	r0, r0, lr, ror #22
   de060:	ea49 0901 	orr.w	r9, r9, r1
   de064:	3420      	adds	r4, #32
   de066:	4481      	add	r9, r0
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
   de068:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   de06a:	4490      	add	r8, r2
   de06c:	4491      	add	r9, r2
   de06e:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
   de072:	f47f aed8 	bne.w	dde26 <mbedtls_internal_sha256_process+0x6a>
   de076:	2200      	movs	r2, #0
   de078:	f8df a00c 	ldr.w	sl, [pc, #12]	; de088 <mbedtls_internal_sha256_process+0x2cc>
   de07c:	9204      	str	r2, [sp, #16]
   de07e:	ac0e      	add	r4, sp, #56	; 0x38
   de080:	e004      	b.n	de08c <mbedtls_internal_sha256_process+0x2d0>
   de082:	bf00      	nop
   de084:	000e8798 	.word	0x000e8798
   de088:	000e8794 	.word	0x000e8794
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   de08c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   de08e:	6860      	ldr	r0, [r4, #4]
   de090:	6a61      	ldr	r1, [r4, #36]	; 0x24
   de092:	ea4f 45f2 	mov.w	r5, r2, ror #19
   de096:	ea85 4572 	eor.w	r5, r5, r2, ror #17
   de09a:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
   de09e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   de0a2:	9a04      	ldr	r2, [sp, #16]
   de0a4:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   de0a8:	ea4f 4cb0 	mov.w	ip, r0, ror #18
   de0ac:	440a      	add	r2, r1
   de0ae:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
   de0b2:	ea4f 21f8 	mov.w	r1, r8, ror #11
   de0b6:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
   de0ba:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
   de0be:	4415      	add	r5, r2
   de0c0:	eb05 020c 	add.w	r2, r5, ip
   de0c4:	ea81 6578 	eor.w	r5, r1, r8, ror #25
   de0c8:	ea86 010b 	eor.w	r1, r6, fp
   de0cc:	ea01 0108 	and.w	r1, r1, r8
   de0d0:	9203      	str	r2, [sp, #12]
   de0d2:	ea81 0206 	eor.w	r2, r1, r6
   de0d6:	18a9      	adds	r1, r5, r2
   de0d8:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
   de0dc:	440a      	add	r2, r1
   de0de:	9903      	ldr	r1, [sp, #12]
   de0e0:	6421      	str	r1, [r4, #64]	; 0x40
   de0e2:	440a      	add	r2, r1
   de0e4:	9900      	ldr	r1, [sp, #0]
   de0e6:	440a      	add	r2, r1
   de0e8:	18d3      	adds	r3, r2, r3
   de0ea:	ea4e 0509 	orr.w	r5, lr, r9
   de0ee:	ea4f 3179 	mov.w	r1, r9, ror #13
   de0f2:	9300      	str	r3, [sp, #0]
   de0f4:	403d      	ands	r5, r7
   de0f6:	ea0e 0309 	and.w	r3, lr, r9
   de0fa:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
   de0fe:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
   de102:	432b      	orrs	r3, r5
   de104:	440b      	add	r3, r1
   de106:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   de108:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   de10a:	68a5      	ldr	r5, [r4, #8]
   de10c:	ea4f 41f3 	mov.w	r1, r3, ror #19
   de110:	ea81 4173 	eor.w	r1, r1, r3, ror #17
   de114:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
   de118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   de11a:	4403      	add	r3, r0
   de11c:	4419      	add	r1, r3
   de11e:	ea4f 43b5 	mov.w	r3, r5, ror #18
   de122:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
   de126:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
   de12a:	eb01 030c 	add.w	r3, r1, ip
   de12e:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
   de132:	9900      	ldr	r1, [sp, #0]
   de134:	6463      	str	r3, [r4, #68]	; 0x44
   de136:	ea8b 0c08 	eor.w	ip, fp, r8
   de13a:	4430      	add	r0, r6
   de13c:	ea0c 0c01 	and.w	ip, ip, r1
   de140:	ea8c 0c0b 	eor.w	ip, ip, fp
   de144:	18c1      	adds	r1, r0, r3
   de146:	448c      	add	ip, r1
   de148:	9900      	ldr	r1, [sp, #0]
   de14a:	ea4f 20f1 	mov.w	r0, r1, ror #11
   de14e:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
   de152:	ea80 6071 	eor.w	r0, r0, r1, ror #25
   de156:	eb00 010c 	add.w	r1, r0, ip
   de15a:	19c8      	adds	r0, r1, r7
   de15c:	9001      	str	r0, [sp, #4]
   de15e:	ea4f 3c72 	mov.w	ip, r2, ror #13
   de162:	ea42 0009 	orr.w	r0, r2, r9
   de166:	ea02 0709 	and.w	r7, r2, r9
   de16a:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
   de16e:	ea00 000e 	and.w	r0, r0, lr
   de172:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
   de176:	4338      	orrs	r0, r7
   de178:	4460      	add	r0, ip
   de17a:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   de17c:	9903      	ldr	r1, [sp, #12]
   de17e:	68e7      	ldr	r7, [r4, #12]
   de180:	ea4f 46f1 	mov.w	r6, r1, ror #19
   de184:	ea86 4671 	eor.w	r6, r6, r1, ror #17
   de188:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
   de18c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   de18e:	ea4f 4cb7 	mov.w	ip, r7, ror #18
   de192:	4429      	add	r1, r5
   de194:	440e      	add	r6, r1
   de196:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
   de19a:	9900      	ldr	r1, [sp, #0]
   de19c:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
   de1a0:	4466      	add	r6, ip
   de1a2:	ea81 0c08 	eor.w	ip, r1, r8
   de1a6:	9901      	ldr	r1, [sp, #4]
   de1a8:	64a6      	str	r6, [r4, #72]	; 0x48
   de1aa:	ea0c 0c01 	and.w	ip, ip, r1
   de1ae:	f8da 1048 	ldr.w	r1, [sl, #72]	; 0x48
   de1b2:	4459      	add	r1, fp
   de1b4:	198d      	adds	r5, r1, r6
   de1b6:	ea8c 0c08 	eor.w	ip, ip, r8
   de1ba:	9901      	ldr	r1, [sp, #4]
   de1bc:	44ac      	add	ip, r5
   de1be:	9d01      	ldr	r5, [sp, #4]
   de1c0:	ea4f 21f1 	mov.w	r1, r1, ror #11
   de1c4:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
   de1c8:	ea81 6175 	eor.w	r1, r1, r5, ror #25
   de1cc:	eb01 050c 	add.w	r5, r1, ip
   de1d0:	ea42 0100 	orr.w	r1, r2, r0
   de1d4:	ea4f 3c70 	mov.w	ip, r0, ror #13
   de1d8:	eb05 0b0e 	add.w	fp, r5, lr
   de1dc:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
   de1e0:	ea02 0e00 	and.w	lr, r2, r0
   de1e4:	ea01 0109 	and.w	r1, r1, r9
   de1e8:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
   de1ec:	ea41 010e 	orr.w	r1, r1, lr
   de1f0:	4461      	add	r1, ip
   de1f2:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   de1f4:	ea4f 45f3 	mov.w	r5, r3, ror #19
   de1f8:	ea85 4573 	eor.w	r5, r5, r3, ror #17
   de1fc:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
   de200:	6b25      	ldr	r5, [r4, #48]	; 0x30
   de202:	f8d4 c010 	ldr.w	ip, [r4, #16]
   de206:	442f      	add	r7, r5
   de208:	443b      	add	r3, r7
   de20a:	ea4f 47bc 	mov.w	r7, ip, ror #18
   de20e:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
   de212:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
   de216:	eb03 070e 	add.w	r7, r3, lr
   de21a:	e89d 0028 	ldmia.w	sp, {r3, r5}
   de21e:	405d      	eors	r5, r3
   de220:	ea05 050b 	and.w	r5, r5, fp
   de224:	405d      	eors	r5, r3
   de226:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
   de22a:	64e7      	str	r7, [r4, #76]	; 0x4c
   de22c:	4498      	add	r8, r3
   de22e:	44b8      	add	r8, r7
   de230:	4445      	add	r5, r8
   de232:	ea4f 28fb 	mov.w	r8, fp, ror #11
   de236:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
   de23a:	ea88 687b 	eor.w	r8, r8, fp, ror #25
   de23e:	eb08 0305 	add.w	r3, r8, r5
   de242:	eb03 0509 	add.w	r5, r3, r9
   de246:	ea40 0801 	orr.w	r8, r0, r1
   de24a:	ea4f 3e71 	mov.w	lr, r1, ror #13
   de24e:	9502      	str	r5, [sp, #8]
   de250:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
   de254:	ea00 0501 	and.w	r5, r0, r1
   de258:	ea08 0802 	and.w	r8, r8, r2
   de25c:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
   de260:	ea48 0805 	orr.w	r8, r8, r5
   de264:	44f0      	add	r8, lr
   de266:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   de268:	ea4f 4ef6 	mov.w	lr, r6, ror #19
   de26c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   de26e:	6965      	ldr	r5, [r4, #20]
   de270:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
   de274:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
   de278:	eb0c 0e03 	add.w	lr, ip, r3
   de27c:	9b01      	ldr	r3, [sp, #4]
   de27e:	4476      	add	r6, lr
   de280:	ea83 0c0b 	eor.w	ip, r3, fp
   de284:	ea4f 4eb5 	mov.w	lr, r5, ror #18
   de288:	9b02      	ldr	r3, [sp, #8]
   de28a:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
   de28e:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
   de292:	ea0c 0c03 	and.w	ip, ip, r3
   de296:	9b01      	ldr	r3, [sp, #4]
   de298:	eb06 0e09 	add.w	lr, r6, r9
   de29c:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   de2a0:	f8d4 9018 	ldr.w	r9, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   de2a4:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
   de2a8:	ea8c 0c03 	eor.w	ip, ip, r3
   de2ac:	9b00      	ldr	r3, [sp, #0]
   de2ae:	4476      	add	r6, lr
   de2b0:	441e      	add	r6, r3
   de2b2:	9b02      	ldr	r3, [sp, #8]
   de2b4:	44b4      	add	ip, r6
   de2b6:	9e02      	ldr	r6, [sp, #8]
   de2b8:	ea4f 23f3 	mov.w	r3, r3, ror #11
   de2bc:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
   de2c0:	ea83 6376 	eor.w	r3, r3, r6, ror #25
   de2c4:	eb03 060c 	add.w	r6, r3, ip
   de2c8:	1993      	adds	r3, r2, r6
   de2ca:	9300      	str	r3, [sp, #0]
   de2cc:	ea41 0308 	orr.w	r3, r1, r8
   de2d0:	ea01 0208 	and.w	r2, r1, r8
   de2d4:	4003      	ands	r3, r0
   de2d6:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   de2d8:	ea4f 42f7 	mov.w	r2, r7, ror #19
   de2dc:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   de2e0:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   de2e4:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
   de2e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   de2ea:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
   de2ee:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   de2f2:	4415      	add	r5, r2
   de2f4:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   de2f6:	4463      	add	r3, ip
   de2f8:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   de2fa:	442f      	add	r7, r5
   de2fc:	ea8b 0602 	eor.w	r6, fp, r2
   de300:	ea4f 45b9 	mov.w	r5, r9, ror #18
   de304:	9a00      	ldr	r2, [sp, #0]
   de306:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
   de30a:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
   de30e:	4016      	ands	r6, r2
   de310:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   de314:	443d      	add	r5, r7
   de316:	9f01      	ldr	r7, [sp, #4]
   de318:	6565      	str	r5, [r4, #84]	; 0x54
   de31a:	442a      	add	r2, r5
   de31c:	443a      	add	r2, r7
   de31e:	ea86 060b 	eor.w	r6, r6, fp
   de322:	4416      	add	r6, r2
   de324:	9a00      	ldr	r2, [sp, #0]
   de326:	ea4f 27f2 	mov.w	r7, r2, ror #11
   de32a:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
   de32e:	ea87 6772 	eor.w	r7, r7, r2, ror #25
   de332:	19ba      	adds	r2, r7, r6
   de334:	1886      	adds	r6, r0, r2
   de336:	ea4f 3073 	mov.w	r0, r3, ror #13
   de33a:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
   de33e:	ea48 0703 	orr.w	r7, r8, r3
   de342:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
   de346:	400f      	ands	r7, r1
   de348:	ea08 0003 	and.w	r0, r8, r3
   de34c:	4307      	orrs	r7, r0
   de34e:	4467      	add	r7, ip
   de350:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   de352:	ea4f 42fe 	mov.w	r2, lr, ror #19
   de356:	ea82 427e 	eor.w	r2, r2, lr, ror #17
   de35a:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
   de35e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   de360:	69e0      	ldr	r0, [r4, #28]
   de362:	4491      	add	r9, r2
   de364:	eb0e 0209 	add.w	r2, lr, r9
   de368:	ea4f 49b0 	mov.w	r9, r0, ror #18
   de36c:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
   de370:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
   de374:	4491      	add	r9, r2
   de376:	9a02      	ldr	r2, [sp, #8]
   de378:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
   de37c:	4696      	mov	lr, r2
   de37e:	9a00      	ldr	r2, [sp, #0]
   de380:	ea8e 0c02 	eor.w	ip, lr, r2
   de384:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
   de388:	ea0c 0c06 	and.w	ip, ip, r6
   de38c:	ea8c 0c0e 	eor.w	ip, ip, lr
   de390:	444a      	add	r2, r9
   de392:	ea4f 2ef6 	mov.w	lr, r6, ror #11
   de396:	445a      	add	r2, fp
   de398:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
   de39c:	4462      	add	r2, ip
   de39e:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
   de3a2:	4472      	add	r2, lr
   de3a4:	ea4f 3c77 	mov.w	ip, r7, ror #13
   de3a8:	ea43 0e07 	orr.w	lr, r3, r7
   de3ac:	eb01 0b02 	add.w	fp, r1, r2
   de3b0:	ea0e 0e08 	and.w	lr, lr, r8
   de3b4:	ea03 0107 	and.w	r1, r3, r7
   de3b8:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
   de3bc:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
   de3c0:	ea4e 0e01 	orr.w	lr, lr, r1
   de3c4:	44e6      	add	lr, ip
   de3c6:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   de3c8:	ea4f 42f5 	mov.w	r2, r5, ror #19
   de3cc:	6a21      	ldr	r1, [r4, #32]
   de3ce:	ea82 4275 	eor.w	r2, r2, r5, ror #17
   de3d2:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
   de3d6:	9a03      	ldr	r2, [sp, #12]
   de3d8:	ea4f 4cb1 	mov.w	ip, r1, ror #18
   de3dc:	4410      	add	r0, r2
   de3de:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
   de3e2:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
   de3e6:	4405      	add	r5, r0
   de3e8:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
   de3ec:	440d      	add	r5, r1
   de3ee:	9902      	ldr	r1, [sp, #8]
   de3f0:	442a      	add	r2, r5
   de3f2:	eb02 0901 	add.w	r9, r2, r1
   de3f6:	9a00      	ldr	r2, [sp, #0]
   de3f8:	65e5      	str	r5, [r4, #92]	; 0x5c
   de3fa:	ea82 0106 	eor.w	r1, r2, r6
   de3fe:	ea01 010b 	and.w	r1, r1, fp
   de402:	4051      	eors	r1, r2
   de404:	ea4f 22fb 	mov.w	r2, fp, ror #11
   de408:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
   de40c:	4489      	add	r9, r1
   de40e:	ea82 627b 	eor.w	r2, r2, fp, ror #25
   de412:	444a      	add	r2, r9
   de414:	ea4f 307e 	mov.w	r0, lr, ror #13
   de418:	ea47 090e 	orr.w	r9, r7, lr
   de41c:	ea80 00be 	eor.w	r0, r0, lr, ror #2
   de420:	ea09 0903 	and.w	r9, r9, r3
   de424:	ea07 010e 	and.w	r1, r7, lr
   de428:	ea80 50be 	eor.w	r0, r0, lr, ror #22
   de42c:	ea49 0901 	orr.w	r9, r9, r1
   de430:	4481      	add	r9, r0
   de432:	4490      	add	r8, r2
   de434:	4491      	add	r9, r2
   de436:	9a04      	ldr	r2, [sp, #16]
   de438:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
   de43a:	2a30      	cmp	r2, #48	; 0x30
   de43c:	9204      	str	r2, [sp, #16]
   de43e:	f10a 0a20 	add.w	sl, sl, #32
   de442:	f104 0420 	add.w	r4, r4, #32
   de446:	f47f ae21 	bne.w	de08c <mbedtls_internal_sha256_process+0x2d0>
   de44a:	9a00      	ldr	r2, [sp, #0]
   de44c:	9309      	str	r3, [sp, #36]	; 0x24
   de44e:	920d      	str	r2, [sp, #52]	; 0x34
   de450:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   de454:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   de458:	960c      	str	r6, [sp, #48]	; 0x30
   de45a:	f8cd 9018 	str.w	r9, [sp, #24]
   de45e:	f8cd e01c 	str.w	lr, [sp, #28]
   de462:	9708      	str	r7, [sp, #32]
   de464:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
   de466:	9a05      	ldr	r2, [sp, #20]
   de468:	f852 1f04 	ldr.w	r1, [r2, #4]!
   de46c:	9205      	str	r2, [sp, #20]
   de46e:	aa06      	add	r2, sp, #24
   de470:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   de474:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
   de476:	440a      	add	r2, r1
   de478:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   de47a:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
   de47c:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   de47e:	d1f2      	bne.n	de466 <mbedtls_internal_sha256_process+0x6aa>
        ctx->state[i] += A[i];

    return( 0 );
}
   de480:	2000      	movs	r0, #0
   de482:	b04f      	add	sp, #316	; 0x13c
   de484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de488 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   de488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de48c:	4604      	mov	r4, r0
   de48e:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   de490:	4615      	mov	r5, r2
   de492:	b382      	cbz	r2, de4f6 <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
   de494:	6803      	ldr	r3, [r0, #0]
   de496:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   de49a:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   de49c:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   de49e:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
   de4a0:	bf82      	ittt	hi
   de4a2:	6863      	ldrhi	r3, [r4, #4]
   de4a4:	3301      	addhi	r3, #1
   de4a6:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
   de4a8:	b180      	cbz	r0, de4cc <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
   de4aa:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   de4ae:	42ba      	cmp	r2, r7
   de4b0:	d31b      	bcc.n	de4ea <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   de4b2:	f104 0828 	add.w	r8, r4, #40	; 0x28
   de4b6:	463a      	mov	r2, r7
   de4b8:	4440      	add	r0, r8
   de4ba:	f008 fb44 	bl	e6b46 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   de4be:	4641      	mov	r1, r8
   de4c0:	4620      	mov	r0, r4
   de4c2:	f7ff fc7b 	bl	dddbc <mbedtls_internal_sha256_process>
   de4c6:	b9b8      	cbnz	r0, de4f8 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
   de4c8:	443e      	add	r6, r7
        ilen  -= fill;
   de4ca:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   de4cc:	462f      	mov	r7, r5
   de4ce:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   de4d0:	2f3f      	cmp	r7, #63	; 0x3f
   de4d2:	4431      	add	r1, r6
   de4d4:	d905      	bls.n	de4e2 <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   de4d6:	4620      	mov	r0, r4
   de4d8:	f7ff fc70 	bl	dddbc <mbedtls_internal_sha256_process>
   de4dc:	b960      	cbnz	r0, de4f8 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
   de4de:	3f40      	subs	r7, #64	; 0x40
   de4e0:	e7f5      	b.n	de4ce <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
   de4e2:	b147      	cbz	r7, de4f6 <mbedtls_sha256_update_ret+0x6e>
   de4e4:	463d      	mov	r5, r7
   de4e6:	460e      	mov	r6, r1
   de4e8:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   de4ea:	3428      	adds	r4, #40	; 0x28
   de4ec:	462a      	mov	r2, r5
   de4ee:	4631      	mov	r1, r6
   de4f0:	4420      	add	r0, r4
   de4f2:	f008 fb28 	bl	e6b46 <memcpy>

    return( 0 );
   de4f6:	2000      	movs	r0, #0
}
   de4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000de4fc <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   de4fc:	b570      	push	{r4, r5, r6, lr}
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   de4fe:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   de500:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   de502:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   de506:	1c58      	adds	r0, r3, #1
   de508:	4423      	add	r3, r4
   de50a:	2280      	movs	r2, #128	; 0x80

    if( used <= 56 )
   de50c:	2838      	cmp	r0, #56	; 0x38
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   de50e:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
   de510:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   de514:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
   de518:	d804      	bhi.n	de524 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   de51a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   de51e:	2100      	movs	r1, #0
   de520:	4430      	add	r0, r6
   de522:	e00e      	b.n	de542 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
   de524:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   de528:	2100      	movs	r1, #0
   de52a:	4430      	add	r0, r6
   de52c:	f008 fb31 	bl	e6b92 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   de530:	4631      	mov	r1, r6
   de532:	4620      	mov	r0, r4
   de534:	f7ff fc42 	bl	dddbc <mbedtls_internal_sha256_process>
   de538:	2800      	cmp	r0, #0
   de53a:	d172      	bne.n	de622 <mbedtls_sha256_finish_ret+0x126>
            return( ret );

        memset( ctx->buffer, 0, 56 );
   de53c:	4601      	mov	r1, r0
   de53e:	2238      	movs	r2, #56	; 0x38
   de540:	4630      	mov	r0, r6
   de542:	f008 fb26 	bl	e6b92 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   de546:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
   de548:	6861      	ldr	r1, [r4, #4]
   de54a:	0f5a      	lsrs	r2, r3, #29
   de54c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   de550:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   de552:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   de554:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   de558:	0c11      	lsrs	r1, r2, #16
   de55a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
   de55e:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
   de562:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   de564:	0e1a      	lsrs	r2, r3, #24
   de566:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
   de56a:	0c1a      	lsrs	r2, r3, #16
   de56c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
   de570:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   de572:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   de576:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   de57a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   de57e:	4631      	mov	r1, r6
   de580:	4620      	mov	r0, r4
   de582:	f7ff fc1b 	bl	dddbc <mbedtls_internal_sha256_process>
   de586:	2800      	cmp	r0, #0
   de588:	d14b      	bne.n	de622 <mbedtls_sha256_finish_ret+0x126>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   de58a:	7ae3      	ldrb	r3, [r4, #11]
   de58c:	702b      	strb	r3, [r5, #0]
   de58e:	8963      	ldrh	r3, [r4, #10]
   de590:	706b      	strb	r3, [r5, #1]
   de592:	68a3      	ldr	r3, [r4, #8]
   de594:	0a1b      	lsrs	r3, r3, #8
   de596:	70ab      	strb	r3, [r5, #2]
   de598:	68a3      	ldr	r3, [r4, #8]
   de59a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   de59c:	7be3      	ldrb	r3, [r4, #15]
   de59e:	712b      	strb	r3, [r5, #4]
   de5a0:	89e3      	ldrh	r3, [r4, #14]
   de5a2:	716b      	strb	r3, [r5, #5]
   de5a4:	68e3      	ldr	r3, [r4, #12]
   de5a6:	0a1b      	lsrs	r3, r3, #8
   de5a8:	71ab      	strb	r3, [r5, #6]
   de5aa:	68e3      	ldr	r3, [r4, #12]
   de5ac:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   de5ae:	7ce3      	ldrb	r3, [r4, #19]
   de5b0:	722b      	strb	r3, [r5, #8]
   de5b2:	8a63      	ldrh	r3, [r4, #18]
   de5b4:	726b      	strb	r3, [r5, #9]
   de5b6:	6923      	ldr	r3, [r4, #16]
   de5b8:	0a1b      	lsrs	r3, r3, #8
   de5ba:	72ab      	strb	r3, [r5, #10]
   de5bc:	6923      	ldr	r3, [r4, #16]
   de5be:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   de5c0:	7de3      	ldrb	r3, [r4, #23]
   de5c2:	732b      	strb	r3, [r5, #12]
   de5c4:	8ae3      	ldrh	r3, [r4, #22]
   de5c6:	736b      	strb	r3, [r5, #13]
   de5c8:	6963      	ldr	r3, [r4, #20]
   de5ca:	0a1b      	lsrs	r3, r3, #8
   de5cc:	73ab      	strb	r3, [r5, #14]
   de5ce:	6963      	ldr	r3, [r4, #20]
   de5d0:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   de5d2:	7ee3      	ldrb	r3, [r4, #27]
   de5d4:	742b      	strb	r3, [r5, #16]
   de5d6:	8b63      	ldrh	r3, [r4, #26]
   de5d8:	746b      	strb	r3, [r5, #17]
   de5da:	69a3      	ldr	r3, [r4, #24]
   de5dc:	0a1b      	lsrs	r3, r3, #8
   de5de:	74ab      	strb	r3, [r5, #18]
   de5e0:	69a3      	ldr	r3, [r4, #24]
   de5e2:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   de5e4:	7fe3      	ldrb	r3, [r4, #31]
   de5e6:	752b      	strb	r3, [r5, #20]
   de5e8:	8be3      	ldrh	r3, [r4, #30]
   de5ea:	756b      	strb	r3, [r5, #21]
   de5ec:	69e3      	ldr	r3, [r4, #28]
   de5ee:	0a1b      	lsrs	r3, r3, #8
   de5f0:	75ab      	strb	r3, [r5, #22]
   de5f2:	69e3      	ldr	r3, [r4, #28]
   de5f4:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   de5f6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   de5fa:	762b      	strb	r3, [r5, #24]
   de5fc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   de5fe:	766b      	strb	r3, [r5, #25]
   de600:	6a23      	ldr	r3, [r4, #32]
   de602:	0a1b      	lsrs	r3, r3, #8
   de604:	76ab      	strb	r3, [r5, #26]
   de606:	6a23      	ldr	r3, [r4, #32]
   de608:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
   de60a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   de60c:	b94b      	cbnz	r3, de622 <mbedtls_sha256_finish_ret+0x126>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   de60e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   de612:	772b      	strb	r3, [r5, #28]
   de614:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   de616:	776b      	strb	r3, [r5, #29]
   de618:	6a63      	ldr	r3, [r4, #36]	; 0x24
   de61a:	0a1b      	lsrs	r3, r3, #8
   de61c:	77ab      	strb	r3, [r5, #30]
   de61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   de620:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
   de622:	bd70      	pop	{r4, r5, r6, pc}

000de624 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   de624:	b5f0      	push	{r4, r5, r6, r7, lr}
   de626:	b09d      	sub	sp, #116	; 0x74
   de628:	461f      	mov	r7, r3
   de62a:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
   de62c:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   de62e:	460e      	mov	r6, r1
   de630:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
   de632:	f7ff fb60 	bl	ddcf6 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
   de636:	4639      	mov	r1, r7
   de638:	a801      	add	r0, sp, #4
   de63a:	f7ff fb6f 	bl	ddd1c <mbedtls_sha256_starts_ret>
   de63e:	4601      	mov	r1, r0
   de640:	b958      	cbnz	r0, de65a <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
   de642:	4629      	mov	r1, r5
   de644:	4632      	mov	r2, r6
   de646:	a801      	add	r0, sp, #4
   de648:	f7ff ff1e 	bl	de488 <mbedtls_sha256_update_ret>
   de64c:	4601      	mov	r1, r0
   de64e:	b920      	cbnz	r0, de65a <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
   de650:	4621      	mov	r1, r4
   de652:	a801      	add	r0, sp, #4
   de654:	f7ff ff52 	bl	de4fc <mbedtls_sha256_finish_ret>
   de658:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
   de65a:	a801      	add	r0, sp, #4
   de65c:	f7ff fb4f 	bl	ddcfe <mbedtls_sha256_free>

    return( ret );
}
   de660:	4608      	mov	r0, r1
   de662:	b01d      	add	sp, #116	; 0x74
   de664:	bdf0      	pop	{r4, r5, r6, r7, pc}

000de666 <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
   de666:	22d8      	movs	r2, #216	; 0xd8
   de668:	2100      	movs	r1, #0
   de66a:	f008 ba92 	b.w	e6b92 <memset>

000de66e <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
   de66e:	b138      	cbz	r0, de680 <mbedtls_sha512_free+0x12>
   de670:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   de674:	2300      	movs	r3, #0
   de676:	4290      	cmp	r0, r2
   de678:	d002      	beq.n	de680 <mbedtls_sha512_free+0x12>
   de67a:	7003      	strb	r3, [r0, #0]
   de67c:	3001      	adds	r0, #1
   de67e:	e7fa      	b.n	de676 <mbedtls_sha512_free+0x8>
   de680:	4770      	bx	lr

000de682 <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
   de682:	b508      	push	{r3, lr}
    *dst = *src;
   de684:	22d8      	movs	r2, #216	; 0xd8
   de686:	f008 fa5e 	bl	e6b46 <memcpy>
   de68a:	bd08      	pop	{r3, pc}
   de68c:	0000      	movs	r0, r0
	...

000de690 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
   de690:	2200      	movs	r2, #0
   de692:	2300      	movs	r3, #0
   de694:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
   de698:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
   de69c:	bb31      	cbnz	r1, de6ec <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
   de69e:	a32a      	add	r3, pc, #168	; (adr r3, de748 <mbedtls_sha512_starts_ret+0xb8>)
   de6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
   de6a8:	a329      	add	r3, pc, #164	; (adr r3, de750 <mbedtls_sha512_starts_ret+0xc0>)
   de6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6ae:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
   de6b2:	a329      	add	r3, pc, #164	; (adr r3, de758 <mbedtls_sha512_starts_ret+0xc8>)
   de6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6b8:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
   de6bc:	a328      	add	r3, pc, #160	; (adr r3, de760 <mbedtls_sha512_starts_ret+0xd0>)
   de6be:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6c2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
   de6c6:	a328      	add	r3, pc, #160	; (adr r3, de768 <mbedtls_sha512_starts_ret+0xd8>)
   de6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6cc:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
   de6d0:	a327      	add	r3, pc, #156	; (adr r3, de770 <mbedtls_sha512_starts_ret+0xe0>)
   de6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6d6:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
   de6da:	a327      	add	r3, pc, #156	; (adr r3, de778 <mbedtls_sha512_starts_ret+0xe8>)
   de6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6e0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
   de6e4:	a326      	add	r3, pc, #152	; (adr r3, de780 <mbedtls_sha512_starts_ret+0xf0>)
   de6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6ea:	e025      	b.n	de738 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
   de6ec:	a326      	add	r3, pc, #152	; (adr r3, de788 <mbedtls_sha512_starts_ret+0xf8>)
   de6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
   de6f6:	a326      	add	r3, pc, #152	; (adr r3, de790 <mbedtls_sha512_starts_ret+0x100>)
   de6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6fc:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
   de700:	a325      	add	r3, pc, #148	; (adr r3, de798 <mbedtls_sha512_starts_ret+0x108>)
   de702:	e9d3 2300 	ldrd	r2, r3, [r3]
   de706:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
   de70a:	a325      	add	r3, pc, #148	; (adr r3, de7a0 <mbedtls_sha512_starts_ret+0x110>)
   de70c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de710:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
   de714:	a324      	add	r3, pc, #144	; (adr r3, de7a8 <mbedtls_sha512_starts_ret+0x118>)
   de716:	e9d3 2300 	ldrd	r2, r3, [r3]
   de71a:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
   de71e:	a324      	add	r3, pc, #144	; (adr r3, de7b0 <mbedtls_sha512_starts_ret+0x120>)
   de720:	e9d3 2300 	ldrd	r2, r3, [r3]
   de724:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
   de728:	a323      	add	r3, pc, #140	; (adr r3, de7b8 <mbedtls_sha512_starts_ret+0x128>)
   de72a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de72e:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   de732:	a323      	add	r3, pc, #140	; (adr r3, de7c0 <mbedtls_sha512_starts_ret+0x130>)
   de734:	e9d3 2300 	ldrd	r2, r3, [r3]
   de738:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
   de73c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
   de740:	2000      	movs	r0, #0
   de742:	4770      	bx	lr
   de744:	f3af 8000 	nop.w
   de748:	f3bcc908 	.word	0xf3bcc908
   de74c:	6a09e667 	.word	0x6a09e667
   de750:	84caa73b 	.word	0x84caa73b
   de754:	bb67ae85 	.word	0xbb67ae85
   de758:	fe94f82b 	.word	0xfe94f82b
   de75c:	3c6ef372 	.word	0x3c6ef372
   de760:	5f1d36f1 	.word	0x5f1d36f1
   de764:	a54ff53a 	.word	0xa54ff53a
   de768:	ade682d1 	.word	0xade682d1
   de76c:	510e527f 	.word	0x510e527f
   de770:	2b3e6c1f 	.word	0x2b3e6c1f
   de774:	9b05688c 	.word	0x9b05688c
   de778:	fb41bd6b 	.word	0xfb41bd6b
   de77c:	1f83d9ab 	.word	0x1f83d9ab
   de780:	137e2179 	.word	0x137e2179
   de784:	5be0cd19 	.word	0x5be0cd19
   de788:	c1059ed8 	.word	0xc1059ed8
   de78c:	cbbb9d5d 	.word	0xcbbb9d5d
   de790:	367cd507 	.word	0x367cd507
   de794:	629a292a 	.word	0x629a292a
   de798:	3070dd17 	.word	0x3070dd17
   de79c:	9159015a 	.word	0x9159015a
   de7a0:	f70e5939 	.word	0xf70e5939
   de7a4:	152fecd8 	.word	0x152fecd8
   de7a8:	ffc00b31 	.word	0xffc00b31
   de7ac:	67332667 	.word	0x67332667
   de7b0:	68581511 	.word	0x68581511
   de7b4:	8eb44a87 	.word	0x8eb44a87
   de7b8:	64f98fa7 	.word	0x64f98fa7
   de7bc:	db0c2e0d 	.word	0xdb0c2e0d
   de7c0:	befa4fa4 	.word	0xbefa4fa4
   de7c4:	47b5481d 	.word	0x47b5481d

000de7c8 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
   de7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de7cc:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
   de7d0:	4686      	mov	lr, r0
   de7d2:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
   de7d6:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   de7d8:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
   de7dc:	f04f 0a00 	mov.w	sl, #0
   de7e0:	7866      	ldrb	r6, [r4, #1]
   de7e2:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
   de7e6:	f8cd a020 	str.w	sl, [sp, #32]
   de7ea:	0436      	lsls	r6, r6, #16
   de7ec:	9609      	str	r6, [sp, #36]	; 0x24
   de7ee:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   de7f2:	ea4f 6b02 	mov.w	fp, r2, lsl #24
   de7f6:	2300      	movs	r3, #0
   de7f8:	ea43 030b 	orr.w	r3, r3, fp
   de7fc:	431e      	orrs	r6, r3
   de7fe:	4633      	mov	r3, r6
   de800:	79e2      	ldrb	r2, [r4, #7]
   de802:	78a6      	ldrb	r6, [r4, #2]
   de804:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   de808:	ea42 020a 	orr.w	r2, r2, sl
   de80c:	0236      	lsls	r6, r6, #8
   de80e:	4315      	orrs	r5, r2
   de810:	960b      	str	r6, [sp, #44]	; 0x2c
   de812:	462a      	mov	r2, r5
   de814:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
   de818:	431e      	orrs	r6, r3
   de81a:	4633      	mov	r3, r6
   de81c:	78e6      	ldrb	r6, [r4, #3]
   de81e:	960d      	str	r6, [sp, #52]	; 0x34
   de820:	4315      	orrs	r5, r2
   de822:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   de826:	462a      	mov	r2, r5
   de828:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   de82c:	431e      	orrs	r6, r3
   de82e:	4633      	mov	r3, r6
   de830:	7926      	ldrb	r6, [r4, #4]
   de832:	f8cd a014 	str.w	sl, [sp, #20]
   de836:	4315      	orrs	r5, r2
   de838:	462a      	mov	r2, r5
   de83a:	0635      	lsls	r5, r6, #24
   de83c:	9504      	str	r5, [sp, #16]
   de83e:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
   de842:	431e      	orrs	r6, r3
   de844:	4633      	mov	r3, r6
   de846:	7966      	ldrb	r6, [r4, #5]
   de848:	f8cd a01c 	str.w	sl, [sp, #28]
   de84c:	4315      	orrs	r5, r2
   de84e:	462a      	mov	r2, r5
   de850:	0435      	lsls	r5, r6, #16
   de852:	9506      	str	r5, [sp, #24]
   de854:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
   de858:	431e      	orrs	r6, r3
   de85a:	4633      	mov	r3, r6
   de85c:	79a6      	ldrb	r6, [r4, #6]
   de85e:	4315      	orrs	r5, r2
   de860:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
   de864:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   de866:	ea45 0208 	orr.w	r2, r5, r8
   de86a:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
   de86e:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   de870:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
   de874:	d1b0      	bne.n	de7d8 <mbedtls_internal_sha512_process+0x10>
   de876:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
   de878:	6f0a      	ldr	r2, [r1, #112]	; 0x70
   de87a:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
   de87c:	f8d1 8008 	ldr.w	r8, [r1, #8]
   de880:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   de884:	0cd4      	lsrs	r4, r2, #19
   de886:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
   de88a:	940e      	str	r4, [sp, #56]	; 0x38
   de88c:	0cdc      	lsrs	r4, r3, #19
   de88e:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
   de892:	940f      	str	r4, [sp, #60]	; 0x3c
   de894:	00dc      	lsls	r4, r3, #3
   de896:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
   de89a:	9411      	str	r4, [sp, #68]	; 0x44
   de89c:	00d4      	lsls	r4, r2, #3
   de89e:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
   de8a2:	9410      	str	r4, [sp, #64]	; 0x40
   de8a4:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   de8a8:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   de8ac:	0992      	lsrs	r2, r2, #6
   de8ae:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
   de8b2:	099b      	lsrs	r3, r3, #6
   de8b4:	9200      	str	r2, [sp, #0]
   de8b6:	9301      	str	r3, [sp, #4]
   de8b8:	4066      	eors	r6, r4
   de8ba:	e9dd 3400 	ldrd	r3, r4, [sp]
   de8be:	406f      	eors	r7, r5
   de8c0:	4073      	eors	r3, r6
   de8c2:	407c      	eors	r4, r7
   de8c4:	461e      	mov	r6, r3
   de8c6:	4627      	mov	r7, r4
   de8c8:	e9d1 2300 	ldrd	r2, r3, [r1]
   de8cc:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
   de8d0:	1912      	adds	r2, r2, r4
   de8d2:	416b      	adcs	r3, r5
   de8d4:	18b4      	adds	r4, r6, r2
   de8d6:	eb47 0503 	adc.w	r5, r7, r3
   de8da:	ea4f 0358 	mov.w	r3, r8, lsr #1
   de8de:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   de8e2:	9312      	str	r3, [sp, #72]	; 0x48
   de8e4:	ea4f 035c 	mov.w	r3, ip, lsr #1
   de8e8:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
   de8ec:	9313      	str	r3, [sp, #76]	; 0x4c
   de8ee:	ea4f 2318 	mov.w	r3, r8, lsr #8
   de8f2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   de8f6:	9314      	str	r3, [sp, #80]	; 0x50
   de8f8:	ea4f 231c 	mov.w	r3, ip, lsr #8
   de8fc:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   de900:	9315      	str	r3, [sp, #84]	; 0x54
   de902:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   de906:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   de90a:	4072      	eors	r2, r6
   de90c:	ea4f 16d8 	mov.w	r6, r8, lsr #7
   de910:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
   de914:	9602      	str	r6, [sp, #8]
   de916:	ea4f 16dc 	mov.w	r6, ip, lsr #7
   de91a:	9603      	str	r6, [sp, #12]
   de91c:	407b      	eors	r3, r7
   de91e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   de922:	4056      	eors	r6, r2
   de924:	1932      	adds	r2, r6, r4
   de926:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   de92a:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
   de92e:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   de932:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
   de934:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
   de938:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   de93c:	d19c      	bne.n	de878 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   de93e:	e9de 3404 	ldrd	r3, r4, [lr, #16]
   de942:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
   de946:	e9de 3406 	ldrd	r3, r4, [lr, #24]
   de94a:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
   de94e:	e9de 3408 	ldrd	r3, r4, [lr, #32]
   de952:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
   de956:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
   de95a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
   de95e:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
   de962:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
   de966:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
   de96a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
   de96e:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
   de972:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
   de976:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
   de97a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   de97e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   de982:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
   de986:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   de98a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
   de98e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   de992:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
   de996:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   de99a:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
   de99e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   de9a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   de9a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   de9aa:	4b05      	ldr	r3, [pc, #20]	; (de9c0 <mbedtls_internal_sha512_process+0x1f8>)
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
   de9ac:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
   de9b0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   de9b4:	e9cd 0100 	strd	r0, r1, [sp]
   de9b8:	aa80      	add	r2, sp, #512	; 0x200
   de9ba:	f503 7c20 	add.w	ip, r3, #640	; 0x280
   de9be:	e001      	b.n	de9c4 <mbedtls_internal_sha512_process+0x1fc>
   de9c0:	000e88a0 	.word	0x000e88a0
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   de9c4:	9904      	ldr	r1, [sp, #16]
   de9c6:	9805      	ldr	r0, [sp, #20]
   de9c8:	0b89      	lsrs	r1, r1, #14
   de9ca:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   de9ce:	911e      	str	r1, [sp, #120]	; 0x78
   de9d0:	0b81      	lsrs	r1, r0, #14
   de9d2:	9804      	ldr	r0, [sp, #16]
   de9d4:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   de9d8:	911f      	str	r1, [sp, #124]	; 0x7c
   de9da:	0c81      	lsrs	r1, r0, #18
   de9dc:	9805      	ldr	r0, [sp, #20]
   de9de:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   de9e2:	9120      	str	r1, [sp, #128]	; 0x80
   de9e4:	0c81      	lsrs	r1, r0, #18
   de9e6:	9804      	ldr	r0, [sp, #16]
   de9e8:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   de9ec:	9121      	str	r1, [sp, #132]	; 0x84
   de9ee:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   de9f2:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
   de9f6:	404f      	eors	r7, r1
   de9f8:	9905      	ldr	r1, [sp, #20]
   de9fa:	4046      	eors	r6, r0
   de9fc:	9804      	ldr	r0, [sp, #16]
   de9fe:	05c9      	lsls	r1, r1, #23
   dea00:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
   dea04:	9123      	str	r1, [sp, #140]	; 0x8c
   dea06:	05c1      	lsls	r1, r0, #23
   dea08:	9805      	ldr	r0, [sp, #20]
   dea0a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
   dea0e:	9122      	str	r1, [sp, #136]	; 0x88
   dea10:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
   dea14:	4070      	eors	r0, r6
   dea16:	4079      	eors	r1, r7
   dea18:	e953 4502 	ldrd	r4, r5, [r3, #-8]
   dea1c:	4606      	mov	r6, r0
   dea1e:	460f      	mov	r7, r1
   dea20:	e952 0102 	ldrd	r0, r1, [r2, #-8]
   dea24:	1900      	adds	r0, r0, r4
   dea26:	4169      	adcs	r1, r5
   dea28:	1836      	adds	r6, r6, r0
   dea2a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   dea2e:	414f      	adcs	r7, r1
   dea30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dea34:	4060      	eors	r0, r4
   dea36:	4069      	eors	r1, r5
   dea38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   dea3c:	4004      	ands	r4, r0
   dea3e:	400d      	ands	r5, r1
   dea40:	4620      	mov	r0, r4
   dea42:	4629      	mov	r1, r5
   dea44:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   dea48:	4044      	eors	r4, r0
   dea4a:	404d      	eors	r5, r1
   dea4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dea50:	1936      	adds	r6, r6, r4
   dea52:	416f      	adcs	r7, r5
   dea54:	1980      	adds	r0, r0, r6
   dea56:	4179      	adcs	r1, r7
   dea58:	eb18 0800 	adds.w	r8, r8, r0
   dea5c:	eb49 0901 	adc.w	r9, r9, r1
   dea60:	460f      	mov	r7, r1
   dea62:	9900      	ldr	r1, [sp, #0]
   dea64:	4606      	mov	r6, r0
   dea66:	9801      	ldr	r0, [sp, #4]
   dea68:	0f09      	lsrs	r1, r1, #28
   dea6a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   dea6e:	9124      	str	r1, [sp, #144]	; 0x90
   dea70:	0f01      	lsrs	r1, r0, #28
   dea72:	9800      	ldr	r0, [sp, #0]
   dea74:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   dea78:	9125      	str	r1, [sp, #148]	; 0x94
   dea7a:	9901      	ldr	r1, [sp, #4]
   dea7c:	0789      	lsls	r1, r1, #30
   dea7e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   dea82:	9127      	str	r1, [sp, #156]	; 0x9c
   dea84:	0781      	lsls	r1, r0, #30
   dea86:	9801      	ldr	r0, [sp, #4]
   dea88:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   dea8c:	9126      	str	r1, [sp, #152]	; 0x98
   dea8e:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
   dea92:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
   dea96:	404d      	eors	r5, r1
   dea98:	9901      	ldr	r1, [sp, #4]
   dea9a:	4044      	eors	r4, r0
   dea9c:	9800      	ldr	r0, [sp, #0]
   dea9e:	0649      	lsls	r1, r1, #25
   deaa0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   deaa4:	9129      	str	r1, [sp, #164]	; 0xa4
   deaa6:	0641      	lsls	r1, r0, #25
   deaa8:	9801      	ldr	r0, [sp, #4]
   deaaa:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   deaae:	9128      	str	r1, [sp, #160]	; 0xa0
   deab0:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   deab4:	4060      	eors	r0, r4
   deab6:	4069      	eors	r1, r5
   deab8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   deabc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   deac0:	e9dd 0100 	ldrd	r0, r1, [sp]
   deac4:	4320      	orrs	r0, r4
   deac6:	4329      	orrs	r1, r5
   deac8:	ea00 040a 	and.w	r4, r0, sl
   deacc:	ea01 050b 	and.w	r5, r1, fp
   dead0:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
   dead4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   dead8:	e9dd 4500 	ldrd	r4, r5, [sp]
   deadc:	4004      	ands	r4, r0
   deade:	400d      	ands	r5, r1
   deae0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
   deae4:	4320      	orrs	r0, r4
   deae6:	4329      	orrs	r1, r5
   deae8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   deaec:	1824      	adds	r4, r4, r0
   deaee:	414d      	adcs	r5, r1
   deaf0:	19a4      	adds	r4, r4, r6
   deaf2:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   deaf4:	e9d2 0100 	ldrd	r0, r1, [r2]
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   deaf8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   deafc:	e9d3 4500 	ldrd	r4, r5, [r3]
   deb00:	1900      	adds	r0, r0, r4
   deb02:	4169      	adcs	r1, r5
   deb04:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   deb08:	1824      	adds	r4, r4, r0
   deb0a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   deb0e:	414d      	adcs	r5, r1
   deb10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   deb14:	4070      	eors	r0, r6
   deb16:	ea00 0008 	and.w	r0, r0, r8
   deb1a:	4046      	eors	r6, r0
   deb1c:	19a0      	adds	r0, r4, r6
   deb1e:	ea4f 3498 	mov.w	r4, r8, lsr #14
   deb22:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
   deb26:	942a      	str	r4, [sp, #168]	; 0xa8
   deb28:	ea4f 3499 	mov.w	r4, r9, lsr #14
   deb2c:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
   deb30:	942b      	str	r4, [sp, #172]	; 0xac
   deb32:	ea4f 4498 	mov.w	r4, r8, lsr #18
   deb36:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
   deb3a:	942c      	str	r4, [sp, #176]	; 0xb0
   deb3c:	ea81 0107 	eor.w	r1, r1, r7
   deb40:	ea4f 4499 	mov.w	r4, r9, lsr #18
   deb44:	ea01 0109 	and.w	r1, r1, r9
   deb48:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
   deb4c:	942d      	str	r4, [sp, #180]	; 0xb4
   deb4e:	ea87 0701 	eor.w	r7, r7, r1
   deb52:	eb45 0107 	adc.w	r1, r5, r7
   deb56:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
   deb5a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
   deb5e:	4074      	eors	r4, r6
   deb60:	ea4f 56c9 	mov.w	r6, r9, lsl #23
   deb64:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
   deb68:	962f      	str	r6, [sp, #188]	; 0xbc
   deb6a:	ea4f 56c8 	mov.w	r6, r8, lsl #23
   deb6e:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
   deb72:	962e      	str	r6, [sp, #184]	; 0xb8
   deb74:	407d      	eors	r5, r7
   deb76:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
   deb7a:	4066      	eors	r6, r4
   deb7c:	1986      	adds	r6, r0, r6
   deb7e:	ea87 0705 	eor.w	r7, r7, r5
   deb82:	eb41 0707 	adc.w	r7, r1, r7
   deb86:	eb1a 0006 	adds.w	r0, sl, r6
   deb8a:	eb4b 0107 	adc.w	r1, fp, r7
   deb8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   deb92:	990a      	ldr	r1, [sp, #40]	; 0x28
   deb94:	980b      	ldr	r0, [sp, #44]	; 0x2c
   deb96:	0f09      	lsrs	r1, r1, #28
   deb98:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   deb9c:	9130      	str	r1, [sp, #192]	; 0xc0
   deb9e:	0f01      	lsrs	r1, r0, #28
   deba0:	980a      	ldr	r0, [sp, #40]	; 0x28
   deba2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   deba6:	9131      	str	r1, [sp, #196]	; 0xc4
   deba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   debaa:	0789      	lsls	r1, r1, #30
   debac:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   debb0:	9133      	str	r1, [sp, #204]	; 0xcc
   debb2:	0781      	lsls	r1, r0, #30
   debb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   debb6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   debba:	9132      	str	r1, [sp, #200]	; 0xc8
   debbc:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
   debc0:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
   debc4:	404d      	eors	r5, r1
   debc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   debc8:	4044      	eors	r4, r0
   debca:	980a      	ldr	r0, [sp, #40]	; 0x28
   debcc:	0649      	lsls	r1, r1, #25
   debce:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   debd2:	9135      	str	r1, [sp, #212]	; 0xd4
   debd4:	0641      	lsls	r1, r0, #25
   debd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   debd8:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   debdc:	9134      	str	r1, [sp, #208]	; 0xd0
   debde:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
   debe2:	4060      	eors	r0, r4
   debe4:	4069      	eors	r1, r5
   debe6:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   debea:	4604      	mov	r4, r0
   debec:	460d      	mov	r5, r1
   debee:	e9dd 0100 	ldrd	r0, r1, [sp]
   debf2:	ea40 000a 	orr.w	r0, r0, sl
   debf6:	ea41 010b 	orr.w	r1, r1, fp
   debfa:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   debfe:	ea0a 0a00 	and.w	sl, sl, r0
   dec02:	ea0b 0b01 	and.w	fp, fp, r1
   dec06:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
   dec0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dec0e:	e9dd ab00 	ldrd	sl, fp, [sp]
   dec12:	ea0a 0a00 	and.w	sl, sl, r0
   dec16:	ea0b 0b01 	and.w	fp, fp, r1
   dec1a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
   dec1e:	ea40 000a 	orr.w	r0, r0, sl
   dec22:	1900      	adds	r0, r0, r4
   dec24:	ea41 010b 	orr.w	r1, r1, fp
   dec28:	4169      	adcs	r1, r5
   dec2a:	eb10 0a06 	adds.w	sl, r0, r6
   dec2e:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   dec32:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   dec36:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   dec3a:	1900      	adds	r0, r0, r4
   dec3c:	4169      	adcs	r1, r5
   dec3e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   dec42:	1824      	adds	r4, r4, r0
   dec44:	414d      	adcs	r5, r1
   dec46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dec4a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   dec4e:	ea80 0008 	eor.w	r0, r0, r8
   dec52:	ea81 0109 	eor.w	r1, r1, r9
   dec56:	4006      	ands	r6, r0
   dec58:	400f      	ands	r7, r1
   dec5a:	4630      	mov	r0, r6
   dec5c:	4639      	mov	r1, r7
   dec5e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   dec62:	4046      	eors	r6, r0
   dec64:	19a0      	adds	r0, r4, r6
   dec66:	ea87 0701 	eor.w	r7, r7, r1
   dec6a:	9c08      	ldr	r4, [sp, #32]
   dec6c:	eb45 0107 	adc.w	r1, r5, r7
   dec70:	9d09      	ldr	r5, [sp, #36]	; 0x24
   dec72:	0ba4      	lsrs	r4, r4, #14
   dec74:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   dec78:	9436      	str	r4, [sp, #216]	; 0xd8
   dec7a:	0bac      	lsrs	r4, r5, #14
   dec7c:	9d08      	ldr	r5, [sp, #32]
   dec7e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   dec82:	9437      	str	r4, [sp, #220]	; 0xdc
   dec84:	0cac      	lsrs	r4, r5, #18
   dec86:	9d09      	ldr	r5, [sp, #36]	; 0x24
   dec88:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   dec8c:	9438      	str	r4, [sp, #224]	; 0xe0
   dec8e:	0cac      	lsrs	r4, r5, #18
   dec90:	9d08      	ldr	r5, [sp, #32]
   dec92:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   dec96:	9439      	str	r4, [sp, #228]	; 0xe4
   dec98:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
   dec9c:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
   deca0:	4074      	eors	r4, r6
   deca2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   deca4:	407d      	eors	r5, r7
   deca6:	9f08      	ldr	r7, [sp, #32]
   deca8:	05f6      	lsls	r6, r6, #23
   decaa:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   decae:	963b      	str	r6, [sp, #236]	; 0xec
   decb0:	05fe      	lsls	r6, r7, #23
   decb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   decb4:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   decb8:	963a      	str	r6, [sp, #232]	; 0xe8
   decba:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
   decbe:	4066      	eors	r6, r4
   decc0:	1986      	adds	r6, r0, r6
   decc2:	ea87 0705 	eor.w	r7, r7, r5
   decc6:	eb41 0707 	adc.w	r7, r1, r7
   decca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   decce:	1980      	adds	r0, r0, r6
   decd0:	4179      	adcs	r1, r7
   decd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   decd6:	ea4f 711a 	mov.w	r1, sl, lsr #28
   decda:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
   decde:	913c      	str	r1, [sp, #240]	; 0xf0
   dece0:	ea4f 711b 	mov.w	r1, fp, lsr #28
   dece4:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
   dece8:	913d      	str	r1, [sp, #244]	; 0xf4
   decea:	ea4f 718b 	mov.w	r1, fp, lsl #30
   decee:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
   decf2:	913f      	str	r1, [sp, #252]	; 0xfc
   decf4:	ea4f 718a 	mov.w	r1, sl, lsl #30
   decf8:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
   decfc:	913e      	str	r1, [sp, #248]	; 0xf8
   decfe:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
   ded02:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
   ded06:	404d      	eors	r5, r1
   ded08:	ea4f 614b 	mov.w	r1, fp, lsl #25
   ded0c:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
   ded10:	9141      	str	r1, [sp, #260]	; 0x104
   ded12:	ea4f 614a 	mov.w	r1, sl, lsl #25
   ded16:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
   ded1a:	9140      	str	r1, [sp, #256]	; 0x100
   ded1c:	a940      	add	r1, sp, #256	; 0x100
   ded1e:	4044      	eors	r4, r0
   ded20:	e9d1 0100 	ldrd	r0, r1, [r1]
   ded24:	4060      	eors	r0, r4
   ded26:	4069      	eors	r1, r5
   ded28:	e9cd 0102 	strd	r0, r1, [sp, #8]
   ded2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   ded30:	e9dd 4500 	ldrd	r4, r5, [sp]
   ded34:	ea40 000a 	orr.w	r0, r0, sl
   ded38:	ea41 010b 	orr.w	r1, r1, fp
   ded3c:	4004      	ands	r4, r0
   ded3e:	400d      	ands	r5, r1
   ded40:	4620      	mov	r0, r4
   ded42:	4629      	mov	r1, r5
   ded44:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   ded48:	ea04 040a 	and.w	r4, r4, sl
   ded4c:	ea05 050b 	and.w	r5, r5, fp
   ded50:	4304      	orrs	r4, r0
   ded52:	430d      	orrs	r5, r1
   ded54:	4620      	mov	r0, r4
   ded56:	4629      	mov	r1, r5
   ded58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   ded5c:	1824      	adds	r4, r4, r0
   ded5e:	414d      	adcs	r5, r1
   ded60:	19a4      	adds	r4, r4, r6
   ded62:	417d      	adcs	r5, r7
   ded64:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   ded68:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   ded6c:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   ded70:	1900      	adds	r0, r0, r4
   ded72:	4169      	adcs	r1, r5
   ded74:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   ded78:	1824      	adds	r4, r4, r0
   ded7a:	414d      	adcs	r5, r1
   ded7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ded80:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   ded84:	ea80 0008 	eor.w	r0, r0, r8
   ded88:	ea81 0109 	eor.w	r1, r1, r9
   ded8c:	4006      	ands	r6, r0
   ded8e:	ea86 0608 	eor.w	r6, r6, r8
   ded92:	400f      	ands	r7, r1
   ded94:	19a0      	adds	r0, r4, r6
   ded96:	ea87 0709 	eor.w	r7, r7, r9
   ded9a:	9c06      	ldr	r4, [sp, #24]
   ded9c:	eb45 0107 	adc.w	r1, r5, r7
   deda0:	9d07      	ldr	r5, [sp, #28]
   deda2:	0ba4      	lsrs	r4, r4, #14
   deda4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   deda8:	9442      	str	r4, [sp, #264]	; 0x108
   dedaa:	0bac      	lsrs	r4, r5, #14
   dedac:	9d06      	ldr	r5, [sp, #24]
   dedae:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   dedb2:	9443      	str	r4, [sp, #268]	; 0x10c
   dedb4:	0cac      	lsrs	r4, r5, #18
   dedb6:	9d07      	ldr	r5, [sp, #28]
   dedb8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   dedbc:	9444      	str	r4, [sp, #272]	; 0x110
   dedbe:	0cac      	lsrs	r4, r5, #18
   dedc0:	9d06      	ldr	r5, [sp, #24]
   dedc2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   dedc6:	9445      	str	r4, [sp, #276]	; 0x114
   dedc8:	ae44      	add	r6, sp, #272	; 0x110
   dedca:	ac42      	add	r4, sp, #264	; 0x108
   dedcc:	e9d6 6700 	ldrd	r6, r7, [r6]
   dedd0:	e9d4 4500 	ldrd	r4, r5, [r4]
   dedd4:	4074      	eors	r4, r6
   dedd6:	9e07      	ldr	r6, [sp, #28]
   dedd8:	407d      	eors	r5, r7
   dedda:	9f06      	ldr	r7, [sp, #24]
   deddc:	05f6      	lsls	r6, r6, #23
   dedde:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   dede2:	9647      	str	r6, [sp, #284]	; 0x11c
   dede4:	05fe      	lsls	r6, r7, #23
   dede6:	9f07      	ldr	r7, [sp, #28]
   dede8:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   dedec:	9646      	str	r6, [sp, #280]	; 0x118
   dedee:	ae46      	add	r6, sp, #280	; 0x118
   dedf0:	e9d6 6700 	ldrd	r6, r7, [r6]
   dedf4:	4066      	eors	r6, r4
   dedf6:	1986      	adds	r6, r0, r6
   dedf8:	ea87 0705 	eor.w	r7, r7, r5
   dedfc:	eb41 0707 	adc.w	r7, r1, r7
   dee00:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
   dee04:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
   dee08:	e9dd 6700 	ldrd	r6, r7, [sp]
   dee0c:	1836      	adds	r6, r6, r0
   dee0e:	414f      	adcs	r7, r1
   dee10:	9902      	ldr	r1, [sp, #8]
   dee12:	9803      	ldr	r0, [sp, #12]
   dee14:	0f09      	lsrs	r1, r1, #28
   dee16:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   dee1a:	9148      	str	r1, [sp, #288]	; 0x120
   dee1c:	0f01      	lsrs	r1, r0, #28
   dee1e:	9802      	ldr	r0, [sp, #8]
   dee20:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   dee24:	9149      	str	r1, [sp, #292]	; 0x124
   dee26:	9903      	ldr	r1, [sp, #12]
   dee28:	0789      	lsls	r1, r1, #30
   dee2a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   dee2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   dee32:	914b      	str	r1, [sp, #300]	; 0x12c
   dee34:	0781      	lsls	r1, r0, #30
   dee36:	9803      	ldr	r0, [sp, #12]
   dee38:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   dee3c:	914a      	str	r1, [sp, #296]	; 0x128
   dee3e:	a948      	add	r1, sp, #288	; 0x120
   dee40:	e9d1 4500 	ldrd	r4, r5, [r1]
   dee44:	a94a      	add	r1, sp, #296	; 0x128
   dee46:	e9d1 0100 	ldrd	r0, r1, [r1]
   dee4a:	404d      	eors	r5, r1
   dee4c:	9903      	ldr	r1, [sp, #12]
   dee4e:	4044      	eors	r4, r0
   dee50:	9802      	ldr	r0, [sp, #8]
   dee52:	0649      	lsls	r1, r1, #25
   dee54:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   dee58:	914d      	str	r1, [sp, #308]	; 0x134
   dee5a:	0641      	lsls	r1, r0, #25
   dee5c:	9803      	ldr	r0, [sp, #12]
   dee5e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   dee62:	914c      	str	r1, [sp, #304]	; 0x130
   dee64:	a94c      	add	r1, sp, #304	; 0x130
   dee66:	e9d1 0100 	ldrd	r0, r1, [r1]
   dee6a:	4060      	eors	r0, r4
   dee6c:	4069      	eors	r1, r5
   dee6e:	4604      	mov	r4, r0
   dee70:	460d      	mov	r5, r1
   dee72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   dee76:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   dee7a:	ea40 000a 	orr.w	r0, r0, sl
   dee7e:	ea41 010b 	orr.w	r1, r1, fp
   dee82:	4006      	ands	r6, r0
   dee84:	400f      	ands	r7, r1
   dee86:	4630      	mov	r0, r6
   dee88:	4639      	mov	r1, r7
   dee8a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   dee8e:	ea06 060a 	and.w	r6, r6, sl
   dee92:	ea07 070b 	and.w	r7, r7, fp
   dee96:	4306      	orrs	r6, r0
   dee98:	1930      	adds	r0, r6, r4
   dee9a:	ea47 0701 	orr.w	r7, r7, r1
   dee9e:	eb47 0105 	adc.w	r1, r7, r5
   deea2:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
   deea6:	1824      	adds	r4, r4, r0
   deea8:	414d      	adcs	r5, r1
   deeaa:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   deeae:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
   deeb2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   deeb6:	1900      	adds	r0, r0, r4
   deeb8:	4169      	adcs	r1, r5
   deeba:	eb10 0008 	adds.w	r0, r0, r8
   deebe:	eb41 0109 	adc.w	r1, r1, r9
   deec2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   deec6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   deeca:	ea88 0804 	eor.w	r8, r8, r4
   deece:	ea89 0905 	eor.w	r9, r9, r5
   deed2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   deed6:	ea04 0408 	and.w	r4, r4, r8
   deeda:	ea05 0509 	and.w	r5, r5, r9
   deede:	46a0      	mov	r8, r4
   deee0:	46a9      	mov	r9, r5
   deee2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   deee6:	ea84 0408 	eor.w	r4, r4, r8
   deeea:	eb10 0804 	adds.w	r8, r0, r4
   deeee:	ea85 0509 	eor.w	r5, r5, r9
   deef2:	eb41 0905 	adc.w	r9, r1, r5
   deef6:	9904      	ldr	r1, [sp, #16]
   deef8:	9805      	ldr	r0, [sp, #20]
   deefa:	0b89      	lsrs	r1, r1, #14
   deefc:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   def00:	914e      	str	r1, [sp, #312]	; 0x138
   def02:	0b81      	lsrs	r1, r0, #14
   def04:	9804      	ldr	r0, [sp, #16]
   def06:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   def0a:	914f      	str	r1, [sp, #316]	; 0x13c
   def0c:	0c81      	lsrs	r1, r0, #18
   def0e:	9805      	ldr	r0, [sp, #20]
   def10:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   def14:	9150      	str	r1, [sp, #320]	; 0x140
   def16:	0c81      	lsrs	r1, r0, #18
   def18:	9804      	ldr	r0, [sp, #16]
   def1a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   def1e:	9151      	str	r1, [sp, #324]	; 0x144
   def20:	ac50      	add	r4, sp, #320	; 0x140
   def22:	a94e      	add	r1, sp, #312	; 0x138
   def24:	e9d4 4500 	ldrd	r4, r5, [r4]
   def28:	e9d1 0100 	ldrd	r0, r1, [r1]
   def2c:	4060      	eors	r0, r4
   def2e:	9c05      	ldr	r4, [sp, #20]
   def30:	4069      	eors	r1, r5
   def32:	9d04      	ldr	r5, [sp, #16]
   def34:	05e4      	lsls	r4, r4, #23
   def36:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
   def3a:	9453      	str	r4, [sp, #332]	; 0x14c
   def3c:	05ec      	lsls	r4, r5, #23
   def3e:	9d05      	ldr	r5, [sp, #20]
   def40:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
   def44:	9452      	str	r4, [sp, #328]	; 0x148
   def46:	ac52      	add	r4, sp, #328	; 0x148
   def48:	e9d4 4500 	ldrd	r4, r5, [r4]
   def4c:	4044      	eors	r4, r0
   def4e:	404d      	eors	r5, r1
   def50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   def54:	eb18 0804 	adds.w	r8, r8, r4
   def58:	eb49 0905 	adc.w	r9, r9, r5
   def5c:	eb10 0008 	adds.w	r0, r0, r8
   def60:	eb41 0109 	adc.w	r1, r1, r9
   def64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   def68:	9900      	ldr	r1, [sp, #0]
   def6a:	9801      	ldr	r0, [sp, #4]
   def6c:	0f09      	lsrs	r1, r1, #28
   def6e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   def72:	9154      	str	r1, [sp, #336]	; 0x150
   def74:	0f01      	lsrs	r1, r0, #28
   def76:	9800      	ldr	r0, [sp, #0]
   def78:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   def7c:	9155      	str	r1, [sp, #340]	; 0x154
   def7e:	9901      	ldr	r1, [sp, #4]
   def80:	0789      	lsls	r1, r1, #30
   def82:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   def86:	9157      	str	r1, [sp, #348]	; 0x15c
   def88:	0781      	lsls	r1, r0, #30
   def8a:	9801      	ldr	r0, [sp, #4]
   def8c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   def90:	9156      	str	r1, [sp, #344]	; 0x158
   def92:	a954      	add	r1, sp, #336	; 0x150
   def94:	e9d1 4500 	ldrd	r4, r5, [r1]
   def98:	a956      	add	r1, sp, #344	; 0x158
   def9a:	e9d1 0100 	ldrd	r0, r1, [r1]
   def9e:	404d      	eors	r5, r1
   defa0:	9901      	ldr	r1, [sp, #4]
   defa2:	4044      	eors	r4, r0
   defa4:	9800      	ldr	r0, [sp, #0]
   defa6:	0649      	lsls	r1, r1, #25
   defa8:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   defac:	9159      	str	r1, [sp, #356]	; 0x164
   defae:	0641      	lsls	r1, r0, #25
   defb0:	9801      	ldr	r0, [sp, #4]
   defb2:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   defb6:	9158      	str	r1, [sp, #352]	; 0x160
   defb8:	a958      	add	r1, sp, #352	; 0x160
   defba:	e9d1 0100 	ldrd	r0, r1, [r1]
   defbe:	4060      	eors	r0, r4
   defc0:	4069      	eors	r1, r5
   defc2:	e9dd 6700 	ldrd	r6, r7, [sp]
   defc6:	4604      	mov	r4, r0
   defc8:	460d      	mov	r5, r1
   defca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   defce:	4330      	orrs	r0, r6
   defd0:	4339      	orrs	r1, r7
   defd2:	ea00 060a 	and.w	r6, r0, sl
   defd6:	ea01 070b 	and.w	r7, r1, fp
   defda:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
   defde:	e9dd 0100 	ldrd	r0, r1, [sp]
   defe2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   defe6:	4006      	ands	r6, r0
   defe8:	400f      	ands	r7, r1
   defea:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
   defee:	4330      	orrs	r0, r6
   deff0:	1900      	adds	r0, r0, r4
   deff2:	ea41 0107 	orr.w	r1, r1, r7
   deff6:	4169      	adcs	r1, r5
   deff8:	eb18 0800 	adds.w	r8, r8, r0
   deffc:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   df000:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
   df004:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
   df008:	1900      	adds	r0, r0, r4
   df00a:	4169      	adcs	r1, r5
   df00c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   df010:	1824      	adds	r4, r4, r0
   df012:	414d      	adcs	r5, r1
   df014:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   df018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df01c:	4046      	eors	r6, r0
   df01e:	404f      	eors	r7, r1
   df020:	4630      	mov	r0, r6
   df022:	4639      	mov	r1, r7
   df024:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   df028:	4006      	ands	r6, r0
   df02a:	400f      	ands	r7, r1
   df02c:	4630      	mov	r0, r6
   df02e:	4639      	mov	r1, r7
   df030:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   df034:	4046      	eors	r6, r0
   df036:	1930      	adds	r0, r6, r4
   df038:	ea87 0701 	eor.w	r7, r7, r1
   df03c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   df03e:	eb47 0105 	adc.w	r1, r7, r5
   df042:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   df044:	0ba4      	lsrs	r4, r4, #14
   df046:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   df04a:	945a      	str	r4, [sp, #360]	; 0x168
   df04c:	0bac      	lsrs	r4, r5, #14
   df04e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   df050:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   df054:	945b      	str	r4, [sp, #364]	; 0x16c
   df056:	0cac      	lsrs	r4, r5, #18
   df058:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   df05a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   df05e:	945c      	str	r4, [sp, #368]	; 0x170
   df060:	0cac      	lsrs	r4, r5, #18
   df062:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   df064:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   df068:	945d      	str	r4, [sp, #372]	; 0x174
   df06a:	ae5c      	add	r6, sp, #368	; 0x170
   df06c:	ac5a      	add	r4, sp, #360	; 0x168
   df06e:	e9d6 6700 	ldrd	r6, r7, [r6]
   df072:	e9d4 4500 	ldrd	r4, r5, [r4]
   df076:	4074      	eors	r4, r6
   df078:	4626      	mov	r6, r4
   df07a:	407d      	eors	r5, r7
   df07c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   df07e:	462f      	mov	r7, r5
   df080:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   df082:	05e4      	lsls	r4, r4, #23
   df084:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
   df088:	945f      	str	r4, [sp, #380]	; 0x17c
   df08a:	05ec      	lsls	r4, r5, #23
   df08c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   df08e:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
   df092:	945e      	str	r4, [sp, #376]	; 0x178
   df094:	ac5e      	add	r4, sp, #376	; 0x178
   df096:	e9d4 4500 	ldrd	r4, r5, [r4]
   df09a:	4074      	eors	r4, r6
   df09c:	1906      	adds	r6, r0, r4
   df09e:	ea85 0507 	eor.w	r5, r5, r7
   df0a2:	eb41 0705 	adc.w	r7, r1, r5
   df0a6:	eb16 000a 	adds.w	r0, r6, sl
   df0aa:	eb47 010b 	adc.w	r1, r7, fp
   df0ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
   df0b2:	ea4f 7118 	mov.w	r1, r8, lsr #28
   df0b6:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
   df0ba:	9160      	str	r1, [sp, #384]	; 0x180
   df0bc:	ea4f 7119 	mov.w	r1, r9, lsr #28
   df0c0:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
   df0c4:	9161      	str	r1, [sp, #388]	; 0x184
   df0c6:	ea4f 7189 	mov.w	r1, r9, lsl #30
   df0ca:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
   df0ce:	9163      	str	r1, [sp, #396]	; 0x18c
   df0d0:	ea4f 7188 	mov.w	r1, r8, lsl #30
   df0d4:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
   df0d8:	9162      	str	r1, [sp, #392]	; 0x188
   df0da:	a960      	add	r1, sp, #384	; 0x180
   df0dc:	e9d1 4500 	ldrd	r4, r5, [r1]
   df0e0:	a962      	add	r1, sp, #392	; 0x188
   df0e2:	e9d1 0100 	ldrd	r0, r1, [r1]
   df0e6:	404d      	eors	r5, r1
   df0e8:	ea4f 6149 	mov.w	r1, r9, lsl #25
   df0ec:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
   df0f0:	9165      	str	r1, [sp, #404]	; 0x194
   df0f2:	ea4f 6148 	mov.w	r1, r8, lsl #25
   df0f6:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
   df0fa:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
   df0fe:	9164      	str	r1, [sp, #400]	; 0x190
   df100:	a964      	add	r1, sp, #400	; 0x190
   df102:	4044      	eors	r4, r0
   df104:	e9d1 0100 	ldrd	r0, r1, [r1]
   df108:	4060      	eors	r0, r4
   df10a:	4069      	eors	r1, r5
   df10c:	4604      	mov	r4, r0
   df10e:	460d      	mov	r5, r1
   df110:	e9dd 0100 	ldrd	r0, r1, [sp]
   df114:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   df118:	e9dd ab00 	ldrd	sl, fp, [sp]
   df11c:	ea40 0008 	orr.w	r0, r0, r8
   df120:	ea41 0109 	orr.w	r1, r1, r9
   df124:	4006      	ands	r6, r0
   df126:	400f      	ands	r7, r1
   df128:	ea0a 0a08 	and.w	sl, sl, r8
   df12c:	ea0b 0b09 	and.w	fp, fp, r9
   df130:	ea46 000a 	orr.w	r0, r6, sl
   df134:	ea47 010b 	orr.w	r1, r7, fp
   df138:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
   df13c:	1900      	adds	r0, r0, r4
   df13e:	4169      	adcs	r1, r5
   df140:	eb1a 0a00 	adds.w	sl, sl, r0
   df144:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   df148:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
   df14c:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
   df150:	1900      	adds	r0, r0, r4
   df152:	4169      	adcs	r1, r5
   df154:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   df158:	1824      	adds	r4, r4, r0
   df15a:	414d      	adcs	r5, r1
   df15c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   df160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   df164:	4046      	eors	r6, r0
   df166:	404f      	eors	r7, r1
   df168:	4630      	mov	r0, r6
   df16a:	4639      	mov	r1, r7
   df16c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   df170:	4006      	ands	r6, r0
   df172:	400f      	ands	r7, r1
   df174:	4630      	mov	r0, r6
   df176:	4639      	mov	r1, r7
   df178:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   df17c:	4046      	eors	r6, r0
   df17e:	1930      	adds	r0, r6, r4
   df180:	ea87 0701 	eor.w	r7, r7, r1
   df184:	9c08      	ldr	r4, [sp, #32]
   df186:	eb47 0105 	adc.w	r1, r7, r5
   df18a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   df18c:	0ba4      	lsrs	r4, r4, #14
   df18e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   df192:	9466      	str	r4, [sp, #408]	; 0x198
   df194:	0bac      	lsrs	r4, r5, #14
   df196:	9d08      	ldr	r5, [sp, #32]
   df198:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   df19c:	9467      	str	r4, [sp, #412]	; 0x19c
   df19e:	0cac      	lsrs	r4, r5, #18
   df1a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   df1a2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   df1a6:	9468      	str	r4, [sp, #416]	; 0x1a0
   df1a8:	0cac      	lsrs	r4, r5, #18
   df1aa:	9d08      	ldr	r5, [sp, #32]
   df1ac:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   df1b0:	9469      	str	r4, [sp, #420]	; 0x1a4
   df1b2:	ae68      	add	r6, sp, #416	; 0x1a0
   df1b4:	ac66      	add	r4, sp, #408	; 0x198
   df1b6:	e9d6 6700 	ldrd	r6, r7, [r6]
   df1ba:	e9d4 4500 	ldrd	r4, r5, [r4]
   df1be:	4074      	eors	r4, r6
   df1c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   df1c2:	407d      	eors	r5, r7
   df1c4:	9f08      	ldr	r7, [sp, #32]
   df1c6:	05f6      	lsls	r6, r6, #23
   df1c8:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   df1cc:	966b      	str	r6, [sp, #428]	; 0x1ac
   df1ce:	05fe      	lsls	r6, r7, #23
   df1d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   df1d2:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   df1d6:	966a      	str	r6, [sp, #424]	; 0x1a8
   df1d8:	ae6a      	add	r6, sp, #424	; 0x1a8
   df1da:	e9d6 6700 	ldrd	r6, r7, [r6]
   df1de:	4066      	eors	r6, r4
   df1e0:	1986      	adds	r6, r0, r6
   df1e2:	ea87 0705 	eor.w	r7, r7, r5
   df1e6:	eb41 0707 	adc.w	r7, r1, r7
   df1ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   df1ee:	1980      	adds	r0, r0, r6
   df1f0:	4179      	adcs	r1, r7
   df1f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   df1f6:	ea4f 711a 	mov.w	r1, sl, lsr #28
   df1fa:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
   df1fe:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
   df202:	916c      	str	r1, [sp, #432]	; 0x1b0
   df204:	ea4f 711b 	mov.w	r1, fp, lsr #28
   df208:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
   df20c:	916d      	str	r1, [sp, #436]	; 0x1b4
   df20e:	ea4f 718b 	mov.w	r1, fp, lsl #30
   df212:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
   df216:	916f      	str	r1, [sp, #444]	; 0x1bc
   df218:	ea4f 718a 	mov.w	r1, sl, lsl #30
   df21c:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
   df220:	916e      	str	r1, [sp, #440]	; 0x1b8
   df222:	a96c      	add	r1, sp, #432	; 0x1b0
   df224:	e9d1 4500 	ldrd	r4, r5, [r1]
   df228:	a96e      	add	r1, sp, #440	; 0x1b8
   df22a:	e9d1 0100 	ldrd	r0, r1, [r1]
   df22e:	404d      	eors	r5, r1
   df230:	ea4f 614b 	mov.w	r1, fp, lsl #25
   df234:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
   df238:	9171      	str	r1, [sp, #452]	; 0x1c4
   df23a:	ea4f 614a 	mov.w	r1, sl, lsl #25
   df23e:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
   df242:	9170      	str	r1, [sp, #448]	; 0x1c0
   df244:	a970      	add	r1, sp, #448	; 0x1c0
   df246:	4044      	eors	r4, r0
   df248:	e9d1 0100 	ldrd	r0, r1, [r1]
   df24c:	e9dd 6700 	ldrd	r6, r7, [sp]
   df250:	4060      	eors	r0, r4
   df252:	4604      	mov	r4, r0
   df254:	4069      	eors	r1, r5
   df256:	ea48 000a 	orr.w	r0, r8, sl
   df25a:	460d      	mov	r5, r1
   df25c:	4006      	ands	r6, r0
   df25e:	ea49 010b 	orr.w	r1, r9, fp
   df262:	4630      	mov	r0, r6
   df264:	400f      	ands	r7, r1
   df266:	ea08 060a 	and.w	r6, r8, sl
   df26a:	4639      	mov	r1, r7
   df26c:	4306      	orrs	r6, r0
   df26e:	ea09 070b 	and.w	r7, r9, fp
   df272:	1930      	adds	r0, r6, r4
   df274:	ea47 0701 	orr.w	r7, r7, r1
   df278:	eb47 0105 	adc.w	r1, r7, r5
   df27c:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
   df280:	1824      	adds	r4, r4, r0
   df282:	414d      	adcs	r5, r1
   df284:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   df288:	e9d2 010c 	ldrd	r0, r1, [r2, #48]	; 0x30
   df28c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
   df290:	1900      	adds	r0, r0, r4
   df292:	4169      	adcs	r1, r5
   df294:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   df298:	1824      	adds	r4, r4, r0
   df29a:	414d      	adcs	r5, r1
   df29c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   df2a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   df2a4:	4070      	eors	r0, r6
   df2a6:	4079      	eors	r1, r7
   df2a8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   df2ac:	4006      	ands	r6, r0
   df2ae:	400f      	ands	r7, r1
   df2b0:	4630      	mov	r0, r6
   df2b2:	4639      	mov	r1, r7
   df2b4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   df2b8:	4046      	eors	r6, r0
   df2ba:	19a0      	adds	r0, r4, r6
   df2bc:	ea87 0701 	eor.w	r7, r7, r1
   df2c0:	9c06      	ldr	r4, [sp, #24]
   df2c2:	eb45 0107 	adc.w	r1, r5, r7
   df2c6:	9d07      	ldr	r5, [sp, #28]
   df2c8:	0ba4      	lsrs	r4, r4, #14
   df2ca:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   df2ce:	9472      	str	r4, [sp, #456]	; 0x1c8
   df2d0:	0bac      	lsrs	r4, r5, #14
   df2d2:	9d06      	ldr	r5, [sp, #24]
   df2d4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   df2d8:	9473      	str	r4, [sp, #460]	; 0x1cc
   df2da:	0cac      	lsrs	r4, r5, #18
   df2dc:	9d07      	ldr	r5, [sp, #28]
   df2de:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   df2e2:	9474      	str	r4, [sp, #464]	; 0x1d0
   df2e4:	0cac      	lsrs	r4, r5, #18
   df2e6:	9d06      	ldr	r5, [sp, #24]
   df2e8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   df2ec:	9475      	str	r4, [sp, #468]	; 0x1d4
   df2ee:	ae74      	add	r6, sp, #464	; 0x1d0
   df2f0:	ac72      	add	r4, sp, #456	; 0x1c8
   df2f2:	e9d6 6700 	ldrd	r6, r7, [r6]
   df2f6:	e9d4 4500 	ldrd	r4, r5, [r4]
   df2fa:	4074      	eors	r4, r6
   df2fc:	9e07      	ldr	r6, [sp, #28]
   df2fe:	407d      	eors	r5, r7
   df300:	9f06      	ldr	r7, [sp, #24]
   df302:	05f6      	lsls	r6, r6, #23
   df304:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   df308:	9677      	str	r6, [sp, #476]	; 0x1dc
   df30a:	05fe      	lsls	r6, r7, #23
   df30c:	9f07      	ldr	r7, [sp, #28]
   df30e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   df312:	9676      	str	r6, [sp, #472]	; 0x1d8
   df314:	ae76      	add	r6, sp, #472	; 0x1d8
   df316:	e9d6 6700 	ldrd	r6, r7, [r6]
   df31a:	4066      	eors	r6, r4
   df31c:	1986      	adds	r6, r0, r6
   df31e:	ea87 0705 	eor.w	r7, r7, r5
   df322:	eb41 0707 	adc.w	r7, r1, r7
   df326:	e9dd 0100 	ldrd	r0, r1, [sp]
   df32a:	1980      	adds	r0, r0, r6
   df32c:	4179      	adcs	r1, r7
   df32e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   df332:	9902      	ldr	r1, [sp, #8]
   df334:	9803      	ldr	r0, [sp, #12]
   df336:	0f09      	lsrs	r1, r1, #28
   df338:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   df33c:	9178      	str	r1, [sp, #480]	; 0x1e0
   df33e:	0f01      	lsrs	r1, r0, #28
   df340:	9802      	ldr	r0, [sp, #8]
   df342:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   df346:	9179      	str	r1, [sp, #484]	; 0x1e4
   df348:	9903      	ldr	r1, [sp, #12]
   df34a:	0789      	lsls	r1, r1, #30
   df34c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   df350:	917b      	str	r1, [sp, #492]	; 0x1ec
   df352:	0781      	lsls	r1, r0, #30
   df354:	9803      	ldr	r0, [sp, #12]
   df356:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   df35a:	917a      	str	r1, [sp, #488]	; 0x1e8
   df35c:	a978      	add	r1, sp, #480	; 0x1e0
   df35e:	e9d1 4500 	ldrd	r4, r5, [r1]
   df362:	a97a      	add	r1, sp, #488	; 0x1e8
   df364:	e9d1 0100 	ldrd	r0, r1, [r1]
   df368:	404d      	eors	r5, r1
   df36a:	9903      	ldr	r1, [sp, #12]
   df36c:	4044      	eors	r4, r0
   df36e:	9802      	ldr	r0, [sp, #8]
   df370:	0649      	lsls	r1, r1, #25
   df372:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   df376:	917d      	str	r1, [sp, #500]	; 0x1f4
   df378:	0641      	lsls	r1, r0, #25
   df37a:	9803      	ldr	r0, [sp, #12]
   df37c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   df380:	917c      	str	r1, [sp, #496]	; 0x1f0
   df382:	a97c      	add	r1, sp, #496	; 0x1f0
   df384:	e9d1 0100 	ldrd	r0, r1, [r1]
   df388:	4060      	eors	r0, r4
   df38a:	4069      	eors	r1, r5
   df38c:	e9cd 0100 	strd	r0, r1, [sp]
   df390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   df394:	ea40 000a 	orr.w	r0, r0, sl
   df398:	ea41 010b 	orr.w	r1, r1, fp
   df39c:	ea00 0408 	and.w	r4, r0, r8
   df3a0:	ea01 0509 	and.w	r5, r1, r9
   df3a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   df3a8:	ea00 000a 	and.w	r0, r0, sl
   df3ac:	ea01 010b 	and.w	r1, r1, fp
   df3b0:	4304      	orrs	r4, r0
   df3b2:	430d      	orrs	r5, r1
   df3b4:	4620      	mov	r0, r4
   df3b6:	4629      	mov	r1, r5
   df3b8:	e9dd 4500 	ldrd	r4, r5, [sp]
   df3bc:	1824      	adds	r4, r4, r0
   df3be:	414d      	adcs	r5, r1
   df3c0:	3340      	adds	r3, #64	; 0x40
   df3c2:	19a4      	adds	r4, r4, r6
   df3c4:	417d      	adcs	r5, r7
    }
    while( i < 80 );
   df3c6:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   df3c8:	e9cd 4500 	strd	r4, r5, [sp]
   df3cc:	f102 0240 	add.w	r2, r2, #64	; 0x40
    }
    while( i < 80 );
   df3d0:	f47f aaf8 	bne.w	de9c4 <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
   df3d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   df3d8:	4623      	mov	r3, r4
   df3da:	18c0      	adds	r0, r0, r3
   df3dc:	4169      	adcs	r1, r5
    ctx->state[1] += B;
   df3de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df3e2:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   df3e6:	18a4      	adds	r4, r4, r2
   df3e8:	415d      	adcs	r5, r3
   df3ea:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
   df3ee:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
   df3f2:	eb13 030a 	adds.w	r3, r3, sl
   df3f6:	eb44 040b 	adc.w	r4, r4, fp
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
   df3fa:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
   df3fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
   df402:	469a      	mov	sl, r3
   df404:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
   df406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   df40a:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
   df40e:	eb10 0008 	adds.w	r0, r0, r8
   df412:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
   df416:	18a4      	adds	r4, r4, r2
   df418:	415d      	adcs	r5, r3
   df41a:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
   df41e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   df422:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   df426:	18a4      	adds	r4, r4, r2
   df428:	415d      	adcs	r5, r3
   df42a:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
   df42e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   df432:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
   df436:	18a4      	adds	r4, r4, r2
   df438:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
   df43a:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
   df43e:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
   df442:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   df446:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   df44a:	18c0      	adds	r0, r0, r3
   df44c:	4161      	adcs	r1, r4
   df44e:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
   df452:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
   df454:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
   df458:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
   df45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000df460 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   df460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   df464:	4604      	mov	r4, r0
   df466:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
   df468:	4615      	mov	r5, r2
   df46a:	2a00      	cmp	r2, #0
   df46c:	d03d      	beq.n	df4ea <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
   df46e:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   df472:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
   df476:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   df47a:	1952      	adds	r2, r2, r5
   df47c:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
   df480:	454b      	cmp	r3, r9
   df482:	bf08      	it	eq
   df484:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   df486:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
   df48a:	d206      	bcs.n	df49a <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
   df48c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   df490:	3201      	adds	r2, #1
   df492:	f143 0300 	adc.w	r3, r3, #0
   df496:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
   df49a:	b188      	cbz	r0, df4c0 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
   df49c:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   df4a0:	42bd      	cmp	r5, r7
   df4a2:	d31c      	bcc.n	df4de <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   df4a4:	f104 0850 	add.w	r8, r4, #80	; 0x50
   df4a8:	4631      	mov	r1, r6
   df4aa:	463a      	mov	r2, r7
   df4ac:	4440      	add	r0, r8
   df4ae:	f007 fb4a 	bl	e6b46 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   df4b2:	4641      	mov	r1, r8
   df4b4:	4620      	mov	r0, r4
   df4b6:	f7ff f987 	bl	de7c8 <mbedtls_internal_sha512_process>
   df4ba:	b9b8      	cbnz	r0, df4ec <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
   df4bc:	443e      	add	r6, r7
        ilen  -= fill;
   df4be:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   df4c0:	462f      	mov	r7, r5
   df4c2:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
   df4c4:	2f7f      	cmp	r7, #127	; 0x7f
   df4c6:	4431      	add	r1, r6
   df4c8:	d905      	bls.n	df4d6 <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
   df4ca:	4620      	mov	r0, r4
   df4cc:	f7ff f97c 	bl	de7c8 <mbedtls_internal_sha512_process>
   df4d0:	b960      	cbnz	r0, df4ec <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
   df4d2:	3f80      	subs	r7, #128	; 0x80
   df4d4:	e7f5      	b.n	df4c2 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
   df4d6:	b147      	cbz	r7, df4ea <mbedtls_sha512_update_ret+0x8a>
   df4d8:	463d      	mov	r5, r7
   df4da:	460e      	mov	r6, r1
   df4dc:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   df4de:	3450      	adds	r4, #80	; 0x50
   df4e0:	462a      	mov	r2, r5
   df4e2:	4631      	mov	r1, r6
   df4e4:	4420      	add	r0, r4
   df4e6:	f007 fb2e 	bl	e6b46 <memcpy>

    return( 0 );
   df4ea:	2000      	movs	r0, #0
}
   df4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000df4f0 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   df4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   df4f2:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   df4f4:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   df4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
   df4fa:	1c58      	adds	r0, r3, #1
   df4fc:	4423      	add	r3, r4
   df4fe:	2280      	movs	r2, #128	; 0x80

    if( used <= 112 )
   df500:	2870      	cmp	r0, #112	; 0x70
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   df502:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
   df504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   df508:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
   df50c:	d804      	bhi.n	df518 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
   df50e:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
   df512:	2100      	movs	r1, #0
   df514:	4430      	add	r0, r6
   df516:	e00f      	b.n	df538 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
   df518:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
   df51c:	2100      	movs	r1, #0
   df51e:	4430      	add	r0, r6
   df520:	f007 fb37 	bl	e6b92 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   df524:	4631      	mov	r1, r6
   df526:	4620      	mov	r0, r4
   df528:	f7ff f94e 	bl	de7c8 <mbedtls_internal_sha512_process>
   df52c:	2800      	cmp	r0, #0
   df52e:	f040 810e 	bne.w	df74e <mbedtls_sha512_finish_ret+0x25e>
            return( ret );

        memset( ctx->buffer, 0, 112 );
   df532:	4601      	mov	r1, r0
   df534:	2270      	movs	r2, #112	; 0x70
   df536:	4630      	mov	r0, r6
   df538:	f007 fb2b 	bl	e6b92 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
   df53c:	68e3      	ldr	r3, [r4, #12]
   df53e:	68a2      	ldr	r2, [r4, #8]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
   df540:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
   df544:	00d9      	lsls	r1, r3, #3
   df546:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
   df54a:	2300      	movs	r3, #0
   df54c:	4319      	orrs	r1, r3
   df54e:	00d0      	lsls	r0, r2, #3
   df550:	ea4f 725e 	mov.w	r2, lr, lsr #29
   df554:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   df556:	0e0a      	lsrs	r2, r1, #24
   df558:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
   df55c:	0c0a      	lsrs	r2, r1, #16
   df55e:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
   df562:	0a0a      	lsrs	r2, r1, #8
   df564:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
   df568:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   df56a:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   df56e:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
   df572:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   df574:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   df578:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
   df57c:	0a02      	lsrs	r2, r0, #8
   df57e:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   df582:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   df584:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   df586:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
   df58a:	0c1a      	lsrs	r2, r3, #16
   df58c:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
   df590:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
   df594:	0a1a      	lsrs	r2, r3, #8
   df596:	0e3b      	lsrs	r3, r7, #24
   df598:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   df59c:	0c3b      	lsrs	r3, r7, #16
   df59e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
   df5a2:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   df5a4:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
   df5a8:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   df5ac:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
   df5b0:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
   df5b4:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   df5b8:	4631      	mov	r1, r6
   df5ba:	4620      	mov	r0, r4
   df5bc:	f7ff f904 	bl	de7c8 <mbedtls_internal_sha512_process>
   df5c0:	2800      	cmp	r0, #0
   df5c2:	f040 80c4 	bne.w	df74e <mbedtls_sha512_finish_ret+0x25e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
   df5c6:	7de3      	ldrb	r3, [r4, #23]
   df5c8:	702b      	strb	r3, [r5, #0]
   df5ca:	8ae3      	ldrh	r3, [r4, #22]
   df5cc:	706b      	strb	r3, [r5, #1]
   df5ce:	6963      	ldr	r3, [r4, #20]
   df5d0:	0a1b      	lsrs	r3, r3, #8
   df5d2:	70ab      	strb	r3, [r5, #2]
   df5d4:	6963      	ldr	r3, [r4, #20]
   df5d6:	70eb      	strb	r3, [r5, #3]
   df5d8:	7ce3      	ldrb	r3, [r4, #19]
   df5da:	712b      	strb	r3, [r5, #4]
   df5dc:	8a63      	ldrh	r3, [r4, #18]
   df5de:	716b      	strb	r3, [r5, #5]
   df5e0:	6923      	ldr	r3, [r4, #16]
   df5e2:	0a1b      	lsrs	r3, r3, #8
   df5e4:	71ab      	strb	r3, [r5, #6]
   df5e6:	6923      	ldr	r3, [r4, #16]
   df5e8:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
   df5ea:	7fe3      	ldrb	r3, [r4, #31]
   df5ec:	722b      	strb	r3, [r5, #8]
   df5ee:	8be3      	ldrh	r3, [r4, #30]
   df5f0:	726b      	strb	r3, [r5, #9]
   df5f2:	69e3      	ldr	r3, [r4, #28]
   df5f4:	0a1b      	lsrs	r3, r3, #8
   df5f6:	72ab      	strb	r3, [r5, #10]
   df5f8:	69e3      	ldr	r3, [r4, #28]
   df5fa:	72eb      	strb	r3, [r5, #11]
   df5fc:	7ee3      	ldrb	r3, [r4, #27]
   df5fe:	732b      	strb	r3, [r5, #12]
   df600:	8b63      	ldrh	r3, [r4, #26]
   df602:	736b      	strb	r3, [r5, #13]
   df604:	69a3      	ldr	r3, [r4, #24]
   df606:	0a1b      	lsrs	r3, r3, #8
   df608:	73ab      	strb	r3, [r5, #14]
   df60a:	69a3      	ldr	r3, [r4, #24]
   df60c:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
   df60e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   df612:	742b      	strb	r3, [r5, #16]
   df614:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   df616:	746b      	strb	r3, [r5, #17]
   df618:	6a63      	ldr	r3, [r4, #36]	; 0x24
   df61a:	0a1b      	lsrs	r3, r3, #8
   df61c:	74ab      	strb	r3, [r5, #18]
   df61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   df620:	74eb      	strb	r3, [r5, #19]
   df622:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   df626:	752b      	strb	r3, [r5, #20]
   df628:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   df62a:	756b      	strb	r3, [r5, #21]
   df62c:	6a23      	ldr	r3, [r4, #32]
   df62e:	0a1b      	lsrs	r3, r3, #8
   df630:	75ab      	strb	r3, [r5, #22]
   df632:	6a23      	ldr	r3, [r4, #32]
   df634:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
   df636:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   df63a:	762b      	strb	r3, [r5, #24]
   df63c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   df63e:	766b      	strb	r3, [r5, #25]
   df640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   df642:	0a1b      	lsrs	r3, r3, #8
   df644:	76ab      	strb	r3, [r5, #26]
   df646:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   df648:	76eb      	strb	r3, [r5, #27]
   df64a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   df64e:	772b      	strb	r3, [r5, #28]
   df650:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   df652:	776b      	strb	r3, [r5, #29]
   df654:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   df656:	0a1b      	lsrs	r3, r3, #8
   df658:	77ab      	strb	r3, [r5, #30]
   df65a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   df65c:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
   df65e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   df662:	f885 3020 	strb.w	r3, [r5, #32]
   df666:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df668:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   df66c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   df66e:	0a1b      	lsrs	r3, r3, #8
   df670:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   df674:	6b63      	ldr	r3, [r4, #52]	; 0x34
   df676:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
   df67a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   df67e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   df682:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   df684:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
   df688:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df68a:	0a1b      	lsrs	r3, r3, #8
   df68c:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   df690:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df692:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
   df696:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   df69a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   df69e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   df6a0:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
   df6a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   df6a6:	0a1b      	lsrs	r3, r3, #8
   df6a8:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
   df6ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   df6ae:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
   df6b2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   df6b6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   df6ba:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   df6bc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
   df6c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   df6c2:	0a1b      	lsrs	r3, r3, #8
   df6c4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   df6c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   df6ca:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
   df6ce:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   df6d2:	2b00      	cmp	r3, #0
   df6d4:	d13b      	bne.n	df74e <mbedtls_sha512_finish_ret+0x25e>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
   df6d6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   df6da:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   df6de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   df6e2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   df6e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   df6e8:	0a1b      	lsrs	r3, r3, #8
   df6ea:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   df6ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   df6f0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   df6f4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   df6f8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
   df6fc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   df700:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
   df704:	6c23      	ldr	r3, [r4, #64]	; 0x40
   df706:	0a1b      	lsrs	r3, r3, #8
   df708:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
   df70c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   df70e:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
   df712:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
   df716:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   df71a:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   df71e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   df722:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   df724:	0a1b      	lsrs	r3, r3, #8
   df726:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
   df72a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   df72c:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   df730:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   df734:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   df738:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   df73c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
   df740:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   df742:	0a1b      	lsrs	r3, r3, #8
   df744:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
   df748:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   df74a:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
   df74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df750 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   df750:	b5f0      	push	{r4, r5, r6, r7, lr}
   df752:	b0b7      	sub	sp, #220	; 0xdc
   df754:	461f      	mov	r7, r3
   df756:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
   df758:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   df75a:	460e      	mov	r6, r1
   df75c:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
   df75e:	f7fe ff82 	bl	de666 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
   df762:	4639      	mov	r1, r7
   df764:	4668      	mov	r0, sp
   df766:	f7fe ff93 	bl	de690 <mbedtls_sha512_starts_ret>
   df76a:	4601      	mov	r1, r0
   df76c:	b958      	cbnz	r0, df786 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
   df76e:	4629      	mov	r1, r5
   df770:	4632      	mov	r2, r6
   df772:	4668      	mov	r0, sp
   df774:	f7ff fe74 	bl	df460 <mbedtls_sha512_update_ret>
   df778:	4601      	mov	r1, r0
   df77a:	b920      	cbnz	r0, df786 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
   df77c:	4621      	mov	r1, r4
   df77e:	4668      	mov	r0, sp
   df780:	f7ff feb6 	bl	df4f0 <mbedtls_sha512_finish_ret>
   df784:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
   df786:	4668      	mov	r0, sp
   df788:	f7fe ff71 	bl	de66e <mbedtls_sha512_free>

    return( ret );
}
   df78c:	4608      	mov	r0, r1
   df78e:	b037      	add	sp, #220	; 0xdc
   df790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000df794 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
   df794:	4b05      	ldr	r3, [pc, #20]	; (df7ac <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
   df796:	681a      	ldr	r2, [r3, #0]
   df798:	b11a      	cbz	r2, df7a2 <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
   df79a:	4282      	cmp	r2, r0
   df79c:	d003      	beq.n	df7a6 <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
   df79e:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
   df7a0:	e7f9      	b.n	df796 <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
   df7a2:	4610      	mov	r0, r2
   df7a4:	4770      	bx	lr
   df7a6:	4618      	mov	r0, r3
}
   df7a8:	4770      	bx	lr
   df7aa:	bf00      	nop
   df7ac:	000e8b60 	.word	0x000e8b60

000df7b0 <mbedtls_ssl_list_ciphersuites>:
                            sizeof( ciphersuite_definitions[0]  )
static int supported_ciphersuites[MAX_CIPHERSUITES];
static int supported_init = 0;

const int *mbedtls_ssl_list_ciphersuites( void )
{
   df7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
   df7b2:	4b0d      	ldr	r3, [pc, #52]	; (df7e8 <mbedtls_ssl_list_ciphersuites+0x38>)
   df7b4:	681a      	ldr	r2, [r3, #0]
   df7b6:	461c      	mov	r4, r3
   df7b8:	b9a2      	cbnz	r2, df7e4 <mbedtls_ssl_list_ciphersuites+0x34>
   df7ba:	490c      	ldr	r1, [pc, #48]	; (df7ec <mbedtls_ssl_list_ciphersuites+0x3c>)
   df7bc:	4e0c      	ldr	r6, [pc, #48]	; (df7f0 <mbedtls_ssl_list_ciphersuites+0x40>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
   df7be:	f101 0708 	add.w	r7, r1, #8
   df7c2:	f856 5f04 	ldr.w	r5, [r6, #4]!
   df7c6:	b14d      	cbz	r5, df7dc <mbedtls_ssl_list_ciphersuites+0x2c>
   df7c8:	42b9      	cmp	r1, r7
   df7ca:	d207      	bcs.n	df7dc <mbedtls_ssl_list_ciphersuites+0x2c>
#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
   df7cc:	4628      	mov	r0, r5
   df7ce:	f7ff ffe1 	bl	df794 <mbedtls_ssl_ciphersuite_from_id>
   df7d2:	2800      	cmp	r0, #0
   df7d4:	d0f5      	beq.n	df7c2 <mbedtls_ssl_list_ciphersuites+0x12>
#endif
                *(q++) = *p;
   df7d6:	600d      	str	r5, [r1, #0]
   df7d8:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
   df7da:	e7f2      	b.n	df7c2 <mbedtls_ssl_list_ciphersuites+0x12>
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
#endif
                *(q++) = *p;
        }
        *q = 0;
   df7dc:	2300      	movs	r3, #0
   df7de:	600b      	str	r3, [r1, #0]

        supported_init = 1;
   df7e0:	2301      	movs	r3, #1
   df7e2:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
   df7e4:	4801      	ldr	r0, [pc, #4]	; (df7ec <mbedtls_ssl_list_ciphersuites+0x3c>)
   df7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df7e8:	2003e4b8 	.word	0x2003e4b8
   df7ec:	2003e4bc 	.word	0x2003e4bc
   df7f0:	000e8bbc 	.word	0x000e8bbc

000df7f4 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   df7f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   df7f6:	b10b      	cbz	r3, df7fc <mbedtls_ssl_own_key+0x8>
   df7f8:	685b      	ldr	r3, [r3, #4]
   df7fa:	b913      	cbnz	r3, df802 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   df7fc:	6803      	ldr	r3, [r0, #0]
   df7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
   df800:	b10b      	cbz	r3, df806 <mbedtls_ssl_own_key+0x12>
   df802:	6858      	ldr	r0, [r3, #4]
   df804:	4770      	bx	lr
   df806:	4618      	mov	r0, r3
}
   df808:	4770      	bx	lr
	...

000df80c <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   df80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   df810:	6843      	ldr	r3, [r0, #4]
   df812:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   df814:	b097      	sub	sp, #92	; 0x5c
   df816:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   df818:	f000 80ca 	beq.w	df9b0 <mbedtls_ssl_handshake_client_step+0x1a4>
   df81c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   df81e:	2b00      	cmp	r3, #0
   df820:	f000 80c6 	beq.w	df9b0 <mbedtls_ssl_handshake_client_step+0x1a4>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   df824:	f001 f876 	bl	e0914 <mbedtls_ssl_flush_output>
   df828:	4605      	mov	r5, r0
   df82a:	2800      	cmp	r0, #0
   df82c:	f040 852a 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   df830:	6863      	ldr	r3, [r4, #4]
   df832:	2b0c      	cmp	r3, #12
   df834:	d105      	bne.n	df842 <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
   df836:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   df838:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
   df83c:	b10b      	cbz	r3, df842 <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
   df83e:	2311      	movs	r3, #17
   df840:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
   df842:	6863      	ldr	r3, [r4, #4]
   df844:	2b11      	cmp	r3, #17
   df846:	f200 80b3 	bhi.w	df9b0 <mbedtls_ssl_handshake_client_step+0x1a4>
   df84a:	e8df f013 	tbh	[pc, r3, lsl #1]
   df84e:	0012      	.short	0x0012
   df850:	00500017 	.word	0x00500017
   df854:	00e900e5 	.word	0x00e900e5
   df858:	011b0109 	.word	0x011b0109
   df85c:	0133012f 	.word	0x0133012f
   df860:	02090197 	.word	0x02090197
   df864:	0230020d 	.word	0x0230020d
   df868:	02380234 	.word	0x02380234
   df86c:	00b1023a 	.word	0x00b1023a
   df870:	0217      	.short	0x0217
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
   df872:	2201      	movs	r2, #1
   df874:	6062      	str	r2, [r4, #4]
            break;
   df876:	461d      	mov	r5, r3
   df878:	f000 bd04 	b.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
   df87c:	6821      	ldr	r1, [r4, #0]
   df87e:	698b      	ldr	r3, [r1, #24]
   df880:	2b00      	cmp	r3, #0
   df882:	f000 8222 	beq.w	dfcca <mbedtls_ssl_handshake_client_step+0x4be>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
   df886:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
   df88a:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
   df88c:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
   df890:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
   df892:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   df896:	2800      	cmp	r0, #0
   df898:	f000 808a 	beq.w	df9b0 <mbedtls_ssl_handshake_client_step+0x1a4>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   df89c:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
   df8a0:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   df8a4:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
   df8a8:	1d3b      	adds	r3, r7, #4
   df8aa:	f3c2 0240 	ubfx	r2, r2, #1, #1
   df8ae:	f002 f879 	bl	e19a4 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   df8b2:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
   df8b4:	6b26      	ldr	r6, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   df8b6:	699d      	ldr	r5, [r3, #24]
   df8b8:	69d8      	ldr	r0, [r3, #28]
   df8ba:	2204      	movs	r2, #4
   df8bc:	f506 71ba 	add.w	r1, r6, #372	; 0x174
   df8c0:	47a8      	blx	r5
   df8c2:	4605      	mov	r5, r0
   df8c4:	2800      	cmp	r0, #0
   df8c6:	f040 84dd 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
   df8ca:	6823      	ldr	r3, [r4, #0]
   df8cc:	221c      	movs	r2, #28
   df8ce:	699d      	ldr	r5, [r3, #24]
   df8d0:	69d8      	ldr	r0, [r3, #28]
   df8d2:	f506 71bc 	add.w	r1, r6, #376	; 0x178
   df8d6:	47a8      	blx	r5
   df8d8:	4605      	mov	r5, r0
   df8da:	2800      	cmp	r0, #0
   df8dc:	f040 84d2 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
   df8e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df8e2:	1db9      	adds	r1, r7, #6
   df8e4:	f503 72ba 	add.w	r2, r3, #372	; 0x174
   df8e8:	f503 73ca 	add.w	r3, r3, #404	; 0x194
   df8ec:	e1f1      	b.n	dfcd2 <mbedtls_ssl_handshake_client_step+0x4c6>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   df8ee:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
   df8f0:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   df8f4:	f001 fa6e 	bl	e0dd4 <mbedtls_ssl_read_record>
   df8f8:	2800      	cmp	r0, #0
   df8fa:	f040 846f 	bne.w	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   df8fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df900:	2b16      	cmp	r3, #22
   df902:	d006      	beq.n	df912 <mbedtls_ssl_handshake_client_step+0x106>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   df904:	220a      	movs	r2, #10
   df906:	2102      	movs	r1, #2
   df908:	4620      	mov	r0, r4
   df90a:	f001 f94f 	bl	e0bac <mbedtls_ssl_send_alert_message>
   df90e:	f000 bc50 	b.w	e01b2 <mbedtls_ssl_handshake_client_step+0x9a6>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
   df912:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   df914:	2b29      	cmp	r3, #41	; 0x29
   df916:	d93a      	bls.n	df98e <mbedtls_ssl_handshake_client_step+0x182>
   df918:	f898 3000 	ldrb.w	r3, [r8]
   df91c:	2b02      	cmp	r3, #2
   df91e:	d136      	bne.n	df98e <mbedtls_ssl_handshake_client_step+0x182>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
   df920:	4621      	mov	r1, r4
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
   df922:	f108 0904 	add.w	r9, r8, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
   df926:	f851 3b0c 	ldr.w	r3, [r1], #12
   df92a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   df92e:	f104 0008 	add.w	r0, r4, #8
   df932:	464b      	mov	r3, r9
   df934:	f3c2 0240 	ubfx	r2, r2, #1, #1
   df938:	f002 f837 	bl	e19aa <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
   df93c:	6823      	ldr	r3, [r4, #0]
   df93e:	68a2      	ldr	r2, [r4, #8]
   df940:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
   df944:	428a      	cmp	r2, r1
   df946:	f2c0 8314 	blt.w	dff72 <mbedtls_ssl_handshake_client_step+0x766>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   df94a:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
   df94c:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
   df950:	4281      	cmp	r1, r0
   df952:	f2c0 830e 	blt.w	dff72 <mbedtls_ssl_handshake_client_step+0x766>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   df956:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
   df95a:	4282      	cmp	r2, r0
   df95c:	f300 8309 	bgt.w	dff72 <mbedtls_ssl_handshake_client_step+0x766>
        ssl->major_ver > ssl->conf->max_major_ver ||
   df960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   df964:	4299      	cmp	r1, r3
   df966:	f300 8304 	bgt.w	dff72 <mbedtls_ssl_handshake_client_step+0x766>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
   df96a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df96c:	f108 0206 	add.w	r2, r8, #6
   df970:	f503 73ca 	add.w	r3, r3, #404	; 0x194
   df974:	f108 0126 	add.w	r1, r8, #38	; 0x26
   df978:	f852 0b04 	ldr.w	r0, [r2], #4
   df97c:	f843 0b04 	str.w	r0, [r3], #4
   df980:	428a      	cmp	r2, r1
   df982:	d1f9      	bne.n	df978 <mbedtls_ssl_handshake_client_step+0x16c>

    n = buf[34];
   df984:	f898 6026 	ldrb.w	r6, [r8, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
   df988:	2e20      	cmp	r6, #32
   df98a:	f240 82f9 	bls.w	dff80 <mbedtls_ssl_handshake_client_step+0x774>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   df98e:	2232      	movs	r2, #50	; 0x32
   df990:	e03b      	b.n	dfa0a <mbedtls_ssl_handshake_client_step+0x1fe>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
   df992:	4650      	mov	r0, sl
   df994:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
   df998:	f7ff fefc 	bl	df794 <mbedtls_ssl_ciphersuite_from_id>
   df99c:	f8cb 0000 	str.w	r0, [fp]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
   df9a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   df9a2:	6819      	ldr	r1, [r3, #0]
   df9a4:	b939      	cbnz	r1, df9b6 <mbedtls_ssl_handshake_client_step+0x1aa>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   df9a6:	2250      	movs	r2, #80	; 0x50
   df9a8:	2102      	movs	r1, #2
   df9aa:	4620      	mov	r0, r4
   df9ac:	f001 f8fe 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df9b0:	4daf      	ldr	r5, [pc, #700]	; (dfc70 <mbedtls_ssl_handshake_client_step+0x464>)
   df9b2:	f000 bc67 	b.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
   df9b6:	4620      	mov	r0, r4
   df9b8:	f001 fad6 	bl	e0f68 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   df9bc:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   df9c0:	f8db 31e4 	ldr.w	r3, [fp, #484]	; 0x1e4
   df9c4:	f108 0827 	add.w	r8, r8, #39	; 0x27
   df9c8:	2b00      	cmp	r3, #0
   df9ca:	f040 8313 	bne.w	dfff4 <mbedtls_ssl_handshake_client_step+0x7e8>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
   df9ce:	6863      	ldr	r3, [r4, #4]
   df9d0:	3301      	adds	r3, #1
   df9d2:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
   df9d4:	2300      	movs	r3, #0
   df9d6:	f8cb 31e4 	str.w	r3, [fp, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
   df9da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   df9dc:	f8c2 a000 	str.w	sl, [r2]
        ssl->session_negotiate->compression = comp;
   df9e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   df9e2:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
   df9e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   df9e6:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
   df9e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   df9ea:	4632      	mov	r2, r6
   df9ec:	4641      	mov	r1, r8
   df9ee:	300c      	adds	r0, #12
   df9f0:	f007 f8a9 	bl	e6b46 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
   df9f4:	6823      	ldr	r3, [r4, #0]
   df9f6:	68e2      	ldr	r2, [r4, #12]
   df9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   df9fc:	3b04      	subs	r3, #4
   df9fe:	f853 0f04 	ldr.w	r0, [r3, #4]!
   dfa02:	2800      	cmp	r0, #0
   dfa04:	f040 831e 	bne.w	e0044 <mbedtls_ssl_handshake_client_step+0x838>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   dfa08:	222f      	movs	r2, #47	; 0x2f
   dfa0a:	2102      	movs	r1, #2
   dfa0c:	4620      	mov	r0, r4
   dfa0e:	f001 f8cd 	bl	e0bac <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
   dfa12:	4d98      	ldr	r5, [pc, #608]	; (dfc74 <mbedtls_ssl_handshake_client_step+0x468>)
   dfa14:	f000 bc36 	b.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
   dfa18:	4620      	mov	r0, r4
   dfa1a:	f001 febd 	bl	e1798 <mbedtls_ssl_parse_certificate>
   dfa1e:	e3dd      	b.n	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   dfa20:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfa22:	681e      	ldr	r6, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   dfa24:	7ab3      	ldrb	r3, [r6, #10]
   dfa26:	2b01      	cmp	r3, #1
   dfa28:	d101      	bne.n	dfa2e <mbedtls_ssl_handshake_client_step+0x222>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
   dfa2a:	2305      	movs	r3, #5
   dfa2c:	e3bf      	b.n	e01ae <mbedtls_ssl_handshake_client_step+0x9a2>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   dfa2e:	4620      	mov	r0, r4
   dfa30:	f001 f9d0 	bl	e0dd4 <mbedtls_ssl_read_record>
   dfa34:	2800      	cmp	r0, #0
   dfa36:	f040 83d1 	bne.w	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   dfa3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfa3c:	2b16      	cmp	r3, #22
   dfa3e:	f47f af61 	bne.w	df904 <mbedtls_ssl_handshake_client_step+0xf8>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
   dfa42:	6e63      	ldr	r3, [r4, #100]	; 0x64
   dfa44:	781b      	ldrb	r3, [r3, #0]
   dfa46:	2b0c      	cmp	r3, #12
   dfa48:	f000 8141 	beq.w	dfcce <mbedtls_ssl_handshake_client_step+0x4c2>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfa4c:	7ab3      	ldrb	r3, [r6, #10]
   dfa4e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   dfa52:	2b05      	cmp	r3, #5
   dfa54:	f47f af56 	bne.w	df904 <mbedtls_ssl_handshake_client_step+0xf8>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
   dfa58:	2301      	movs	r3, #1
   dfa5a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   dfa5e:	e3a4      	b.n	e01aa <mbedtls_ssl_handshake_client_step+0x99e>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   dfa60:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfa62:	681b      	ldr	r3, [r3, #0]
   dfa64:	7a9b      	ldrb	r3, [r3, #10]
   dfa66:	3b01      	subs	r3, #1
   dfa68:	b2db      	uxtb	r3, r3
   dfa6a:	2b09      	cmp	r3, #9
   dfa6c:	f200 8356 	bhi.w	e011c <mbedtls_ssl_handshake_client_step+0x910>
   dfa70:	2601      	movs	r6, #1
   dfa72:	fa06 f303 	lsl.w	r3, r6, r3
   dfa76:	f240 320f 	movw	r2, #783	; 0x30f
   dfa7a:	401a      	ands	r2, r3
   dfa7c:	2a00      	cmp	r2, #0
   dfa7e:	f000 834d 	beq.w	e011c <mbedtls_ssl_handshake_client_step+0x910>
   dfa82:	e34d      	b.n	e0120 <mbedtls_ssl_handshake_client_step+0x914>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   dfa84:	4620      	mov	r0, r4
   dfa86:	f001 f9a5 	bl	e0dd4 <mbedtls_ssl_read_record>
   dfa8a:	2800      	cmp	r0, #0
   dfa8c:	f040 83a6 	bne.w	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   dfa90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfa92:	2b16      	cmp	r3, #22
   dfa94:	f040 838d 	bne.w	e01b2 <mbedtls_ssl_handshake_client_step+0x9a6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   dfa98:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   dfa9a:	2b04      	cmp	r3, #4
   dfa9c:	f040 837e 	bne.w	e019c <mbedtls_ssl_handshake_client_step+0x990>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
   dfaa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   dfaa2:	781b      	ldrb	r3, [r3, #0]
   dfaa4:	2b0e      	cmp	r3, #14
   dfaa6:	f040 8379 	bne.w	e019c <mbedtls_ssl_handshake_client_step+0x990>
   dfaaa:	e37e      	b.n	e01aa <mbedtls_ssl_handshake_client_step+0x99e>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
   dfaac:	4620      	mov	r0, r4
   dfaae:	f001 f9af 	bl	e0e10 <mbedtls_ssl_write_certificate>
   dfab2:	e393      	b.n	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   dfab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   dfab6:	681b      	ldr	r3, [r3, #0]
   dfab8:	f893 800a 	ldrb.w	r8, [r3, #10]
   dfabc:	f1b8 0f01 	cmp.w	r8, #1
   dfac0:	f040 8105 	bne.w	dfcce <mbedtls_ssl_handshake_client_step+0x4c2>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   dfac4:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   dfac6:	6b25      	ldr	r5, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   dfac8:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   dfaca:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   dface:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
   dfad2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   dfad6:	f505 77da 	add.w	r7, r5, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   dfada:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   dfadc:	f3c2 0240 	ubfx	r2, r2, #1, #1
   dfae0:	463b      	mov	r3, r7
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   dfae2:	bf14      	ite	ne
   dfae4:	2602      	movne	r6, #2
   dfae6:	2600      	moveq	r6, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   dfae8:	f001 ff5c 	bl	e19a4 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
   dfaec:	6823      	ldr	r3, [r4, #0]
   dfaee:	f505 71db 	add.w	r1, r5, #438	; 0x1b6
   dfaf2:	f8d3 9018 	ldr.w	r9, [r3, #24]
   dfaf6:	69d8      	ldr	r0, [r3, #28]
   dfaf8:	222e      	movs	r2, #46	; 0x2e
   dfafa:	47c8      	blx	r9
   dfafc:	4605      	mov	r5, r0
   dfafe:	2800      	cmp	r0, #0
   dfb00:	f040 83c0 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
   dfb04:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfb06:	2230      	movs	r2, #48	; 0x30
   dfb08:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
   dfb0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfb0e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   dfb10:	2800      	cmp	r0, #0
   dfb12:	f000 834e 	beq.w	e01b2 <mbedtls_ssl_handshake_client_step+0x9a6>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
   dfb16:	4641      	mov	r1, r8
   dfb18:	30bc      	adds	r0, #188	; 0xbc
   dfb1a:	f7fa fa95 	bl	da048 <mbedtls_pk_can_do>
   dfb1e:	2800      	cmp	r0, #0
   dfb20:	f000 8349 	beq.w	e01b6 <mbedtls_ssl_handshake_client_step+0x9aa>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   dfb24:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
   dfb26:	6b21      	ldr	r1, [r4, #48]	; 0x30
   dfb28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   dfb2a:	9105      	str	r1, [sp, #20]
   dfb2c:	69d1      	ldr	r1, [r2, #28]
   dfb2e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   dfb30:	9103      	str	r1, [sp, #12]
   dfb32:	6992      	ldr	r2, [r2, #24]
   dfb34:	9202      	str	r2, [sp, #8]
   dfb36:	f5c6 52ff 	rsb	r2, r6, #8160	; 0x1fe0
   dfb3a:	321c      	adds	r2, #28
   dfb3c:	9201      	str	r2, [sp, #4]
   dfb3e:	aa0a      	add	r2, sp, #40	; 0x28
   dfb40:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   dfb44:	9200      	str	r2, [sp, #0]
   dfb46:	9a05      	ldr	r2, [sp, #20]
   dfb48:	1d33      	adds	r3, r6, #4
   dfb4a:	442b      	add	r3, r5
   dfb4c:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
   dfb50:	4639      	mov	r1, r7
   dfb52:	30bc      	adds	r0, #188	; 0xbc
   dfb54:	f7fa fae2 	bl	da11c <mbedtls_pk_encrypt>
   dfb58:	4605      	mov	r5, r0
   dfb5a:	2800      	cmp	r0, #0
   dfb5c:	f040 8392 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
   dfb60:	2e00      	cmp	r6, #0
   dfb62:	f000 832a 	beq.w	e01ba <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
   dfb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfb68:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfb6c:	0a19      	lsrs	r1, r3, #8
   dfb6e:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
   dfb70:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfb74:	7153      	strb	r3, [r2, #5]
        *olen += 2;
   dfb76:	3302      	adds	r3, #2
   dfb78:	930a      	str	r3, [sp, #40]	; 0x28
   dfb7a:	e31e      	b.n	e01ba <mbedtls_ssl_handshake_client_step+0x9ae>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   dfb7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   dfb7e:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   dfb80:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
   dfb82:	2300      	movs	r3, #0
   dfb84:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   dfb86:	f000 fd1d 	bl	e05c4 <mbedtls_ssl_derive_keys>
   dfb8a:	4605      	mov	r5, r0
   dfb8c:	2800      	cmp	r0, #0
   dfb8e:	f040 8379 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfb92:	7ab3      	ldrb	r3, [r6, #10]
   dfb94:	1f5a      	subs	r2, r3, #5
   dfb96:	2a03      	cmp	r2, #3
   dfb98:	f240 8307 	bls.w	e01aa <mbedtls_ssl_handshake_client_step+0x99e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   dfb9c:	2b0b      	cmp	r3, #11
   dfb9e:	f000 8304 	beq.w	e01aa <mbedtls_ssl_handshake_client_step+0x99e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
   dfba2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   dfba6:	2b00      	cmp	r3, #0
   dfba8:	f000 82ff 	beq.w	e01aa <mbedtls_ssl_handshake_client_step+0x99e>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   dfbac:	6b26      	ldr	r6, [r4, #48]	; 0x30
   dfbae:	b10e      	cbz	r6, dfbb4 <mbedtls_ssl_handshake_client_step+0x3a8>
   dfbb0:	6873      	ldr	r3, [r6, #4]
   dfbb2:	b923      	cbnz	r3, dfbbe <mbedtls_ssl_handshake_client_step+0x3b2>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   dfbb4:	6823      	ldr	r3, [r4, #0]
   dfbb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
   dfbb8:	2b00      	cmp	r3, #0
   dfbba:	f000 82f6 	beq.w	e01aa <mbedtls_ssl_handshake_client_step+0x99e>
   dfbbe:	681b      	ldr	r3, [r3, #0]
   dfbc0:	2b00      	cmp	r3, #0
   dfbc2:	f000 82f2 	beq.w	e01aa <mbedtls_ssl_handshake_client_step+0x99e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
   dfbc6:	4620      	mov	r0, r4
   dfbc8:	f7ff fe14 	bl	df7f4 <mbedtls_ssl_own_key>
   dfbcc:	2800      	cmp	r0, #0
   dfbce:	d045      	beq.n	dfc5c <mbedtls_ssl_handshake_client_step+0x450>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
   dfbd0:	f8d6 3164 	ldr.w	r3, [r6, #356]	; 0x164
   dfbd4:	a90a      	add	r1, sp, #40	; 0x28
   dfbd6:	4620      	mov	r0, r4
   dfbd8:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   dfbda:	68e3      	ldr	r3, [r4, #12]
   dfbdc:	2b03      	cmp	r3, #3
   dfbde:	d176      	bne.n	dfcce <mbedtls_ssl_handshake_client_step+0x4c2>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
   dfbe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfbe2:	681b      	ldr	r3, [r3, #0]
   dfbe4:	7a5d      	ldrb	r5, [r3, #9]
   dfbe6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfbea:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   dfbec:	bf0b      	itete	eq
   dfbee:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   dfbf0:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   dfbf2:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   dfbf4:	711a      	strbne	r2, [r3, #4]
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   dfbf6:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
   dfbf8:	bf18      	it	ne
   dfbfa:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   dfbfc:	f7ff fdfa 	bl	df7f4 <mbedtls_ssl_own_key>
   dfc00:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   dfc04:	f001 fd8f 	bl	e1726 <mbedtls_ssl_sig_from_pk>
   dfc08:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
   dfc0a:	4620      	mov	r0, r4
   dfc0c:	f7ff fdf2 	bl	df7f4 <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   dfc10:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
   dfc12:	69da      	ldr	r2, [r3, #28]
   dfc14:	9203      	str	r2, [sp, #12]
   dfc16:	699b      	ldr	r3, [r3, #24]
   dfc18:	9302      	str	r3, [sp, #8]
   dfc1a:	ab09      	add	r3, sp, #36	; 0x24
   dfc1c:	9301      	str	r3, [sp, #4]
   dfc1e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfc22:	3308      	adds	r3, #8
   dfc24:	9300      	str	r3, [sp, #0]
   dfc26:	4629      	mov	r1, r5
   dfc28:	2300      	movs	r3, #0
   dfc2a:	aa0a      	add	r2, sp, #40	; 0x28
   dfc2c:	f7fa fa42 	bl	da0b4 <mbedtls_pk_sign>
   dfc30:	4605      	mov	r5, r0
   dfc32:	2800      	cmp	r0, #0
   dfc34:	f040 8326 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
   dfc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dfc3a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfc3e:	0a19      	lsrs	r1, r3, #8
   dfc40:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
   dfc42:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfc46:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
   dfc48:	3308      	adds	r3, #8
   dfc4a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   dfc4e:	2316      	movs	r3, #22
   dfc50:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
   dfc54:	220f      	movs	r2, #15
   dfc56:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfc5a:	e2b8      	b.n	e01ce <mbedtls_ssl_handshake_client_step+0x9c2>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   dfc5c:	4d06      	ldr	r5, [pc, #24]	; (dfc78 <mbedtls_ssl_handshake_client_step+0x46c>)
   dfc5e:	e311      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
   dfc60:	4620      	mov	r0, r4
   dfc62:	f001 f939 	bl	e0ed8 <mbedtls_ssl_write_change_cipher_spec>
   dfc66:	e2b9      	b.n	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
           break;

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
   dfc68:	4620      	mov	r0, r4
   dfc6a:	f001 f98b 	bl	e0f84 <mbedtls_ssl_write_finished>
   dfc6e:	e2b5      	b.n	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
   dfc70:	ffff8f00 	.word	0xffff8f00
   dfc74:	ffff8680 	.word	0xffff8680
   dfc78:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   dfc7c:	4620      	mov	r0, r4
   dfc7e:	f001 f8a9 	bl	e0dd4 <mbedtls_ssl_read_record>
   dfc82:	2800      	cmp	r0, #0
   dfc84:	f040 82aa 	bne.w	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   dfc88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfc8a:	2b16      	cmp	r3, #22
   dfc8c:	f47f ae3a 	bne.w	df904 <mbedtls_ssl_handshake_client_step+0xf8>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   dfc90:	6e67      	ldr	r7, [r4, #100]	; 0x64
   dfc92:	783b      	ldrb	r3, [r7, #0]
   dfc94:	2b04      	cmp	r3, #4
   dfc96:	d103      	bne.n	dfca0 <mbedtls_ssl_handshake_client_step+0x494>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
   dfc98:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   dfc9a:	2b09      	cmp	r3, #9
   dfc9c:	f200 82a0 	bhi.w	e01e0 <mbedtls_ssl_handshake_client_step+0x9d4>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   dfca0:	2232      	movs	r2, #50	; 0x32
   dfca2:	2102      	movs	r1, #2
   dfca4:	4620      	mov	r0, r4
   dfca6:	f000 ff81 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
   dfcaa:	4dc1      	ldr	r5, [pc, #772]	; (dffb0 <mbedtls_ssl_handshake_client_step+0x7a4>)
   dfcac:	e2ea      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
   dfcae:	4620      	mov	r0, r4
   dfcb0:	f001 f920 	bl	e0ef4 <mbedtls_ssl_parse_change_cipher_spec>
   dfcb4:	e292      	b.n	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
           break;

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
   dfcb6:	4620      	mov	r0, r4
   dfcb8:	f001 f9ac 	bl	e1014 <mbedtls_ssl_parse_finished>
   dfcbc:	e28e      	b.n	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
           break;

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   dfcbe:	230f      	movs	r3, #15
   dfcc0:	e275      	b.n	e01ae <mbedtls_ssl_handshake_client_step+0x9a2>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
   dfcc2:	4620      	mov	r0, r4
   dfcc4:	f001 fbaa 	bl	e141c <mbedtls_ssl_handshake_wrapup>
           break;
   dfcc8:	e2dc      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
   dfcca:	4dba      	ldr	r5, [pc, #744]	; (dffb4 <mbedtls_ssl_handshake_client_step+0x7a8>)
   dfccc:	e2da      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dfcce:	4dba      	ldr	r5, [pc, #744]	; (dffb8 <mbedtls_ssl_handshake_client_step+0x7ac>)
   dfcd0:	e2d8      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
   dfcd2:	f852 0b04 	ldr.w	r0, [r2], #4
   dfcd6:	f841 0b04 	str.w	r0, [r1], #4
   dfcda:	429a      	cmp	r2, r3
   dfcdc:	d1f9      	bne.n	dfcd2 <mbedtls_ssl_handshake_client_step+0x4c6>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
   dfcde:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   dfce0:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
   dfce2:	f1a3 0210 	sub.w	r2, r3, #16
   dfce6:	2a10      	cmp	r2, #16
   dfce8:	d806      	bhi.n	dfcf8 <mbedtls_ssl_handshake_client_step+0x4ec>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
   dfcea:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
   dfcec:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
   dfcf0:	2a00      	cmp	r2, #0
   dfcf2:	bf08      	it	eq
   dfcf4:	2300      	moveq	r3, #0
   dfcf6:	e000      	b.n	dfcfa <mbedtls_ssl_handshake_client_step+0x4ee>
   dfcf8:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
   dfcfa:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   dfcfc:	b172      	cbz	r2, dfd1c <mbedtls_ssl_handshake_client_step+0x510>
   dfcfe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   dfd00:	b162      	cbz	r2, dfd1c <mbedtls_ssl_handshake_client_step+0x510>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
   dfd02:	6823      	ldr	r3, [r4, #0]
   dfd04:	2220      	movs	r2, #32
   dfd06:	699d      	ldr	r5, [r3, #24]
   dfd08:	69d8      	ldr	r0, [r3, #28]
   dfd0a:	310c      	adds	r1, #12
   dfd0c:	47a8      	blx	r5

            if( ret != 0 )
   dfd0e:	4605      	mov	r5, r0
   dfd10:	2800      	cmp	r0, #0
   dfd12:	f040 82b7 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
   dfd16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   dfd18:	2320      	movs	r3, #32
   dfd1a:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
   dfd1c:	f107 0527 	add.w	r5, r7, #39	; 0x27
   dfd20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    for( i = 0; i < n; i++ )
   dfd24:	2200      	movs	r2, #0
   dfd26:	4293      	cmp	r3, r2
   dfd28:	d005      	beq.n	dfd36 <mbedtls_ssl_handshake_client_step+0x52a>
        *p++ = ssl->session_negotiate->id[i];
   dfd2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   dfd2c:	4411      	add	r1, r2
   dfd2e:	7b09      	ldrb	r1, [r1, #12]
   dfd30:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
   dfd32:	3201      	adds	r2, #1
   dfd34:	e7f7      	b.n	dfd26 <mbedtls_ssl_handshake_client_step+0x51a>
   dfd36:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
   dfd38:	68e2      	ldr	r2, [r4, #12]
   dfd3a:	6823      	ldr	r3, [r4, #0]
   dfd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
   dfd40:	f105 0902 	add.w	r9, r5, #2
   dfd44:	f1a3 0804 	sub.w	r8, r3, #4
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
   dfd48:	2600      	movs	r6, #0
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
   dfd4a:	f858 bf04 	ldr.w	fp, [r8, #4]!
   dfd4e:	f1bb 0f00 	cmp.w	fp, #0
   dfd52:	d01c      	beq.n	dfd8e <mbedtls_ssl_handshake_client_step+0x582>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
   dfd54:	4658      	mov	r0, fp
   dfd56:	f7ff fd1d 	bl	df794 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
   dfd5a:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
   dfd5c:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
   dfd60:	2800      	cmp	r0, #0
   dfd62:	d0f2      	beq.n	dfd4a <mbedtls_ssl_handshake_client_step+0x53e>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
   dfd64:	6903      	ldr	r3, [r0, #16]
   dfd66:	4299      	cmp	r1, r3
   dfd68:	dbef      	blt.n	dfd4a <mbedtls_ssl_handshake_client_step+0x53e>
   dfd6a:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
   dfd6e:	6983      	ldr	r3, [r0, #24]
   dfd70:	429a      	cmp	r2, r3
   dfd72:	dcea      	bgt.n	dfd4a <mbedtls_ssl_handshake_client_step+0x53e>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
   dfd74:	f8d8 3000 	ldr.w	r3, [r8]
   dfd78:	121a      	asrs	r2, r3, #8
   dfd7a:	464b      	mov	r3, r9
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
   dfd7c:	3601      	adds	r6, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
   dfd7e:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
   dfd82:	f8d8 2000 	ldr.w	r2, [r8]
   dfd86:	f889 2001 	strb.w	r2, [r9, #1]
   dfd8a:	4699      	mov	r9, r3
   dfd8c:	e7dd      	b.n	dfd4a <mbedtls_ssl_handshake_client_step+0x53e>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   dfd8e:	23ff      	movs	r3, #255	; 0xff
        n++;
   dfd90:	3601      	adds	r6, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   dfd92:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
   dfd96:	09f3      	lsrs	r3, r6, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
   dfd98:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
   dfd9c:	0076      	lsls	r6, r6, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
   dfd9e:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
   dfda0:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
   dfda2:	706e      	strb	r6, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
   dfda4:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   dfda8:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   dfdac:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
   dfdb0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   dfdb4:	f109 0604 	add.w	r6, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
   dfdb8:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   dfdbc:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
   dfdc0:	b358      	cbz	r0, dfe1a <mbedtls_ssl_handshake_client_step+0x60e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
   dfdc2:	f006 ff52 	bl	e6c6a <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   dfdc6:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
   dfdc8:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   dfdca:	d828      	bhi.n	dfe1e <mbedtls_ssl_handshake_client_step+0x612>
   dfdcc:	f100 0a09 	add.w	sl, r0, #9
   dfdd0:	ebc8 0505 	rsb	r5, r8, r5
   dfdd4:	4555      	cmp	r5, sl
   dfdd6:	d322      	bcc.n	dfe1e <mbedtls_ssl_handshake_client_step+0x612>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
   dfdd8:	1d43      	adds	r3, r0, #5
   dfdda:	0a1b      	lsrs	r3, r3, #8
   dfddc:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
   dfde0:	b2c3      	uxtb	r3, r0
   dfde2:	1d59      	adds	r1, r3, #5
   dfde4:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   dfde8:	1cc1      	adds	r1, r0, #3
   dfdea:	0a09      	lsrs	r1, r1, #8
   dfdec:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   dfdf0:	1cd9      	adds	r1, r3, #3
   dfdf2:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   dfdf6:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
   dfdf8:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
   dfdfc:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
   dfe00:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   dfe04:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
   dfe08:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
   dfe0c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
   dfe10:	f109 000f 	add.w	r0, r9, #15
   dfe14:	f006 fe97 	bl	e6b46 <memcpy>
   dfe18:	e002      	b.n	dfe20 <mbedtls_ssl_handshake_client_step+0x614>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
   dfe1a:	4682      	mov	sl, r0
   dfe1c:	e000      	b.n	dfe20 <mbedtls_ssl_handshake_client_step+0x614>
   dfe1e:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
   dfe20:	6823      	ldr	r3, [r4, #0]
   dfe22:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   dfe26:	2a03      	cmp	r2, #3
   dfe28:	d13a      	bne.n	dfea0 <mbedtls_ssl_handshake_client_step+0x694>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   dfe2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
   dfe2c:	2100      	movs	r1, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   dfe2e:	f852 5011 	ldr.w	r5, [r2, r1, lsl #1]
   dfe32:	b10d      	cbz	r5, dfe38 <mbedtls_ssl_handshake_client_step+0x62c>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
   dfe34:	3102      	adds	r1, #2
   dfe36:	e7fa      	b.n	dfe2e <mbedtls_ssl_handshake_client_step+0x622>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   dfe38:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
   dfe3c:	f10a 0b02 	add.w	fp, sl, #2
   dfe40:	44b3      	add	fp, r6
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   dfe42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
   dfe46:	459b      	cmp	fp, r3
   dfe48:	d82b      	bhi.n	dfea2 <mbedtls_ssl_handshake_client_step+0x696>
   dfe4a:	ebcb 0303 	rsb	r3, fp, r3
   dfe4e:	3106      	adds	r1, #6
   dfe50:	428b      	cmp	r3, r1
   dfe52:	d326      	bcc.n	dfea2 <mbedtls_ssl_handshake_client_step+0x696>
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
   dfe54:	2101      	movs	r1, #1
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   dfe56:	f852 0015 	ldr.w	r0, [r2, r5, lsl #1]
   dfe5a:	9107      	str	r1, [sp, #28]
   dfe5c:	9206      	str	r2, [sp, #24]
   dfe5e:	1cab      	adds	r3, r5, #2
   dfe60:	b158      	cbz	r0, dfe7a <mbedtls_ssl_handshake_client_step+0x66e>
   dfe62:	9305      	str	r3, [sp, #20]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   dfe64:	f001 fc68 	bl	e1738 <mbedtls_ssl_hash_from_md_alg>
   dfe68:	445d      	add	r5, fp
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
   dfe6a:	9b05      	ldr	r3, [sp, #20]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   dfe6c:	71a8      	strb	r0, [r5, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
   dfe6e:	461d      	mov	r5, r3
   dfe70:	445b      	add	r3, fp
   dfe72:	9907      	ldr	r1, [sp, #28]
   dfe74:	7159      	strb	r1, [r3, #5]
   dfe76:	9a06      	ldr	r2, [sp, #24]
   dfe78:	e7ed      	b.n	dfe56 <mbedtls_ssl_handshake_client_step+0x64a>
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   dfe7a:	0a1b      	lsrs	r3, r3, #8
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
   dfe7c:	220d      	movs	r2, #13

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   dfe7e:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   dfe82:	b2eb      	uxtb	r3, r5
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
   dfe84:	f88b 2001 	strb.w	r2, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   dfe88:	1c9a      	adds	r2, r3, #2
   dfe8a:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   dfe8e:	0a2a      	lsrs	r2, r5, #8
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
   dfe90:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   dfe94:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
   dfe98:	f88b 3005 	strb.w	r3, [fp, #5]

    *olen = 6 + sig_alg_len;
   dfe9c:	3506      	adds	r5, #6
   dfe9e:	e000      	b.n	dfea2 <mbedtls_ssl_handshake_client_step+0x696>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
   dfea0:	2500      	movs	r5, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
   dfea2:	6823      	ldr	r3, [r4, #0]
   dfea4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
   dfea8:	f413 73e0 	ands.w	r3, r3, #448	; 0x1c0
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
   dfeac:	4455      	add	r5, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
   dfeae:	d018      	beq.n	dfee2 <mbedtls_ssl_handshake_client_step+0x6d6>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   dfeb0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
   dfeb4:	1caa      	adds	r2, r5, #2
   dfeb6:	4432      	add	r2, r6
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   dfeb8:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
   dfebc:	428a      	cmp	r2, r1
   dfebe:	f04f 0300 	mov.w	r3, #0
   dfec2:	d80e      	bhi.n	dfee2 <mbedtls_ssl_handshake_client_step+0x6d6>
   dfec4:	1a89      	subs	r1, r1, r2
   dfec6:	2904      	cmp	r1, #4
   dfec8:	d90b      	bls.n	dfee2 <mbedtls_ssl_handshake_client_step+0x6d6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   dfeca:	2101      	movs	r1, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
   dfecc:	7013      	strb	r3, [r2, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   dfece:	7051      	strb	r1, [r2, #1]

    *p++ = 0x00;
   dfed0:	7093      	strb	r3, [r2, #2]
    *p++ = 1;
   dfed2:	70d1      	strb	r1, [r2, #3]

    *p++ = ssl->conf->mfl_code;
   dfed4:	6823      	ldr	r3, [r4, #0]
   dfed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
   dfeda:	f3c3 1382 	ubfx	r3, r3, #6, #3
   dfede:	7113      	strb	r3, [r2, #4]

    *olen = 5;
   dfee0:	2305      	movs	r3, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
   dfee2:	441d      	add	r5, r3
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   dfee4:	6823      	ldr	r3, [r4, #0]
   dfee6:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
   dfeea:	f002 0202 	and.w	r2, r2, #2
   dfeee:	f002 0aff 	and.w	sl, r2, #255	; 0xff
   dfef2:	b32a      	cbz	r2, dff40 <mbedtls_ssl_handshake_client_step+0x734>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   dfef4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
   dfef8:	1ca8      	adds	r0, r5, #2
   dfefa:	4430      	add	r0, r6
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   dfefc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
   dff00:	4298      	cmp	r0, r3
   dff02:	d816      	bhi.n	dff32 <mbedtls_ssl_handshake_client_step+0x726>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
   dff04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   dff06:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
   dff08:	1a1b      	subs	r3, r3, r0
   dff0a:	f102 0a04 	add.w	sl, r2, #4
   dff0e:	4553      	cmp	r3, sl
   dff10:	f04f 0300 	mov.w	r3, #0
   dff14:	d310      	bcc.n	dff38 <mbedtls_ssl_handshake_client_step+0x72c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
   dff16:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
   dff18:	2323      	movs	r3, #35	; 0x23
   dff1a:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
   dff1c:	0a13      	lsrs	r3, r2, #8
   dff1e:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
   dff20:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
   dff22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dff24:	6e59      	ldr	r1, [r3, #100]	; 0x64
   dff26:	b149      	cbz	r1, dff3c <mbedtls_ssl_handshake_client_step+0x730>
   dff28:	b142      	cbz	r2, dff3c <mbedtls_ssl_handshake_client_step+0x730>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
   dff2a:	3004      	adds	r0, #4
   dff2c:	f006 fe0b 	bl	e6b46 <memcpy>
   dff30:	e006      	b.n	dff40 <mbedtls_ssl_handshake_client_step+0x734>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
   dff32:	f04f 0a00 	mov.w	sl, #0
   dff36:	e003      	b.n	dff40 <mbedtls_ssl_handshake_client_step+0x734>
   dff38:	469a      	mov	sl, r3
   dff3a:	e001      	b.n	dff40 <mbedtls_ssl_handshake_client_step+0x734>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
   dff3c:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
   dff40:	eb15 050a 	adds.w	r5, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   dff44:	bf1e      	ittt	ne
   dff46:	0a2b      	lsrne	r3, r5, #8
   dff48:	f889 3004 	strbne.w	r3, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
   dff4c:	f889 5005 	strbne.w	r5, [r9, #5]
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   dff50:	f04f 0316 	mov.w	r3, #22
   dff54:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
   dff58:	bf18      	it	ne
   dff5a:	eb08 0605 	addne.w	r6, r8, r5
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
   dff5e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dff62:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
   dff64:	1bf6      	subs	r6, r6, r7
   dff66:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
   dff6a:	701a      	strb	r2, [r3, #0]

    ssl->state++;
   dff6c:	6863      	ldr	r3, [r4, #4]
   dff6e:	4413      	add	r3, r2
   dff70:	e130      	b.n	e01d4 <mbedtls_ssl_handshake_client_step+0x9c8>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
   dff72:	2246      	movs	r2, #70	; 0x46
   dff74:	2102      	movs	r1, #2
   dff76:	4620      	mov	r0, r4
   dff78:	f000 fe18 	bl	e0bac <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
   dff7c:	4d0f      	ldr	r5, [pc, #60]	; (dffbc <mbedtls_ssl_handshake_client_step+0x7b0>)
   dff7e:	e181      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
   dff80:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   dff82:	f106 022b 	add.w	r2, r6, #43	; 0x2b
   dff86:	4293      	cmp	r3, r2
   dff88:	d91a      	bls.n	dffc0 <mbedtls_ssl_handshake_client_step+0x7b4>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
   dff8a:	eb09 0206 	add.w	r2, r9, r6
                  | ( buf[39 + n]       ) );
   dff8e:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
   dff92:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   dff96:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
   dff9a:	1e7a      	subs	r2, r7, #1
   dff9c:	2a02      	cmp	r2, #2
   dff9e:	f67f acf6 	bls.w	df98e <mbedtls_ssl_handshake_client_step+0x182>
   dffa2:	f106 022c 	add.w	r2, r6, #44	; 0x2c
   dffa6:	443a      	add	r2, r7
   dffa8:	4293      	cmp	r3, r2
   dffaa:	f47f acf0 	bne.w	df98e <mbedtls_ssl_handshake_client_step+0x182>
   dffae:	e00d      	b.n	dffcc <mbedtls_ssl_handshake_client_step+0x7c0>
   dffb0:	ffff9200 	.word	0xffff9200
   dffb4:	ffff8c00 	.word	0xffff8c00
   dffb8:	ffff9400 	.word	0xffff9400
   dffbc:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
   dffc0:	f106 022a 	add.w	r2, r6, #42	; 0x2a
   dffc4:	4293      	cmp	r3, r2
   dffc6:	f47f ace2 	bne.w	df98e <mbedtls_ssl_handshake_client_step+0x182>
    {
        ext_len = 0;
   dffca:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   dffcc:	eb09 0306 	add.w	r3, r9, r6
   dffd0:	f893 a023 	ldrb.w	sl, [r3, #35]	; 0x23
   dffd4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   dffd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   dffdc:	ea42 2a0a 	orr.w	sl, r2, sl, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   dffe0:	2b00      	cmp	r3, #0
   dffe2:	f43f acd6 	beq.w	df992 <mbedtls_ssl_handshake_client_step+0x186>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   dffe6:	222f      	movs	r2, #47	; 0x2f
   dffe8:	2102      	movs	r1, #2
   dffea:	4620      	mov	r0, r4
   dffec:	f000 fdde 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   dfff0:	4da6      	ldr	r5, [pc, #664]	; (e028c <mbedtls_ssl_handshake_client_step+0xa80>)
   dfff2:	e147      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   dfff4:	2e00      	cmp	r6, #0
   dfff6:	f43f acea 	beq.w	df9ce <mbedtls_ssl_handshake_client_step+0x1c2>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
   dfffa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   dfffc:	6803      	ldr	r3, [r0, #0]
   dfffe:	459a      	cmp	sl, r3
   e0000:	f47f ace5 	bne.w	df9ce <mbedtls_ssl_handshake_client_step+0x1c2>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
   e0004:	6843      	ldr	r3, [r0, #4]
   e0006:	2b00      	cmp	r3, #0
   e0008:	f47f ace1 	bne.w	df9ce <mbedtls_ssl_handshake_client_step+0x1c2>
        ssl->session_negotiate->compression != comp ||
   e000c:	6883      	ldr	r3, [r0, #8]
   e000e:	429e      	cmp	r6, r3
   e0010:	f47f acdd 	bne.w	df9ce <mbedtls_ssl_handshake_client_step+0x1c2>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
   e0014:	4632      	mov	r2, r6
   e0016:	4641      	mov	r1, r8
   e0018:	300c      	adds	r0, #12
   e001a:	f006 fd85 	bl	e6b28 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
   e001e:	2800      	cmp	r0, #0
   e0020:	f47f acd5 	bne.w	df9ce <mbedtls_ssl_handshake_client_step+0x1c2>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e0024:	230c      	movs	r3, #12
   e0026:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e0028:	4620      	mov	r0, r4
   e002a:	f000 facb 	bl	e05c4 <mbedtls_ssl_derive_keys>
   e002e:	4680      	mov	r8, r0
   e0030:	2800      	cmp	r0, #0
   e0032:	f43f acdf 	beq.w	df9f4 <mbedtls_ssl_handshake_client_step+0x1e8>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e0036:	2250      	movs	r2, #80	; 0x50
   e0038:	2102      	movs	r1, #2
   e003a:	4620      	mov	r0, r4
   e003c:	f000 fdb6 	bl	e0bac <mbedtls_ssl_send_alert_message>
   e0040:	4645      	mov	r5, r8
   e0042:	e11f      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
   e0044:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e0046:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
   e0048:	4290      	cmp	r0, r2
   e004a:	f47f acd8 	bne.w	df9fe <mbedtls_ssl_handshake_client_step+0x1f2>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
   e004e:	f7ff fba1 	bl	df794 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
   e0052:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
   e0054:	2800      	cmp	r0, #0
   e0056:	f43f acd7 	beq.w	dfa08 <mbedtls_ssl_handshake_client_step+0x1fc>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
   e005a:	6902      	ldr	r2, [r0, #16]
   e005c:	429a      	cmp	r2, r3
   e005e:	f73f acd3 	bgt.w	dfa08 <mbedtls_ssl_handshake_client_step+0x1fc>
   e0062:	6982      	ldr	r2, [r0, #24]
   e0064:	4293      	cmp	r3, r2
   e0066:	f73f accf 	bgt.w	dfa08 <mbedtls_ssl_handshake_client_step+0x1fc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
   e006a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e006c:	2200      	movs	r2, #0
   e006e:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
   e0070:	f106 0228 	add.w	r2, r6, #40	; 0x28
   e0074:	444a      	add	r2, r9
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
   e0076:	2601      	movs	r6, #1
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
   e0078:	f64f 7001 	movw	r0, #65281	; 0xff01

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
   e007c:	2f00      	cmp	r7, #0
   e007e:	d03f      	beq.n	e0100 <mbedtls_ssl_handshake_client_step+0x8f4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
   e0080:	7811      	ldrb	r1, [r2, #0]
   e0082:	7853      	ldrb	r3, [r2, #1]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
   e0084:	f892 e002 	ldrb.w	lr, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
   e0088:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
   e008c:	78d1      	ldrb	r1, [r2, #3]
   e008e:	ea41 210e 	orr.w	r1, r1, lr, lsl #8

        if( ext_size + 4 > ext_len )
   e0092:	f101 0e04 	add.w	lr, r1, #4
   e0096:	4577      	cmp	r7, lr
   e0098:	f4ff ac79 	bcc.w	df98e <mbedtls_ssl_handshake_client_step+0x182>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
   e009c:	2b23      	cmp	r3, #35	; 0x23
   e009e:	d01e      	beq.n	e00de <mbedtls_ssl_handshake_client_step+0x8d2>
   e00a0:	4283      	cmp	r3, r0
   e00a2:	d002      	beq.n	e00aa <mbedtls_ssl_handshake_client_step+0x89e>
   e00a4:	2b01      	cmp	r3, #1
   e00a6:	d124      	bne.n	e00f2 <mbedtls_ssl_handshake_client_step+0x8e6>
   e00a8:	e008      	b.n	e00bc <mbedtls_ssl_handshake_client_step+0x8b0>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
   e00aa:	2901      	cmp	r1, #1
   e00ac:	d101      	bne.n	e00b2 <mbedtls_ssl_handshake_client_step+0x8a6>
   e00ae:	7913      	ldrb	r3, [r2, #4]
   e00b0:	b10b      	cbz	r3, e00b6 <mbedtls_ssl_handshake_client_step+0x8aa>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e00b2:	2228      	movs	r2, #40	; 0x28
   e00b4:	e4a9      	b.n	dfa0a <mbedtls_ssl_handshake_client_step+0x1fe>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   e00b6:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
   e00ba:	e01a      	b.n	e00f2 <mbedtls_ssl_handshake_client_step+0x8e6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
   e00bc:	6823      	ldr	r3, [r4, #0]
   e00be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
   e00c2:	f403 7ce0 	and.w	ip, r3, #448	; 0x1c0
   e00c6:	f1bc 0f00 	cmp.w	ip, #0
   e00ca:	d0f2      	beq.n	e00b2 <mbedtls_ssl_handshake_client_step+0x8a6>
   e00cc:	2901      	cmp	r1, #1
   e00ce:	d1f0      	bne.n	e00b2 <mbedtls_ssl_handshake_client_step+0x8a6>
        len != 1 ||
   e00d0:	f892 c004 	ldrb.w	ip, [r2, #4]
   e00d4:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e00d8:	459c      	cmp	ip, r3
   e00da:	d00a      	beq.n	e00f2 <mbedtls_ssl_handshake_client_step+0x8e6>
   e00dc:	e7e9      	b.n	e00b2 <mbedtls_ssl_handshake_client_step+0x8a6>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
   e00de:	6823      	ldr	r3, [r4, #0]
   e00e0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   e00e4:	079b      	lsls	r3, r3, #30
   e00e6:	d5e4      	bpl.n	e00b2 <mbedtls_ssl_handshake_client_step+0x8a6>
   e00e8:	2900      	cmp	r1, #0
   e00ea:	d1e2      	bne.n	e00b2 <mbedtls_ssl_handshake_client_step+0x8a6>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
   e00ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e00ee:	f8c3 61f4 	str.w	r6, [r3, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
   e00f2:	1a79      	subs	r1, r7, r1
   e00f4:	1f0f      	subs	r7, r1, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
   e00f6:	3905      	subs	r1, #5
   e00f8:	2902      	cmp	r1, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
   e00fa:	4472      	add	r2, lr

        if( ext_len > 0 && ext_len < 4 )
   e00fc:	d8be      	bhi.n	e007c <mbedtls_ssl_handshake_client_step+0x870>
   e00fe:	e488      	b.n	dfa12 <mbedtls_ssl_handshake_client_step+0x206>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e0100:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   e0104:	2b00      	cmp	r3, #0
   e0106:	f040 80bd 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
   e010a:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e010c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   e0110:	f003 0330 	and.w	r3, r3, #48	; 0x30
   e0114:	2b20      	cmp	r3, #32
   e0116:	f040 80b5 	bne.w	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
   e011a:	e7ca      	b.n	e00b2 <mbedtls_ssl_handshake_client_step+0x8a6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
   e011c:	2306      	movs	r3, #6
   e011e:	e046      	b.n	e01ae <mbedtls_ssl_handshake_client_step+0x9a2>
        return( 0 );
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   e0120:	4620      	mov	r0, r4
   e0122:	f000 fe57 	bl	e0dd4 <mbedtls_ssl_read_record>
   e0126:	2800      	cmp	r0, #0
   e0128:	d158      	bne.n	e01dc <mbedtls_ssl_handshake_client_step+0x9d0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e012a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e012c:	2b16      	cmp	r3, #22
   e012e:	f47f abe9 	bne.w	df904 <mbedtls_ssl_handshake_client_step+0xf8>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
   e0132:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e0134:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
   e0136:	3301      	adds	r3, #1
   e0138:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e013a:	7813      	ldrb	r3, [r2, #0]
   e013c:	2b0d      	cmp	r3, #13
   e013e:	bf0c      	ite	eq
   e0140:	2301      	moveq	r3, #1
   e0142:	2300      	movne	r3, #0
   e0144:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
   e0148:	d002      	beq.n	e0150 <mbedtls_ssl_handshake_client_step+0x944>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
   e014a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
   e014e:	e099      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
   e0150:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   e0152:	2e04      	cmp	r6, #4
   e0154:	d806      	bhi.n	e0164 <mbedtls_ssl_handshake_client_step+0x958>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e0156:	2232      	movs	r2, #50	; 0x32
   e0158:	2102      	movs	r1, #2
   e015a:	4620      	mov	r0, r4
   e015c:	f000 fd26 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
   e0160:	4d4b      	ldr	r5, [pc, #300]	; (e0290 <mbedtls_ssl_handshake_client_step+0xa84>)
   e0162:	e08f      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
   e0164:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e0166:	1dd8      	adds	r0, r3, #7
   e0168:	4286      	cmp	r6, r0
   e016a:	d9f4      	bls.n	e0156 <mbedtls_ssl_handshake_client_step+0x94a>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e016c:	68e1      	ldr	r1, [r4, #12]
   e016e:	2903      	cmp	r1, #3
   e0170:	d10a      	bne.n	e0188 <mbedtls_ssl_handshake_client_step+0x97c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e0172:	18d7      	adds	r7, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e0174:	f897 e005 	ldrb.w	lr, [r7, #5]
   e0178:	79b9      	ldrb	r1, [r7, #6]
   e017a:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e017e:	4408      	add	r0, r1
   e0180:	4286      	cmp	r6, r0
   e0182:	d9e8      	bls.n	e0156 <mbedtls_ssl_handshake_client_step+0x94a>
   e0184:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
   e0186:	440b      	add	r3, r1
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e0188:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e018a:	3307      	adds	r3, #7
   e018c:	7951      	ldrb	r1, [r2, #5]
   e018e:	7992      	ldrb	r2, [r2, #6]
   e0190:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   e0194:	4413      	add	r3, r2
   e0196:	429e      	cmp	r6, r3
   e0198:	d074      	beq.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
   e019a:	e7dc      	b.n	e0156 <mbedtls_ssl_handshake_client_step+0x94a>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e019c:	2232      	movs	r2, #50	; 0x32
   e019e:	2102      	movs	r1, #2
   e01a0:	4620      	mov	r0, r4
   e01a2:	f000 fd03 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
   e01a6:	4d3b      	ldr	r5, [pc, #236]	; (e0294 <mbedtls_ssl_handshake_client_step+0xa88>)
   e01a8:	e06c      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    }

    ssl->state++;
   e01aa:	6863      	ldr	r3, [r4, #4]
   e01ac:	3301      	adds	r3, #1
   e01ae:	6063      	str	r3, [r4, #4]
   e01b0:	e068      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e01b2:	4d39      	ldr	r5, [pc, #228]	; (e0298 <mbedtls_ssl_handshake_client_step+0xa8c>)
   e01b4:	e066      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e01b6:	4d39      	ldr	r5, [pc, #228]	; (e029c <mbedtls_ssl_handshake_client_step+0xa90>)
   e01b8:	e064      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
   e01ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e01bc:	3304      	adds	r3, #4
   e01be:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e01c2:	2316      	movs	r3, #22
   e01c4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
   e01c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e01cc:	2210      	movs	r2, #16
   e01ce:	701a      	strb	r2, [r3, #0]

    ssl->state++;
   e01d0:	6863      	ldr	r3, [r4, #4]
   e01d2:	3301      	adds	r3, #1
   e01d4:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
   e01d6:	4620      	mov	r0, r4
   e01d8:	f000 fbd4 	bl	e0984 <mbedtls_ssl_write_record>
   e01dc:	4605      	mov	r5, r0
   e01de:	e051      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );
   e01e0:	79fa      	ldrb	r2, [r7, #7]
   e01e2:	9205      	str	r2, [sp, #20]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e01e4:	f897 8008 	ldrb.w	r8, [r7, #8]
   e01e8:	7a7a      	ldrb	r2, [r7, #9]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
   e01ea:	f897 b004 	ldrb.w	fp, [r7, #4]
   e01ee:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
   e01f0:	f897 a006 	ldrb.w	sl, [r7, #6]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e01f4:	ea42 2808 	orr.w	r8, r2, r8, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
   e01f8:	f108 020a 	add.w	r2, r8, #10
   e01fc:	4293      	cmp	r3, r2
   e01fe:	f47f ad4f 	bne.w	dfca0 <mbedtls_ssl_handshake_client_step+0x494>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
   e0202:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0204:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e0208:	230c      	movs	r3, #12
   e020a:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
   e020c:	f1b8 0f00 	cmp.w	r8, #0
   e0210:	d038      	beq.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
   e0212:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e0214:	6e53      	ldr	r3, [r2, #100]	; 0x64
   e0216:	6e92      	ldr	r2, [r2, #104]	; 0x68
   e0218:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   e021a:	429a      	cmp	r2, r3
   e021c:	d002      	beq.n	e0224 <mbedtls_ssl_handshake_client_step+0xa18>
   e021e:	7018      	strb	r0, [r3, #0]
   e0220:	3301      	adds	r3, #1
   e0222:	e7fa      	b.n	e021a <mbedtls_ssl_handshake_client_step+0xa0e>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
   e0224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0226:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e0228:	f003 fec6 	bl	e3fb8 <free>
    ssl->session_negotiate->ticket = NULL;
   e022c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e022e:	f04f 0900 	mov.w	r9, #0
   e0232:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
   e0236:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e0238:	4641      	mov	r1, r8

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
   e023a:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e023e:	2001      	movs	r0, #1
   e0240:	f006 fc5c 	bl	e6afc <calloc>
   e0244:	b930      	cbnz	r0, e0254 <mbedtls_ssl_handshake_client_step+0xa48>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e0246:	2250      	movs	r2, #80	; 0x50
   e0248:	2102      	movs	r1, #2
   e024a:	4620      	mov	r0, r4
   e024c:	f000 fcae 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e0250:	4d13      	ldr	r5, [pc, #76]	; (e02a0 <mbedtls_ssl_handshake_client_step+0xa94>)
   e0252:	e017      	b.n	e0284 <mbedtls_ssl_handshake_client_step+0xa78>
    }

    memcpy( ticket, msg + 6, ticket_len );
   e0254:	4642      	mov	r2, r8
   e0256:	f107 010a 	add.w	r1, r7, #10
   e025a:	9006      	str	r0, [sp, #24]
   e025c:	f006 fc73 	bl	e6b46 <memcpy>

    ssl->session_negotiate->ticket = ticket;
   e0260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e0262:	9b06      	ldr	r3, [sp, #24]
   e0264:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
   e0266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
   e0268:	9a05      	ldr	r2, [sp, #20]
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
   e026a:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
   e026e:	0436      	lsls	r6, r6, #16
   e0270:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
   e0274:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0276:	4316      	orrs	r6, r2
   e0278:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
   e027c:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
   e027e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0280:	f8c3 9008 	str.w	r9, [r3, #8]
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
   e0284:	4628      	mov	r0, r5
   e0286:	b017      	add	sp, #92	; 0x5c
   e0288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e028c:	ffff8f80 	.word	0xffff8f80
   e0290:	ffff8580 	.word	0xffff8580
   e0294:	ffff8480 	.word	0xffff8480
   e0298:	ffff8900 	.word	0xffff8900
   e029c:	ffff9300 	.word	0xffff9300
   e02a0:	ffff8100 	.word	0xffff8100

000e02a4 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
   e02a4:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   e02a6:	2300      	movs	r3, #0
   e02a8:	4288      	cmp	r0, r1
   e02aa:	d002      	beq.n	e02b2 <_ZL15mbedtls_zeroizePvj+0xe>
   e02ac:	7003      	strb	r3, [r0, #0]
   e02ae:	3001      	adds	r0, #1
   e02b0:	e7fa      	b.n	e02a8 <_ZL15mbedtls_zeroizePvj+0x4>
   e02b2:	4770      	bx	lr

000e02b4 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
   e02b4:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
   e02b6:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
   e02b8:	b113      	cbz	r3, e02c0 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
   e02ba:	0889      	lsrs	r1, r1, #2
   e02bc:	6c40      	ldr	r0, [r0, #68]	; 0x44
   e02be:	4718      	bx	r3
   e02c0:	4770      	bx	lr
	...

000e02c4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   e02c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
   e02c6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   e02c8:	b0a9      	sub	sp, #164	; 0xa4
   e02ca:	4604      	mov	r4, r0
   e02cc:	460f      	mov	r7, r1
   e02ce:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
   e02d0:	b905      	cbnz	r5, e02d4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   e02d2:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
   e02d4:	a80d      	add	r0, sp, #52	; 0x34
   e02d6:	f7fd fd0e 	bl	ddcf6 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   e02da:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e02dc:	a80d      	add	r0, sp, #52	; 0x34
   e02de:	3118      	adds	r1, #24
   e02e0:	f7fd fd17 	bl	ddd12 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   e02e4:	4b10      	ldr	r3, [pc, #64]	; (e0328 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
   e02e6:	4911      	ldr	r1, [pc, #68]	; (e032c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
   e02e8:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   e02ea:	2e00      	cmp	r6, #0
   e02ec:	bf0c      	ite	eq
   e02ee:	461e      	moveq	r6, r3
   e02f0:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
   e02f2:	a905      	add	r1, sp, #20
   e02f4:	f7fe f902 	bl	de4fc <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
   e02f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
   e02fa:	9701      	str	r7, [sp, #4]
   e02fc:	2420      	movs	r4, #32
   e02fe:	220c      	movs	r2, #12
   e0300:	9202      	str	r2, [sp, #8]
   e0302:	9400      	str	r4, [sp, #0]
   e0304:	4632      	mov	r2, r6
   e0306:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
   e030a:	2130      	movs	r1, #48	; 0x30
   e030c:	ab05      	add	r3, sp, #20
   e030e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   e0312:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
   e0314:	a80d      	add	r0, sp, #52	; 0x34
   e0316:	f7fd fcf2 	bl	ddcfe <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
   e031a:	4621      	mov	r1, r4
   e031c:	a805      	add	r0, sp, #20
   e031e:	f7ff ffc1 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
   e0322:	b029      	add	sp, #164	; 0xa4
   e0324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0326:	bf00      	nop
   e0328:	000e8e51 	.word	0x000e8e51
   e032c:	000e8e61 	.word	0x000e8e61

000e0330 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
   e0330:	b530      	push	{r4, r5, lr}
   e0332:	4605      	mov	r5, r0
   e0334:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
   e0336:	a801      	add	r0, sp, #4
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
   e0338:	460c      	mov	r4, r1
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
   e033a:	f7fd fcdc 	bl	ddcf6 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   e033e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   e0340:	a801      	add	r0, sp, #4
   e0342:	3118      	adds	r1, #24
   e0344:	f7fd fce5 	bl	ddd12 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
   e0348:	4621      	mov	r1, r4
   e034a:	a801      	add	r0, sp, #4
   e034c:	f7fe f8d6 	bl	de4fc <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
   e0350:	a801      	add	r0, sp, #4
   e0352:	f7fd fcd4 	bl	ddcfe <mbedtls_sha256_free>

    return;
}
   e0356:	b01d      	add	sp, #116	; 0x74
   e0358:	bd30      	pop	{r4, r5, pc}
	...

000e035c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
   e035c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0360:	b0b7      	sub	sp, #220	; 0xdc
   e0362:	4604      	mov	r4, r0
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
   e0364:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
   e0366:	468a      	mov	sl, r1
   e0368:	4693      	mov	fp, r2
   e036a:	4699      	mov	r9, r3
   e036c:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
   e036e:	f7f9 fae5 	bl	d993c <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
   e0372:	4620      	mov	r0, r4
   e0374:	f7f9 fad6 	bl	d9924 <mbedtls_md_info_from_type>
   e0378:	4607      	mov	r7, r0
   e037a:	2800      	cmp	r0, #0
   e037c:	d074      	beq.n	e0468 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10c>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
   e037e:	f7f9 fc0f 	bl	d9ba0 <mbedtls_md_get_size>
   e0382:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
   e0384:	4648      	mov	r0, r9
   e0386:	f006 fc70 	bl	e6c6a <strlen>
   e038a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   e038c:	1823      	adds	r3, r4, r0
   e038e:	189a      	adds	r2, r3, r2
   e0390:	2a80      	cmp	r2, #128	; 0x80
   e0392:	4605      	mov	r5, r0
   e0394:	9301      	str	r3, [sp, #4]
   e0396:	d869      	bhi.n	e046c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
   e0398:	ab16      	add	r3, sp, #88	; 0x58
   e039a:	eb03 0804 	add.w	r8, r3, r4
   e039e:	4602      	mov	r2, r0
   e03a0:	4649      	mov	r1, r9
   e03a2:	4640      	mov	r0, r8
   e03a4:	f006 fbcf 	bl	e6b46 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
   e03a8:	9b01      	ldr	r3, [sp, #4]
   e03aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
   e03ac:	9940      	ldr	r1, [sp, #256]	; 0x100
   e03ae:	a816      	add	r0, sp, #88	; 0x58
   e03b0:	4418      	add	r0, r3
   e03b2:	f006 fbc8 	bl	e6b46 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   e03b6:	4639      	mov	r1, r7
   e03b8:	2201      	movs	r2, #1
   e03ba:	a803      	add	r0, sp, #12
   e03bc:	f7f9 fae4 	bl	d9988 <mbedtls_md_setup>
   e03c0:	4607      	mov	r7, r0
   e03c2:	2800      	cmp	r0, #0
   e03c4:	d153      	bne.n	e046e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
   e03c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   e03c8:	4651      	mov	r1, sl
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
   e03ca:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   e03cc:	465a      	mov	r2, fp
   e03ce:	a803      	add	r0, sp, #12
   e03d0:	f7f9 fb2a 	bl	d9a28 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
   e03d4:	462a      	mov	r2, r5
   e03d6:	4641      	mov	r1, r8
   e03d8:	a803      	add	r0, sp, #12
   e03da:	f7f9 fb85 	bl	d9ae8 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
   e03de:	a916      	add	r1, sp, #88	; 0x58
   e03e0:	a803      	add	r0, sp, #12
   e03e2:	f7f9 fb93 	bl	d9b0c <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
   e03e6:	46b8      	mov	r8, r7
   e03e8:	f10d 0a18 	add.w	sl, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   e03ec:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
   e03ee:	45b0      	cmp	r8, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
   e03f0:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
   e03f2:	d22e      	bcs.n	e0452 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf6>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
   e03f4:	f7f9 fbbc 	bl	d9b70 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   e03f8:	462a      	mov	r2, r5
   e03fa:	a916      	add	r1, sp, #88	; 0x58
   e03fc:	a803      	add	r0, sp, #12
   e03fe:	f7f9 fb73 	bl	d9ae8 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
   e0402:	4651      	mov	r1, sl
   e0404:	a803      	add	r0, sp, #12
   e0406:	f7f9 fb81 	bl	d9b0c <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
   e040a:	a803      	add	r0, sp, #12
   e040c:	f7f9 fbb0 	bl	d9b70 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
   e0410:	4622      	mov	r2, r4
   e0412:	a916      	add	r1, sp, #88	; 0x58
   e0414:	a803      	add	r0, sp, #12
   e0416:	f7f9 fb67 	bl	d9ae8 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
   e041a:	a916      	add	r1, sp, #88	; 0x58
   e041c:	a803      	add	r0, sp, #12
   e041e:	f7f9 fb75 	bl	d9b0c <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   e0422:	eb08 0104 	add.w	r1, r8, r4

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   e0426:	9842      	ldr	r0, [sp, #264]	; 0x108

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   e0428:	428e      	cmp	r6, r1
   e042a:	bf2c      	ite	cs
   e042c:	4622      	movcs	r2, r4
   e042e:	fbb6 f2f4 	udivcc	r2, r6, r4

        for( j = 0; j < k; j++ )
   e0432:	f04f 0300 	mov.w	r3, #0

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   e0436:	bf38      	it	cc
   e0438:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   e043c:	4480      	add	r8, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
   e043e:	4293      	cmp	r3, r2
   e0440:	d101      	bne.n	e0446 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xea>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   e0442:	4688      	mov	r8, r1
   e0444:	e7d3      	b.n	e03ee <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   e0446:	f81a 0003 	ldrb.w	r0, [sl, r3]
   e044a:	f808 0003 	strb.w	r0, [r8, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
   e044e:	3301      	adds	r3, #1
   e0450:	e7f5      	b.n	e043e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe2>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
   e0452:	f7f9 fa78 	bl	d9946 <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
   e0456:	a816      	add	r0, sp, #88	; 0x58
   e0458:	2180      	movs	r1, #128	; 0x80
   e045a:	f7ff ff23 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
   e045e:	2140      	movs	r1, #64	; 0x40
   e0460:	4650      	mov	r0, sl
   e0462:	f7ff ff1f 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>

    return( 0 );
   e0466:	e002      	b.n	e046e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e0468:	4f03      	ldr	r7, [pc, #12]	; (e0478 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)
   e046a:	e000      	b.n	e046e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e046c:	4f03      	ldr	r7, [pc, #12]	; (e047c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x120>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
   e046e:	4638      	mov	r0, r7
   e0470:	b037      	add	sp, #220	; 0xdc
   e0472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0476:	bf00      	nop
   e0478:	ffff9400 	.word	0xffff9400
   e047c:	ffff8f00 	.word	0xffff8f00

000e0480 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
   e0480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
   e0482:	9c08      	ldr	r4, [sp, #32]
   e0484:	9403      	str	r4, [sp, #12]
   e0486:	9c07      	ldr	r4, [sp, #28]
   e0488:	9402      	str	r4, [sp, #8]
   e048a:	9c06      	ldr	r4, [sp, #24]
   e048c:	e88d 0018 	stmia.w	sp, {r3, r4}
   e0490:	4613      	mov	r3, r2
   e0492:	460a      	mov	r2, r1
   e0494:	4601      	mov	r1, r0
   e0496:	2006      	movs	r0, #6
   e0498:	f7ff ff60 	bl	e035c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   e049c:	b004      	add	sp, #16
   e049e:	bd10      	pop	{r4, pc}

000e04a0 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
   e04a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
   e04a2:	9c08      	ldr	r4, [sp, #32]
   e04a4:	9403      	str	r4, [sp, #12]
   e04a6:	9c07      	ldr	r4, [sp, #28]
   e04a8:	9402      	str	r4, [sp, #8]
   e04aa:	9c06      	ldr	r4, [sp, #24]
   e04ac:	e88d 0018 	stmia.w	sp, {r3, r4}
   e04b0:	4613      	mov	r3, r2
   e04b2:	460a      	mov	r2, r1
   e04b4:	4601      	mov	r1, r0
   e04b6:	2007      	movs	r0, #7
   e04b8:	f7ff ff50 	bl	e035c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   e04bc:	b004      	add	sp, #16
   e04be:	bd10      	pop	{r4, pc}

000e04c0 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   e04c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
   e04c2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   e04c4:	b0c7      	sub	sp, #284	; 0x11c
   e04c6:	4604      	mov	r4, r0
   e04c8:	460f      	mov	r7, r1
   e04ca:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
   e04cc:	b905      	cbnz	r5, e04d0 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   e04ce:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
   e04d0:	a810      	add	r0, sp, #64	; 0x40
   e04d2:	f7fe f8c8 	bl	de666 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   e04d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e04d8:	a810      	add	r0, sp, #64	; 0x40
   e04da:	3188      	adds	r1, #136	; 0x88
   e04dc:	f7fe f8d1 	bl	de682 <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   e04e0:	4b10      	ldr	r3, [pc, #64]	; (e0524 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
   e04e2:	4911      	ldr	r1, [pc, #68]	; (e0528 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
   e04e4:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   e04e6:	2e00      	cmp	r6, #0
   e04e8:	bf0c      	ite	eq
   e04ea:	461e      	moveq	r6, r3
   e04ec:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
   e04ee:	a904      	add	r1, sp, #16
   e04f0:	f7fe fffe 	bl	df4f0 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
   e04f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
   e04f6:	9701      	str	r7, [sp, #4]
   e04f8:	2430      	movs	r4, #48	; 0x30
   e04fa:	220c      	movs	r2, #12
   e04fc:	9202      	str	r2, [sp, #8]
   e04fe:	9400      	str	r4, [sp, #0]
   e0500:	4632      	mov	r2, r6
   e0502:	4621      	mov	r1, r4
   e0504:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
   e0508:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   e050c:	ab04      	add	r3, sp, #16
   e050e:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
   e0510:	a810      	add	r0, sp, #64	; 0x40
   e0512:	f7fe f8ac 	bl	de66e <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
   e0516:	4621      	mov	r1, r4
   e0518:	a804      	add	r0, sp, #16
   e051a:	f7ff fec3 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
   e051e:	b047      	add	sp, #284	; 0x11c
   e0520:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0522:	bf00      	nop
   e0524:	000e8e51 	.word	0x000e8e51
   e0528:	000e8e61 	.word	0x000e8e61

000e052c <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
   e052c:	b530      	push	{r4, r5, lr}
   e052e:	4605      	mov	r5, r0
   e0530:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
   e0532:	4668      	mov	r0, sp
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
   e0534:	460c      	mov	r4, r1
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
   e0536:	f7fe f896 	bl	de666 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   e053a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   e053c:	4668      	mov	r0, sp
   e053e:	3188      	adds	r1, #136	; 0x88
   e0540:	f7fe f89f 	bl	de682 <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
   e0544:	4621      	mov	r1, r4
   e0546:	4668      	mov	r0, sp
   e0548:	f7fe ffd2 	bl	df4f0 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
   e054c:	4668      	mov	r0, sp
   e054e:	f7fe f88e 	bl	de66e <mbedtls_sha512_free>

    return;
}
   e0552:	b037      	add	sp, #220	; 0xdc
   e0554:	bd30      	pop	{r4, r5, pc}
	...

000e0558 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   e0558:	b570      	push	{r4, r5, r6, lr}
   e055a:	4604      	mov	r4, r0
   e055c:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   e055e:	2001      	movs	r0, #1
   e0560:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   e0562:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   e0564:	f006 faca 	bl	e6afc <calloc>
    if( new_cert == NULL )
   e0568:	b178      	cbz	r0, e058a <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   e056a:	6822      	ldr	r2, [r4, #0]

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
   e056c:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
    new_cert->next = NULL;
   e056e:	2300      	movs	r3, #0
    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
   e0570:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
   e0572:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   e0574:	b912      	cbnz	r2, e057c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
   e0576:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
   e0578:	4610      	mov	r0, r2
   e057a:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
   e057c:	6893      	ldr	r3, [r2, #8]
   e057e:	b10b      	cbz	r3, e0584 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
   e0580:	461a      	mov	r2, r3
   e0582:	e7fb      	b.n	e057c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
   e0584:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
   e0586:	4618      	mov	r0, r3
   e0588:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e058a:	4801      	ldr	r0, [pc, #4]	; (e0590 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
   e058c:	bd70      	pop	{r4, r5, r6, pc}
   e058e:	bf00      	nop
   e0590:	ffff8100 	.word	0xffff8100

000e0594 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   e0594:	6b00      	ldr	r0, [r0, #48]	; 0x30
   e0596:	3018      	adds	r0, #24
   e0598:	f7fd bf76 	b.w	de488 <mbedtls_sha256_update_ret>

000e059c <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   e059c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   e059e:	3088      	adds	r0, #136	; 0x88
   e05a0:	f7fe bf5e 	b.w	df460 <mbedtls_sha512_update_ret>

000e05a4 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
   e05a4:	b570      	push	{r4, r5, r6, lr}
   e05a6:	4604      	mov	r4, r0
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   e05a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   e05aa:	3018      	adds	r0, #24
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
   e05ac:	460d      	mov	r5, r1
   e05ae:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   e05b0:	f7fd ff6a 	bl	de488 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   e05b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e05b6:	4632      	mov	r2, r6
   e05b8:	4629      	mov	r1, r5
   e05ba:	3088      	adds	r0, #136	; 0x88
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
   e05bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   e05c0:	f7fe bf4e 	b.w	df460 <mbedtls_sha512_update_ret>

000e05c4 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
   e05c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
   e05c8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
   e05ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   e05cc:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
   e05ce:	b0d7      	sub	sp, #348	; 0x15c
   e05d0:	4680      	mov	r8, r0
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
   e05d2:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   e05d4:	6823      	ldr	r3, [r4, #0]
   e05d6:	7a18      	ldrb	r0, [r3, #8]
   e05d8:	f7f8 fc94 	bl	d8f04 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   e05dc:	4606      	mov	r6, r0
   e05de:	b908      	cbnz	r0, e05e4 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e05e0:	4b9f      	ldr	r3, [pc, #636]	; (e0860 <mbedtls_ssl_derive_keys+0x29c>)
   e05e2:	e00b      	b.n	e05fc <mbedtls_ssl_derive_keys+0x38>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
   e05e4:	6823      	ldr	r3, [r4, #0]
   e05e6:	7a58      	ldrb	r0, [r3, #9]
   e05e8:	f7f9 f99c 	bl	d9924 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   e05ec:	4682      	mov	sl, r0
   e05ee:	2800      	cmp	r0, #0
   e05f0:	d0f6      	beq.n	e05e0 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   e05f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e05f6:	2b03      	cmp	r3, #3
   e05f8:	d002      	beq.n	e0600 <mbedtls_ssl_derive_keys+0x3c>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e05fa:	4b9a      	ldr	r3, [pc, #616]	; (e0864 <mbedtls_ssl_derive_keys+0x2a0>)
   e05fc:	9304      	str	r3, [sp, #16]
   e05fe:	e12b      	b.n	e0858 <mbedtls_ssl_derive_keys+0x294>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   e0600:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   e0602:	7a5b      	ldrb	r3, [r3, #9]
   e0604:	2b07      	cmp	r3, #7
   e0606:	d107      	bne.n	e0618 <mbedtls_ssl_derive_keys+0x54>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
   e0608:	4b97      	ldr	r3, [pc, #604]	; (e0868 <mbedtls_ssl_derive_keys+0x2a4>)
   e060a:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
   e060e:	4b97      	ldr	r3, [pc, #604]	; (e086c <mbedtls_ssl_derive_keys+0x2a8>)
   e0610:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
   e0614:	4b96      	ldr	r3, [pc, #600]	; (e0870 <mbedtls_ssl_derive_keys+0x2ac>)
   e0616:	e006      	b.n	e0626 <mbedtls_ssl_derive_keys+0x62>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
   e0618:	4b96      	ldr	r3, [pc, #600]	; (e0874 <mbedtls_ssl_derive_keys+0x2b0>)
   e061a:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
   e061e:	4b96      	ldr	r3, [pc, #600]	; (e0878 <mbedtls_ssl_derive_keys+0x2b4>)
   e0620:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
   e0624:	4b95      	ldr	r3, [pc, #596]	; (e087c <mbedtls_ssl_derive_keys+0x2b8>)
   e0626:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
   e062a:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
   e062e:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
   e0632:	f505 79ba 	add.w	r9, r5, #372	; 0x174
   e0636:	b9b3      	cbnz	r3, e0666 <mbedtls_ssl_derive_keys+0xa2>
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
   e0638:	2330      	movs	r3, #48	; 0x30
   e063a:	9302      	str	r3, [sp, #8]
   e063c:	9b05      	ldr	r3, [sp, #20]
   e063e:	4a90      	ldr	r2, [pc, #576]	; (e0880 <mbedtls_ssl_derive_keys+0x2bc>)
   e0640:	332c      	adds	r3, #44	; 0x2c
   e0642:	9301      	str	r3, [sp, #4]
   e0644:	2340      	movs	r3, #64	; 0x40
   e0646:	9300      	str	r3, [sp, #0]
   e0648:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
   e064c:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
   e0650:	464b      	mov	r3, r9
   e0652:	4658      	mov	r0, fp
   e0654:	47b8      	blx	r7
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
        if( ret != 0 )
   e0656:	9004      	str	r0, [sp, #16]
   e0658:	2800      	cmp	r0, #0
   e065a:	f040 80fd 	bne.w	e0858 <mbedtls_ssl_derive_keys+0x294>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
   e065e:	2130      	movs	r1, #48	; 0x30
   e0660:	4658      	mov	r0, fp
   e0662:	f7ff fe1f 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
   e0666:	464b      	mov	r3, r9
   e0668:	af06      	add	r7, sp, #24
   e066a:	6818      	ldr	r0, [r3, #0]
   e066c:	6859      	ldr	r1, [r3, #4]
   e066e:	463a      	mov	r2, r7
   e0670:	c203      	stmia	r2!, {r0, r1}
   e0672:	3308      	adds	r3, #8
   e0674:	455b      	cmp	r3, fp
   e0676:	4617      	mov	r7, r2
   e0678:	d1f7      	bne.n	e066a <mbedtls_ssl_derive_keys+0xa6>
    memcpy( handshake->randbytes, tmp + 32, 32 );
   e067a:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   e067e:	464f      	mov	r7, r9
   e0680:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
   e0684:	4673      	mov	r3, lr
   e0686:	cb03      	ldmia	r3!, {r0, r1}
   e0688:	455b      	cmp	r3, fp
   e068a:	6038      	str	r0, [r7, #0]
   e068c:	6079      	str	r1, [r7, #4]
   e068e:	469e      	mov	lr, r3
   e0690:	f107 0708 	add.w	r7, r7, #8
   e0694:	d1f6      	bne.n	e0684 <mbedtls_ssl_derive_keys+0xc0>
    memcpy( handshake->randbytes + 32, tmp, 32 );
   e0696:	f10d 0e18 	add.w	lr, sp, #24
   e069a:	f505 77ca 	add.w	r7, r5, #404	; 0x194
   e069e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   e06a2:	4673      	mov	r3, lr
   e06a4:	cb03      	ldmia	r3!, {r0, r1}
   e06a6:	4563      	cmp	r3, ip
   e06a8:	6038      	str	r0, [r7, #0]
   e06aa:	6079      	str	r1, [r7, #4]
   e06ac:	469e      	mov	lr, r3
   e06ae:	f107 0708 	add.w	r7, r7, #8
   e06b2:	d1f6      	bne.n	e06a2 <mbedtls_ssl_derive_keys+0xde>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
   e06b4:	2140      	movs	r1, #64	; 0x40
   e06b6:	a806      	add	r0, sp, #24
   e06b8:	f7ff fdf4 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
   e06bc:	9f05      	ldr	r7, [sp, #20]
   e06be:	f8cd b004 	str.w	fp, [sp, #4]
   e06c2:	f44f 7380 	mov.w	r3, #256	; 0x100
   e06c6:	f04f 0b40 	mov.w	fp, #64	; 0x40
   e06ca:	9302      	str	r3, [sp, #8]
   e06cc:	f8cd b000 	str.w	fp, [sp]
   e06d0:	372c      	adds	r7, #44	; 0x2c
   e06d2:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
   e06d6:	4a6b      	ldr	r2, [pc, #428]	; (e0884 <mbedtls_ssl_derive_keys+0x2c0>)
   e06d8:	464b      	mov	r3, r9
   e06da:	2130      	movs	r1, #48	; 0x30
   e06dc:	4638      	mov	r0, r7
   e06de:	47a8      	blx	r5
                              handshake->randbytes, 64, keyblk, 256 );
    if( ret != 0 )
   e06e0:	9004      	str	r0, [sp, #16]
   e06e2:	2800      	cmp	r0, #0
   e06e4:	f040 80b8 	bne.w	e0858 <mbedtls_ssl_derive_keys+0x294>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
   e06e8:	4659      	mov	r1, fp
   e06ea:	4648      	mov	r0, r9
   e06ec:	f7ff fdda 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
   e06f0:	6873      	ldr	r3, [r6, #4]
   e06f2:	08db      	lsrs	r3, r3, #3
   e06f4:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
   e06f6:	7873      	ldrb	r3, [r6, #1]
   e06f8:	2b06      	cmp	r3, #6
   e06fa:	d001      	beq.n	e0700 <mbedtls_ssl_derive_keys+0x13c>
   e06fc:	2b08      	cmp	r3, #8
   e06fe:	d10d      	bne.n	e071c <mbedtls_ssl_derive_keys+0x158>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
   e0700:	230c      	movs	r3, #12
   e0702:	60e3      	str	r3, [r4, #12]
        transform->fixed_ivlen = 4;
   e0704:	2304      	movs	r3, #4
   e0706:	6123      	str	r3, [r4, #16]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
   e0708:	2500      	movs	r5, #0
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
   e070a:	6823      	ldr	r3, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
   e070c:	6165      	str	r5, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
   e070e:	7f1b      	ldrb	r3, [r3, #28]
   e0710:	f013 0f02 	tst.w	r3, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
   e0714:	bf14      	ite	ne
   e0716:	2310      	movne	r3, #16
   e0718:	2318      	moveq	r3, #24
   e071a:	e01f      	b.n	e075c <mbedtls_ssl_derive_keys+0x198>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   e071c:	2201      	movs	r2, #1
   e071e:	4651      	mov	r1, sl
   e0720:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e0724:	f7f9 f930 	bl	d9988 <mbedtls_md_setup>
   e0728:	2800      	cmp	r0, #0
   e072a:	f040 8094 	bne.w	e0856 <mbedtls_ssl_derive_keys+0x292>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
   e072e:	2201      	movs	r2, #1
   e0730:	4651      	mov	r1, sl
   e0732:	f104 0044 	add.w	r0, r4, #68	; 0x44
   e0736:	f7f9 f927 	bl	d9988 <mbedtls_md_setup>
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   e073a:	2800      	cmp	r0, #0
   e073c:	f040 808b 	bne.w	e0856 <mbedtls_ssl_derive_keys+0x292>
   e0740:	e07c      	b.n	e083c <mbedtls_ssl_derive_keys+0x278>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
   e0742:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
   e0744:	fbb5 f2f3 	udiv	r2, r5, r3
   e0748:	fb03 3302 	mla	r3, r3, r2, r3
   e074c:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
   e074e:	f8d8 200c 	ldr.w	r2, [r8, #12]
   e0752:	3a02      	subs	r2, #2
   e0754:	2a01      	cmp	r2, #1
   e0756:	f63f af50 	bhi.w	e05fa <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
   e075a:	440b      	add	r3, r1
   e075c:	60a3      	str	r3, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e075e:	f8d8 3000 	ldr.w	r3, [r8]
   e0762:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   e0766:	07db      	lsls	r3, r3, #31
   e0768:	f53f af47 	bmi.w	e05fa <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   e076c:	6863      	ldr	r3, [r4, #4]
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
   e076e:	f8d4 b010 	ldr.w	fp, [r4, #16]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
   e0772:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   e0776:	eb0a 0903 	add.w	r9, sl, r3
   e077a:	aa16      	add	r2, sp, #88	; 0x58
   e077c:	4491      	add	r9, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
   e077e:	f1bb 0f00 	cmp.w	fp, #0
   e0782:	d101      	bne.n	e0788 <mbedtls_ssl_derive_keys+0x1c4>
   e0784:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
   e0788:	9304      	str	r3, [sp, #16]
   e078a:	eb09 0103 	add.w	r1, r9, r3
   e078e:	465a      	mov	r2, fp
   e0790:	f104 0018 	add.w	r0, r4, #24
   e0794:	f006 f9d7 	bl	e6b46 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
   e0798:	9b04      	ldr	r3, [sp, #16]
   e079a:	eb0b 0103 	add.w	r1, fp, r3
   e079e:	465a      	mov	r2, fp
   e07a0:	4449      	add	r1, r9
   e07a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   e07a6:	f006 f9ce 	bl	e6b46 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   e07aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e07ae:	2b00      	cmp	r3, #0
   e07b0:	f77f af23 	ble.w	e05fa <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
   e07b4:	b165      	cbz	r5, e07d0 <mbedtls_ssl_derive_keys+0x20c>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
   e07b6:	462a      	mov	r2, r5
   e07b8:	a916      	add	r1, sp, #88	; 0x58
   e07ba:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e07be:	f7f9 f933 	bl	d9a28 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
   e07c2:	ab16      	add	r3, sp, #88	; 0x58
   e07c4:	462a      	mov	r2, r5
   e07c6:	1959      	adds	r1, r3, r5
   e07c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   e07cc:	f7f9 f92c 	bl	d9a28 <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
   e07d0:	f8d8 0000 	ldr.w	r0, [r8]
   e07d4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
   e07d8:	f1b8 0f00 	cmp.w	r8, #0
   e07dc:	d008      	beq.n	e07f0 <mbedtls_ssl_derive_keys+0x22c>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
   e07de:	f8cd b004 	str.w	fp, [sp, #4]
   e07e2:	6863      	ldr	r3, [r4, #4]
   e07e4:	9300      	str	r3, [sp, #0]
   e07e6:	aa16      	add	r2, sp, #88	; 0x58
   e07e8:	462b      	mov	r3, r5
   e07ea:	4639      	mov	r1, r7
   e07ec:	6c00      	ldr	r0, [r0, #64]	; 0x40
   e07ee:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
   e07f0:	f104 0550 	add.w	r5, r4, #80	; 0x50
   e07f4:	4631      	mov	r1, r6
   e07f6:	4628      	mov	r0, r5
   e07f8:	f7f8 fbbc 	bl	d8f74 <mbedtls_cipher_setup>
   e07fc:	9004      	str	r0, [sp, #16]
   e07fe:	bb58      	cbnz	r0, e0858 <mbedtls_ssl_derive_keys+0x294>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
   e0800:	3488      	adds	r4, #136	; 0x88
   e0802:	4631      	mov	r1, r6
   e0804:	4620      	mov	r0, r4
   e0806:	f7f8 fbb5 	bl	d8f74 <mbedtls_cipher_setup>
   e080a:	9004      	str	r0, [sp, #16]
   e080c:	bb20      	cbnz	r0, e0858 <mbedtls_ssl_derive_keys+0x294>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
   e080e:	a916      	add	r1, sp, #88	; 0x58
   e0810:	2301      	movs	r3, #1
   e0812:	6872      	ldr	r2, [r6, #4]
   e0814:	4451      	add	r1, sl
   e0816:	4628      	mov	r0, r5
   e0818:	f7f8 fbc6 	bl	d8fa8 <mbedtls_cipher_setkey>
   e081c:	9004      	str	r0, [sp, #16]
   e081e:	4603      	mov	r3, r0
   e0820:	b9d0      	cbnz	r0, e0858 <mbedtls_ssl_derive_keys+0x294>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
   e0822:	6872      	ldr	r2, [r6, #4]
   e0824:	4649      	mov	r1, r9
   e0826:	4620      	mov	r0, r4
   e0828:	f7f8 fbbe 	bl	d8fa8 <mbedtls_cipher_setkey>
   e082c:	9004      	str	r0, [sp, #16]
   e082e:	b998      	cbnz	r0, e0858 <mbedtls_ssl_derive_keys+0x294>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
   e0830:	f44f 7180 	mov.w	r1, #256	; 0x100
   e0834:	a816      	add	r0, sp, #88	; 0x58
   e0836:	f7ff fd35 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
   e083a:	e00d      	b.n	e0858 <mbedtls_ssl_derive_keys+0x294>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
   e083c:	4650      	mov	r0, sl
   e083e:	f7f9 f9af 	bl	d9ba0 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
   e0842:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
   e0844:	68f1      	ldr	r1, [r6, #12]
   e0846:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   e0848:	7873      	ldrb	r3, [r6, #1]
   e084a:	2b07      	cmp	r3, #7
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
   e084c:	4605      	mov	r5, r0

        /* IV length */
        transform->ivlen = cipher_info->iv_size;

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   e084e:	f47f af78 	bne.w	e0742 <mbedtls_ssl_derive_keys+0x17e>
            transform->minlen = transform->maclen;
   e0852:	60a5      	str	r5, [r4, #8]
   e0854:	e783      	b.n	e075e <mbedtls_ssl_derive_keys+0x19a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e0856:	9004      	str	r0, [sp, #16]
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
   e0858:	9804      	ldr	r0, [sp, #16]
   e085a:	b057      	add	sp, #348	; 0x15c
   e085c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0860:	ffff8f00 	.word	0xffff8f00
   e0864:	ffff9400 	.word	0xffff9400
   e0868:	000e04a1 	.word	0x000e04a1
   e086c:	000e052d 	.word	0x000e052d
   e0870:	000e04c1 	.word	0x000e04c1
   e0874:	000e0481 	.word	0x000e0481
   e0878:	000e0331 	.word	0x000e0331
   e087c:	000e02c5 	.word	0x000e02c5
   e0880:	000e8e71 	.word	0x000e8e71
   e0884:	000e8e7f 	.word	0x000e8e7f

000e0888 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
   e0888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   e088a:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
   e088c:	4604      	mov	r4, r0
   e088e:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   e0890:	b90b      	cbnz	r3, e0896 <mbedtls_ssl_fetch_input+0xe>
   e0892:	6983      	ldr	r3, [r0, #24]
   e0894:	b19b      	cbz	r3, e08be <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
   e0896:	6da3      	ldr	r3, [r4, #88]	; 0x58
   e0898:	6d22      	ldr	r2, [r4, #80]	; 0x50
   e089a:	1a9b      	subs	r3, r3, r2
   e089c:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   e08a0:	332d      	adds	r3, #45	; 0x2d
   e08a2:	42b3      	cmp	r3, r6
   e08a4:	d30b      	bcc.n	e08be <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
   e08a6:	6f65      	ldr	r5, [r4, #116]	; 0x74
   e08a8:	42ae      	cmp	r6, r5
   e08aa:	d90a      	bls.n	e08c2 <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
   e08ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
   e08ae:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
   e08b0:	b14b      	cbz	r3, e08c6 <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
   e08b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
   e08b4:	4798      	blx	r3
   e08b6:	2802      	cmp	r0, #2
   e08b8:	d105      	bne.n	e08c6 <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
   e08ba:	4812      	ldr	r0, [pc, #72]	; (e0904 <mbedtls_ssl_fetch_input+0x7c>)
   e08bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e08be:	4812      	ldr	r0, [pc, #72]	; (e0908 <mbedtls_ssl_fetch_input+0x80>)
   e08c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
   e08c2:	2000      	movs	r0, #0
   e08c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
   e08c6:	69a7      	ldr	r7, [r4, #24]
   e08c8:	6da1      	ldr	r1, [r4, #88]	; 0x58
   e08ca:	6f60      	ldr	r0, [r4, #116]	; 0x74
   e08cc:	b137      	cbz	r7, e08dc <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
   e08ce:	6823      	ldr	r3, [r4, #0]
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
   e08d0:	4401      	add	r1, r0
   e08d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e08d4:	69e0      	ldr	r0, [r4, #28]
   e08d6:	462a      	mov	r2, r5
   e08d8:	47b8      	blx	r7
   e08da:	e004      	b.n	e08e6 <mbedtls_ssl_fetch_input+0x5e>
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
   e08dc:	4401      	add	r1, r0
   e08de:	6963      	ldr	r3, [r4, #20]
   e08e0:	69e0      	ldr	r0, [r4, #28]
   e08e2:	462a      	mov	r2, r5
   e08e4:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
   e08e6:	2800      	cmp	r0, #0
   e08e8:	d006      	beq.n	e08f8 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
   e08ea:	db09      	blt.n	e0900 <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   e08ec:	4285      	cmp	r5, r0
   e08ee:	d305      	bcc.n	e08fc <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
   e08f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   e08f2:	4418      	add	r0, r3
   e08f4:	6760      	str	r0, [r4, #116]	; 0x74
   e08f6:	e7d6      	b.n	e08a6 <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
   e08f8:	4804      	ldr	r0, [pc, #16]	; (e090c <mbedtls_ssl_fetch_input+0x84>)
   e08fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e08fc:	4804      	ldr	r0, [pc, #16]	; (e0910 <mbedtls_ssl_fetch_input+0x88>)
   e08fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
   e0900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0902:	bf00      	nop
   e0904:	ffff9800 	.word	0xffff9800
   e0908:	ffff8f00 	.word	0xffff8f00
   e090c:	ffff8d80 	.word	0xffff8d80
   e0910:	ffff9400 	.word	0xffff9400

000e0914 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
   e0914:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
   e0916:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
   e0918:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
   e091a:	b34b      	cbz	r3, e0970 <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
   e091c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   e0920:	b9a3      	cbnz	r3, e094c <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
   e0922:	2000      	movs	r0, #0
   e0924:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
   e0926:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
   e092a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   e092e:	6923      	ldr	r3, [r4, #16]
   e0930:	3105      	adds	r1, #5
   e0932:	1a89      	subs	r1, r1, r2
   e0934:	4401      	add	r1, r0
   e0936:	69e0      	ldr	r0, [r4, #28]
   e0938:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
   e093a:	2800      	cmp	r0, #0
   e093c:	dd1b      	ble.n	e0976 <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   e093e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   e0942:	4283      	cmp	r3, r0
   e0944:	d316      	bcc.n	e0974 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
   e0946:	1a18      	subs	r0, r3, r0
   e0948:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
   e094c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   e0950:	2a00      	cmp	r2, #0
   e0952:	d1e8      	bne.n	e0926 <mbedtls_ssl_flush_output+0x12>
   e0954:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
   e0956:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   e095a:	5c8b      	ldrb	r3, [r1, r2]
   e095c:	3301      	adds	r3, #1
   e095e:	b2db      	uxtb	r3, r3
   e0960:	548b      	strb	r3, [r1, r2]
   e0962:	2b00      	cmp	r3, #0
   e0964:	d1dd      	bne.n	e0922 <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
   e0966:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   e096a:	d2f4      	bcs.n	e0956 <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   e096c:	4802      	ldr	r0, [pc, #8]	; (e0978 <mbedtls_ssl_flush_output+0x64>)
   e096e:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e0970:	4802      	ldr	r0, [pc, #8]	; (e097c <mbedtls_ssl_flush_output+0x68>)
   e0972:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e0974:	4802      	ldr	r0, [pc, #8]	; (e0980 <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
   e0976:	bd10      	pop	{r4, pc}
   e0978:	ffff9480 	.word	0xffff9480
   e097c:	ffff8f00 	.word	0xffff8f00
   e0980:	ffff9400 	.word	0xffff9400

000e0984 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
   e0984:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e0986:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
   e098a:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e098e:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
   e0990:	b08f      	sub	sp, #60	; 0x3c
   e0992:	4604      	mov	r4, r0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e0994:	d11a      	bne.n	e09cc <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
   e0996:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   e099a:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
   e099c:	b11a      	cbz	r2, e09a6 <mbedtls_ssl_write_record+0x22>
   e099e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e09a0:	2b00      	cmp	r3, #0
   e09a2:	f000 809f 	beq.w	e0ae4 <mbedtls_ssl_write_record+0x160>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
   e09a6:	1f2b      	subs	r3, r5, #4
   e09a8:	0c18      	lsrs	r0, r3, #16
   e09aa:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
   e09ac:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e09b0:	0a18      	lsrs	r0, r3, #8
   e09b2:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
   e09b4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e09b8:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
   e09ba:	b13a      	cbz	r2, e09cc <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
   e09bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e09be:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e09c2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   e09c6:	462a      	mov	r2, r5
   e09c8:	4620      	mov	r0, r4
   e09ca:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   e09cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   e09d0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   e09d4:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );
   e09d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   e09da:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e09dc:	68a1      	ldr	r1, [r4, #8]
   e09de:	7059      	strb	r1, [r3, #1]
        ver[1] = (unsigned char) minor;
   e09e0:	709a      	strb	r2, [r3, #2]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
   e09e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   e09e6:	0a2a      	lsrs	r2, r5, #8
   e09e8:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
   e09ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   e09ee:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
   e09f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e09f2:	2b00      	cmp	r3, #0
   e09f4:	d06b      	beq.n	e0ace <mbedtls_ssl_write_record+0x14a>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
   e09f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   e09f8:	2a00      	cmp	r2, #0
   e09fa:	d073      	beq.n	e0ae4 <mbedtls_ssl_write_record+0x160>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
   e09fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   e09fe:	b102      	cbz	r2, e0a02 <mbedtls_ssl_write_record+0x7e>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   e0a00:	7852      	ldrb	r2, [r2, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
   e0a02:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
   e0a06:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
   e0a0a:	d869      	bhi.n	e0ae0 <mbedtls_ssl_write_record+0x15c>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
   e0a0c:	2a06      	cmp	r2, #6
   e0a0e:	d001      	beq.n	e0a14 <mbedtls_ssl_write_record+0x90>
   e0a10:	2a08      	cmp	r2, #8
   e0a12:	d167      	bne.n	e0ae4 <mbedtls_ssl_write_record+0x160>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
   e0a14:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e0a16:	7f12      	ldrb	r2, [r2, #28]
   e0a18:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
   e0a1c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   e0a20:	6810      	ldr	r0, [r2, #0]
   e0a22:	6851      	ldr	r1, [r2, #4]
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
        add_data[12] = ssl->out_msglen & 0xFF;
   e0a24:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
   e0a28:	ae0a      	add	r6, sp, #40	; 0x28
   e0a2a:	c603      	stmia	r6!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
   e0a2c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
   e0a30:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   e0a34:	68e1      	ldr	r1, [r4, #12]
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
   e0a36:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   e0a3a:	ea4f 2117 	mov.w	r1, r7, lsr #8
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e0a3e:	68a0      	ldr	r0, [r4, #8]

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   e0a40:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e0a44:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
   e0a48:	68d9      	ldr	r1, [r3, #12]
   e0a4a:	6918      	ldr	r0, [r3, #16]
   e0a4c:	eba1 0100 	sub.w	r1, r1, r0
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e0a50:	bf14      	ite	ne
   e0a52:	2508      	movne	r5, #8
   e0a54:	2510      	moveq	r5, #16
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
   e0a56:	2908      	cmp	r1, #8
   e0a58:	d144      	bne.n	e0ae4 <mbedtls_ssl_write_record+0x160>
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
   e0a5a:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
   e0a5c:	6811      	ldr	r1, [r2, #0]
   e0a5e:	5019      	str	r1, [r3, r0]
   e0a60:	181e      	adds	r6, r3, r0
   e0a62:	6851      	ldr	r1, [r2, #4]
   e0a64:	6071      	str	r1, [r6, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
   e0a66:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   e0a6a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   e0a6e:	680b      	ldr	r3, [r1, #0]
   e0a70:	6013      	str	r3, [r2, #0]
   e0a72:	684b      	ldr	r3, [r1, #4]
   e0a74:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
   e0a76:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
   e0a78:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
   e0a7c:	68c3      	ldr	r3, [r0, #12]
   e0a7e:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
   e0a80:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
   e0a84:	9506      	str	r5, [sp, #24]
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
   e0a86:	4433      	add	r3, r6
   e0a88:	1a5b      	subs	r3, r3, r1
   e0a8a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
   e0a8e:	1993      	adds	r3, r2, r6
   e0a90:	9305      	str	r3, [sp, #20]
   e0a92:	ab09      	add	r3, sp, #36	; 0x24
   e0a94:	9304      	str	r3, [sp, #16]
   e0a96:	230d      	movs	r3, #13
   e0a98:	9300      	str	r3, [sp, #0]
   e0a9a:	9203      	str	r2, [sp, #12]
   e0a9c:	9602      	str	r6, [sp, #8]
   e0a9e:	9201      	str	r2, [sp, #4]
   e0aa0:	68c2      	ldr	r2, [r0, #12]
   e0aa2:	f100 0118 	add.w	r1, r0, #24
   e0aa6:	ab0a      	add	r3, sp, #40	; 0x28
   e0aa8:	3050      	adds	r0, #80	; 0x50
   e0aaa:	f7f8 fb55 	bl	d9158 <mbedtls_cipher_auth_encrypt>
   e0aae:	b9d0      	cbnz	r0, e0ae6 <mbedtls_ssl_write_record+0x162>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
   e0ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0ab2:	429e      	cmp	r6, r3
   e0ab4:	d116      	bne.n	e0ae4 <mbedtls_ssl_write_record+0x160>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   e0ab6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   e0aba:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   e0abe:	442b      	add	r3, r5
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   e0ac0:	0a19      	lsrs	r1, r3, #8
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   e0ac2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   e0ac6:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
   e0ac8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   e0acc:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
   e0ace:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   e0ad2:	3305      	adds	r3, #5
   e0ad4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e0ad8:	4620      	mov	r0, r4
   e0ada:	f7ff ff1b 	bl	e0914 <mbedtls_ssl_flush_output>
   e0ade:	e002      	b.n	e0ae6 <mbedtls_ssl_write_record+0x162>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e0ae0:	4802      	ldr	r0, [pc, #8]	; (e0aec <mbedtls_ssl_write_record+0x168>)
   e0ae2:	e000      	b.n	e0ae6 <mbedtls_ssl_write_record+0x162>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e0ae4:	4802      	ldr	r0, [pc, #8]	; (e0af0 <mbedtls_ssl_write_record+0x16c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
   e0ae6:	b00f      	add	sp, #60	; 0x3c
   e0ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0aea:	bf00      	nop
   e0aec:	ffff8f00 	.word	0xffff8f00
   e0af0:	ffff9400 	.word	0xffff9400

000e0af4 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
   e0af4:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
   e0af6:	6f04      	ldr	r4, [r0, #112]	; 0x70
   e0af8:	2c03      	cmp	r4, #3
   e0afa:	d90f      	bls.n	e0b1c <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
   e0afc:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
   e0afe:	788a      	ldrb	r2, [r1, #2]
   e0b00:	784b      	ldrb	r3, [r1, #1]
   e0b02:	0212      	lsls	r2, r2, #8
   e0b04:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   e0b08:	78ca      	ldrb	r2, [r1, #3]
   e0b0a:	4313      	orrs	r3, r2
   e0b0c:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
   e0b0e:	4a04      	ldr	r2, [pc, #16]	; (e0b20 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
   e0b10:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
   e0b12:	429c      	cmp	r4, r3
   e0b14:	bf34      	ite	cc
   e0b16:	4610      	movcc	r0, r2
   e0b18:	2000      	movcs	r0, #0
   e0b1a:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   e0b1c:	4801      	ldr	r0, [pc, #4]	; (e0b24 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
   e0b1e:	bd10      	pop	{r4, pc}
   e0b20:	ffff8f80 	.word	0xffff8f80
   e0b24:	ffff8e00 	.word	0xffff8e00

000e0b28 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
   e0b28:	6842      	ldr	r2, [r0, #4]
   e0b2a:	2a10      	cmp	r2, #16

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
   e0b2c:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
   e0b2e:	d009      	beq.n	e0b44 <mbedtls_ssl_update_handshake_status+0x1c>
        ssl->handshake != NULL )
   e0b30:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
   e0b32:	b13a      	cbz	r2, e0b44 <mbedtls_ssl_update_handshake_status+0x1c>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   e0b34:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
   e0b38:	6e41      	ldr	r1, [r0, #100]	; 0x64
   e0b3a:	6f82      	ldr	r2, [r0, #120]	; 0x78
   e0b3c:	4623      	mov	r3, r4
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
   e0b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   e0b42:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
   e0b44:	f85d 4b04 	ldr.w	r4, [sp], #4
   e0b48:	4770      	bx	lr
	...

000e0b4c <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
   e0b4c:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e0b4e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   e0b50:	2b16      	cmp	r3, #22

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
   e0b52:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e0b54:	d004      	beq.n	e0b60 <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   e0b56:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e0b58:	2b15      	cmp	r3, #21
   e0b5a:	d006      	beq.n	e0b6a <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
   e0b5c:	2000      	movs	r0, #0
   e0b5e:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
   e0b60:	f7ff ffc8 	bl	e0af4 <mbedtls_ssl_prepare_handshake_record>
   e0b64:	2800      	cmp	r0, #0
   e0b66:	d0f6      	beq.n	e0b56 <mbedtls_ssl_handle_message_type+0xa>
   e0b68:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
   e0b6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e0b6c:	2b02      	cmp	r3, #2
   e0b6e:	d10c      	bne.n	e0b8a <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
   e0b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e0b72:	781a      	ldrb	r2, [r3, #0]
   e0b74:	2a02      	cmp	r2, #2
   e0b76:	d00a      	beq.n	e0b8e <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   e0b78:	2a01      	cmp	r2, #1
   e0b7a:	d10a      	bne.n	e0b92 <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
   e0b7c:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   e0b7e:	b153      	cbz	r3, e0b96 <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
   e0b80:	2b64      	cmp	r3, #100	; 0x64
   e0b82:	4806      	ldr	r0, [pc, #24]	; (e0b9c <mbedtls_ssl_handle_message_type+0x50>)
   e0b84:	bf08      	it	eq
   e0b86:	2000      	moveq	r0, #0
   e0b88:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   e0b8a:	4805      	ldr	r0, [pc, #20]	; (e0ba0 <mbedtls_ssl_handle_message_type+0x54>)
   e0b8c:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
   e0b8e:	4805      	ldr	r0, [pc, #20]	; (e0ba4 <mbedtls_ssl_handle_message_type+0x58>)
   e0b90:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
   e0b92:	4802      	ldr	r0, [pc, #8]	; (e0b9c <mbedtls_ssl_handle_message_type+0x50>)
   e0b94:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
   e0b96:	4804      	ldr	r0, [pc, #16]	; (e0ba8 <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
   e0b98:	bd10      	pop	{r4, pc}
   e0b9a:	bf00      	nop
   e0b9c:	ffff9980 	.word	0xffff9980
   e0ba0:	ffff8e00 	.word	0xffff8e00
   e0ba4:	ffff8880 	.word	0xffff8880
   e0ba8:	ffff8780 	.word	0xffff8780

000e0bac <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
   e0bac:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
   e0bae:	b188      	cbz	r0, e0bd4 <mbedtls_ssl_send_alert_message+0x28>
   e0bb0:	6804      	ldr	r4, [r0, #0]
   e0bb2:	b17c      	cbz	r4, e0bd4 <mbedtls_ssl_send_alert_message+0x28>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
   e0bb4:	2415      	movs	r4, #21
   e0bb6:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
   e0bba:	2402      	movs	r4, #2
   e0bbc:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
   e0bc0:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
   e0bc4:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
   e0bc6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   e0bca:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
   e0bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
   e0bd0:	f7ff bed8 	b.w	e0984 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
   e0bd4:	4801      	ldr	r0, [pc, #4]	; (e0bdc <mbedtls_ssl_send_alert_message+0x30>)
   e0bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
   e0bda:	4770      	bx	lr
   e0bdc:	ffff8f00 	.word	0xffff8f00

000e0be0 <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
   e0be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
   e0be4:	6f81      	ldr	r1, [r0, #120]	; 0x78
   e0be6:	6e83      	ldr	r3, [r0, #104]	; 0x68

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
   e0be8:	b08e      	sub	sp, #56	; 0x38
   e0bea:	4604      	mov	r4, r0
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
   e0bec:	b181      	cbz	r1, e0c10 <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
   e0bee:	2b00      	cmp	r3, #0
   e0bf0:	f040 80e0 	bne.w	e0db4 <mbedtls_ssl_read_record_layer+0x1d4>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
   e0bf4:	6f02      	ldr	r2, [r0, #112]	; 0x70
   e0bf6:	4291      	cmp	r1, r2
   e0bf8:	d206      	bcs.n	e0c08 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
   e0bfa:	1a52      	subs	r2, r2, r1
   e0bfc:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   e0bfe:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
   e0c00:	4401      	add	r1, r0
   e0c02:	f005 ffab 	bl	e6b5c <memmove>
   e0c06:	e000      	b.n	e0c0a <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
   e0c08:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
   e0c0a:	2300      	movs	r3, #0
   e0c0c:	67a3      	str	r3, [r4, #120]	; 0x78
   e0c0e:	e003      	b.n	e0c18 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
   e0c10:	2b00      	cmp	r3, #0
   e0c12:	f040 80d3 	bne.w	e0dbc <mbedtls_ssl_read_record_layer+0x1dc>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
   e0c16:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
   e0c18:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e0c1a:	2b00      	cmp	r3, #0
   e0c1c:	f040 80ce 	bne.w	e0dbc <mbedtls_ssl_read_record_layer+0x1dc>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
   e0c20:	2105      	movs	r1, #5
   e0c22:	4620      	mov	r0, r4
   e0c24:	f7ff fe30 	bl	e0888 <mbedtls_ssl_fetch_input>
   e0c28:	2800      	cmp	r0, #0
   e0c2a:	f040 80c8 	bne.w	e0dbe <mbedtls_ssl_read_record_layer+0x1de>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
   e0c2e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   e0c30:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
   e0c32:	7813      	ldrb	r3, [r2, #0]
   e0c34:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   e0c36:	7805      	ldrb	r5, [r0, #0]
   e0c38:	7841      	ldrb	r1, [r0, #1]
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
   e0c3a:	6820      	ldr	r0, [r4, #0]
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   e0c3c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   e0c40:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   e0c42:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   e0c44:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   e0c46:	7855      	ldrb	r5, [r2, #1]
        *minor = ver[1];
   e0c48:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   e0c4a:	d905      	bls.n	e0c58 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e0c4c:	220a      	movs	r2, #10
   e0c4e:	2102      	movs	r1, #2
   e0c50:	4620      	mov	r0, r4
   e0c52:	f7ff ffab 	bl	e0bac <mbedtls_ssl_send_alert_message>
   e0c56:	e0af      	b.n	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
   e0c58:	68a3      	ldr	r3, [r4, #8]
   e0c5a:	429d      	cmp	r5, r3
   e0c5c:	f040 80ac 	bne.w	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
   e0c60:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   e0c64:	429a      	cmp	r2, r3
   e0c66:	f300 80a7 	bgt.w	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
   e0c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e0c6c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   e0c6e:	1a9b      	subs	r3, r3, r2
   e0c70:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   e0c74:	332d      	adds	r3, #45	; 0x2d
   e0c76:	4299      	cmp	r1, r3
   e0c78:	f200 809e 	bhi.w	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
   e0c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e0c7e:	b923      	cbnz	r3, e0c8a <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
   e0c80:	1e4b      	subs	r3, r1, #1
   e0c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e0c86:	d30c      	bcc.n	e0ca2 <mbedtls_ssl_read_record_layer+0xc2>
   e0c88:	e096      	b.n	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
   e0c8a:	689b      	ldr	r3, [r3, #8]
   e0c8c:	4299      	cmp	r1, r3
   e0c8e:	f0c0 8093 	bcc.w	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   e0c92:	68e2      	ldr	r2, [r4, #12]
   e0c94:	2a00      	cmp	r2, #0
   e0c96:	dd04      	ble.n	e0ca2 <mbedtls_ssl_read_record_layer+0xc2>
   e0c98:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
   e0c9c:	4299      	cmp	r1, r3
   e0c9e:	f200 808b 	bhi.w	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
   e0ca2:	3105      	adds	r1, #5
   e0ca4:	4620      	mov	r0, r4
   e0ca6:	f7ff fdef 	bl	e0888 <mbedtls_ssl_fetch_input>
   e0caa:	2800      	cmp	r0, #0
   e0cac:	f040 8087 	bne.w	e0dbe <mbedtls_ssl_read_record_layer+0x1de>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
   e0cb0:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
   e0cb2:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
   e0cb4:	2e00      	cmp	r6, #0
   e0cb6:	f000 8081 	beq.w	e0dbc <mbedtls_ssl_read_record_layer+0x1dc>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
   e0cba:	6a23      	ldr	r3, [r4, #32]
   e0cbc:	2b00      	cmp	r3, #0
   e0cbe:	d079      	beq.n	e0db4 <mbedtls_ssl_read_record_layer+0x1d4>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
   e0cc0:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
   e0cc4:	b103      	cbz	r3, e0cc8 <mbedtls_ssl_read_record_layer+0xe8>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   e0cc6:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
   e0cc8:	6f22      	ldr	r2, [r4, #112]	; 0x70
   e0cca:	68b1      	ldr	r1, [r6, #8]
   e0ccc:	428a      	cmp	r2, r1
   e0cce:	d359      	bcc.n	e0d84 <mbedtls_ssl_read_record_layer+0x1a4>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
   e0cd0:	2b06      	cmp	r3, #6
   e0cd2:	d001      	beq.n	e0cd8 <mbedtls_ssl_read_record_layer+0xf8>
   e0cd4:	2b08      	cmp	r3, #8
   e0cd6:	d16d      	bne.n	e0db4 <mbedtls_ssl_read_record_layer+0x1d4>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
   e0cd8:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
   e0cda:	6935      	ldr	r5, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e0cdc:	7f1b      	ldrb	r3, [r3, #28]
   e0cde:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
   e0ce2:	68f3      	ldr	r3, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   e0ce4:	bf14      	ite	ne
   e0ce6:	2708      	movne	r7, #8
   e0ce8:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
   e0cea:	1b5d      	subs	r5, r3, r5

        if( ssl->in_msglen < explicit_iv_len + taglen )
   e0cec:	19eb      	adds	r3, r5, r7
   e0cee:	429a      	cmp	r2, r3
   e0cf0:	d348      	bcc.n	e0d84 <mbedtls_ssl_read_record_layer+0x1a4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
   e0cf2:	1b55      	subs	r5, r2, r5
   e0cf4:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
   e0cf6:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
   e0cf8:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
   e0cfa:	6810      	ldr	r0, [r2, #0]
   e0cfc:	6851      	ldr	r1, [r2, #4]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e0cfe:	68a2      	ldr	r2, [r4, #8]
        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
        add_data[12] = ssl->in_msglen & 0xFF;
   e0d00:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
   e0d04:	ab0a      	add	r3, sp, #40	; 0x28
   e0d06:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
   e0d08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e0d0a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   e0d0e:	68e3      	ldr	r3, [r4, #12]
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
   e0d10:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
   e0d14:	0a2b      	lsrs	r3, r5, #8
   e0d16:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
   e0d1a:	6933      	ldr	r3, [r6, #16]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e0d1c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
   e0d20:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
   e0d22:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
   e0d26:	6e21      	ldr	r1, [r4, #96]	; 0x60
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
   e0d28:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
   e0d2c:	1ad2      	subs	r2, r2, r3
   e0d2e:	4418      	add	r0, r3
   e0d30:	f005 ff09 	bl	e6b46 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
   e0d34:	eb08 0305 	add.w	r3, r8, r5
   e0d38:	9305      	str	r3, [sp, #20]
   e0d3a:	ab09      	add	r3, sp, #36	; 0x24
   e0d3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   e0d3e:	9304      	str	r3, [sp, #16]
   e0d40:	230d      	movs	r3, #13
   e0d42:	9300      	str	r3, [sp, #0]
   e0d44:	9706      	str	r7, [sp, #24]
   e0d46:	f8cd 800c 	str.w	r8, [sp, #12]
   e0d4a:	9502      	str	r5, [sp, #8]
   e0d4c:	f8cd 8004 	str.w	r8, [sp, #4]
   e0d50:	68c2      	ldr	r2, [r0, #12]
   e0d52:	f100 0128 	add.w	r1, r0, #40	; 0x28
   e0d56:	ab0a      	add	r3, sp, #40	; 0x28
   e0d58:	3088      	adds	r0, #136	; 0x88
   e0d5a:	f7f8 fa27 	bl	d91ac <mbedtls_cipher_auth_decrypt>
   e0d5e:	b120      	cbz	r0, e0d6a <mbedtls_ssl_read_record_layer+0x18a>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   e0d60:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
   e0d64:	d00e      	beq.n	e0d84 <mbedtls_ssl_read_record_layer+0x1a4>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
   e0d66:	b1c0      	cbz	r0, e0d9a <mbedtls_ssl_read_record_layer+0x1ba>
   e0d68:	e029      	b.n	e0dbe <mbedtls_ssl_read_record_layer+0x1de>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
   e0d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0d6c:	429d      	cmp	r5, r3
   e0d6e:	d121      	bne.n	e0db4 <mbedtls_ssl_read_record_layer+0x1d4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
   e0d70:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e0d72:	b94b      	cbnz	r3, e0d88 <mbedtls_ssl_read_record_layer+0x1a8>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
   e0d74:	68e3      	ldr	r3, [r4, #12]
   e0d76:	2b03      	cmp	r3, #3
   e0d78:	d014      	beq.n	e0da4 <mbedtls_ssl_read_record_layer+0x1c4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
   e0d7a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   e0d7c:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
   e0d7e:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
   e0d80:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
   e0d82:	dd02      	ble.n	e0d8a <mbedtls_ssl_read_record_layer+0x1aa>
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
   e0d84:	480f      	ldr	r0, [pc, #60]	; (e0dc4 <mbedtls_ssl_read_record_layer+0x1e4>)
   e0d86:	e01a      	b.n	e0dbe <mbedtls_ssl_read_record_layer+0x1de>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
   e0d88:	67e0      	str	r0, [r4, #124]	; 0x7c
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   e0d8a:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
   e0d8c:	3a01      	subs	r2, #1
   e0d8e:	6d61      	ldr	r1, [r4, #84]	; 0x54
   e0d90:	5c8b      	ldrb	r3, [r1, r2]
   e0d92:	3301      	adds	r3, #1
   e0d94:	b2db      	uxtb	r3, r3
   e0d96:	548b      	strb	r3, [r1, r2]
   e0d98:	b143      	cbz	r3, e0dac <mbedtls_ssl_read_record_layer+0x1cc>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
   e0d9a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e0d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   e0da0:	d90c      	bls.n	e0dbc <mbedtls_ssl_read_record_layer+0x1dc>
   e0da2:	e009      	b.n	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   e0da4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e0da6:	2b17      	cmp	r3, #23
   e0da8:	d0e7      	beq.n	e0d7a <mbedtls_ssl_read_record_layer+0x19a>
   e0daa:	e005      	b.n	e0db8 <mbedtls_ssl_read_record_layer+0x1d8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   e0dac:	2a00      	cmp	r2, #0
   e0dae:	d1ed      	bne.n	e0d8c <mbedtls_ssl_read_record_layer+0x1ac>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   e0db0:	4805      	ldr	r0, [pc, #20]	; (e0dc8 <mbedtls_ssl_read_record_layer+0x1e8>)
   e0db2:	e004      	b.n	e0dbe <mbedtls_ssl_read_record_layer+0x1de>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e0db4:	4805      	ldr	r0, [pc, #20]	; (e0dcc <mbedtls_ssl_read_record_layer+0x1ec>)
   e0db6:	e002      	b.n	e0dbe <mbedtls_ssl_read_record_layer+0x1de>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   e0db8:	4805      	ldr	r0, [pc, #20]	; (e0dd0 <mbedtls_ssl_read_record_layer+0x1f0>)
   e0dba:	e000      	b.n	e0dbe <mbedtls_ssl_read_record_layer+0x1de>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
   e0dbc:	2000      	movs	r0, #0
}
   e0dbe:	b00e      	add	sp, #56	; 0x38
   e0dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0dc4:	ffff8e80 	.word	0xffff8e80
   e0dc8:	ffff9480 	.word	0xffff9480
   e0dcc:	ffff9400 	.word	0xffff9400
   e0dd0:	ffff8e00 	.word	0xffff8e00

000e0dd4 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
   e0dd4:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
   e0dd6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
   e0dda:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
   e0ddc:	b99b      	cbnz	r3, e0e06 <mbedtls_ssl_read_record+0x32>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
   e0dde:	4628      	mov	r0, r5
   e0de0:	f7ff fefe 	bl	e0be0 <mbedtls_ssl_read_record_layer>
   e0de4:	4604      	mov	r4, r0
   e0de6:	b988      	cbnz	r0, e0e0c <mbedtls_ssl_read_record+0x38>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
   e0de8:	4628      	mov	r0, r5
   e0dea:	f7ff feaf 	bl	e0b4c <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
   e0dee:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
   e0df2:	4604      	mov	r4, r0

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
   e0df4:	d0f3      	beq.n	e0dde <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
   e0df6:	b948      	cbnz	r0, e0e0c <mbedtls_ssl_read_record+0x38>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e0df8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e0dfa:	2b16      	cmp	r3, #22
   e0dfc:	d106      	bne.n	e0e0c <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
   e0dfe:	4628      	mov	r0, r5
   e0e00:	f7ff fe92 	bl	e0b28 <mbedtls_ssl_update_handshake_status>
   e0e04:	e002      	b.n	e0e0c <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
   e0e06:	2400      	movs	r4, #0
   e0e08:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
   e0e0c:	4620      	mov	r0, r4
   e0e0e:	bd38      	pop	{r3, r4, r5, pc}

000e0e10 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
   e0e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   e0e12:	6c03      	ldr	r3, [r0, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e0e14:	681b      	ldr	r3, [r3, #0]
   e0e16:	7a9a      	ldrb	r2, [r3, #10]
   e0e18:	2a0b      	cmp	r2, #11

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
   e0e1a:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e0e1c:	d809      	bhi.n	e0e32 <mbedtls_ssl_write_certificate+0x22>
   e0e1e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   e0e22:	40d3      	lsrs	r3, r2
   e0e24:	07da      	lsls	r2, r3, #31
   e0e26:	d504      	bpl.n	e0e32 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
   e0e28:	6863      	ldr	r3, [r4, #4]
   e0e2a:	3301      	adds	r3, #1
   e0e2c:	6063      	str	r3, [r4, #4]
        return( 0 );
   e0e2e:	2000      	movs	r0, #0
   e0e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e0e32:	6822      	ldr	r2, [r4, #0]
   e0e34:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
   e0e38:	07db      	lsls	r3, r3, #31
   e0e3a:	d403      	bmi.n	e0e44 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
   e0e3c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   e0e40:	2b00      	cmp	r3, #0
   e0e42:	d0f1      	beq.n	e0e28 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e0e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0e46:	b10b      	cbz	r3, e0e4c <mbedtls_ssl_write_certificate+0x3c>
   e0e48:	685b      	ldr	r3, [r3, #4]
   e0e4a:	b90b      	cbnz	r3, e0e50 <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   e0e4c:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
   e0e4e:	b30b      	cbz	r3, e0e94 <mbedtls_ssl_write_certificate+0x84>
   e0e50:	681e      	ldr	r6, [r3, #0]
   e0e52:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
   e0e54:	b1fe      	cbz	r6, e0e96 <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
   e0e56:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
   e0e58:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
   e0e5c:	321d      	adds	r2, #29
   e0e5e:	4295      	cmp	r5, r2
   e0e60:	d836      	bhi.n	e0ed0 <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
   e0e62:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e0e66:	0c29      	lsrs	r1, r5, #16
   e0e68:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
   e0e6a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e0e6e:	441a      	add	r2, r3
   e0e70:	0a29      	lsrs	r1, r5, #8
   e0e72:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   e0e74:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e0e78:	441a      	add	r2, r3

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   e0e7a:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   e0e7c:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   e0e7e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e0e82:	68b1      	ldr	r1, [r6, #8]
   e0e84:	462a      	mov	r2, r5
   e0e86:	4438      	add	r0, r7
   e0e88:	f005 fe5d 	bl	e6b46 <memcpy>
        i += n; crt = crt->next;
   e0e8c:	19eb      	adds	r3, r5, r7
   e0e8e:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
   e0e92:	e7df      	b.n	e0e54 <mbedtls_ssl_write_certificate+0x44>
   e0e94:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
   e0e96:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e0e9a:	1fda      	subs	r2, r3, #7
   e0e9c:	0c10      	lsrs	r0, r2, #16
   e0e9e:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
   e0ea0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e0ea4:	0a10      	lsrs	r0, r2, #8
   e0ea6:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
   e0ea8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e0eac:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
   e0eae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e0eb2:	2316      	movs	r3, #22
   e0eb4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
   e0eb8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e0ebc:	220b      	movs	r2, #11
   e0ebe:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
   e0ec0:	6863      	ldr	r3, [r4, #4]
   e0ec2:	3301      	adds	r3, #1
   e0ec4:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
   e0ec6:	4620      	mov	r0, r4
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
   e0ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
   e0ecc:	f7ff bd5a 	b.w	e0984 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
   e0ed0:	4800      	ldr	r0, [pc, #0]	; (e0ed4 <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
   e0ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0ed4:	ffff8b00 	.word	0xffff8b00

000e0ed8 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   e0ed8:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
   e0eda:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   e0ede:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
   e0ee2:	2201      	movs	r2, #1
   e0ee4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
   e0ee8:	700a      	strb	r2, [r1, #0]

    ssl->state++;
   e0eea:	6842      	ldr	r2, [r0, #4]
   e0eec:	3201      	adds	r2, #1
   e0eee:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
   e0ef0:	f7ff bd48 	b.w	e0984 <mbedtls_ssl_write_record>

000e0ef4 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
   e0ef4:	b510      	push	{r4, lr}
   e0ef6:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   e0ef8:	f7ff ff6c 	bl	e0dd4 <mbedtls_ssl_read_record>
   e0efc:	2800      	cmp	r0, #0
   e0efe:	d12d      	bne.n	e0f5c <mbedtls_ssl_parse_change_cipher_spec+0x68>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   e0f00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e0f02:	2b14      	cmp	r3, #20
   e0f04:	d006      	beq.n	e0f14 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e0f06:	220a      	movs	r2, #10
   e0f08:	2102      	movs	r1, #2
   e0f0a:	4620      	mov	r0, r4
   e0f0c:	f7ff fe4e 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e0f10:	4813      	ldr	r0, [pc, #76]	; (e0f60 <mbedtls_ssl_parse_change_cipher_spec+0x6c>)
   e0f12:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
   e0f14:	6f23      	ldr	r3, [r4, #112]	; 0x70
   e0f16:	2b01      	cmp	r3, #1
   e0f18:	d103      	bne.n	e0f22 <mbedtls_ssl_parse_change_cipher_spec+0x2e>
   e0f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e0f1c:	781b      	ldrb	r3, [r3, #0]
   e0f1e:	2b01      	cmp	r3, #1
   e0f20:	d006      	beq.n	e0f30 <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e0f22:	2232      	movs	r2, #50	; 0x32
   e0f24:	2102      	movs	r1, #2
   e0f26:	4620      	mov	r0, r4
   e0f28:	f7ff fe40 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
   e0f2c:	480d      	ldr	r0, [pc, #52]	; (e0f64 <mbedtls_ssl_parse_change_cipher_spec+0x70>)
   e0f2e:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
   e0f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e0f32:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
   e0f34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0f36:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
   e0f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
   e0f3a:	6018      	str	r0, [r3, #0]
   e0f3c:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
   e0f3e:	68e3      	ldr	r3, [r4, #12]
   e0f40:	6e21      	ldr	r1, [r4, #96]	; 0x60
   e0f42:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
   e0f44:	bfc9      	itett	gt
   e0f46:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
   e0f48:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
   e0f4a:	68da      	ldrgt	r2, [r3, #12]
   e0f4c:	691b      	ldrgt	r3, [r3, #16]
   e0f4e:	bfc2      	ittt	gt
   e0f50:	1ad3      	subgt	r3, r2, r3
   e0f52:	185b      	addgt	r3, r3, r1
   e0f54:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
   e0f56:	6863      	ldr	r3, [r4, #4]
   e0f58:	3301      	adds	r3, #1
   e0f5a:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
   e0f5c:	bd10      	pop	{r4, pc}
   e0f5e:	bf00      	nop
   e0f60:	ffff8900 	.word	0xffff8900
   e0f64:	ffff8200 	.word	0xffff8200

000e0f68 <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   e0f68:	7a4b      	ldrb	r3, [r1, #9]
   e0f6a:	2b07      	cmp	r3, #7
   e0f6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
   e0f6e:	bf0c      	ite	eq
   e0f70:	4a02      	ldreq	r2, [pc, #8]	; (e0f7c <mbedtls_ssl_optimize_checksum+0x14>)
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
   e0f72:	4a03      	ldrne	r2, [pc, #12]	; (e0f80 <mbedtls_ssl_optimize_checksum+0x18>)
   e0f74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   e0f78:	4770      	bx	lr
   e0f7a:	bf00      	nop
   e0f7c:	000e059d 	.word	0x000e059d
   e0f80:	000e0595 	.word	0x000e0595

000e0f84 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
   e0f84:	b510      	push	{r4, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
   e0f86:	68c3      	ldr	r3, [r0, #12]
   e0f88:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
   e0f8c:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
   e0f8e:	bfc9      	itett	gt
   e0f90:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
   e0f92:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
   e0f96:	68da      	ldrgt	r2, [r3, #12]
   e0f98:	691b      	ldrgt	r3, [r3, #16]
   e0f9a:	bfc2      	ittt	gt
   e0f9c:	1ad3      	subgt	r3, r2, r3
   e0f9e:	185b      	addgt	r3, r3, r1
   e0fa0:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
   e0fa4:	6803      	ldr	r3, [r0, #0]
   e0fa6:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   e0faa:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   e0fae:	6b03      	ldr	r3, [r0, #48]	; 0x30

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
   e0fb0:	4604      	mov	r4, r0
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
   e0fb2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   e0fb6:	f002 0201 	and.w	r2, r2, #1
   e0fba:	3104      	adds	r1, #4
   e0fbc:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
   e0fbe:	68e3      	ldr	r3, [r4, #12]
   e0fc0:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
   e0fc2:	bf14      	ite	ne
   e0fc4:	2310      	movne	r3, #16
   e0fc6:	2328      	moveq	r3, #40	; 0x28
   e0fc8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e0fcc:	2316      	movs	r3, #22
   e0fce:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
   e0fd2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e0fd6:	2214      	movs	r2, #20
   e0fd8:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
   e0fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0fdc:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
   e0fe0:	b133      	cbz	r3, e0ff0 <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e0fe2:	6823      	ldr	r3, [r4, #0]
   e0fe4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   e0fe8:	07db      	lsls	r3, r3, #31
   e0fea:	d404      	bmi.n	e0ff6 <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e0fec:	230f      	movs	r3, #15
   e0fee:	e001      	b.n	e0ff4 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
   e0ff0:	6863      	ldr	r3, [r4, #4]
   e0ff2:	3301      	adds	r3, #1
   e0ff4:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
   e0ff6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   e0ffa:	2200      	movs	r2, #0
   e0ffc:	601a      	str	r2, [r3, #0]
   e0ffe:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
   e1000:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e1002:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
   e1004:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e1006:	6263      	str	r3, [r4, #36]	; 0x24
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
   e1008:	4620      	mov	r0, r4
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
   e100a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
   e100e:	f7ff bcb9 	b.w	e0984 <mbedtls_ssl_write_record>
	...

000e1014 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
   e1014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   e1016:	6803      	ldr	r3, [r0, #0]
   e1018:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   e101c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e101e:	43d2      	mvns	r2, r2
   e1020:	ad01      	add	r5, sp, #4
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
   e1022:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   e1024:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   e1028:	f002 0201 	and.w	r2, r2, #1
   e102c:	4629      	mov	r1, r5
   e102e:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   e1030:	4620      	mov	r0, r4
   e1032:	f7ff fecf 	bl	e0dd4 <mbedtls_ssl_read_record>
   e1036:	2800      	cmp	r0, #0
   e1038:	d13b      	bne.n	e10b2 <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e103a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e103c:	2b16      	cmp	r3, #22
   e103e:	d006      	beq.n	e104e <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e1040:	220a      	movs	r2, #10
   e1042:	2102      	movs	r1, #2
   e1044:	4620      	mov	r0, r4
   e1046:	f7ff fdb1 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e104a:	481b      	ldr	r0, [pc, #108]	; (e10b8 <mbedtls_ssl_parse_finished+0xa4>)
   e104c:	e031      	b.n	e10b2 <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
   e104e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   e1050:	780b      	ldrb	r3, [r1, #0]
   e1052:	2b14      	cmp	r3, #20
   e1054:	d115      	bne.n	e1082 <mbedtls_ssl_parse_finished+0x6e>
   e1056:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e1058:	2b10      	cmp	r3, #16
   e105a:	d112      	bne.n	e1082 <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
   e105c:	f88d 0003 	strb.w	r0, [sp, #3]
   e1060:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
   e1062:	5ccb      	ldrb	r3, [r1, r3]
   e1064:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
   e1066:	f89d 6003 	ldrb.w	r6, [sp, #3]
   e106a:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   e106c:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
   e106e:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   e1070:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
   e1072:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   e1076:	d1f3      	bne.n	e1060 <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
   e1078:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
   e107c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   e1080:	b133      	cbz	r3, e1090 <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e1082:	2232      	movs	r2, #50	; 0x32
   e1084:	2102      	movs	r1, #2
   e1086:	4620      	mov	r0, r4
   e1088:	f7ff fd90 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
   e108c:	480b      	ldr	r0, [pc, #44]	; (e10bc <mbedtls_ssl_parse_finished+0xa8>)
   e108e:	e010      	b.n	e10b2 <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
   e1090:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e1092:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
   e1096:	b138      	cbz	r0, e10a8 <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e1098:	6823      	ldr	r3, [r4, #0]
   e109a:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   e109e:	f010 0001 	ands.w	r0, r0, #1
   e10a2:	d105      	bne.n	e10b0 <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
   e10a4:	230a      	movs	r3, #10
   e10a6:	e001      	b.n	e10ac <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
   e10a8:	6863      	ldr	r3, [r4, #4]
   e10aa:	3301      	adds	r3, #1
   e10ac:	6063      	str	r3, [r4, #4]
   e10ae:	e000      	b.n	e10b2 <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
   e10b0:	4610      	mov	r0, r2
}
   e10b2:	b004      	add	sp, #16
   e10b4:	bd70      	pop	{r4, r5, r6, pc}
   e10b6:	bf00      	nop
   e10b8:	ffff8900 	.word	0xffff8900
   e10bc:	ffff8180 	.word	0xffff8180

000e10c0 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
   e10c0:	2274      	movs	r2, #116	; 0x74
   e10c2:	2100      	movs	r1, #0
   e10c4:	f005 bd65 	b.w	e6b92 <memset>

000e10c8 <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
   e10c8:	22b4      	movs	r2, #180	; 0xb4
   e10ca:	2100      	movs	r1, #0
   e10cc:	f005 bd61 	b.w	e6b92 <memset>

000e10d0 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
   e10d0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
   e10d4:	f361 0383 	bfi	r3, r1, #2, #2
   e10d8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
   e10dc:	4770      	bx	lr

000e10de <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
   e10de:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
   e10e0:	6382      	str	r2, [r0, #56]	; 0x38
   e10e2:	4770      	bx	lr

000e10e4 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
   e10e4:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
   e10e6:	61c2      	str	r2, [r0, #28]
   e10e8:	4770      	bx	lr

000e10ea <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
   e10ea:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
   e10ec:	6142      	str	r2, [r0, #20]
   e10ee:	4770      	bx	lr

000e10f0 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
   e10f0:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
   e10f2:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
   e10f4:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
   e10f6:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
   e10f8:	6183      	str	r3, [r0, #24]
   e10fa:	4770      	bx	lr

000e10fc <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
   e10fc:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
   e10fe:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
   e1100:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
   e1102:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
   e1104:	2100      	movs	r1, #0
}
   e1106:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
   e110a:	f7ff b8d3 	b.w	e02b4 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

000e110e <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
   e110e:	3048      	adds	r0, #72	; 0x48
   e1110:	f7ff ba22 	b.w	e0558 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

000e1114 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
   e1114:	64c1      	str	r1, [r0, #76]	; 0x4c
    conf->ca_crl     = ca_crl;
   e1116:	6502      	str	r2, [r0, #80]	; 0x50
   e1118:	4770      	bx	lr
	...

000e111c <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
   e111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e111e:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
   e1120:	460c      	mov	r4, r1
   e1122:	b131      	cbz	r1, e1132 <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
   e1124:	4608      	mov	r0, r1
   e1126:	f005 fda0 	bl	e6c6a <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   e112a:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
   e112c:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   e112e:	d901      	bls.n	e1134 <mbedtls_ssl_set_hostname+0x18>
   e1130:	e022      	b.n	e1178 <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
   e1132:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
   e1134:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
   e1138:	b157      	cbz	r7, e1150 <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   e113a:	4638      	mov	r0, r7
   e113c:	f005 fd95 	bl	e6c6a <strlen>
   e1140:	4601      	mov	r1, r0
   e1142:	4638      	mov	r0, r7
   e1144:	f7ff f8ae 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
   e1148:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   e114c:	f002 ff34 	bl	e3fb8 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
   e1150:	b91c      	cbnz	r4, e115a <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
   e1152:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
   e1156:	4620      	mov	r0, r4
   e1158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
   e115a:	1c69      	adds	r1, r5, #1
   e115c:	2001      	movs	r0, #1
   e115e:	f005 fccd 	bl	e6afc <calloc>
   e1162:	4607      	mov	r7, r0
   e1164:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
        if( ssl->hostname == NULL )
   e1168:	b140      	cbz	r0, e117c <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
   e116a:	462a      	mov	r2, r5
   e116c:	4621      	mov	r1, r4
   e116e:	f005 fcea 	bl	e6b46 <memcpy>

        ssl->hostname[hostname_len] = '\0';
   e1172:	2000      	movs	r0, #0
   e1174:	5578      	strb	r0, [r7, r5]
   e1176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e1178:	4801      	ldr	r0, [pc, #4]	; (e1180 <mbedtls_ssl_set_hostname+0x64>)
   e117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e117c:	4801      	ldr	r0, [pc, #4]	; (e1184 <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
   e117e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e1180:	ffff8f00 	.word	0xffff8f00
   e1184:	ffff8100 	.word	0xffff8100

000e1188 <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
   e1188:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    conf->min_minor_ver = minor;
   e118c:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
   e1190:	4770      	bx	lr

000e1192 <mbedtls_ssl_get_verify_result>:
    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
   e1192:	6a83      	ldr	r3, [r0, #40]	; 0x28
   e1194:	b90b      	cbnz	r3, e119a <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
   e1196:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   e1198:	b10b      	cbz	r3, e119e <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
   e119a:	6e18      	ldr	r0, [r3, #96]	; 0x60
   e119c:	4770      	bx	lr

    return( 0xFFFFFFFF );
   e119e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e11a2:	4770      	bx	lr

000e11a4 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
   e11a4:	6803      	ldr	r3, [r0, #0]
   e11a6:	4a09      	ldr	r2, [pc, #36]	; (e11cc <mbedtls_ssl_get_max_frag_len+0x28>)
   e11a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
   e11ac:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
   e11ae:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e11b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
   e11b6:	b131      	cbz	r1, e11c6 <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
   e11b8:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
   e11bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   e11c0:	4293      	cmp	r3, r2
   e11c2:	bf28      	it	cs
   e11c4:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
   e11c6:	4618      	mov	r0, r3
   e11c8:	4770      	bx	lr
   e11ca:	bf00      	nop
   e11cc:	000e8eb0 	.word	0x000e8eb0

000e11d0 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
   e11d0:	b138      	cbz	r0, e11e2 <mbedtls_ssl_handshake_step+0x12>
   e11d2:	6803      	ldr	r3, [r0, #0]
   e11d4:	b12b      	cbz	r3, e11e2 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   e11d6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   e11da:	07db      	lsls	r3, r3, #31
   e11dc:	d403      	bmi.n	e11e6 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
   e11de:	f7fe bb15 	b.w	df80c <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e11e2:	4802      	ldr	r0, [pc, #8]	; (e11ec <mbedtls_ssl_handshake_step+0x1c>)
   e11e4:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   e11e6:	4802      	ldr	r0, [pc, #8]	; (e11f0 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
   e11e8:	4770      	bx	lr
   e11ea:	bf00      	nop
   e11ec:	ffff8f00 	.word	0xffff8f00
   e11f0:	ffff8f80 	.word	0xffff8f80

000e11f4 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
   e11f4:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
   e11f6:	4604      	mov	r4, r0
   e11f8:	b150      	cbz	r0, e1210 <mbedtls_ssl_handshake+0x1c>
   e11fa:	6803      	ldr	r3, [r0, #0]
   e11fc:	b143      	cbz	r3, e1210 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e11fe:	6863      	ldr	r3, [r4, #4]
   e1200:	2b10      	cmp	r3, #16
   e1202:	d007      	beq.n	e1214 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
   e1204:	4620      	mov	r0, r4
   e1206:	f7ff ffe3 	bl	e11d0 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
   e120a:	2800      	cmp	r0, #0
   e120c:	d0f7      	beq.n	e11fe <mbedtls_ssl_handshake+0xa>
   e120e:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e1210:	4801      	ldr	r0, [pc, #4]	; (e1218 <mbedtls_ssl_handshake+0x24>)
   e1212:	bd10      	pop	{r4, pc}
   e1214:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
   e1216:	bd10      	pop	{r4, pc}
   e1218:	ffff8f00 	.word	0xffff8f00

000e121c <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
   e121c:	b570      	push	{r4, r5, r6, lr}
   e121e:	460e      	mov	r6, r1
   e1220:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
   e1222:	4605      	mov	r5, r0
   e1224:	2800      	cmp	r0, #0
   e1226:	d061      	beq.n	e12ec <mbedtls_ssl_read+0xd0>
   e1228:	6803      	ldr	r3, [r0, #0]
   e122a:	2b00      	cmp	r3, #0
   e122c:	d05e      	beq.n	e12ec <mbedtls_ssl_read+0xd0>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e122e:	6843      	ldr	r3, [r0, #4]
   e1230:	2b10      	cmp	r3, #16
   e1232:	d103      	bne.n	e123c <mbedtls_ssl_read+0x20>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
            return( ret );
        }
    }

    if( ssl->in_offt == NULL )
   e1234:	6eab      	ldr	r3, [r5, #104]	; 0x68
   e1236:	2b00      	cmp	r3, #0
   e1238:	d142      	bne.n	e12c0 <mbedtls_ssl_read+0xa4>
   e123a:	e007      	b.n	e124c <mbedtls_ssl_read+0x30>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        ret = mbedtls_ssl_handshake( ssl );
   e123c:	f7ff ffda 	bl	e11f4 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   e1240:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
   e1244:	d0f6      	beq.n	e1234 <mbedtls_ssl_read+0x18>
   e1246:	2800      	cmp	r0, #0
   e1248:	d0f4      	beq.n	e1234 <mbedtls_ssl_read+0x18>
   e124a:	bd70      	pop	{r4, r5, r6, pc}
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
   e124c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   e124e:	b11b      	cbz	r3, e1258 <mbedtls_ssl_read+0x3c>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
   e1250:	6c68      	ldr	r0, [r5, #68]	; 0x44
   e1252:	4798      	blx	r3
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
   e1254:	3001      	adds	r0, #1
   e1256:	d04d      	beq.n	e12f4 <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   e1258:	4628      	mov	r0, r5
   e125a:	f7ff fdbb 	bl	e0dd4 <mbedtls_ssl_read_record>
   e125e:	b120      	cbz	r0, e126a <mbedtls_ssl_read+0x4e>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   e1260:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   e1264:	d157      	bne.n	e1316 <mbedtls_ssl_read+0xfa>
                return( 0 );
   e1266:	2000      	movs	r0, #0
   e1268:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
   e126a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   e126c:	b953      	cbnz	r3, e1284 <mbedtls_ssl_read+0x68>
   e126e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e1270:	2b17      	cmp	r3, #23
   e1272:	d107      	bne.n	e1284 <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   e1274:	4628      	mov	r0, r5
   e1276:	f7ff fdad 	bl	e0dd4 <mbedtls_ssl_read_record>
   e127a:	b118      	cbz	r0, e1284 <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   e127c:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   e1280:	d0f1      	beq.n	e1266 <mbedtls_ssl_read+0x4a>
   e1282:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e1284:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e1286:	2b16      	cmp	r3, #22
   e1288:	d10b      	bne.n	e12a2 <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   e128a:	682b      	ldr	r3, [r5, #0]
   e128c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   e1290:	07db      	lsls	r3, r3, #31
   e1292:	d435      	bmi.n	e1300 <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   e1294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   e1296:	781b      	ldrb	r3, [r3, #0]
   e1298:	bb53      	cbnz	r3, e12f0 <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   e129a:	6fab      	ldr	r3, [r5, #120]	; 0x78
   e129c:	2b04      	cmp	r3, #4
   e129e:	d127      	bne.n	e12f0 <mbedtls_ssl_read+0xd4>
   e12a0:	e02e      	b.n	e1300 <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   e12a2:	2b15      	cmp	r3, #21
   e12a4:	d101      	bne.n	e12aa <mbedtls_ssl_read+0x8e>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
                }
            }

            return( MBEDTLS_ERR_SSL_WANT_READ );
   e12a6:	481c      	ldr	r0, [pc, #112]	; (e1318 <mbedtls_ssl_read+0xfc>)
   e12a8:	bd70      	pop	{r4, r5, r6, pc}
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   e12aa:	2b17      	cmp	r3, #23
   e12ac:	d120      	bne.n	e12f0 <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
   e12ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   e12b0:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   e12b2:	686b      	ldr	r3, [r5, #4]
   e12b4:	2b10      	cmp	r3, #16
   e12b6:	d103      	bne.n	e12c0 <mbedtls_ssl_read+0xa4>
            ssl_set_timer( ssl, 0 );
   e12b8:	2100      	movs	r1, #0
   e12ba:	4628      	mov	r0, r5
   e12bc:	f7fe fffa 	bl	e02b4 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
   e12c0:	6f28      	ldr	r0, [r5, #112]	; 0x70
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
   e12c2:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   e12c4:	4284      	cmp	r4, r0
   e12c6:	bf28      	it	cs
   e12c8:	4604      	movcs	r4, r0
   e12ca:	4622      	mov	r2, r4
   e12cc:	4630      	mov	r0, r6
   e12ce:	f005 fc3a 	bl	e6b46 <memcpy>
    ssl->in_msglen -= n;
   e12d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   e12d4:	1b1b      	subs	r3, r3, r4
   e12d6:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
   e12d8:	b91b      	cbnz	r3, e12e2 <mbedtls_ssl_read+0xc6>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
   e12da:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
   e12dc:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
   e12e0:	e002      	b.n	e12e8 <mbedtls_ssl_read+0xcc>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
   e12e2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   e12e4:	4423      	add	r3, r4
   e12e6:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
   e12e8:	4620      	mov	r0, r4
   e12ea:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e12ec:	480b      	ldr	r0, [pc, #44]	; (e131c <mbedtls_ssl_read+0x100>)
   e12ee:	bd70      	pop	{r4, r5, r6, pc}
                /* With DTLS, drop the packet (probably from last handshake) */
#if defined(MBEDTLS_SSL_PROTO_DTLS)
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                    return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e12f0:	480b      	ldr	r0, [pc, #44]	; (e1320 <mbedtls_ssl_read+0x104>)
   e12f2:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
   e12f4:	682b      	ldr	r3, [r5, #0]
   e12f6:	4628      	mov	r0, r5
   e12f8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   e12fa:	f7fe ffdb 	bl	e02b4 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   e12fe:	e7ab      	b.n	e1258 <mbedtls_ssl_read+0x3c>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   e1300:	68eb      	ldr	r3, [r5, #12]
   e1302:	2b00      	cmp	r3, #0
   e1304:	dd06      	ble.n	e1314 <mbedtls_ssl_read+0xf8>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   e1306:	2264      	movs	r2, #100	; 0x64
   e1308:	2101      	movs	r1, #1
   e130a:	4628      	mov	r0, r5
   e130c:	f7ff fc4e 	bl	e0bac <mbedtls_ssl_send_alert_message>
   e1310:	b908      	cbnz	r0, e1316 <mbedtls_ssl_read+0xfa>
   e1312:	e7c8      	b.n	e12a6 <mbedtls_ssl_read+0x8a>
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e1314:	4803      	ldr	r0, [pc, #12]	; (e1324 <mbedtls_ssl_read+0x108>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
   e1316:	bd70      	pop	{r4, r5, r6, pc}
   e1318:	ffff9700 	.word	0xffff9700
   e131c:	ffff8f00 	.word	0xffff8f00
   e1320:	ffff8900 	.word	0xffff8900
   e1324:	ffff9400 	.word	0xffff9400

000e1328 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
   e1328:	b570      	push	{r4, r5, r6, lr}
   e132a:	460e      	mov	r6, r1
   e132c:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
   e132e:	4604      	mov	r4, r0
   e1330:	b350      	cbz	r0, e1388 <mbedtls_ssl_write+0x60>
   e1332:	6803      	ldr	r3, [r0, #0]
   e1334:	b343      	cbz	r3, e1388 <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e1336:	6843      	ldr	r3, [r0, #4]
   e1338:	2b10      	cmp	r3, #16
   e133a:	d109      	bne.n	e1350 <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
   e133c:	4620      	mov	r0, r4
   e133e:	f7ff ff31 	bl	e11a4 <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
   e1342:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   e1346:	4285      	cmp	r5, r0
   e1348:	bf28      	it	cs
   e134a:	4605      	movcs	r5, r0
   e134c:	b92b      	cbnz	r3, e135a <mbedtls_ssl_write+0x32>
   e134e:	e00a      	b.n	e1366 <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   e1350:	f7ff ff50 	bl	e11f4 <mbedtls_ssl_handshake>
   e1354:	2800      	cmp	r0, #0
   e1356:	d0f1      	beq.n	e133c <mbedtls_ssl_write+0x14>
   e1358:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e135a:	4620      	mov	r0, r4
   e135c:	f7ff fada 	bl	e0914 <mbedtls_ssl_flush_output>
   e1360:	b998      	cbnz	r0, e138a <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
   e1362:	4628      	mov	r0, r5
   e1364:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   e1366:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
   e1368:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   e136c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
   e1370:	462a      	mov	r2, r5
   e1372:	4631      	mov	r1, r6
   e1374:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e1378:	f005 fbe5 	bl	e6b46 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
   e137c:	4620      	mov	r0, r4
   e137e:	f7ff fb01 	bl	e0984 <mbedtls_ssl_write_record>
   e1382:	2800      	cmp	r0, #0
   e1384:	d0ed      	beq.n	e1362 <mbedtls_ssl_write+0x3a>
   e1386:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e1388:	4800      	ldr	r0, [pc, #0]	; (e138c <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
   e138a:	bd70      	pop	{r4, r5, r6, pc}
   e138c:	ffff8f00 	.word	0xffff8f00

000e1390 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
   e1390:	b510      	push	{r4, lr}
    if( transform == NULL )
   e1392:	4604      	mov	r4, r0
   e1394:	b1a0      	cbz	r0, e13c0 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
   e1396:	3050      	adds	r0, #80	; 0x50
   e1398:	f7f7 fdda 	bl	d8f50 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
   e139c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   e13a0:	f7f7 fdd6 	bl	d8f50 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
   e13a4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e13a8:	f7f8 facd 	bl	d9946 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
   e13ac:	f104 0044 	add.w	r0, r4, #68	; 0x44
   e13b0:	f7f8 fac9 	bl	d9946 <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   e13b4:	4620      	mov	r0, r4
   e13b6:	21c0      	movs	r1, #192	; 0xc0
}
   e13b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   e13bc:	f7fe bf72 	b.w	e02a4 <_ZL15mbedtls_zeroizePvj>
   e13c0:	bd10      	pop	{r4, pc}

000e13c2 <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
   e13c2:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
   e13c4:	4604      	mov	r4, r0
   e13c6:	b1a0      	cbz	r0, e13f2 <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
   e13c8:	3018      	adds	r0, #24
   e13ca:	f7fc fc98 	bl	ddcfe <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
   e13ce:	f104 0088 	add.w	r0, r4, #136	; 0x88
   e13d2:	f7fd f94c 	bl	de66e <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
   e13d6:	68e0      	ldr	r0, [r4, #12]
   e13d8:	b930      	cbnz	r0, e13e8 <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
   e13da:	4620      	mov	r0, r4
   e13dc:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
}
   e13e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
   e13e4:	f7fe bf5e 	b.w	e02a4 <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
   e13e8:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
   e13ea:	f002 fde5 	bl	e3fb8 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
   e13ee:	4628      	mov	r0, r5
   e13f0:	e7f2      	b.n	e13d8 <mbedtls_ssl_handshake_free+0x16>
   e13f2:	bd38      	pop	{r3, r4, r5, pc}

000e13f4 <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
   e13f4:	b510      	push	{r4, lr}
    if( session == NULL )
   e13f6:	4604      	mov	r4, r0
   e13f8:	b178      	cbz	r0, e141a <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
   e13fa:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e13fc:	b120      	cbz	r0, e1408 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
   e13fe:	f001 fe18 	bl	e3032 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
   e1402:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   e1404:	f002 fdd8 	bl	e3fb8 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
   e1408:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e140a:	f002 fdd5 	bl	e3fb8 <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e140e:	4620      	mov	r0, r4
   e1410:	2174      	movs	r1, #116	; 0x74
}
   e1412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e1416:	f7fe bf45 	b.w	e02a4 <_ZL15mbedtls_zeroizePvj>
   e141a:	bd10      	pop	{r4, pc}

000e141c <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
   e141c:	b538      	push	{r3, r4, r5, lr}
   e141e:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
   e1420:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
   e1422:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
   e1424:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
   e1428:	b120      	cbz	r0, e1434 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
   e142a:	f7ff ffe3 	bl	e13f4 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e142e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e1430:	f002 fdc2 	bl	e3fb8 <free>
    }
    ssl->session = ssl->session_negotiate;
   e1434:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
   e1436:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
   e1438:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
   e143a:	2300      	movs	r3, #0
   e143c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
   e143e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   e1440:	b123      	cbz	r3, e144c <mbedtls_ssl_handshake_wrapup+0x30>
   e1442:	6888      	ldr	r0, [r1, #8]
   e1444:	b110      	cbz	r0, e144c <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
   e1446:	b90d      	cbnz	r5, e144c <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
   e1448:	6a90      	ldr	r0, [r2, #40]	; 0x28
   e144a:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
   e144c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e144e:	f7ff ffb8 	bl	e13c2 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
   e1452:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e1454:	f002 fdb0 	bl	e3fb8 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
   e1458:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
   e145a:	2300      	movs	r3, #0
   e145c:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
   e145e:	b120      	cbz	r0, e146a <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
   e1460:	f7ff ff96 	bl	e1390 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e1464:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e1466:	f002 fda7 	bl	e3fb8 <free>
    }
    ssl->transform = ssl->transform_negotiate;
   e146a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e146c:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
   e146e:	2300      	movs	r3, #0
   e1470:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
   e1472:	6863      	ldr	r3, [r4, #4]
   e1474:	3301      	adds	r3, #1
   e1476:	6063      	str	r3, [r4, #4]
   e1478:	bd38      	pop	{r3, r4, r5, pc}
	...

000e147c <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
   e147c:	b538      	push	{r3, r4, r5, lr}
   e147e:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
   e1480:	6c00      	ldr	r0, [r0, #64]	; 0x40
   e1482:	b108      	cbz	r0, e1488 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e1484:	f7ff ff84 	bl	e1390 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
   e1488:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e148a:	b108      	cbz	r0, e1490 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e148c:	f7ff ffb2 	bl	e13f4 <mbedtls_ssl_session_free>
    if( ssl->handshake )
   e1490:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e1492:	b108      	cbz	r0, e1498 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
   e1494:	f7ff ff95 	bl	e13c2 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
   e1498:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e149a:	b923      	cbnz	r3, e14a6 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2a>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
   e149c:	21c0      	movs	r1, #192	; 0xc0
   e149e:	2001      	movs	r0, #1
   e14a0:	f005 fb2c 	bl	e6afc <calloc>
   e14a4:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
   e14a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e14a8:	b923      	cbnz	r3, e14b4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x38>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
   e14aa:	2174      	movs	r1, #116	; 0x74
   e14ac:	2001      	movs	r0, #1
   e14ae:	f005 fb25 	bl	e6afc <calloc>
   e14b2:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
   e14b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e14b6:	b92b      	cbnz	r3, e14c4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x48>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
   e14b8:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   e14bc:	2001      	movs	r0, #1
   e14be:	f005 fb1d 	bl	e6afc <calloc>
   e14c2:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
   e14c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e14c6:	b118      	cbz	r0, e14d0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
   e14c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e14ca:	b10b      	cbz	r3, e14d0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
   e14cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
   e14ce:	b96b      	cbnz	r3, e14ec <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
   e14d0:	f002 fd72 	bl	e3fb8 <free>
        mbedtls_free( ssl->transform_negotiate );
   e14d4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e14d6:	f002 fd6f 	bl	e3fb8 <free>
        mbedtls_free( ssl->session_negotiate );
   e14da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e14dc:	f002 fd6c 	bl	e3fb8 <free>

        ssl->handshake = NULL;
   e14e0:	2300      	movs	r3, #0
   e14e2:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
   e14e4:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
   e14e6:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e14e8:	481e      	ldr	r0, [pc, #120]	; (e1564 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xe8>)
   e14ea:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
   e14ec:	4618      	mov	r0, r3
   e14ee:	f7ff fde7 	bl	e10c0 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
   e14f2:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
   e14f4:	22c0      	movs	r2, #192	; 0xc0
   e14f6:	2100      	movs	r1, #0
   e14f8:	4628      	mov	r0, r5
   e14fa:	f005 fb4a 	bl	e6b92 <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
   e14fe:	f105 0050 	add.w	r0, r5, #80	; 0x50
   e1502:	f7f7 fd21 	bl	d8f48 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
   e1506:	f105 0088 	add.w	r0, r5, #136	; 0x88
   e150a:	f7f7 fd1d 	bl	d8f48 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
   e150e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   e1512:	f7f8 fa13 	bl	d993c <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
   e1516:	f105 0044 	add.w	r0, r5, #68	; 0x44
   e151a:	f7f8 fa0f 	bl	d993c <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
   e151e:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   e1520:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   e1524:	f104 0518 	add.w	r5, r4, #24
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   e1528:	2100      	movs	r1, #0
   e152a:	4620      	mov	r0, r4
   e152c:	f005 fb31 	bl	e6b92 <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   e1530:	4628      	mov	r0, r5
   e1532:	f7fc fbe0 	bl	ddcf6 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   e1536:	2100      	movs	r1, #0
   e1538:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   e153a:	f104 0588 	add.w	r5, r4, #136	; 0x88
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   e153e:	f7fc fbed 	bl	ddd1c <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   e1542:	4628      	mov	r0, r5
   e1544:	f7fd f88f 	bl	de666 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
   e1548:	2101      	movs	r1, #1
   e154a:	4628      	mov	r0, r5
   e154c:	f7fd f8a0 	bl	de690 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
   e1550:	4b05      	ldr	r3, [pc, #20]	; (e1568 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xec>)
   e1552:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
   e1556:	2000      	movs	r0, #0
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
   e1558:	2303      	movs	r3, #3

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
   e155a:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
   e155c:	7060      	strb	r0, [r4, #1]
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
   e155e:	60a3      	str	r3, [r4, #8]
        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
}
   e1560:	bd38      	pop	{r3, r4, r5, pc}
   e1562:	bf00      	nop
   e1564:	ffff8100 	.word	0xffff8100
   e1568:	000e05a5 	.word	0x000e05a5

000e156c <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
   e156c:	b538      	push	{r3, r4, r5, lr}
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;

    ssl->conf = conf;
   e156e:	6001      	str	r1, [r0, #0]
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
   e1570:	4604      	mov	r4, r0
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
   e1572:	f242 012d 	movw	r1, #8237	; 0x202d
   e1576:	2001      	movs	r0, #1
   e1578:	f005 fac0 	bl	e6afc <calloc>
   e157c:	4605      	mov	r5, r0
   e157e:	6520      	str	r0, [r4, #80]	; 0x50
   e1580:	b328      	cbz	r0, e15ce <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
   e1582:	f242 012d 	movw	r1, #8237	; 0x202d
   e1586:	2001      	movs	r0, #1
   e1588:	f005 fab8 	bl	e6afc <calloc>
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
   e158c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
   e1590:	b1e8      	cbz	r0, e15ce <mbedtls_ssl_setup+0x62>
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
   e1592:	f100 0308 	add.w	r3, r0, #8
   e1596:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
   e159a:	f100 030b 	add.w	r3, r0, #11
   e159e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
   e15a2:	f105 0308 	add.w	r3, r5, #8
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
   e15a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
   e15aa:	6565      	str	r5, [r4, #84]	; 0x54
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
   e15ac:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
   e15ae:	65a3      	str	r3, [r4, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
   e15b0:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
   e15b4:	350d      	adds	r5, #13
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
   e15b6:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
   e15ba:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
        ssl->in_len = ssl->in_buf + 11;
   e15be:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
   e15c0:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
   e15c2:	6665      	str	r5, [r4, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   e15c4:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
   e15c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ssl->in_len = ssl->in_buf + 11;
        ssl->in_iv  = ssl->in_buf + 13;
        ssl->in_msg = ssl->in_buf + 13;
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   e15ca:	f7ff bf57 	b.w	e147c <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
        mbedtls_free( ssl->in_buf );
   e15ce:	4628      	mov	r0, r5
   e15d0:	f002 fcf2 	bl	e3fb8 <free>
        ssl->in_buf = NULL;
   e15d4:	2300      	movs	r3, #0
   e15d6:	6523      	str	r3, [r4, #80]	; 0x50

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        return( ret );

    return( 0 );
}
   e15d8:	4800      	ldr	r0, [pc, #0]	; (e15dc <mbedtls_ssl_setup+0x70>)
   e15da:	bd38      	pop	{r3, r4, r5, pc}
   e15dc:	ffff8100 	.word	0xffff8100

000e15e0 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
   e15e0:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
   e15e2:	4604      	mov	r4, r0
   e15e4:	2800      	cmp	r0, #0
   e15e6:	d048      	beq.n	e167a <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
   e15e8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   e15ec:	b138      	cbz	r0, e15fe <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
   e15ee:	f242 012d 	movw	r1, #8237	; 0x202d
   e15f2:	f7fe fe57 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
   e15f6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e15fa:	f002 fcdd 	bl	e3fb8 <free>
    }

    if( ssl->in_buf != NULL )
   e15fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e1600:	b130      	cbz	r0, e1610 <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
   e1602:	f242 012d 	movw	r1, #8237	; 0x202d
   e1606:	f7fe fe4d 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
   e160a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e160c:	f002 fcd4 	bl	e3fb8 <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
   e1610:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e1612:	b120      	cbz	r0, e161e <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
   e1614:	f7ff febc 	bl	e1390 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e1618:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e161a:	f002 fccd 	bl	e3fb8 <free>
    }

    if( ssl->handshake )
   e161e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e1620:	b180      	cbz	r0, e1644 <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
   e1622:	f7ff fece 	bl	e13c2 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e1626:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e1628:	f7ff feb2 	bl	e1390 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e162c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e162e:	f7ff fee1 	bl	e13f4 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
   e1632:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e1634:	f002 fcc0 	bl	e3fb8 <free>
        mbedtls_free( ssl->transform_negotiate );
   e1638:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e163a:	f002 fcbd 	bl	e3fb8 <free>
        mbedtls_free( ssl->session_negotiate );
   e163e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e1640:	f002 fcba 	bl	e3fb8 <free>
    }

    if( ssl->session )
   e1644:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e1646:	b120      	cbz	r0, e1652 <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
   e1648:	f7ff fed4 	bl	e13f4 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e164c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e164e:	f002 fcb3 	bl	e3fb8 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
   e1652:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
   e1656:	b155      	cbz	r5, e166e <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   e1658:	4628      	mov	r0, r5
   e165a:	f005 fb06 	bl	e6c6a <strlen>
   e165e:	4601      	mov	r1, r0
   e1660:	4628      	mov	r0, r5
   e1662:	f7fe fe1f 	bl	e02a4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
   e1666:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   e166a:	f002 fca5 	bl	e3fb8 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e166e:	4620      	mov	r0, r4
   e1670:	21b4      	movs	r1, #180	; 0xb4
}
   e1672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e1676:	f7fe be15 	b.w	e02a4 <_ZL15mbedtls_zeroizePvj>
   e167a:	bd38      	pop	{r3, r4, r5, pc}

000e167c <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
   e167c:	2264      	movs	r2, #100	; 0x64
   e167e:	2100      	movs	r1, #0
   e1680:	f005 ba87 	b.w	e6b92 <memset>

000e1684 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
   e1684:	b510      	push	{r4, lr}
   e1686:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
   e1688:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
   e168c:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
   e1690:	f362 0041 	bfi	r0, r2, #1, #1
   e1694:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
   e1698:	b951      	cbnz	r1, e16b0 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
   e169a:	2102      	movs	r1, #2
   e169c:	b2c2      	uxtb	r2, r0
   e169e:	f361 0283 	bfi	r2, r1, #2, #2
   e16a2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
   e16a6:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   e16aa:	430a      	orrs	r2, r1
   e16ac:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
   e16b0:	2b02      	cmp	r3, #2
   e16b2:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
   e16b6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
   e16ba:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
   e16be:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
   e16c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
   e16c6:	d108      	bne.n	e16da <mbedtls_ssl_config_defaults+0x56>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
   e16c8:	4b0a      	ldr	r3, [pc, #40]	; (e16f4 <mbedtls_ssl_config_defaults+0x70>)
   e16ca:	60e3      	str	r3, [r4, #12]
   e16cc:	60a3      	str	r3, [r4, #8]
   e16ce:	6063      	str	r3, [r4, #4]
   e16d0:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
   e16d2:	4b09      	ldr	r3, [pc, #36]	; (e16f8 <mbedtls_ssl_config_defaults+0x74>)
   e16d4:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
   e16d6:	4b09      	ldr	r3, [pc, #36]	; (e16fc <mbedtls_ssl_config_defaults+0x78>)
   e16d8:	e008      	b.n	e16ec <mbedtls_ssl_config_defaults+0x68>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
   e16da:	f7fe f869 	bl	df7b0 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
   e16de:	4b08      	ldr	r3, [pc, #32]	; (e1700 <mbedtls_ssl_config_defaults+0x7c>)
   e16e0:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
   e16e2:	4b08      	ldr	r3, [pc, #32]	; (e1704 <mbedtls_ssl_config_defaults+0x80>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
   e16e4:	60e0      	str	r0, [r4, #12]
   e16e6:	60a0      	str	r0, [r4, #8]
   e16e8:	6060      	str	r0, [r4, #4]
   e16ea:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
   e16ec:	6563      	str	r3, [r4, #84]	; 0x54
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
   e16ee:	2000      	movs	r0, #0
   e16f0:	bd10      	pop	{r4, pc}
   e16f2:	bf00      	nop
   e16f4:	2003be98 	.word	0x2003be98
   e16f8:	000e96a0 	.word	0x000e96a0
   e16fc:	2003bebc 	.word	0x2003bebc
   e1700:	000e8f9c 	.word	0x000e8f9c
   e1704:	2003bea4 	.word	0x2003bea4

000e1708 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
   e1708:	b538      	push	{r3, r4, r5, lr}
   e170a:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
   e170c:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
   e170e:	b120      	cbz	r0, e171a <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
   e1710:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
   e1712:	f002 fc51 	bl	e3fb8 <free>
        cur = next;
   e1716:	4628      	mov	r0, r5
   e1718:	e7f9      	b.n	e170e <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e171a:	4620      	mov	r0, r4
   e171c:	2164      	movs	r1, #100	; 0x64
}
   e171e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e1722:	f7fe bdbf 	b.w	e02a4 <_ZL15mbedtls_zeroizePvj>

000e1726 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
   e1726:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e1728:	2101      	movs	r1, #1
   e172a:	f7f8 fc8d 	bl	da048 <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
   e172e:	3000      	adds	r0, #0
   e1730:	bf18      	it	ne
   e1732:	2001      	movne	r0, #1
   e1734:	bd08      	pop	{r3, pc}
	...

000e1738 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
   e1738:	3804      	subs	r0, #4
   e173a:	2804      	cmp	r0, #4
   e173c:	bf9a      	itte	ls
   e173e:	4b02      	ldrls	r3, [pc, #8]	; (e1748 <mbedtls_ssl_hash_from_md_alg+0x10>)
   e1740:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
   e1742:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
   e1744:	4770      	bx	lr
   e1746:	bf00      	nop
   e1748:	000e8e4c 	.word	0x000e8e4c

000e174c <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e174c:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
   e174e:	b510      	push	{r4, lr}
   e1750:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e1752:	d10f      	bne.n	e1774 <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
   e1754:	7a8b      	ldrb	r3, [r1, #10]
   e1756:	2b0a      	cmp	r3, #10
   e1758:	d80e      	bhi.n	e1778 <mbedtls_ssl_check_cert_usage+0x2c>
   e175a:	409a      	lsls	r2, r3
   e175c:	f012 0f82 	tst.w	r2, #130	; 0x82
   e1760:	d10c      	bne.n	e177c <mbedtls_ssl_check_cert_usage+0x30>
   e1762:	f412 6fc0 	tst.w	r2, #1536	; 0x600
   e1766:	d10b      	bne.n	e1780 <mbedtls_ssl_check_cert_usage+0x34>
   e1768:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
   e176c:	bf14      	ite	ne
   e176e:	2180      	movne	r1, #128	; 0x80
   e1770:	2100      	moveq	r1, #0
   e1772:	e006      	b.n	e1782 <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
   e1774:	2180      	movs	r1, #128	; 0x80
   e1776:	e004      	b.n	e1782 <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
   e1778:	2100      	movs	r1, #0
   e177a:	e002      	b.n	e1782 <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
   e177c:	2120      	movs	r1, #32
   e177e:	e000      	b.n	e1782 <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
   e1780:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
   e1782:	f001 f879 	bl	e2878 <mbedtls_x509_crt_check_key_usage>
   e1786:	b128      	cbz	r0, e1794 <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
   e1788:	6822      	ldr	r2, [r4, #0]
   e178a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   e178e:	6022      	str	r2, [r4, #0]
        ret = -1;
   e1790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
   e1794:	bd10      	pop	{r4, pc}
	...

000e1798 <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
   e1798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   e179c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   e179e:	f8d3 8000 	ldr.w	r8, [r3]
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e17a2:	f898 200a 	ldrb.w	r2, [r8, #10]
   e17a6:	2a0b      	cmp	r2, #11

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
   e17a8:	b085      	sub	sp, #20
   e17aa:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e17ac:	d80b      	bhi.n	e17c6 <mbedtls_ssl_parse_certificate+0x2e>
   e17ae:	f44f 6316 	mov.w	r3, #2400	; 0x960
   e17b2:	40d3      	lsrs	r3, r2
   e17b4:	f003 0301 	and.w	r3, r3, #1
   e17b8:	f083 0001 	eor.w	r0, r3, #1
   e17bc:	b11b      	cbz	r3, e17c6 <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
   e17be:	686b      	ldr	r3, [r5, #4]
   e17c0:	3301      	adds	r3, #1
   e17c2:	606b      	str	r3, [r5, #4]
        return( 0 );
   e17c4:	e0e0      	b.n	e1988 <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
   e17c6:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   e17c8:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
   e17ca:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   e17ce:	f7ff fb01 	bl	e0dd4 <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
   e17d2:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
   e17d6:	4604      	mov	r4, r0
   e17d8:	bb80      	cbnz	r0, e183c <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
   e17da:	686b      	ldr	r3, [r5, #4]
   e17dc:	3301      	adds	r3, #1
   e17de:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e17e0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e17e2:	2b16      	cmp	r3, #22
   e17e4:	d006      	beq.n	e17f4 <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e17e6:	220a      	movs	r2, #10
   e17e8:	2102      	movs	r1, #2
   e17ea:	4628      	mov	r0, r5
   e17ec:	f7ff f9de 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e17f0:	4867      	ldr	r0, [pc, #412]	; (e1990 <mbedtls_ssl_parse_certificate+0x1f8>)
   e17f2:	e0c9      	b.n	e1988 <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e17f4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   e17f6:	7813      	ldrb	r3, [r2, #0]
   e17f8:	2b0b      	cmp	r3, #11
   e17fa:	d10b      	bne.n	e1814 <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
   e17fc:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e17fe:	2909      	cmp	r1, #9
   e1800:	d908      	bls.n	e1814 <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
   e1802:	7913      	ldrb	r3, [r2, #4]
   e1804:	b933      	cbnz	r3, e1814 <mbedtls_ssl_parse_certificate+0x7c>
   e1806:	7950      	ldrb	r0, [r2, #5]
   e1808:	7993      	ldrb	r3, [r2, #6]
   e180a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   e180e:	3307      	adds	r3, #7
   e1810:	4299      	cmp	r1, r3
   e1812:	d015      	beq.n	e1840 <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e1814:	2232      	movs	r2, #50	; 0x32
   e1816:	2102      	movs	r1, #2
   e1818:	4628      	mov	r0, r5
   e181a:	f7ff f9c7 	bl	e0bac <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   e181e:	485d      	ldr	r0, [pc, #372]	; (e1994 <mbedtls_ssl_parse_certificate+0x1fc>)
   e1820:	e0b2      	b.n	e1988 <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e1822:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
   e1824:	f8df 9178 	ldr.w	r9, [pc, #376]	; e19a0 <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e1828:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e182a:	f001 fbfd 	bl	e3028 <mbedtls_x509_crt_init>

    i += 3;
   e182e:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
   e1830:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
   e1834:	4576      	cmp	r6, lr
   e1836:	d31c      	bcc.n	e1872 <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
   e1838:	2f00      	cmp	r7, #0
   e183a:	d13f      	bne.n	e18bc <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e183c:	4620      	mov	r0, r4
   e183e:	e0a3      	b.n	e1988 <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
   e1840:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   e1842:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e1844:	b128      	cbz	r0, e1852 <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
   e1846:	f001 fbf4 	bl	e3032 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
   e184a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   e184c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e184e:	f002 fbb3 	bl	e3fb8 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
   e1852:	f44f 719a 	mov.w	r1, #308	; 0x134
   e1856:	2001      	movs	r0, #1
   e1858:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   e185a:	f005 f94f 	bl	e6afc <calloc>
   e185e:	65f0      	str	r0, [r6, #92]	; 0x5c
   e1860:	2800      	cmp	r0, #0
   e1862:	d1de      	bne.n	e1822 <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e1864:	2250      	movs	r2, #80	; 0x50
   e1866:	2102      	movs	r1, #2
   e1868:	4628      	mov	r0, r5
   e186a:	f7ff f99f 	bl	e0bac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e186e:	484a      	ldr	r0, [pc, #296]	; (e1998 <mbedtls_ssl_parse_certificate+0x200>)
   e1870:	e08a      	b.n	e1988 <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
   e1872:	1cf1      	adds	r1, r6, #3
   e1874:	458e      	cmp	lr, r1
   e1876:	d3cd      	bcc.n	e1814 <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
   e1878:	6e68      	ldr	r0, [r5, #100]	; 0x64
   e187a:	5d83      	ldrb	r3, [r0, r6]
   e187c:	2b00      	cmp	r3, #0
   e187e:	d1c9      	bne.n	e1814 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   e1880:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
   e1882:	7872      	ldrb	r2, [r6, #1]
   e1884:	78b3      	ldrb	r3, [r6, #2]
   e1886:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
   e188a:	2a7f      	cmp	r2, #127	; 0x7f
   e188c:	d9c2      	bls.n	e1814 <mbedtls_ssl_parse_certificate+0x7c>
   e188e:	188e      	adds	r6, r1, r2
   e1890:	45b6      	cmp	lr, r6
   e1892:	d3bf      	bcc.n	e1814 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e1894:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   e1896:	4401      	add	r1, r0
   e1898:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e189a:	f001 fc23 	bl	e30e4 <mbedtls_x509_crt_parse_der>
                                  ssl->in_msg + i, n );
        switch( ret )
   e189e:	4548      	cmp	r0, r9
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e18a0:	4604      	mov	r4, r0
                                  ssl->in_msg + i, n );
        switch( ret )
   e18a2:	d0c5      	beq.n	e1830 <mbedtls_ssl_parse_certificate+0x98>
   e18a4:	dc04      	bgt.n	e18b0 <mbedtls_ssl_parse_certificate+0x118>
   e18a6:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
   e18aa:	d158      	bne.n	e195e <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
   e18ac:	2250      	movs	r2, #80	; 0x50
   e18ae:	e05d      	b.n	e196c <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
   e18b0:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
   e18b4:	d055      	beq.n	e1962 <mbedtls_ssl_parse_certificate+0x1ca>
   e18b6:	2800      	cmp	r0, #0
   e18b8:	d0ba      	beq.n	e1830 <mbedtls_ssl_parse_certificate+0x98>
   e18ba:	e050      	b.n	e195e <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
   e18bc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   e18be:	682b      	ldr	r3, [r5, #0]
   e18c0:	6916      	ldr	r6, [r2, #16]
   e18c2:	b10e      	cbz	r6, e18c8 <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
   e18c4:	6952      	ldr	r2, [r2, #20]
   e18c6:	e001      	b.n	e18cc <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
   e18c8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
   e18ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
   e18cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
   e18ce:	9103      	str	r1, [sp, #12]
                                ssl->session_negotiate->peer_cert,
   e18d0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
   e18d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
   e18d4:	9102      	str	r1, [sp, #8]
   e18d6:	f100 0160 	add.w	r1, r0, #96	; 0x60
   e18da:	9101      	str	r1, [sp, #4]
   e18dc:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
   e18e0:	9100      	str	r1, [sp, #0]
   e18e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e18e4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e18e6:	4631      	mov	r1, r6
   e18e8:	f001 fabc 	bl	e2e64 <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
   e18ec:	682b      	ldr	r3, [r5, #0]
   e18ee:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
   e18f2:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
   e18f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   e18f6:	f002 0201 	and.w	r2, r2, #1
   e18fa:	f100 0360 	add.w	r3, r0, #96	; 0x60
   e18fe:	f082 0201 	eor.w	r2, r2, #1
   e1902:	4641      	mov	r1, r8
   e1904:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e1906:	f7ff ff21 	bl	e174c <mbedtls_ssl_check_cert_usage>
   e190a:	b100      	cbz	r0, e190e <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
   e190c:	b174      	cbz	r4, e192c <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e190e:	2f01      	cmp	r7, #1
   e1910:	d105      	bne.n	e191e <mbedtls_ssl_parse_certificate+0x186>
   e1912:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
   e1916:	d02e      	beq.n	e1976 <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
   e1918:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
   e191c:	d02b      	beq.n	e1976 <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e191e:	b90e      	cbnz	r6, e1924 <mbedtls_ssl_parse_certificate+0x18c>
   e1920:	2f02      	cmp	r7, #2
   e1922:	d001      	beq.n	e1928 <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
   e1924:	b934      	cbnz	r4, e1934 <mbedtls_ssl_parse_certificate+0x19c>
   e1926:	e789      	b.n	e183c <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e1928:	4c1c      	ldr	r4, [pc, #112]	; (e199c <mbedtls_ssl_parse_certificate+0x204>)
   e192a:	e003      	b.n	e1934 <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e192c:	2f01      	cmp	r7, #1
   e192e:	d085      	beq.n	e183c <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e1930:	b31e      	cbz	r6, e197a <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e1932:	4c18      	ldr	r4, [pc, #96]	; (e1994 <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
   e1934:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   e1936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e1938:	05df      	lsls	r7, r3, #23
   e193a:	d40e      	bmi.n	e195a <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
   e193c:	075e      	lsls	r6, r3, #29
   e193e:	d40e      	bmi.n	e195e <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
   e1940:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
   e1944:	d10d      	bne.n	e1962 <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
   e1946:	07d8      	lsls	r0, r3, #31
   e1948:	d40d      	bmi.n	e1966 <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
   e194a:	0799      	lsls	r1, r3, #30
   e194c:	d40d      	bmi.n	e196a <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
   e194e:	f013 0f08 	tst.w	r3, #8
   e1952:	bf14      	ite	ne
   e1954:	2230      	movne	r2, #48	; 0x30
   e1956:	222e      	moveq	r2, #46	; 0x2e
   e1958:	e008      	b.n	e196c <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
   e195a:	2231      	movs	r2, #49	; 0x31
   e195c:	e006      	b.n	e196c <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e195e:	222a      	movs	r2, #42	; 0x2a
   e1960:	e004      	b.n	e196c <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e1962:	222b      	movs	r2, #43	; 0x2b
   e1964:	e002      	b.n	e196c <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
   e1966:	222d      	movs	r2, #45	; 0x2d
   e1968:	e000      	b.n	e196c <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
   e196a:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
   e196c:	2102      	movs	r1, #2
   e196e:	4628      	mov	r0, r5
   e1970:	f7ff f91c 	bl	e0bac <mbedtls_ssl_send_alert_message>
   e1974:	e762      	b.n	e183c <mbedtls_ssl_parse_certificate+0xa4>
   e1976:	2000      	movs	r0, #0
   e1978:	e006      	b.n	e1988 <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e197a:	4b08      	ldr	r3, [pc, #32]	; (e199c <mbedtls_ssl_parse_certificate+0x204>)
   e197c:	4805      	ldr	r0, [pc, #20]	; (e1994 <mbedtls_ssl_parse_certificate+0x1fc>)
   e197e:	2f02      	cmp	r7, #2
   e1980:	bf14      	ite	ne
   e1982:	4604      	movne	r4, r0
   e1984:	461c      	moveq	r4, r3
   e1986:	e7d5      	b.n	e1934 <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
   e1988:	b005      	add	sp, #20
   e198a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e198e:	bf00      	nop
   e1990:	ffff8900 	.word	0xffff8900
   e1994:	ffff8600 	.word	0xffff8600
   e1998:	ffff8100 	.word	0xffff8100
   e199c:	ffff8980 	.word	0xffff8980
   e19a0:	ffffd9d2 	.word	0xffffd9d2

000e19a4 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   e19a4:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
   e19a6:	7059      	strb	r1, [r3, #1]
   e19a8:	4770      	bx	lr

000e19aa <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   e19aa:	781a      	ldrb	r2, [r3, #0]
   e19ac:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
   e19ae:	785b      	ldrb	r3, [r3, #1]
   e19b0:	600b      	str	r3, [r1, #0]
   e19b2:	4770      	bx	lr

000e19b4 <mbedtls_timing_get_timer.part.0>:
    CloseHandle( CreateThread( NULL, 0, TimerProc, NULL, 0, &ThreadId ) );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
   e19b4:	b513      	push	{r0, r1, r4, lr}
   e19b6:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
   e19b8:	2100      	movs	r1, #0
   e19ba:	4668      	mov	r0, sp
   e19bc:	f005 f9d6 	bl	e6d6c <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
   e19c0:	9b00      	ldr	r3, [sp, #0]
   e19c2:	6822      	ldr	r2, [r4, #0]
   e19c4:	6861      	ldr	r1, [r4, #4]
   e19c6:	1a9a      	subs	r2, r3, r2
   e19c8:	9b01      	ldr	r3, [sp, #4]
   e19ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   e19ce:	1a5b      	subs	r3, r3, r1
   e19d0:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
   e19d4:	fb00 3002 	mla	r0, r0, r2, r3
   e19d8:	b002      	add	sp, #8
   e19da:	bd10      	pop	{r4, pc}

000e19dc <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
   e19dc:	b538      	push	{r3, r4, r5, lr}
   e19de:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
   e19e0:	f002 f87e 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
   e19e4:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   e19e6:	f002 f883 	bl	e3af0 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   e19ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   e19ee:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   e19f0:	fbb5 f0f3 	udiv	r0, r5, r3
   e19f4:	fb03 5010 	mls	r0, r3, r0, r5
   e19f8:	4343      	muls	r3, r0
   e19fa:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
   e19fc:	2000      	movs	r0, #0
   e19fe:	bd38      	pop	{r3, r4, r5, pc}

000e1a00 <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
   e1a00:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
   e1a02:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
   e1a04:	b112      	cbz	r2, e1a0c <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
   e1a06:	2100      	movs	r1, #0
   e1a08:	f005 b9b0 	b.w	e6d6c <gettimeofday>
   e1a0c:	4770      	bx	lr

000e1a0e <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   e1a0e:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   e1a10:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   e1a12:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   e1a14:	b153      	cbz	r3, e1a2c <mbedtls_timing_get_delay+0x1e>
   e1a16:	f7ff ffcd 	bl	e19b4 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
   e1a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e1a1c:	4283      	cmp	r3, r0
   e1a1e:	d908      	bls.n	e1a32 <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
   e1a20:	6a23      	ldr	r3, [r4, #32]
   e1a22:	4283      	cmp	r3, r0
   e1a24:	bf8c      	ite	hi
   e1a26:	2000      	movhi	r0, #0
   e1a28:	2001      	movls	r0, #1
   e1a2a:	bd10      	pop	{r4, pc}
   e1a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e1a30:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
   e1a32:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
   e1a34:	bd10      	pop	{r4, pc}
	...

000e1a38 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
   e1a38:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
   e1a3a:	b530      	push	{r4, r5, lr}
    *res = 0;
   e1a3c:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   e1a3e:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
   e1a40:	b189      	cbz	r1, e1a66 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
   e1a42:	6803      	ldr	r3, [r0, #0]
   e1a44:	781b      	ldrb	r3, [r3, #0]
   e1a46:	3b30      	subs	r3, #48	; 0x30
   e1a48:	2b09      	cmp	r3, #9
   e1a4a:	d80e      	bhi.n	e1a6a <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   e1a4c:	6813      	ldr	r3, [r2, #0]
   e1a4e:	436b      	muls	r3, r5
   e1a50:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
   e1a52:	6803      	ldr	r3, [r0, #0]
   e1a54:	1c5c      	adds	r4, r3, #1
   e1a56:	6004      	str	r4, [r0, #0]
   e1a58:	781b      	ldrb	r3, [r3, #0]
   e1a5a:	6814      	ldr	r4, [r2, #0]
   e1a5c:	3b30      	subs	r3, #48	; 0x30
   e1a5e:	4423      	add	r3, r4
   e1a60:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
   e1a62:	3901      	subs	r1, #1
   e1a64:	e7ec      	b.n	e1a40 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
   e1a66:	4608      	mov	r0, r1
   e1a68:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
   e1a6a:	4801      	ldr	r0, [pc, #4]	; (e1a70 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
   e1a6c:	bd30      	pop	{r4, r5, pc}
   e1a6e:	bf00      	nop
   e1a70:	ffffdc00 	.word	0xffffdc00

000e1a74 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   e1a74:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
   e1a76:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   e1a78:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
   e1a7a:	1aca      	subs	r2, r1, r3
   e1a7c:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   e1a7e:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
   e1a80:	dd17      	ble.n	e1ab2 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
   e1a82:	781a      	ldrb	r2, [r3, #0]
   e1a84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   e1a88:	2a02      	cmp	r2, #2
   e1a8a:	d114      	bne.n	e1ab6 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
   e1a8c:	1c5a      	adds	r2, r3, #1
   e1a8e:	6002      	str	r2, [r0, #0]
   e1a90:	462a      	mov	r2, r5
   e1a92:	781b      	ldrb	r3, [r3, #0]
   e1a94:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
   e1a98:	f7f5 fbba 	bl	d7210 <mbedtls_asn1_get_len>
   e1a9c:	b110      	cbz	r0, e1aa4 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
   e1a9e:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
   e1aa2:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
   e1aa4:	6823      	ldr	r3, [r4, #0]
   e1aa6:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
   e1aa8:	6822      	ldr	r2, [r4, #0]
   e1aaa:	686b      	ldr	r3, [r5, #4]
   e1aac:	4413      	add	r3, r2
   e1aae:	6023      	str	r3, [r4, #0]

    return( 0 );
   e1ab0:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e1ab2:	4802      	ldr	r0, [pc, #8]	; (e1abc <mbedtls_x509_get_serial+0x48>)
   e1ab4:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e1ab6:	4802      	ldr	r0, [pc, #8]	; (e1ac0 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
   e1ab8:	bd38      	pop	{r3, r4, r5, pc}
   e1aba:	bf00      	nop
   e1abc:	ffffdd20 	.word	0xffffdd20
   e1ac0:	ffffdd1e 	.word	0xffffdd1e

000e1ac4 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
   e1ac4:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
   e1ac6:	f7f5 fcd2 	bl	d746e <mbedtls_asn1_get_alg>
   e1aca:	b108      	cbz	r0, e1ad0 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   e1acc:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
   e1ad0:	bd08      	pop	{r3, pc}
	...

000e1ad4 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
   e1ad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   e1ad8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; e1bc0 <mbedtls_x509_get_name+0xec>
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
   e1adc:	4604      	mov	r4, r0
   e1ade:	460f      	mov	r7, r1
   e1ae0:	4691      	mov	r9, r2
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
   e1ae2:	2331      	movs	r3, #49	; 0x31
   e1ae4:	466a      	mov	r2, sp
   e1ae6:	4639      	mov	r1, r7
   e1ae8:	4620      	mov	r0, r4
   e1aea:	f7f5 fbe3 	bl	d72b4 <mbedtls_asn1_get_tag>
   e1aee:	b110      	cbz	r0, e1af6 <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   e1af0:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
   e1af4:	e05a      	b.n	e1bac <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
   e1af6:	6826      	ldr	r6, [r4, #0]
   e1af8:	9b00      	ldr	r3, [sp, #0]
   e1afa:	464d      	mov	r5, r9
   e1afc:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e1afe:	2330      	movs	r3, #48	; 0x30
   e1b00:	aa01      	add	r2, sp, #4
   e1b02:	4631      	mov	r1, r6
   e1b04:	4620      	mov	r0, r4
   e1b06:	f7f5 fbd5 	bl	d72b4 <mbedtls_asn1_get_tag>
   e1b0a:	bb50      	cbnz	r0, e1b62 <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
   e1b0c:	6823      	ldr	r3, [r4, #0]
   e1b0e:	1af2      	subs	r2, r6, r3
   e1b10:	2a00      	cmp	r2, #0
   e1b12:	dc01      	bgt.n	e1b18 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e1b14:	4827      	ldr	r0, [pc, #156]	; (e1bb4 <mbedtls_x509_get_name+0xe0>)
   e1b16:	e049      	b.n	e1bac <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
   e1b18:	462a      	mov	r2, r5
   e1b1a:	781b      	ldrb	r3, [r3, #0]
   e1b1c:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
   e1b20:	4631      	mov	r1, r6
   e1b22:	2306      	movs	r3, #6
   e1b24:	4620      	mov	r0, r4
   e1b26:	f7f5 fbc5 	bl	d72b4 <mbedtls_asn1_get_tag>
   e1b2a:	b9d0      	cbnz	r0, e1b62 <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
   e1b2c:	6823      	ldr	r3, [r4, #0]
   e1b2e:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
   e1b30:	6820      	ldr	r0, [r4, #0]
   e1b32:	6869      	ldr	r1, [r5, #4]
   e1b34:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
   e1b36:	1af2      	subs	r2, r6, r3
   e1b38:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
   e1b3a:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
   e1b3c:	ddea      	ble.n	e1b14 <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
   e1b3e:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   e1b40:	2a1e      	cmp	r2, #30
   e1b42:	d81a      	bhi.n	e1b7a <mbedtls_x509_get_name+0xa6>
   e1b44:	fa28 f202 	lsr.w	r2, r8, r2
   e1b48:	07d2      	lsls	r2, r2, #31
   e1b4a:	d516      	bpl.n	e1b7a <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
   e1b4c:	3301      	adds	r3, #1
   e1b4e:	6023      	str	r3, [r4, #0]
   e1b50:	5c43      	ldrb	r3, [r0, r1]
   e1b52:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
   e1b54:	f105 0210 	add.w	r2, r5, #16
   e1b58:	4631      	mov	r1, r6
   e1b5a:	4620      	mov	r0, r4
   e1b5c:	f7f5 fb58 	bl	d7210 <mbedtls_asn1_get_len>
   e1b60:	b118      	cbz	r0, e1b6a <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   e1b62:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
   e1b66:	b150      	cbz	r0, e1b7e <mbedtls_x509_get_name+0xaa>
   e1b68:	e020      	b.n	e1bac <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
   e1b6a:	6823      	ldr	r3, [r4, #0]
   e1b6c:	616b      	str	r3, [r5, #20]
    *p += val->len;
   e1b6e:	6822      	ldr	r2, [r4, #0]
   e1b70:	692b      	ldr	r3, [r5, #16]
   e1b72:	4413      	add	r3, r2
   e1b74:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
   e1b76:	61a8      	str	r0, [r5, #24]
   e1b78:	e001      	b.n	e1b7e <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e1b7a:	480f      	ldr	r0, [pc, #60]	; (e1bb8 <mbedtls_x509_get_name+0xe4>)
   e1b7c:	e016      	b.n	e1bac <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
   e1b7e:	6823      	ldr	r3, [r4, #0]
   e1b80:	429e      	cmp	r6, r3
   e1b82:	d008      	beq.n	e1b96 <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
   e1b84:	2001      	movs	r0, #1
   e1b86:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   e1b88:	2120      	movs	r1, #32
   e1b8a:	f004 ffb7 	bl	e6afc <calloc>
   e1b8e:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
   e1b90:	b158      	cbz	r0, e1baa <mbedtls_x509_get_name+0xd6>
   e1b92:	4605      	mov	r5, r0
   e1b94:	e7b3      	b.n	e1afe <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
   e1b96:	42b7      	cmp	r7, r6
   e1b98:	d008      	beq.n	e1bac <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   e1b9a:	2120      	movs	r1, #32
   e1b9c:	2001      	movs	r0, #1
   e1b9e:	f004 ffad 	bl	e6afc <calloc>
   e1ba2:	4681      	mov	r9, r0
   e1ba4:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
   e1ba6:	2800      	cmp	r0, #0
   e1ba8:	d19b      	bne.n	e1ae2 <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   e1baa:	4804      	ldr	r0, [pc, #16]	; (e1bbc <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
   e1bac:	b003      	add	sp, #12
   e1bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e1bb2:	bf00      	nop
   e1bb4:	ffffdc20 	.word	0xffffdc20
   e1bb8:	ffffdc1e 	.word	0xffffdc1e
   e1bbc:	ffffd780 	.word	0xffffd780
   e1bc0:	50581008 	.word	0x50581008

000e1bc4 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   e1bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   e1bc6:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   e1bc8:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   e1bca:	1aca      	subs	r2, r1, r3
   e1bcc:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   e1bce:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   e1bd0:	f340 80a0 	ble.w	e1d14 <mbedtls_x509_get_time+0x150>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
   e1bd4:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
   e1bd6:	2a17      	cmp	r2, #23
   e1bd8:	d004      	beq.n	e1be4 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
   e1bda:	2a18      	cmp	r2, #24
   e1bdc:	f040 809c 	bne.w	e1d18 <mbedtls_x509_get_time+0x154>
        year_len = 4;
   e1be0:	2704      	movs	r7, #4
   e1be2:	e000      	b.n	e1be6 <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
   e1be4:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   e1be6:	3301      	adds	r3, #1
   e1be8:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
   e1bea:	aa01      	add	r2, sp, #4
   e1bec:	4628      	mov	r0, r5
   e1bee:	f7f5 fb0f 	bl	d7210 <mbedtls_asn1_get_len>

    if( ret != 0 )
   e1bf2:	b110      	cbz	r0, e1bfa <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
   e1bf4:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
   e1bf8:	e091      	b.n	e1d1e <mbedtls_x509_get_time+0x15a>

    return x509_parse_time( p, len, year_len, tm );
   e1bfa:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
   e1bfc:	f107 0308 	add.w	r3, r7, #8
   e1c00:	429e      	cmp	r6, r3
   e1c02:	f0c0 808b 	bcc.w	e1d1c <mbedtls_x509_get_time+0x158>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
   e1c06:	4622      	mov	r2, r4
   e1c08:	4639      	mov	r1, r7
   e1c0a:	4628      	mov	r0, r5
   e1c0c:	f7ff ff14 	bl	e1a38 <_ZL14x509_parse_intPPhjPi>
   e1c10:	2800      	cmp	r0, #0
   e1c12:	f040 8084 	bne.w	e1d1e <mbedtls_x509_get_time+0x15a>
    if ( 2 == yearlen )
   e1c16:	2f02      	cmp	r7, #2
   e1c18:	d108      	bne.n	e1c2c <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
   e1c1a:	6823      	ldr	r3, [r4, #0]
   e1c1c:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
   e1c1e:	bfdc      	itt	le
   e1c20:	3364      	addle	r3, #100	; 0x64
   e1c22:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
   e1c24:	6823      	ldr	r3, [r4, #0]
   e1c26:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e1c2a:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
   e1c2c:	1d22      	adds	r2, r4, #4
   e1c2e:	2102      	movs	r1, #2
   e1c30:	4628      	mov	r0, r5
   e1c32:	f7ff ff01 	bl	e1a38 <_ZL14x509_parse_intPPhjPi>
   e1c36:	2800      	cmp	r0, #0
   e1c38:	d171      	bne.n	e1d1e <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
   e1c3a:	f104 0208 	add.w	r2, r4, #8
   e1c3e:	2102      	movs	r1, #2
   e1c40:	4628      	mov	r0, r5
   e1c42:	f7ff fef9 	bl	e1a38 <_ZL14x509_parse_intPPhjPi>
   e1c46:	2800      	cmp	r0, #0
   e1c48:	d169      	bne.n	e1d1e <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
   e1c4a:	f104 020c 	add.w	r2, r4, #12
   e1c4e:	2102      	movs	r1, #2
   e1c50:	4628      	mov	r0, r5
   e1c52:	f7ff fef1 	bl	e1a38 <_ZL14x509_parse_intPPhjPi>
   e1c56:	2800      	cmp	r0, #0
   e1c58:	d161      	bne.n	e1d1e <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
   e1c5a:	f104 0210 	add.w	r2, r4, #16
   e1c5e:	2102      	movs	r1, #2
   e1c60:	4628      	mov	r0, r5
   e1c62:	f7ff fee9 	bl	e1a38 <_ZL14x509_parse_intPPhjPi>
   e1c66:	2800      	cmp	r0, #0
   e1c68:	d159      	bne.n	e1d1e <mbedtls_x509_get_time+0x15a>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
   e1c6a:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
   e1c6c:	f1a6 0308 	sub.w	r3, r6, #8
   e1c70:	2b01      	cmp	r3, #1
   e1c72:	d953      	bls.n	e1d1c <mbedtls_x509_get_time+0x158>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
   e1c74:	f104 0214 	add.w	r2, r4, #20
   e1c78:	2102      	movs	r1, #2
   e1c7a:	4628      	mov	r0, r5
   e1c7c:	f7ff fedc 	bl	e1a38 <_ZL14x509_parse_intPPhjPi>
   e1c80:	2800      	cmp	r0, #0
   e1c82:	d14c      	bne.n	e1d1e <mbedtls_x509_get_time+0x15a>
        len -= 2;
   e1c84:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
   e1c88:	2b01      	cmp	r3, #1
   e1c8a:	d107      	bne.n	e1c9c <mbedtls_x509_get_time+0xd8>
   e1c8c:	682b      	ldr	r3, [r5, #0]
   e1c8e:	781a      	ldrb	r2, [r3, #0]
   e1c90:	2a5a      	cmp	r2, #90	; 0x5a
   e1c92:	d143      	bne.n	e1d1c <mbedtls_x509_get_time+0x158>
    {
        (*p)++;
   e1c94:	3301      	adds	r3, #1
   e1c96:	602b      	str	r3, [r5, #0]
        len--;
   e1c98:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
   e1c9c:	2b00      	cmp	r3, #0
   e1c9e:	d13d      	bne.n	e1d1c <mbedtls_x509_get_time+0x158>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
   e1ca0:	6823      	ldr	r3, [r4, #0]
   e1ca2:	f242 720f 	movw	r2, #9999	; 0x270f
   e1ca6:	4293      	cmp	r3, r2
   e1ca8:	d838      	bhi.n	e1d1c <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 23,   t->hour );
   e1caa:	68e2      	ldr	r2, [r4, #12]
   e1cac:	2a17      	cmp	r2, #23
   e1cae:	d835      	bhi.n	e1d1c <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->min  );
   e1cb0:	6922      	ldr	r2, [r4, #16]
   e1cb2:	2a3b      	cmp	r2, #59	; 0x3b
   e1cb4:	d832      	bhi.n	e1d1c <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->sec  );
   e1cb6:	6962      	ldr	r2, [r4, #20]
   e1cb8:	2a3b      	cmp	r2, #59	; 0x3b
   e1cba:	d82f      	bhi.n	e1d1c <mbedtls_x509_get_time+0x158>
   e1cbc:	6861      	ldr	r1, [r4, #4]
   e1cbe:	290c      	cmp	r1, #12
   e1cc0:	d82c      	bhi.n	e1d1c <mbedtls_x509_get_time+0x158>
   e1cc2:	2201      	movs	r2, #1
   e1cc4:	408a      	lsls	r2, r1
   e1cc6:	f241 51aa 	movw	r1, #5546	; 0x15aa
   e1cca:	4011      	ands	r1, r2
   e1ccc:	b9b9      	cbnz	r1, e1cfe <mbedtls_x509_get_time+0x13a>
   e1cce:	f412 6f25 	tst.w	r2, #2640	; 0xa50
   e1cd2:	d116      	bne.n	e1d02 <mbedtls_x509_get_time+0x13e>
   e1cd4:	0751      	lsls	r1, r2, #29
   e1cd6:	d521      	bpl.n	e1d1c <mbedtls_x509_get_time+0x158>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
   e1cd8:	079a      	lsls	r2, r3, #30
   e1cda:	d105      	bne.n	e1ce8 <mbedtls_x509_get_time+0x124>
   e1cdc:	2164      	movs	r1, #100	; 0x64
   e1cde:	fb93 f2f1 	sdiv	r2, r3, r1
   e1ce2:	fb01 3212 	mls	r2, r1, r2, r3
   e1ce6:	b972      	cbnz	r2, e1d06 <mbedtls_x509_get_time+0x142>
   e1ce8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e1cec:	fb93 f2f1 	sdiv	r2, r3, r1
   e1cf0:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
   e1cf4:	2b00      	cmp	r3, #0
   e1cf6:	bf0c      	ite	eq
   e1cf8:	231d      	moveq	r3, #29
   e1cfa:	231c      	movne	r3, #28
   e1cfc:	e004      	b.n	e1d08 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
   e1cfe:	231f      	movs	r3, #31
   e1d00:	e002      	b.n	e1d08 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
   e1d02:	231e      	movs	r3, #30
   e1d04:	e000      	b.n	e1d08 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
   e1d06:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
   e1d08:	68a2      	ldr	r2, [r4, #8]
   e1d0a:	2a00      	cmp	r2, #0
   e1d0c:	dd06      	ble.n	e1d1c <mbedtls_x509_get_time+0x158>
   e1d0e:	429a      	cmp	r2, r3
   e1d10:	dd05      	ble.n	e1d1e <mbedtls_x509_get_time+0x15a>
   e1d12:	e003      	b.n	e1d1c <mbedtls_x509_get_time+0x158>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e1d14:	4803      	ldr	r0, [pc, #12]	; (e1d24 <mbedtls_x509_get_time+0x160>)
   e1d16:	e002      	b.n	e1d1e <mbedtls_x509_get_time+0x15a>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e1d18:	4803      	ldr	r0, [pc, #12]	; (e1d28 <mbedtls_x509_get_time+0x164>)
   e1d1a:	e000      	b.n	e1d1e <mbedtls_x509_get_time+0x15a>
   e1d1c:	4803      	ldr	r0, [pc, #12]	; (e1d2c <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
   e1d1e:	b003      	add	sp, #12
   e1d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e1d22:	bf00      	nop
   e1d24:	ffffdba0 	.word	0xffffdba0
   e1d28:	ffffdb9e 	.word	0xffffdb9e
   e1d2c:	ffffdc00 	.word	0xffffdc00

000e1d30 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   e1d30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   e1d32:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   e1d34:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   e1d36:	1aca      	subs	r2, r1, r3
   e1d38:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   e1d3a:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   e1d3c:	dd10      	ble.n	e1d60 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   e1d3e:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
   e1d40:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   e1d42:	f7f5 fb40 	bl	d73c6 <mbedtls_asn1_get_bitstring_null>
   e1d46:	b110      	cbz	r0, e1d4e <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
   e1d48:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
   e1d4c:	e009      	b.n	e1d62 <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
   e1d4e:	9b01      	ldr	r3, [sp, #4]
   e1d50:	606b      	str	r3, [r5, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
   e1d52:	602e      	str	r6, [r5, #0]
    sig->len = len;
    sig->p = *p;
   e1d54:	6822      	ldr	r2, [r4, #0]
   e1d56:	60aa      	str	r2, [r5, #8]

    *p += len;
   e1d58:	6822      	ldr	r2, [r4, #0]
   e1d5a:	4413      	add	r3, r2
   e1d5c:	6023      	str	r3, [r4, #0]

    return( 0 );
   e1d5e:	e000      	b.n	e1d62 <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e1d60:	4801      	ldr	r0, [pc, #4]	; (e1d68 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
   e1d62:	b002      	add	sp, #8
   e1d64:	bd70      	pop	{r4, r5, r6, pc}
   e1d66:	bf00      	nop
   e1d68:	ffffdb20 	.word	0xffffdb20

000e1d6c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   e1d6c:	b510      	push	{r4, lr}
   e1d6e:	460c      	mov	r4, r1
   e1d70:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
   e1d72:	9a02      	ldr	r2, [sp, #8]
   e1d74:	6812      	ldr	r2, [r2, #0]
   e1d76:	b982      	cbnz	r2, e1d9a <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
   e1d78:	461a      	mov	r2, r3
   e1d7a:	f7f7 fff3 	bl	d9d64 <mbedtls_oid_get_sig_alg>
   e1d7e:	b110      	cbz	r0, e1d86 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
   e1d80:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
   e1d84:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
   e1d86:	6823      	ldr	r3, [r4, #0]
   e1d88:	2b05      	cmp	r3, #5
   e1d8a:	d000      	beq.n	e1d8e <mbedtls_x509_get_sig_alg+0x22>
   e1d8c:	b93b      	cbnz	r3, e1d9e <mbedtls_x509_get_sig_alg+0x32>
   e1d8e:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
   e1d90:	4804      	ldr	r0, [pc, #16]	; (e1da4 <mbedtls_x509_get_sig_alg+0x38>)
   e1d92:	2b00      	cmp	r3, #0
   e1d94:	bf08      	it	eq
   e1d96:	2000      	moveq	r0, #0
   e1d98:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e1d9a:	4803      	ldr	r0, [pc, #12]	; (e1da8 <mbedtls_x509_get_sig_alg+0x3c>)
   e1d9c:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   e1d9e:	4801      	ldr	r0, [pc, #4]	; (e1da4 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
   e1da0:	bd10      	pop	{r4, pc}
   e1da2:	bf00      	nop
   e1da4:	ffffdd00 	.word	0xffffdd00
   e1da8:	ffffd800 	.word	0xffffd800

000e1dac <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
   e1dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e1dae:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
   e1db0:	6802      	ldr	r2, [r0, #0]
   e1db2:	428a      	cmp	r2, r1
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
   e1db4:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
   e1db6:	d01c      	beq.n	e1df2 <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
   e1db8:	7815      	ldrb	r5, [r2, #0]
   e1dba:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   e1dbc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
   e1dc0:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   e1dc4:	f7f5 fa76 	bl	d72b4 <mbedtls_asn1_get_tag>
   e1dc8:	b9b0      	cbnz	r0, e1df8 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
   e1dca:	6823      	ldr	r3, [r4, #0]
   e1dcc:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
   e1dce:	6825      	ldr	r5, [r4, #0]
   e1dd0:	6873      	ldr	r3, [r6, #4]
   e1dd2:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e1dd4:	aa01      	add	r2, sp, #4
   e1dd6:	2330      	movs	r3, #48	; 0x30
   e1dd8:	4629      	mov	r1, r5
   e1dda:	4620      	mov	r0, r4
   e1ddc:	f7f5 fa6a 	bl	d72b4 <mbedtls_asn1_get_tag>
   e1de0:	b110      	cbz	r0, e1de8 <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   e1de2:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
   e1de6:	e007      	b.n	e1df8 <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
   e1de8:	6822      	ldr	r2, [r4, #0]
   e1dea:	9b01      	ldr	r3, [sp, #4]
   e1dec:	4413      	add	r3, r2
   e1dee:	429d      	cmp	r5, r3
   e1df0:	d101      	bne.n	e1df6 <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
   e1df2:	2000      	movs	r0, #0
   e1df4:	e000      	b.n	e1df8 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e1df6:	4801      	ldr	r0, [pc, #4]	; (e1dfc <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
   e1df8:	b002      	add	sp, #8
   e1dfa:	bd70      	pop	{r4, r5, r6, pc}
   e1dfc:	ffffda9a 	.word	0xffffda9a

000e1e00 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   e1e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e1e04:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   e1e06:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   e1e0a:	f10d 0808 	add.w	r8, sp, #8
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   e1e0e:	460f      	mov	r7, r1
   e1e10:	4691      	mov	r9, r2
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   e1e12:	4651      	mov	r1, sl
   e1e14:	f44f 7280 	mov.w	r2, #256	; 0x100
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   e1e18:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   e1e1a:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   e1e1c:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
   e1e20:	464e      	mov	r6, r9
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   e1e22:	f004 feb6 	bl	e6b92 <memset>

    name = dn;
    p = buf;
    n = size;
   e1e26:	463d      	mov	r5, r7
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
   e1e28:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
   e1e2a:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
   e1e2e:	2e00      	cmp	r6, #0
   e1e30:	d057      	beq.n	e1ee2 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
   e1e32:	68b3      	ldr	r3, [r6, #8]
   e1e34:	2b00      	cmp	r3, #0
   e1e36:	d052      	beq.n	e1ede <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
   e1e38:	454e      	cmp	r6, r9
   e1e3a:	d011      	beq.n	e1e60 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
   e1e3c:	4b2b      	ldr	r3, [pc, #172]	; (e1eec <mbedtls_x509_dn_gets+0xec>)
   e1e3e:	492c      	ldr	r1, [pc, #176]	; (e1ef0 <mbedtls_x509_dn_gets+0xf0>)
   e1e40:	4620      	mov	r0, r4
   e1e42:	2a00      	cmp	r2, #0
   e1e44:	bf14      	ite	ne
   e1e46:	460a      	movne	r2, r1
   e1e48:	461a      	moveq	r2, r3
   e1e4a:	4629      	mov	r1, r5
   e1e4c:	f002 f8cc 	bl	e3fe8 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   e1e50:	2800      	cmp	r0, #0
   e1e52:	da01      	bge.n	e1e58 <mbedtls_x509_dn_gets+0x58>
   e1e54:	4827      	ldr	r0, [pc, #156]	; (e1ef4 <mbedtls_x509_dn_gets+0xf4>)
   e1e56:	e045      	b.n	e1ee4 <mbedtls_x509_dn_gets+0xe4>
   e1e58:	4285      	cmp	r5, r0
   e1e5a:	d9fb      	bls.n	e1e54 <mbedtls_x509_dn_gets+0x54>
   e1e5c:	1a2d      	subs	r5, r5, r0
   e1e5e:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
   e1e60:	a901      	add	r1, sp, #4
   e1e62:	4630      	mov	r0, r6
   e1e64:	f7f7 ff24 	bl	d9cb0 <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
   e1e68:	b930      	cbnz	r0, e1e78 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
   e1e6a:	9b01      	ldr	r3, [sp, #4]
   e1e6c:	4a22      	ldr	r2, [pc, #136]	; (e1ef8 <mbedtls_x509_dn_gets+0xf8>)
   e1e6e:	4629      	mov	r1, r5
   e1e70:	4620      	mov	r0, r4
   e1e72:	f002 f8b9 	bl	e3fe8 <snprintf>
   e1e76:	e004      	b.n	e1e82 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
   e1e78:	4a20      	ldr	r2, [pc, #128]	; (e1efc <mbedtls_x509_dn_gets+0xfc>)
   e1e7a:	4629      	mov	r1, r5
   e1e7c:	4620      	mov	r0, r4
   e1e7e:	f002 f8b3 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e1e82:	2800      	cmp	r0, #0
   e1e84:	dbe6      	blt.n	e1e54 <mbedtls_x509_dn_gets+0x54>
   e1e86:	4285      	cmp	r5, r0
   e1e88:	d9e4      	bls.n	e1e54 <mbedtls_x509_dn_gets+0x54>
   e1e8a:	1a2d      	subs	r5, r5, r0
   e1e8c:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
   e1e8e:	2300      	movs	r3, #0
   e1e90:	6932      	ldr	r2, [r6, #16]
   e1e92:	4293      	cmp	r3, r2
   e1e94:	d213      	bcs.n	e1ebe <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
   e1e96:	2bff      	cmp	r3, #255	; 0xff
   e1e98:	d011      	beq.n	e1ebe <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
   e1e9a:	6972      	ldr	r2, [r6, #20]
   e1e9c:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
   e1e9e:	2a1f      	cmp	r2, #31
   e1ea0:	d906      	bls.n	e1eb0 <mbedtls_x509_dn_gets+0xb0>
   e1ea2:	2a7f      	cmp	r2, #127	; 0x7f
   e1ea4:	d004      	beq.n	e1eb0 <mbedtls_x509_dn_gets+0xb0>
   e1ea6:	f102 017f 	add.w	r1, r2, #127	; 0x7f
   e1eaa:	b2c9      	uxtb	r1, r1
   e1eac:	291e      	cmp	r1, #30
   e1eae:	d802      	bhi.n	e1eb6 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
   e1eb0:	f808 a003 	strb.w	sl, [r8, r3]
   e1eb4:	e001      	b.n	e1eba <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
   e1eb6:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
   e1eba:	3301      	adds	r3, #1
   e1ebc:	e7e8      	b.n	e1e90 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
   e1ebe:	2200      	movs	r2, #0
   e1ec0:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
   e1ec4:	4629      	mov	r1, r5
   e1ec6:	4643      	mov	r3, r8
   e1ec8:	4a0d      	ldr	r2, [pc, #52]	; (e1f00 <mbedtls_x509_dn_gets+0x100>)
   e1eca:	4620      	mov	r0, r4
   e1ecc:	f002 f88c 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e1ed0:	2800      	cmp	r0, #0
   e1ed2:	dbbf      	blt.n	e1e54 <mbedtls_x509_dn_gets+0x54>
   e1ed4:	4285      	cmp	r5, r0
   e1ed6:	d9bd      	bls.n	e1e54 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
   e1ed8:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e1eda:	1a2d      	subs	r5, r5, r0
   e1edc:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
   e1ede:	69b6      	ldr	r6, [r6, #24]
   e1ee0:	e7a5      	b.n	e1e2e <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
   e1ee2:	1b78      	subs	r0, r7, r5
}
   e1ee4:	b042      	add	sp, #264	; 0x108
   e1ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1eea:	bf00      	nop
   e1eec:	000e8ec8 	.word	0x000e8ec8
   e1ef0:	000e8ec4 	.word	0x000e8ec4
   e1ef4:	ffffd680 	.word	0xffffd680
   e1ef8:	000e8ecb 	.word	0x000e8ecb
   e1efc:	000e8ecf 	.word	0x000e8ecf
   e1f00:	000e90db 	.word	0x000e90db

000e1f04 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   e1f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
   e1f08:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   e1f0a:	f8df a084 	ldr.w	sl, [pc, #132]	; e1f90 <mbedtls_x509_serial_gets+0x8c>
   e1f0e:	f8df b084 	ldr.w	fp, [pc, #132]	; e1f94 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
   e1f12:	2e21      	cmp	r6, #33	; 0x21
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   e1f14:	4680      	mov	r8, r0
   e1f16:	460f      	mov	r7, r1
   e1f18:	4691      	mov	r9, r2

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
   e1f1a:	bf28      	it	cs
   e1f1c:	261c      	movcs	r6, #28
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
   e1f1e:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
   e1f20:	2500      	movs	r5, #0
   e1f22:	42b5      	cmp	r5, r6
   e1f24:	d01c      	beq.n	e1f60 <mbedtls_x509_serial_gets+0x5c>
   e1f26:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
   e1f2a:	b91d      	cbnz	r5, e1f34 <mbedtls_x509_serial_gets+0x30>
   e1f2c:	2e01      	cmp	r6, #1
   e1f2e:	d001      	beq.n	e1f34 <mbedtls_x509_serial_gets+0x30>
   e1f30:	781a      	ldrb	r2, [r3, #0]
   e1f32:	b19a      	cbz	r2, e1f5c <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   e1f34:	1e72      	subs	r2, r6, #1
   e1f36:	4295      	cmp	r5, r2
   e1f38:	bf34      	ite	cc
   e1f3a:	4652      	movcc	r2, sl
   e1f3c:	465a      	movcs	r2, fp
   e1f3e:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
   e1f40:	9200      	str	r2, [sp, #0]
   e1f42:	4621      	mov	r1, r4
   e1f44:	4a0f      	ldr	r2, [pc, #60]	; (e1f84 <mbedtls_x509_serial_gets+0x80>)
   e1f46:	4640      	mov	r0, r8
   e1f48:	f002 f84e 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e1f4c:	2800      	cmp	r0, #0
   e1f4e:	da01      	bge.n	e1f54 <mbedtls_x509_serial_gets+0x50>
   e1f50:	480d      	ldr	r0, [pc, #52]	; (e1f88 <mbedtls_x509_serial_gets+0x84>)
   e1f52:	e014      	b.n	e1f7e <mbedtls_x509_serial_gets+0x7a>
   e1f54:	4284      	cmp	r4, r0
   e1f56:	d9fb      	bls.n	e1f50 <mbedtls_x509_serial_gets+0x4c>
   e1f58:	1a24      	subs	r4, r4, r0
   e1f5a:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
   e1f5c:	3501      	adds	r5, #1
   e1f5e:	e7e0      	b.n	e1f22 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
   e1f60:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e1f64:	429d      	cmp	r5, r3
   e1f66:	d009      	beq.n	e1f7c <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
   e1f68:	4a08      	ldr	r2, [pc, #32]	; (e1f8c <mbedtls_x509_serial_gets+0x88>)
   e1f6a:	4621      	mov	r1, r4
   e1f6c:	4640      	mov	r0, r8
   e1f6e:	f002 f83b 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e1f72:	2800      	cmp	r0, #0
   e1f74:	dbec      	blt.n	e1f50 <mbedtls_x509_serial_gets+0x4c>
   e1f76:	4284      	cmp	r4, r0
   e1f78:	d9ea      	bls.n	e1f50 <mbedtls_x509_serial_gets+0x4c>
   e1f7a:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
   e1f7c:	1b38      	subs	r0, r7, r4
}
   e1f7e:	b003      	add	sp, #12
   e1f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1f84:	000e8ed5 	.word	0x000e8ed5
   e1f88:	ffffd680 	.word	0xffffd680
   e1f8c:	000e8edc 	.word	0x000e8edc
   e1f90:	000e8ed3 	.word	0x000e8ed3
   e1f94:	000e7da0 	.word	0x000e7da0

000e1f98 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   e1f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e1f9a:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   e1f9c:	a902      	add	r1, sp, #8
   e1f9e:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   e1fa0:	4605      	mov	r5, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   e1fa2:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   e1fa6:	4610      	mov	r0, r2
   e1fa8:	f7f7 fed0 	bl	d9d4c <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
   e1fac:	b128      	cbz	r0, e1fba <mbedtls_x509_sig_alg_gets+0x22>
        ret = mbedtls_snprintf( p, n, "???"  );
   e1fae:	4a0b      	ldr	r2, [pc, #44]	; (e1fdc <mbedtls_x509_sig_alg_gets+0x44>)
   e1fb0:	4621      	mov	r1, r4
   e1fb2:	4628      	mov	r0, r5
   e1fb4:	f002 f818 	bl	e3fe8 <snprintf>
   e1fb8:	e005      	b.n	e1fc6 <mbedtls_x509_sig_alg_gets+0x2e>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
   e1fba:	9b01      	ldr	r3, [sp, #4]
   e1fbc:	4a08      	ldr	r2, [pc, #32]	; (e1fe0 <mbedtls_x509_sig_alg_gets+0x48>)
   e1fbe:	4621      	mov	r1, r4
   e1fc0:	4628      	mov	r0, r5
   e1fc2:	f002 f811 	bl	e3fe8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e1fc6:	2800      	cmp	r0, #0
   e1fc8:	db04      	blt.n	e1fd4 <mbedtls_x509_sig_alg_gets+0x3c>
   e1fca:	4b06      	ldr	r3, [pc, #24]	; (e1fe4 <mbedtls_x509_sig_alg_gets+0x4c>)
   e1fcc:	4284      	cmp	r4, r0
   e1fce:	bf98      	it	ls
   e1fd0:	4618      	movls	r0, r3
   e1fd2:	e000      	b.n	e1fd6 <mbedtls_x509_sig_alg_gets+0x3e>
   e1fd4:	4803      	ldr	r0, [pc, #12]	; (e1fe4 <mbedtls_x509_sig_alg_gets+0x4c>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
   e1fd6:	b003      	add	sp, #12
   e1fd8:	bd30      	pop	{r4, r5, pc}
   e1fda:	bf00      	nop
   e1fdc:	000e8ee1 	.word	0x000e8ee1
   e1fe0:	000e90db 	.word	0x000e90db
   e1fe4:	ffffd680 	.word	0xffffd680

000e1fe8 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   e1fe8:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   e1fea:	4613      	mov	r3, r2
   e1fec:	4a06      	ldr	r2, [pc, #24]	; (e2008 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   e1fee:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   e1ff0:	f001 fffa 	bl	e3fe8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e1ff4:	2800      	cmp	r0, #0
   e1ff6:	db05      	blt.n	e2004 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
   e1ff8:	4b04      	ldr	r3, [pc, #16]	; (e200c <mbedtls_x509_key_size_helper+0x24>)
   e1ffa:	4284      	cmp	r4, r0
   e1ffc:	bf94      	ite	ls
   e1ffe:	4618      	movls	r0, r3
   e2000:	2000      	movhi	r0, #0
   e2002:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2004:	4801      	ldr	r0, [pc, #4]	; (e200c <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
   e2006:	bd10      	pop	{r4, pc}
   e2008:	000e8ee5 	.word	0x000e8ee5
   e200c:	ffffd680 	.word	0xffffd680

000e2010 <mbedtls_x509_time_is_past>:
   e2010:	2000      	movs	r0, #0
   e2012:	4770      	bx	lr

000e2014 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
   e2014:	2000      	movs	r0, #0
   e2016:	4770      	bx	lr

000e2018 <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
   e2018:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
   e201a:	2300      	movs	r3, #0
   e201c:	4288      	cmp	r0, r1
   e201e:	d002      	beq.n	e2026 <_ZL15mbedtls_zeroizePvj+0xe>
   e2020:	7003      	strb	r3, [r0, #0]
   e2022:	3001      	adds	r0, #1
   e2024:	e7fa      	b.n	e201c <_ZL15mbedtls_zeroizePvj+0x4>
   e2026:	4770      	bx	lr

000e2028 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
   e2028:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
   e202a:	2400      	movs	r4, #0
   e202c:	4294      	cmp	r4, r2
   e202e:	d00c      	beq.n	e204a <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
   e2030:	5d03      	ldrb	r3, [r0, r4]
   e2032:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
   e2034:	405d      	eors	r5, r3
   e2036:	d006      	beq.n	e2046 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
   e2038:	2d20      	cmp	r5, #32
   e203a:	d108      	bne.n	e204e <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
   e203c:	f023 0320 	bic.w	r3, r3, #32
   e2040:	3b41      	subs	r3, #65	; 0x41
   e2042:	2b19      	cmp	r3, #25
   e2044:	d803      	bhi.n	e204e <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
   e2046:	3401      	adds	r4, #1
   e2048:	e7f0      	b.n	e202c <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
   e204a:	2000      	movs	r0, #0
   e204c:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
   e204e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return( 0 );
}
   e2052:	bd30      	pop	{r4, r5, pc}

000e2054 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
   e2054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e2056:	4605      	mov	r5, r0
   e2058:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   e205a:	b925      	cbnz	r5, e2066 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
   e205c:	1c20      	adds	r0, r4, #0
   e205e:	bf18      	it	ne
   e2060:	2001      	movne	r0, #1
   e2062:	4240      	negs	r0, r0
   e2064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
   e2066:	2c00      	cmp	r4, #0
   e2068:	d031      	beq.n	e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
   e206a:	682a      	ldr	r2, [r5, #0]
   e206c:	6823      	ldr	r3, [r4, #0]
   e206e:	429a      	cmp	r2, r3
   e2070:	d12d      	bne.n	e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
   e2072:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
   e2074:	6863      	ldr	r3, [r4, #4]
   e2076:	429a      	cmp	r2, r3
   e2078:	d129      	bne.n	e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
   e207a:	68a1      	ldr	r1, [r4, #8]
   e207c:	68a8      	ldr	r0, [r5, #8]
   e207e:	f004 fd53 	bl	e6b28 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
   e2082:	bb20      	cbnz	r0, e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
   e2084:	68ef      	ldr	r7, [r5, #12]
   e2086:	68e6      	ldr	r6, [r4, #12]
   e2088:	42b7      	cmp	r7, r6
   e208a:	d108      	bne.n	e209e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
   e208c:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
   e208e:	6923      	ldr	r3, [r4, #16]
   e2090:	429a      	cmp	r2, r3
   e2092:	d104      	bne.n	e209e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
   e2094:	6961      	ldr	r1, [r4, #20]
   e2096:	6968      	ldr	r0, [r5, #20]
   e2098:	f004 fd46 	bl	e6b28 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
   e209c:	b180      	cbz	r0, e20c0 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
   e209e:	2f0c      	cmp	r7, #12
   e20a0:	d001      	beq.n	e20a6 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   e20a2:	2f13      	cmp	r7, #19
   e20a4:	d113      	bne.n	e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
   e20a6:	2e0c      	cmp	r6, #12
   e20a8:	d001      	beq.n	e20ae <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   e20aa:	2e13      	cmp	r6, #19
   e20ac:	d10f      	bne.n	e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
   e20ae:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   e20b0:	6923      	ldr	r3, [r4, #16]
   e20b2:	429a      	cmp	r2, r3
   e20b4:	d10b      	bne.n	e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
   e20b6:	6961      	ldr	r1, [r4, #20]
   e20b8:	6968      	ldr	r0, [r5, #20]
   e20ba:	f7ff ffb5 	bl	e2028 <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
   e20be:	b930      	cbnz	r0, e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
   e20c0:	7f2a      	ldrb	r2, [r5, #28]
   e20c2:	7f23      	ldrb	r3, [r4, #28]
   e20c4:	429a      	cmp	r2, r3
   e20c6:	d102      	bne.n	e20ce <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
   e20c8:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
   e20ca:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   e20cc:	e7c5      	b.n	e205a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
   e20ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
   e20d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e20d4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
   e20d4:	b570      	push	{r4, r5, r6, lr}
   e20d6:	460e      	mov	r6, r1
   e20d8:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
   e20da:	f004 fdc6 	bl	e6c6a <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   e20de:	6875      	ldr	r5, [r6, #4]
   e20e0:	2d02      	cmp	r5, #2
   e20e2:	d91e      	bls.n	e2122 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
   e20e4:	68b6      	ldr	r6, [r6, #8]
   e20e6:	7833      	ldrb	r3, [r6, #0]
   e20e8:	2b2a      	cmp	r3, #42	; 0x2a
   e20ea:	d11a      	bne.n	e2122 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
   e20ec:	7873      	ldrb	r3, [r6, #1]
   e20ee:	2b2e      	cmp	r3, #46	; 0x2e
   e20f0:	d117      	bne.n	e2122 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
   e20f2:	4623      	mov	r3, r4
   e20f4:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
   e20f6:	4282      	cmp	r2, r0
   e20f8:	d015      	beq.n	e2126 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
   e20fa:	4619      	mov	r1, r3
   e20fc:	3301      	adds	r3, #1
   e20fe:	780c      	ldrb	r4, [r1, #0]
   e2100:	2c2e      	cmp	r4, #46	; 0x2e
   e2102:	d001      	beq.n	e2108 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
   e2104:	3201      	adds	r2, #1
   e2106:	e7f6      	b.n	e20f6 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
   e2108:	b16a      	cbz	r2, e2126 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
   e210a:	1a82      	subs	r2, r0, r2
   e210c:	3d01      	subs	r5, #1
   e210e:	42aa      	cmp	r2, r5
   e2110:	d109      	bne.n	e2126 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
   e2112:	1c70      	adds	r0, r6, #1
   e2114:	f7ff ff88 	bl	e2028 <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
   e2118:	3000      	adds	r0, #0
   e211a:	bf18      	it	ne
   e211c:	2001      	movne	r0, #1
   e211e:	4240      	negs	r0, r0
   e2120:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
   e2122:	2000      	movs	r0, #0
   e2124:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
   e2126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e212a:	bd70      	pop	{r4, r5, r6, pc}

000e212c <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
   e212c:	b570      	push	{r4, r5, r6, lr}
   e212e:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
   e2130:	6802      	ldr	r2, [r0, #0]
   e2132:	428a      	cmp	r2, r1
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
   e2134:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
   e2136:	d00b      	beq.n	e2150 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
   e2138:	7816      	ldrb	r6, [r2, #0]
   e213a:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   e213c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
   e2140:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   e2144:	f7f5 f8b6 	bl	d72b4 <mbedtls_asn1_get_tag>
   e2148:	b120      	cbz	r0, e2154 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e214a:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e214e:	d107      	bne.n	e2160 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
   e2150:	2000      	movs	r0, #0
   e2152:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
   e2154:	6823      	ldr	r3, [r4, #0]
   e2156:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
   e2158:	6822      	ldr	r2, [r4, #0]
   e215a:	686b      	ldr	r3, [r5, #4]
   e215c:	4413      	add	r3, r2
   e215e:	6023      	str	r3, [r4, #0]

    return( 0 );
}
   e2160:	bd70      	pop	{r4, r5, r6, pc}

000e2162 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
   e2162:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
   e2164:	b510      	push	{r4, lr}
   e2166:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
   e2168:	d001      	beq.n	e216e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
   e216a:	2906      	cmp	r1, #6
   e216c:	d109      	bne.n	e2182 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
   e216e:	4610      	mov	r0, r2
   e2170:	f7f7 ffea 	bl	da148 <mbedtls_pk_get_bitlen>
   e2174:	6823      	ldr	r3, [r4, #0]
   e2176:	4298      	cmp	r0, r3
   e2178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e217c:	bf28      	it	cs
   e217e:	2000      	movcs	r0, #0
   e2180:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
   e2182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e2186:	bd10      	pop	{r4, pc}

000e2188 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
   e2188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e218c:	4681      	mov	r9, r0
   e218e:	b08d      	sub	sp, #52	; 0x34
   e2190:	460f      	mov	r7, r1
   e2192:	4690      	mov	r8, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
   e2194:	461e      	mov	r6, r3
   e2196:	b94b      	cbnz	r3, e21ac <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
   e2198:	4aa9      	ldr	r2, [pc, #676]	; (e2440 <mbedtls_x509_crt_info+0x2b8>)
   e219a:	f001 ff25 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e219e:	2800      	cmp	r0, #0
   e21a0:	f2c0 82f2 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e21a4:	4287      	cmp	r7, r0
   e21a6:	f200 82f0 	bhi.w	e278a <mbedtls_x509_crt_info+0x602>
   e21aa:	e2ed      	b.n	e2788 <mbedtls_x509_crt_info+0x600>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
   e21ac:	699b      	ldr	r3, [r3, #24]
   e21ae:	9300      	str	r3, [sp, #0]
   e21b0:	4613      	mov	r3, r2
   e21b2:	4aa4      	ldr	r2, [pc, #656]	; (e2444 <mbedtls_x509_crt_info+0x2bc>)
   e21b4:	f001 ff18 	bl	e3fe8 <snprintf>
                               prefix, crt->version );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e21b8:	2800      	cmp	r0, #0
   e21ba:	f2c0 82e5 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e21be:	4287      	cmp	r7, r0
   e21c0:	f240 82e2 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e21c4:	1a3c      	subs	r4, r7, r0
   e21c6:	4481      	add	r9, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
   e21c8:	4643      	mov	r3, r8
   e21ca:	4a9f      	ldr	r2, [pc, #636]	; (e2448 <mbedtls_x509_crt_info+0x2c0>)
   e21cc:	4621      	mov	r1, r4
   e21ce:	4648      	mov	r0, r9
   e21d0:	f001 ff0a 	bl	e3fe8 <snprintf>
                               prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e21d4:	2800      	cmp	r0, #0
   e21d6:	f2c0 82d7 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e21da:	4284      	cmp	r4, r0
   e21dc:	f240 82d4 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e21e0:	1a24      	subs	r4, r4, r0
   e21e2:	4481      	add	r9, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
   e21e4:	f106 021c 	add.w	r2, r6, #28
   e21e8:	4621      	mov	r1, r4
   e21ea:	4648      	mov	r0, r9
   e21ec:	f7ff fe8a 	bl	e1f04 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e21f0:	2800      	cmp	r0, #0
   e21f2:	f2c0 82c9 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e21f6:	4284      	cmp	r4, r0
   e21f8:	f240 82c6 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e21fc:	1a24      	subs	r4, r4, r0
   e21fe:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
   e2200:	4643      	mov	r3, r8
   e2202:	4a92      	ldr	r2, [pc, #584]	; (e244c <mbedtls_x509_crt_info+0x2c4>)
   e2204:	4621      	mov	r1, r4
   e2206:	4648      	mov	r0, r9
   e2208:	f001 feee 	bl	e3fe8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e220c:	2800      	cmp	r0, #0
   e220e:	f2c0 82bb 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2212:	4284      	cmp	r4, r0
   e2214:	f240 82b8 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2218:	1a24      	subs	r4, r4, r0
   e221a:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
   e221c:	f106 024c 	add.w	r2, r6, #76	; 0x4c
   e2220:	4621      	mov	r1, r4
   e2222:	4648      	mov	r0, r9
   e2224:	f7ff fdec 	bl	e1e00 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2228:	2800      	cmp	r0, #0
   e222a:	f2c0 82ad 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e222e:	4284      	cmp	r4, r0
   e2230:	f240 82aa 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2234:	1a24      	subs	r4, r4, r0
   e2236:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
   e2238:	4643      	mov	r3, r8
   e223a:	4a85      	ldr	r2, [pc, #532]	; (e2450 <mbedtls_x509_crt_info+0x2c8>)
   e223c:	4621      	mov	r1, r4
   e223e:	4648      	mov	r0, r9
   e2240:	f001 fed2 	bl	e3fe8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2244:	2800      	cmp	r0, #0
   e2246:	f2c0 829f 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e224a:	4284      	cmp	r4, r0
   e224c:	f240 829c 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2250:	1a24      	subs	r4, r4, r0
   e2252:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
   e2254:	f106 026c 	add.w	r2, r6, #108	; 0x6c
   e2258:	4621      	mov	r1, r4
   e225a:	4648      	mov	r0, r9
   e225c:	f7ff fdd0 	bl	e1e00 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2260:	2800      	cmp	r0, #0
   e2262:	f2c0 8291 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2266:	4284      	cmp	r4, r0
   e2268:	f240 828e 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   e226c:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   e2270:	9305      	str	r3, [sp, #20]
   e2272:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
   e2276:	9304      	str	r3, [sp, #16]
   e2278:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   e227c:	9303      	str	r3, [sp, #12]
   e227e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   e2282:	9302      	str	r3, [sp, #8]
   e2284:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
   e2288:	9301      	str	r3, [sp, #4]
   e228a:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
   e228e:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2290:	1a24      	subs	r4, r4, r0
   e2292:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   e2294:	4643      	mov	r3, r8
   e2296:	4a6f      	ldr	r2, [pc, #444]	; (e2454 <mbedtls_x509_crt_info+0x2cc>)
   e2298:	4621      	mov	r1, r4
   e229a:	4648      	mov	r0, r9
   e229c:	f001 fea4 	bl	e3fe8 <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e22a0:	2800      	cmp	r0, #0
   e22a2:	f2c0 8271 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e22a6:	4284      	cmp	r4, r0
   e22a8:	f240 826e 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   e22ac:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   e22b0:	9305      	str	r3, [sp, #20]
   e22b2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   e22b6:	9304      	str	r3, [sp, #16]
   e22b8:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
   e22bc:	9303      	str	r3, [sp, #12]
   e22be:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
   e22c2:	9302      	str	r3, [sp, #8]
   e22c4:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
   e22c8:	9301      	str	r3, [sp, #4]
   e22ca:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
   e22ce:	9300      	str	r3, [sp, #0]
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e22d0:	1a24      	subs	r4, r4, r0
   e22d2:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   e22d4:	4643      	mov	r3, r8
   e22d6:	4a60      	ldr	r2, [pc, #384]	; (e2458 <mbedtls_x509_crt_info+0x2d0>)
   e22d8:	4621      	mov	r1, r4
   e22da:	4648      	mov	r0, r9
   e22dc:	f001 fe84 	bl	e3fe8 <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e22e0:	2800      	cmp	r0, #0
   e22e2:	f2c0 8251 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e22e6:	4284      	cmp	r4, r0
   e22e8:	f240 824e 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e22ec:	1a24      	subs	r4, r4, r0
   e22ee:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
   e22f0:	4643      	mov	r3, r8
   e22f2:	4a5a      	ldr	r2, [pc, #360]	; (e245c <mbedtls_x509_crt_info+0x2d4>)
   e22f4:	4621      	mov	r1, r4
   e22f6:	4648      	mov	r0, r9
   e22f8:	f001 fe76 	bl	e3fe8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e22fc:	2800      	cmp	r0, #0
   e22fe:	f2c0 8243 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2302:	4284      	cmp	r4, r0
   e2304:	f240 8240 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   e2308:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
   e230c:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
   e2310:	9201      	str	r2, [sp, #4]
   e2312:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
   e2316:	9200      	str	r2, [sp, #0]
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2318:	1a24      	subs	r4, r4, r0
   e231a:	4481      	add	r9, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   e231c:	f106 0228 	add.w	r2, r6, #40	; 0x28
   e2320:	4621      	mov	r1, r4
   e2322:	4648      	mov	r0, r9
   e2324:	f7ff fe38 	bl	e1f98 <mbedtls_x509_sig_alg_gets>
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2328:	1e05      	subs	r5, r0, #0
   e232a:	f2c0 822d 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e232e:	42ac      	cmp	r4, r5
   e2330:	f240 822a 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
   e2334:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
   e2338:	4658      	mov	r0, fp
   e233a:	f7f7 ff69 	bl	da210 <mbedtls_pk_get_name>
   e233e:	f10d 0a1c 	add.w	sl, sp, #28
   e2342:	4602      	mov	r2, r0
   e2344:	2112      	movs	r1, #18
   e2346:	4650      	mov	r0, sl
   e2348:	f7ff fe4e 	bl	e1fe8 <mbedtls_x509_key_size_helper>
   e234c:	2800      	cmp	r0, #0
   e234e:	f040 821c 	bne.w	e278a <mbedtls_x509_crt_info+0x602>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
   e2352:	4658      	mov	r0, fp
   e2354:	f7f7 fef8 	bl	da148 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2358:	1b64      	subs	r4, r4, r5
   e235a:	444d      	add	r5, r9
                                      mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
   e235c:	9001      	str	r0, [sp, #4]
   e235e:	f8cd a000 	str.w	sl, [sp]
   e2362:	4643      	mov	r3, r8
   e2364:	4a3e      	ldr	r2, [pc, #248]	; (e2460 <mbedtls_x509_crt_info+0x2d8>)
   e2366:	4621      	mov	r1, r4
   e2368:	4628      	mov	r0, r5
   e236a:	f001 fe3d 	bl	e3fe8 <snprintf>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e236e:	2800      	cmp	r0, #0
   e2370:	f2c0 820a 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2374:	4284      	cmp	r4, r0
   e2376:	f240 8207 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   e237a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e237e:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
   e2380:	eba4 0400 	sub.w	r4, r4, r0
   e2384:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   e2386:	d528      	bpl.n	e23da <mbedtls_x509_crt_info+0x252>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
   e2388:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
   e238c:	4a35      	ldr	r2, [pc, #212]	; (e2464 <mbedtls_x509_crt_info+0x2dc>)
   e238e:	4b36      	ldr	r3, [pc, #216]	; (e2468 <mbedtls_x509_crt_info+0x2e0>)
   e2390:	2900      	cmp	r1, #0
   e2392:	bf18      	it	ne
   e2394:	4613      	movne	r3, r2
   e2396:	9300      	str	r3, [sp, #0]
   e2398:	4a34      	ldr	r2, [pc, #208]	; (e246c <mbedtls_x509_crt_info+0x2e4>)
   e239a:	4643      	mov	r3, r8
   e239c:	4621      	mov	r1, r4
   e239e:	4628      	mov	r0, r5
   e23a0:	f001 fe22 	bl	e3fe8 <snprintf>
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e23a4:	2800      	cmp	r0, #0
   e23a6:	f2c0 81ef 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e23aa:	4284      	cmp	r4, r0
   e23ac:	f240 81ec 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>

        if( crt->max_pathlen > 0 )
   e23b0:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   e23b4:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e23b6:	eba4 0400 	sub.w	r4, r4, r0
   e23ba:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
   e23bc:	dd0d      	ble.n	e23da <mbedtls_x509_crt_info+0x252>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
   e23be:	3b01      	subs	r3, #1
   e23c0:	4a2b      	ldr	r2, [pc, #172]	; (e2470 <mbedtls_x509_crt_info+0x2e8>)
   e23c2:	4621      	mov	r1, r4
   e23c4:	4628      	mov	r0, r5
   e23c6:	f001 fe0f 	bl	e3fe8 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   e23ca:	2800      	cmp	r0, #0
   e23cc:	f2c0 81dc 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e23d0:	4284      	cmp	r4, r0
   e23d2:	f240 81d9 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e23d6:	1a24      	subs	r4, r4, r0
   e23d8:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   e23da:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e23de:	0698      	lsls	r0, r3, #26
   e23e0:	d553      	bpl.n	e248a <mbedtls_x509_crt_info+0x302>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
   e23e2:	4643      	mov	r3, r8
   e23e4:	4a23      	ldr	r2, [pc, #140]	; (e2474 <mbedtls_x509_crt_info+0x2ec>)
   e23e6:	4621      	mov	r1, r4
   e23e8:	4628      	mov	r0, r5
   e23ea:	f001 fdfd 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e23ee:	2800      	cmp	r0, #0
   e23f0:	f2c0 81ca 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e23f4:	42a0      	cmp	r0, r4
   e23f6:	f080 81c7 	bcs.w	e2788 <mbedtls_x509_crt_info+0x600>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
   e23fa:	f8df e07c 	ldr.w	lr, [pc, #124]	; e2478 <mbedtls_x509_crt_info+0x2f0>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e23fe:	1a24      	subs	r4, r4, r0
   e2400:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
   e2402:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
   e2406:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
   e2408:	6851      	ldr	r1, [r2, #4]
   e240a:	4401      	add	r1, r0
   e240c:	42a1      	cmp	r1, r4
   e240e:	f04f 0300 	mov.w	r3, #0
   e2412:	d301      	bcc.n	e2418 <mbedtls_x509_crt_info+0x290>
        {
            *p = '\0';
   e2414:	702b      	strb	r3, [r5, #0]
   e2416:	e1b7      	b.n	e2788 <mbedtls_x509_crt_info+0x600>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
   e2418:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
   e241a:	4283      	cmp	r3, r0
   e241c:	d004      	beq.n	e2428 <mbedtls_x509_crt_info+0x2a0>
            *p++ = sep[i];
   e241e:	f81e 1003 	ldrb.w	r1, [lr, r3]
   e2422:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
   e2424:	3301      	adds	r3, #1
   e2426:	e7f8      	b.n	e241a <mbedtls_x509_crt_info+0x292>
   e2428:	441d      	add	r5, r3
   e242a:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
   e242c:	6851      	ldr	r1, [r2, #4]
   e242e:	1a2b      	subs	r3, r5, r0
   e2430:	4299      	cmp	r1, r3
   e2432:	d923      	bls.n	e247c <mbedtls_x509_crt_info+0x2f4>
            *p++ = cur->buf.p[i];
   e2434:	6891      	ldr	r1, [r2, #8]
   e2436:	5ccb      	ldrb	r3, [r1, r3]
   e2438:	f805 3b01 	strb.w	r3, [r5], #1
   e243c:	e7f6      	b.n	e242c <mbedtls_x509_crt_info+0x2a4>
   e243e:	bf00      	nop
   e2440:	000e8fac 	.word	0x000e8fac
   e2444:	000e8fcc 	.word	0x000e8fcc
   e2448:	000e8fe6 	.word	0x000e8fe6
   e244c:	000e8ffd 	.word	0x000e8ffd
   e2450:	000e9015 	.word	0x000e9015
   e2454:	000e902d 	.word	0x000e902d
   e2458:	000e9062 	.word	0x000e9062
   e245c:	000e9097 	.word	0x000e9097
   e2460:	000e90af 	.word	0x000e90af
   e2464:	000e7514 	.word	0x000e7514
   e2468:	000e7519 	.word	0x000e7519
   e246c:	000e90c1 	.word	0x000e90c1
   e2470:	000e90de 	.word	0x000e90de
   e2474:	000e90ef 	.word	0x000e90ef
   e2478:	000e7da0 	.word	0x000e7da0

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
   e247c:	68d2      	ldr	r2, [r2, #12]
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
   e247e:	f8df e31c 	ldr.w	lr, [pc, #796]	; e279c <mbedtls_x509_crt_info+0x614>
        sep_len = 2;
   e2482:	2002      	movs	r0, #2
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
   e2484:	2a00      	cmp	r2, #0
   e2486:	d1bf      	bne.n	e2408 <mbedtls_x509_crt_info+0x280>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
   e2488:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
   e248a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e248e:	03d9      	lsls	r1, r3, #15
   e2490:	f140 8099 	bpl.w	e25c6 <mbedtls_x509_crt_info+0x43e>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
   e2494:	4643      	mov	r3, r8
   e2496:	4abe      	ldr	r2, [pc, #760]	; (e2790 <mbedtls_x509_crt_info+0x608>)
   e2498:	4621      	mov	r1, r4
   e249a:	4628      	mov	r0, r5
   e249c:	f001 fda4 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e24a0:	2800      	cmp	r0, #0
   e24a2:	f2c0 8171 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e24a6:	42a0      	cmp	r0, r4
   e24a8:	f080 816e 	bcs.w	e2788 <mbedtls_x509_crt_info+0x600>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
   e24ac:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   e24b0:	4bb8      	ldr	r3, [pc, #736]	; (e2794 <mbedtls_x509_crt_info+0x60c>)
   e24b2:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e24b6:	eba4 0400 	sub.w	r4, r4, r0
   e24ba:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   e24bc:	d00d      	beq.n	e24da <mbedtls_x509_crt_info+0x352>
   e24be:	4ab6      	ldr	r2, [pc, #728]	; (e2798 <mbedtls_x509_crt_info+0x610>)
   e24c0:	4621      	mov	r1, r4
   e24c2:	4628      	mov	r0, r5
   e24c4:	f001 fd90 	bl	e3fe8 <snprintf>
   e24c8:	2800      	cmp	r0, #0
   e24ca:	f2c0 815d 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e24ce:	4284      	cmp	r4, r0
   e24d0:	f240 815a 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e24d4:	4bb1      	ldr	r3, [pc, #708]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e24d6:	1a24      	subs	r4, r4, r0
   e24d8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
   e24da:	f019 0f40 	tst.w	r9, #64	; 0x40
   e24de:	d00d      	beq.n	e24fc <mbedtls_x509_crt_info+0x374>
   e24e0:	4aaf      	ldr	r2, [pc, #700]	; (e27a0 <mbedtls_x509_crt_info+0x618>)
   e24e2:	4621      	mov	r1, r4
   e24e4:	4628      	mov	r0, r5
   e24e6:	f001 fd7f 	bl	e3fe8 <snprintf>
   e24ea:	2800      	cmp	r0, #0
   e24ec:	f2c0 814c 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e24f0:	4284      	cmp	r4, r0
   e24f2:	f240 8149 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e24f6:	4ba9      	ldr	r3, [pc, #676]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e24f8:	1a24      	subs	r4, r4, r0
   e24fa:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
   e24fc:	f019 0f20 	tst.w	r9, #32
   e2500:	d00d      	beq.n	e251e <mbedtls_x509_crt_info+0x396>
   e2502:	4aa8      	ldr	r2, [pc, #672]	; (e27a4 <mbedtls_x509_crt_info+0x61c>)
   e2504:	4621      	mov	r1, r4
   e2506:	4628      	mov	r0, r5
   e2508:	f001 fd6e 	bl	e3fe8 <snprintf>
   e250c:	2800      	cmp	r0, #0
   e250e:	f2c0 813b 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2512:	4284      	cmp	r4, r0
   e2514:	f240 8138 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2518:	4ba0      	ldr	r3, [pc, #640]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e251a:	1a24      	subs	r4, r4, r0
   e251c:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
   e251e:	f019 0f10 	tst.w	r9, #16
   e2522:	d00d      	beq.n	e2540 <mbedtls_x509_crt_info+0x3b8>
   e2524:	4aa0      	ldr	r2, [pc, #640]	; (e27a8 <mbedtls_x509_crt_info+0x620>)
   e2526:	4621      	mov	r1, r4
   e2528:	4628      	mov	r0, r5
   e252a:	f001 fd5d 	bl	e3fe8 <snprintf>
   e252e:	2800      	cmp	r0, #0
   e2530:	f2c0 812a 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2534:	4284      	cmp	r4, r0
   e2536:	f240 8127 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e253a:	4b98      	ldr	r3, [pc, #608]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e253c:	1a24      	subs	r4, r4, r0
   e253e:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
   e2540:	f019 0f08 	tst.w	r9, #8
   e2544:	d00d      	beq.n	e2562 <mbedtls_x509_crt_info+0x3da>
   e2546:	4a99      	ldr	r2, [pc, #612]	; (e27ac <mbedtls_x509_crt_info+0x624>)
   e2548:	4621      	mov	r1, r4
   e254a:	4628      	mov	r0, r5
   e254c:	f001 fd4c 	bl	e3fe8 <snprintf>
   e2550:	2800      	cmp	r0, #0
   e2552:	f2c0 8119 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2556:	4284      	cmp	r4, r0
   e2558:	f240 8116 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e255c:	4b8f      	ldr	r3, [pc, #572]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e255e:	1a24      	subs	r4, r4, r0
   e2560:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
   e2562:	f019 0f04 	tst.w	r9, #4
   e2566:	d00d      	beq.n	e2584 <mbedtls_x509_crt_info+0x3fc>
   e2568:	4a91      	ldr	r2, [pc, #580]	; (e27b0 <mbedtls_x509_crt_info+0x628>)
   e256a:	4621      	mov	r1, r4
   e256c:	4628      	mov	r0, r5
   e256e:	f001 fd3b 	bl	e3fe8 <snprintf>
   e2572:	2800      	cmp	r0, #0
   e2574:	f2c0 8108 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2578:	4284      	cmp	r4, r0
   e257a:	f240 8105 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e257e:	4b87      	ldr	r3, [pc, #540]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e2580:	1a24      	subs	r4, r4, r0
   e2582:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
   e2584:	f019 0f02 	tst.w	r9, #2
   e2588:	d00d      	beq.n	e25a6 <mbedtls_x509_crt_info+0x41e>
   e258a:	4a8a      	ldr	r2, [pc, #552]	; (e27b4 <mbedtls_x509_crt_info+0x62c>)
   e258c:	4621      	mov	r1, r4
   e258e:	4628      	mov	r0, r5
   e2590:	f001 fd2a 	bl	e3fe8 <snprintf>
   e2594:	2800      	cmp	r0, #0
   e2596:	f2c0 80f7 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e259a:	4284      	cmp	r4, r0
   e259c:	f240 80f4 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e25a0:	4b7e      	ldr	r3, [pc, #504]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e25a2:	1a24      	subs	r4, r4, r0
   e25a4:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
   e25a6:	f019 0f01 	tst.w	r9, #1
   e25aa:	d00c      	beq.n	e25c6 <mbedtls_x509_crt_info+0x43e>
   e25ac:	4a82      	ldr	r2, [pc, #520]	; (e27b8 <mbedtls_x509_crt_info+0x630>)
   e25ae:	4621      	mov	r1, r4
   e25b0:	4628      	mov	r0, r5
   e25b2:	f001 fd19 	bl	e3fe8 <snprintf>
   e25b6:	2800      	cmp	r0, #0
   e25b8:	f2c0 80e6 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e25bc:	4284      	cmp	r4, r0
   e25be:	f240 80e3 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e25c2:	1a24      	subs	r4, r4, r0
   e25c4:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
   e25c6:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e25ca:	075a      	lsls	r2, r3, #29
   e25cc:	f140 80a0 	bpl.w	e2710 <mbedtls_x509_crt_info+0x588>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
   e25d0:	4643      	mov	r3, r8
   e25d2:	4a7a      	ldr	r2, [pc, #488]	; (e27bc <mbedtls_x509_crt_info+0x634>)
   e25d4:	4621      	mov	r1, r4
   e25d6:	4628      	mov	r0, r5
   e25d8:	f001 fd06 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e25dc:	2800      	cmp	r0, #0
   e25de:	f2c0 80d3 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e25e2:	42a0      	cmp	r0, r4
   e25e4:	f080 80d0 	bcs.w	e2788 <mbedtls_x509_crt_info+0x600>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
   e25e8:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   e25ec:	4b69      	ldr	r3, [pc, #420]	; (e2794 <mbedtls_x509_crt_info+0x60c>)
   e25ee:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e25f2:	eba4 0400 	sub.w	r4, r4, r0
   e25f6:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   e25f8:	d00d      	beq.n	e2616 <mbedtls_x509_crt_info+0x48e>
   e25fa:	4a71      	ldr	r2, [pc, #452]	; (e27c0 <mbedtls_x509_crt_info+0x638>)
   e25fc:	4621      	mov	r1, r4
   e25fe:	4628      	mov	r0, r5
   e2600:	f001 fcf2 	bl	e3fe8 <snprintf>
   e2604:	2800      	cmp	r0, #0
   e2606:	f2c0 80bf 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e260a:	4284      	cmp	r4, r0
   e260c:	f240 80bc 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2610:	4b62      	ldr	r3, [pc, #392]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e2612:	1a24      	subs	r4, r4, r0
   e2614:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
   e2616:	f019 0f40 	tst.w	r9, #64	; 0x40
   e261a:	d00d      	beq.n	e2638 <mbedtls_x509_crt_info+0x4b0>
   e261c:	4a69      	ldr	r2, [pc, #420]	; (e27c4 <mbedtls_x509_crt_info+0x63c>)
   e261e:	4621      	mov	r1, r4
   e2620:	4628      	mov	r0, r5
   e2622:	f001 fce1 	bl	e3fe8 <snprintf>
   e2626:	2800      	cmp	r0, #0
   e2628:	f2c0 80ae 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e262c:	4284      	cmp	r4, r0
   e262e:	f240 80ab 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2632:	4b5a      	ldr	r3, [pc, #360]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e2634:	1a24      	subs	r4, r4, r0
   e2636:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
   e2638:	f019 0f20 	tst.w	r9, #32
   e263c:	d00d      	beq.n	e265a <mbedtls_x509_crt_info+0x4d2>
   e263e:	4a62      	ldr	r2, [pc, #392]	; (e27c8 <mbedtls_x509_crt_info+0x640>)
   e2640:	4621      	mov	r1, r4
   e2642:	4628      	mov	r0, r5
   e2644:	f001 fcd0 	bl	e3fe8 <snprintf>
   e2648:	2800      	cmp	r0, #0
   e264a:	f2c0 809d 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e264e:	4284      	cmp	r4, r0
   e2650:	f240 809a 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2654:	4b51      	ldr	r3, [pc, #324]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e2656:	1a24      	subs	r4, r4, r0
   e2658:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
   e265a:	f019 0f10 	tst.w	r9, #16
   e265e:	d00d      	beq.n	e267c <mbedtls_x509_crt_info+0x4f4>
   e2660:	4a5a      	ldr	r2, [pc, #360]	; (e27cc <mbedtls_x509_crt_info+0x644>)
   e2662:	4621      	mov	r1, r4
   e2664:	4628      	mov	r0, r5
   e2666:	f001 fcbf 	bl	e3fe8 <snprintf>
   e266a:	2800      	cmp	r0, #0
   e266c:	f2c0 808c 	blt.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2670:	4284      	cmp	r4, r0
   e2672:	f240 8089 	bls.w	e2788 <mbedtls_x509_crt_info+0x600>
   e2676:	4b49      	ldr	r3, [pc, #292]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e2678:	1a24      	subs	r4, r4, r0
   e267a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
   e267c:	f019 0f08 	tst.w	r9, #8
   e2680:	d00b      	beq.n	e269a <mbedtls_x509_crt_info+0x512>
   e2682:	4a53      	ldr	r2, [pc, #332]	; (e27d0 <mbedtls_x509_crt_info+0x648>)
   e2684:	4621      	mov	r1, r4
   e2686:	4628      	mov	r0, r5
   e2688:	f001 fcae 	bl	e3fe8 <snprintf>
   e268c:	2800      	cmp	r0, #0
   e268e:	db7b      	blt.n	e2788 <mbedtls_x509_crt_info+0x600>
   e2690:	4284      	cmp	r4, r0
   e2692:	d979      	bls.n	e2788 <mbedtls_x509_crt_info+0x600>
   e2694:	4b41      	ldr	r3, [pc, #260]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e2696:	1a24      	subs	r4, r4, r0
   e2698:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
   e269a:	f019 0f04 	tst.w	r9, #4
   e269e:	d00b      	beq.n	e26b8 <mbedtls_x509_crt_info+0x530>
   e26a0:	4a4c      	ldr	r2, [pc, #304]	; (e27d4 <mbedtls_x509_crt_info+0x64c>)
   e26a2:	4621      	mov	r1, r4
   e26a4:	4628      	mov	r0, r5
   e26a6:	f001 fc9f 	bl	e3fe8 <snprintf>
   e26aa:	2800      	cmp	r0, #0
   e26ac:	db6c      	blt.n	e2788 <mbedtls_x509_crt_info+0x600>
   e26ae:	4284      	cmp	r4, r0
   e26b0:	d96a      	bls.n	e2788 <mbedtls_x509_crt_info+0x600>
   e26b2:	4b3a      	ldr	r3, [pc, #232]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e26b4:	1a24      	subs	r4, r4, r0
   e26b6:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
   e26b8:	f019 0f02 	tst.w	r9, #2
   e26bc:	d00b      	beq.n	e26d6 <mbedtls_x509_crt_info+0x54e>
   e26be:	4a46      	ldr	r2, [pc, #280]	; (e27d8 <mbedtls_x509_crt_info+0x650>)
   e26c0:	4621      	mov	r1, r4
   e26c2:	4628      	mov	r0, r5
   e26c4:	f001 fc90 	bl	e3fe8 <snprintf>
   e26c8:	2800      	cmp	r0, #0
   e26ca:	db5d      	blt.n	e2788 <mbedtls_x509_crt_info+0x600>
   e26cc:	4284      	cmp	r4, r0
   e26ce:	d95b      	bls.n	e2788 <mbedtls_x509_crt_info+0x600>
   e26d0:	4b32      	ldr	r3, [pc, #200]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e26d2:	1a24      	subs	r4, r4, r0
   e26d4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
   e26d6:	f019 0f01 	tst.w	r9, #1
   e26da:	d00b      	beq.n	e26f4 <mbedtls_x509_crt_info+0x56c>
   e26dc:	4a3f      	ldr	r2, [pc, #252]	; (e27dc <mbedtls_x509_crt_info+0x654>)
   e26de:	4621      	mov	r1, r4
   e26e0:	4628      	mov	r0, r5
   e26e2:	f001 fc81 	bl	e3fe8 <snprintf>
   e26e6:	2800      	cmp	r0, #0
   e26e8:	db4e      	blt.n	e2788 <mbedtls_x509_crt_info+0x600>
   e26ea:	4284      	cmp	r4, r0
   e26ec:	d94c      	bls.n	e2788 <mbedtls_x509_crt_info+0x600>
   e26ee:	4b2b      	ldr	r3, [pc, #172]	; (e279c <mbedtls_x509_crt_info+0x614>)
   e26f0:	1a24      	subs	r4, r4, r0
   e26f2:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
   e26f4:	f419 4f00 	tst.w	r9, #32768	; 0x8000
   e26f8:	d00a      	beq.n	e2710 <mbedtls_x509_crt_info+0x588>
   e26fa:	4a39      	ldr	r2, [pc, #228]	; (e27e0 <mbedtls_x509_crt_info+0x658>)
   e26fc:	4621      	mov	r1, r4
   e26fe:	4628      	mov	r0, r5
   e2700:	f001 fc72 	bl	e3fe8 <snprintf>
   e2704:	2800      	cmp	r0, #0
   e2706:	db3f      	blt.n	e2788 <mbedtls_x509_crt_info+0x600>
   e2708:	4284      	cmp	r4, r0
   e270a:	d93d      	bls.n	e2788 <mbedtls_x509_crt_info+0x600>
   e270c:	1a24      	subs	r4, r4, r0
   e270e:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
   e2710:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   e2714:	051b      	lsls	r3, r3, #20
   e2716:	d52b      	bpl.n	e2770 <mbedtls_x509_crt_info+0x5e8>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
   e2718:	4643      	mov	r3, r8
   e271a:	4a32      	ldr	r2, [pc, #200]	; (e27e4 <mbedtls_x509_crt_info+0x65c>)
   e271c:	4621      	mov	r1, r4
   e271e:	4628      	mov	r0, r5
   e2720:	f001 fc62 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e2724:	2800      	cmp	r0, #0
   e2726:	db2f      	blt.n	e2788 <mbedtls_x509_crt_info+0x600>
   e2728:	42a0      	cmp	r0, r4
   e272a:	d22d      	bcs.n	e2788 <mbedtls_x509_crt_info+0x600>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
   e272c:	f8df 8064 	ldr.w	r8, [pc, #100]	; e2794 <mbedtls_x509_crt_info+0x60c>

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
   e2730:	f8df 90c0 	ldr.w	r9, [pc, #192]	; e27f4 <mbedtls_x509_crt_info+0x66c>
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;

        if( ( ret = x509_info_ext_key_usage( &p, &n,
   e2734:	f506 7684 	add.w	r6, r6, #264	; 0x108
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
   e2738:	1a24      	subs	r4, r4, r0
    char *p = *buf;
   e273a:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
   e273c:	a906      	add	r1, sp, #24
   e273e:	4630      	mov	r0, r6
   e2740:	f7f7 faea 	bl	d9d18 <mbedtls_oid_get_extended_key_usage>
   e2744:	b108      	cbz	r0, e274a <mbedtls_x509_crt_info+0x5c2>
            desc = "???";
   e2746:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   e274a:	9b06      	ldr	r3, [sp, #24]
   e274c:	9300      	str	r3, [sp, #0]
   e274e:	4a26      	ldr	r2, [pc, #152]	; (e27e8 <mbedtls_x509_crt_info+0x660>)
   e2750:	4643      	mov	r3, r8
   e2752:	4621      	mov	r1, r4
   e2754:	4628      	mov	r0, r5
   e2756:	f001 fc47 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e275a:	2800      	cmp	r0, #0
   e275c:	db14      	blt.n	e2788 <mbedtls_x509_crt_info+0x600>
   e275e:	42a0      	cmp	r0, r4
   e2760:	d212      	bcs.n	e2788 <mbedtls_x509_crt_info+0x600>

        sep = ", ";

        cur = cur->next;
   e2762:	68f6      	ldr	r6, [r6, #12]
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;

        sep = ", ";
   e2764:	f8df 8034 	ldr.w	r8, [pc, #52]	; e279c <mbedtls_x509_crt_info+0x614>
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e2768:	1a24      	subs	r4, r4, r0
   e276a:	4405      	add	r5, r0
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
   e276c:	2e00      	cmp	r6, #0
   e276e:	d1e5      	bne.n	e273c <mbedtls_x509_crt_info+0x5b4>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
   e2770:	4a1e      	ldr	r2, [pc, #120]	; (e27ec <mbedtls_x509_crt_info+0x664>)
   e2772:	4621      	mov	r1, r4
   e2774:	4628      	mov	r0, r5
   e2776:	f001 fc37 	bl	e3fe8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   e277a:	2800      	cmp	r0, #0
   e277c:	db04      	blt.n	e2788 <mbedtls_x509_crt_info+0x600>
   e277e:	4284      	cmp	r4, r0
   e2780:	d902      	bls.n	e2788 <mbedtls_x509_crt_info+0x600>

    return( (int) ( size - n ) );
   e2782:	1a20      	subs	r0, r4, r0
   e2784:	1a38      	subs	r0, r7, r0
   e2786:	e000      	b.n	e278a <mbedtls_x509_crt_info+0x602>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
   e2788:	4819      	ldr	r0, [pc, #100]	; (e27f0 <mbedtls_x509_crt_info+0x668>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
   e278a:	b00d      	add	sp, #52	; 0x34
   e278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2790:	000e9107 	.word	0x000e9107
   e2794:	000e7da0 	.word	0x000e7da0
   e2798:	000e911f 	.word	0x000e911f
   e279c:	000e8ec8 	.word	0x000e8ec8
   e27a0:	000e912c 	.word	0x000e912c
   e27a4:	000e9139 	.word	0x000e9139
   e27a8:	000e9141 	.word	0x000e9141
   e27ac:	000e9152 	.word	0x000e9152
   e27b0:	000e915d 	.word	0x000e915d
   e27b4:	000e9166 	.word	0x000e9166
   e27b8:	000e9171 	.word	0x000e9171
   e27bc:	000e9185 	.word	0x000e9185
   e27c0:	000e919d 	.word	0x000e919d
   e27c4:	000e91b1 	.word	0x000e91b1
   e27c8:	000e91c3 	.word	0x000e91c3
   e27cc:	000e91d6 	.word	0x000e91d6
   e27d0:	000e91ea 	.word	0x000e91ea
   e27d4:	000e91fa 	.word	0x000e91fa
   e27d8:	000e920a 	.word	0x000e920a
   e27dc:	000e9215 	.word	0x000e9215
   e27e0:	000e9225 	.word	0x000e9225
   e27e4:	000e9235 	.word	0x000e9235
   e27e8:	000e924d 	.word	0x000e924d
   e27ec:	000e7f00 	.word	0x000e7f00
   e27f0:	ffffd680 	.word	0xffffd680
   e27f4:	000e8ee1 	.word	0x000e8ee1

000e27f8 <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
   e27f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e27fc:	4e1a      	ldr	r6, [pc, #104]	; (e2868 <mbedtls_x509_crt_verify_info+0x70>)
   e27fe:	4607      	mov	r7, r0
   e2800:	460d      	mov	r5, r1
   e2802:	4691      	mov	r9, r2
   e2804:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
   e2806:	460c      	mov	r4, r1

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
   e2808:	f856 3c04 	ldr.w	r3, [r6, #-4]
   e280c:	b1cb      	cbz	r3, e2842 <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
   e280e:	f856 2c08 	ldr.w	r2, [r6, #-8]
   e2812:	ea18 0f02 	tst.w	r8, r2
   e2816:	d012      	beq.n	e283e <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
   e2818:	9300      	str	r3, [sp, #0]
   e281a:	4a14      	ldr	r2, [pc, #80]	; (e286c <mbedtls_x509_crt_verify_info+0x74>)
   e281c:	464b      	mov	r3, r9
   e281e:	4621      	mov	r1, r4
   e2820:	4638      	mov	r0, r7
   e2822:	f001 fbe1 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e2826:	2800      	cmp	r0, #0
   e2828:	da01      	bge.n	e282e <mbedtls_x509_crt_verify_info+0x36>
   e282a:	4811      	ldr	r0, [pc, #68]	; (e2870 <mbedtls_x509_crt_verify_info+0x78>)
   e282c:	e018      	b.n	e2860 <mbedtls_x509_crt_verify_info+0x68>
   e282e:	4284      	cmp	r4, r0
   e2830:	d9fb      	bls.n	e282a <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
   e2832:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
   e2836:	1a24      	subs	r4, r4, r0
   e2838:	4407      	add	r7, r0
        flags ^= cur->code;
   e283a:	ea88 0803 	eor.w	r8, r8, r3
   e283e:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
   e2840:	e7e2      	b.n	e2808 <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
   e2842:	f1b8 0f00 	cmp.w	r8, #0
   e2846:	d00a      	beq.n	e285e <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
   e2848:	464b      	mov	r3, r9
   e284a:	4a0a      	ldr	r2, [pc, #40]	; (e2874 <mbedtls_x509_crt_verify_info+0x7c>)
   e284c:	4621      	mov	r1, r4
   e284e:	4638      	mov	r0, r7
   e2850:	f001 fbca 	bl	e3fe8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   e2854:	2800      	cmp	r0, #0
   e2856:	dbe8      	blt.n	e282a <mbedtls_x509_crt_verify_info+0x32>
   e2858:	4284      	cmp	r4, r0
   e285a:	d9e6      	bls.n	e282a <mbedtls_x509_crt_verify_info+0x32>
   e285c:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
   e285e:	1b28      	subs	r0, r5, r4
}
   e2860:	b003      	add	sp, #12
   e2862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e2866:	bf00      	nop
   e2868:	000e8efc 	.word	0x000e8efc
   e286c:	000e9252 	.word	0x000e9252
   e2870:	ffffd680 	.word	0xffffd680
   e2874:	000e9258 	.word	0x000e9258

000e2878 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   e2878:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   e287c:	f013 0304 	ands.w	r3, r3, #4
   e2880:	d01a      	beq.n	e28b8 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   e2882:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   e2886:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   e288a:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
   e288e:	f023 0301 	bic.w	r3, r3, #1
   e2892:	f020 0001 	bic.w	r0, r0, #1
   e2896:	400b      	ands	r3, r1
   e2898:	4298      	cmp	r0, r3
   e289a:	d10c      	bne.n	e28b6 <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   e289c:	430a      	orrs	r2, r1
   e289e:	f248 0301 	movw	r3, #32769	; 0x8001
   e28a2:	4013      	ands	r3, r2
   e28a4:	f248 0001 	movw	r0, #32769	; 0x8001
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e28a8:	4a04      	ldr	r2, [pc, #16]	; (e28bc <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   e28aa:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e28ac:	4298      	cmp	r0, r3
   e28ae:	bf14      	ite	ne
   e28b0:	4613      	movne	r3, r2
   e28b2:	2300      	moveq	r3, #0
   e28b4:	e000      	b.n	e28b8 <mbedtls_x509_crt_check_key_usage+0x40>
   e28b6:	4b01      	ldr	r3, [pc, #4]	; (e28bc <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
   e28b8:	4618      	mov	r0, r3
   e28ba:	4770      	bx	lr
   e28bc:	ffffd800 	.word	0xffffd800

000e28c0 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
   e28c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e28c4:	4606      	mov	r6, r0
   e28c6:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   e28c8:	304c      	adds	r0, #76	; 0x4c
   e28ca:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
   e28cc:	4617      	mov	r7, r2
   e28ce:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   e28d0:	f7ff fbc0 	bl	e2054 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   e28d4:	4604      	mov	r4, r0
   e28d6:	b9d8      	cbnz	r0, e2910 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
   e28d8:	b177      	cbz	r7, e28f8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
   e28da:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
   e28dc:	f1b8 0f00 	cmp.w	r8, #0
   e28e0:	d008      	beq.n	e28f4 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
   e28e2:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
   e28e4:	686b      	ldr	r3, [r5, #4]
   e28e6:	429a      	cmp	r2, r3
   e28e8:	d104      	bne.n	e28f4 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
   e28ea:	68a9      	ldr	r1, [r5, #8]
   e28ec:	68b0      	ldr	r0, [r6, #8]
   e28ee:	f004 f91b 	bl	e6b28 <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
   e28f2:	b178      	cbz	r0, e2914 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
   e28f4:	2f02      	cmp	r7, #2
   e28f6:	dd0d      	ble.n	e2914 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
   e28f8:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
   e28fc:	b143      	cbz	r3, e2910 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
   e28fe:	2104      	movs	r1, #4
   e2900:	4628      	mov	r0, r5
   e2902:	f7ff ffb9 	bl	e2878 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
   e2906:	3000      	adds	r0, #0
   e2908:	bf18      	it	ne
   e290a:	2001      	movne	r0, #1
   e290c:	4244      	negs	r4, r0
   e290e:	e001      	b.n	e2914 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
   e2910:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return( -1 );
    }
#endif

    return( 0 );
}
   e2914:	4620      	mov	r0, r4
   e2916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e291a <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
   e291a:	b538      	push	{r3, r4, r5, lr}
   e291c:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
   e291e:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
   e2922:	b1a4      	cbz	r4, e294e <mbedtls_x509_crt_is_revoked+0x34>
   e2924:	6922      	ldr	r2, [r4, #16]
   e2926:	b1a2      	cbz	r2, e2952 <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
   e2928:	6a2b      	ldr	r3, [r5, #32]
   e292a:	429a      	cmp	r2, r3
   e292c:	d001      	beq.n	e2932 <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
   e292e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
   e2930:	e7f7      	b.n	e2922 <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
   e2932:	6961      	ldr	r1, [r4, #20]
   e2934:	6a68      	ldr	r0, [r5, #36]	; 0x24
   e2936:	f004 f8f7 	bl	e6b28 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
   e293a:	2800      	cmp	r0, #0
   e293c:	d1f7      	bne.n	e292e <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
   e293e:	f104 0018 	add.w	r0, r4, #24
   e2942:	f7ff fb65 	bl	e2010 <mbedtls_x509_time_is_past>
   e2946:	2800      	cmp	r0, #0
   e2948:	d0f1      	beq.n	e292e <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
   e294a:	2001      	movs	r0, #1
   e294c:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
   e294e:	4620      	mov	r0, r4
   e2950:	bd38      	pop	{r3, r4, r5, pc}
   e2952:	4610      	mov	r0, r2
}
   e2954:	bd38      	pop	{r3, r4, r5, pc}

000e2956 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
   e2956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e295a:	b099      	sub	sp, #100	; 0x64
   e295c:	4615      	mov	r5, r2
   e295e:	9005      	str	r0, [sp, #20]
   e2960:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
   e2962:	460e      	mov	r6, r1
   e2964:	2900      	cmp	r1, #0
   e2966:	d077      	beq.n	e2a58 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
   e2968:	2400      	movs	r4, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   e296a:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
   e296e:	2d00      	cmp	r5, #0
   e2970:	d074      	beq.n	e2a5c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
    {
        if( crl_list->version == 0 ||
   e2972:	69ab      	ldr	r3, [r5, #24]
   e2974:	2b00      	cmp	r3, #0
   e2976:	d06c      	beq.n	e2a52 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
   e2978:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
   e297a:	6c73      	ldr	r3, [r6, #68]	; 0x44
   e297c:	429a      	cmp	r2, r3
   e297e:	d168      	bne.n	e2a52 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
   e2980:	6cb1      	ldr	r1, [r6, #72]	; 0x48
   e2982:	6b28      	ldr	r0, [r5, #48]	; 0x30
   e2984:	f004 f8d0 	bl	e6b28 <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
   e2988:	2800      	cmp	r0, #0
   e298a:	d162      	bne.n	e2a52 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
   e298c:	2102      	movs	r1, #2
   e298e:	4630      	mov	r0, r6
   e2990:	f7ff ff72 	bl	e2878 <mbedtls_x509_crt_check_key_usage>
   e2994:	2800      	cmp	r0, #0
   e2996:	d143      	bne.n	e2a20 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
   e2998:	f895 00e8 	ldrb.w	r0, [r5, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   e299c:	683a      	ldr	r2, [r7, #0]
   e299e:	1e43      	subs	r3, r0, #1
   e29a0:	fa0a f303 	lsl.w	r3, sl, r3
   e29a4:	4213      	tst	r3, r2
   e29a6:	d05b      	beq.n	e2a60 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10a>
   e29a8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   e29ac:	2201      	movs	r2, #1
   e29ae:	3b01      	subs	r3, #1
   e29b0:	fa02 f303 	lsl.w	r3, r2, r3
   e29b4:	687a      	ldr	r2, [r7, #4]
   e29b6:	4213      	tst	r3, r2
   e29b8:	d055      	beq.n	e2a66 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x110>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   e29ba:	f7f6 ffb3 	bl	d9924 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   e29be:	f10d 0920 	add.w	r9, sp, #32
   e29c2:	464b      	mov	r3, r9
   e29c4:	692a      	ldr	r2, [r5, #16]
   e29c6:	6969      	ldr	r1, [r5, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   e29c8:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   e29ca:	f7f7 f81d 	bl	d9a08 <mbedtls_md>
   e29ce:	bb38      	cbnz	r0, e2a20 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
   e29d0:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
   e29d4:	4642      	mov	r2, r8
   e29d6:	f895 10e9 	ldrb.w	r1, [r5, #233]	; 0xe9
   e29da:	f107 000c 	add.w	r0, r7, #12
   e29de:	f7ff fbc0 	bl	e2162 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
   e29e2:	b108      	cbz	r0, e29e8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e29e4:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   e29e8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   e29ec:	f8d5 10ec 	ldr.w	r1, [r5, #236]	; 0xec
   e29f0:	9304      	str	r3, [sp, #16]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   e29f2:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   e29f4:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   e29f8:	9107      	str	r1, [sp, #28]
   e29fa:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   e29fc:	f7f7 f8d0 	bl	d9ba0 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   e2a00:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
   e2a04:	9203      	str	r2, [sp, #12]
   e2a06:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
   e2a0a:	9202      	str	r2, [sp, #8]
   e2a0c:	9001      	str	r0, [sp, #4]
   e2a0e:	f8cd 9000 	str.w	r9, [sp]
   e2a12:	9b06      	ldr	r3, [sp, #24]
   e2a14:	9907      	ldr	r1, [sp, #28]
   e2a16:	9804      	ldr	r0, [sp, #16]
   e2a18:	4642      	mov	r2, r8
   e2a1a:	f7f7 fb9d 	bl	da158 <mbedtls_pk_verify_ext>
   e2a1e:	b110      	cbz	r0, e2a26 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   e2a20:	f044 0010 	orr.w	r0, r4, #16
            break;
   e2a24:	e022      	b.n	e2a6c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x116>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
   e2a26:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   e2a2a:	f7ff faf1 	bl	e2010 <mbedtls_x509_time_is_past>
   e2a2e:	b108      	cbz	r0, e2a34 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
   e2a30:	f044 0420 	orr.w	r4, r4, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
   e2a34:	f105 0054 	add.w	r0, r5, #84	; 0x54
   e2a38:	f7ff faec 	bl	e2014 <mbedtls_x509_time_is_future>
   e2a3c:	b108      	cbz	r0, e2a42 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
   e2a3e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
   e2a42:	4629      	mov	r1, r5
   e2a44:	9805      	ldr	r0, [sp, #20]
   e2a46:	f7ff ff68 	bl	e291a <mbedtls_x509_crt_is_revoked>
   e2a4a:	b110      	cbz	r0, e2a52 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
   e2a4c:	f044 0002 	orr.w	r0, r4, #2
            break;
   e2a50:	e00c      	b.n	e2a6c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x116>
        }

        crl_list = crl_list->next;
   e2a52:	f8d5 50f0 	ldr.w	r5, [r5, #240]	; 0xf0
   e2a56:	e78a      	b.n	e296e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
   e2a58:	4608      	mov	r0, r1
   e2a5a:	e007      	b.n	e2a6c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x116>
   e2a5c:	4620      	mov	r0, r4
   e2a5e:	e005      	b.n	e2a6c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x116>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
   e2a60:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
   e2a64:	e7a0      	b.n	e29a8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
   e2a66:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
   e2a6a:	e7a6      	b.n	e29ba <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
   e2a6c:	b019      	add	sp, #100	; 0x64
   e2a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e2a72 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
   e2a72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2a76:	b09d      	sub	sp, #116	; 0x74
   e2a78:	4604      	mov	r4, r0
   e2a7a:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
   e2a7c:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
   e2a7e:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
   e2a80:	460d      	mov	r5, r1
   e2a82:	9206      	str	r2, [sp, #24]
   e2a84:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
   e2a88:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   e2a8a:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
   e2a8e:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
   e2a90:	f7ff fabe 	bl	e2010 <mbedtls_x509_time_is_past>
   e2a94:	b118      	cbz	r0, e2a9e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   e2a96:	6833      	ldr	r3, [r6, #0]
   e2a98:	f043 0301 	orr.w	r3, r3, #1
   e2a9c:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
   e2a9e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   e2aa2:	f7ff fab7 	bl	e2014 <mbedtls_x509_time_is_future>
   e2aa6:	b118      	cbz	r0, e2ab0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   e2aa8:	6833      	ldr	r3, [r6, #0]
   e2aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   e2aae:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   e2ab0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   e2ab4:	1e5a      	subs	r2, r3, #1
   e2ab6:	2301      	movs	r3, #1
   e2ab8:	4093      	lsls	r3, r2
   e2aba:	f8d9 2000 	ldr.w	r2, [r9]
   e2abe:	4213      	tst	r3, r2
   e2ac0:	f000 80c0 	beq.w	e2c44 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
   e2ac4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   e2ac8:	1e5a      	subs	r2, r3, #1
   e2aca:	2301      	movs	r3, #1
   e2acc:	4093      	lsls	r3, r2
   e2ace:	f8d9 2004 	ldr.w	r2, [r9, #4]
   e2ad2:	4213      	tst	r3, r2
   e2ad4:	f000 80bb 	beq.w	e2c4e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   e2ad8:	6833      	ldr	r3, [r6, #0]
   e2ada:	f043 0308 	orr.w	r3, r3, #8
   e2ade:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
   e2ae0:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   e2ae4:	f7f6 ff1e 	bl	d9924 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   e2ae8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
   e2aec:	465b      	mov	r3, fp
   e2aee:	6922      	ldr	r2, [r4, #16]
   e2af0:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
   e2af2:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   e2af4:	f7f6 ff88 	bl	d9a08 <mbedtls_md>
   e2af8:	2800      	cmp	r0, #0
   e2afa:	d16d      	bne.n	e2bd8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
   e2afc:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
   e2afe:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
   e2b02:	b915      	cbnz	r5, e2b0a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
   e2b04:	2f00      	cmp	r7, #0
   e2b06:	d14c      	bne.n	e2ba2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
   e2b08:	e066      	b.n	e2bd8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
   e2b0a:	fab8 f388 	clz	r3, r8
   e2b0e:	095b      	lsrs	r3, r3, #5
   e2b10:	2201      	movs	r2, #1
   e2b12:	4629      	mov	r1, r5
   e2b14:	4620      	mov	r0, r4
   e2b16:	f7ff fed3 	bl	e28c0 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
   e2b1a:	2800      	cmp	r0, #0
   e2b1c:	d13e      	bne.n	e2b9c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
   e2b1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   e2b20:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   e2b22:	429a      	cmp	r2, r3
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
   e2b24:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
   e2b28:	d106      	bne.n	e2b38 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
   e2b2a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   e2b2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   e2b2e:	f003 fffb 	bl	e6b28 <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
   e2b32:	2800      	cmp	r0, #0
   e2b34:	bf08      	it	eq
   e2b36:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
   e2b38:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   e2b3c:	2b00      	cmp	r3, #0
   e2b3e:	dd04      	ble.n	e2b4a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
   e2b40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   e2b42:	ebc2 0b0b 	rsb	fp, r2, fp
   e2b46:	455b      	cmp	r3, fp
   e2b48:	db28      	blt.n	e2b9c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
   e2b4a:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   e2b4e:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
   e2b52:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
   e2b54:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
   e2b58:	9109      	str	r1, [sp, #36]	; 0x24
   e2b5a:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
   e2b5c:	f7f7 f820 	bl	d9ba0 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
   e2b60:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   e2b64:	9b07      	ldr	r3, [sp, #28]
   e2b66:	9203      	str	r2, [sp, #12]
   e2b68:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   e2b6c:	9202      	str	r2, [sp, #8]
   e2b6e:	9001      	str	r0, [sp, #4]
   e2b70:	9300      	str	r3, [sp, #0]
   e2b72:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
   e2b76:	9b08      	ldr	r3, [sp, #32]
   e2b78:	9909      	ldr	r1, [sp, #36]	; 0x24
   e2b7a:	4658      	mov	r0, fp
   e2b7c:	f7f7 faec 	bl	da158 <mbedtls_pk_verify_ext>
   e2b80:	b960      	cbnz	r0, e2b9c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
   e2b82:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
   e2b86:	f7ff fa43 	bl	e2010 <mbedtls_x509_time_is_past>
   e2b8a:	b920      	cbnz	r0, e2b96 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
   e2b8c:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   e2b90:	f7ff fa40 	bl	e2014 <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
   e2b94:	b130      	cbz	r0, e2ba4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
   e2b96:	2f00      	cmp	r7, #0
   e2b98:	bf08      	it	eq
   e2b9a:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
   e2b9c:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
   e2ba0:	e7af      	b.n	e2b02 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
   e2ba2:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   e2ba4:	6833      	ldr	r3, [r6, #0]
   e2ba6:	f023 0308 	bic.w	r3, r3, #8
   e2baa:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
   e2bac:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
   e2bb0:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   e2bb4:	f109 000c 	add.w	r0, r9, #12
   e2bb8:	f7ff fad3 	bl	e2162 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
   e2bbc:	b118      	cbz	r0, e2bc6 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e2bbe:	6833      	ldr	r3, [r6, #0]
   e2bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   e2bc4:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
   e2bc6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
   e2bc8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   e2bca:	429a      	cmp	r2, r3
   e2bcc:	d10d      	bne.n	e2bea <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
   e2bce:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   e2bd0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   e2bd2:	f003 ffa9 	bl	e6b28 <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
   e2bd6:	b940      	cbnz	r0, e2bea <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
   e2bd8:	f1ba 0f00 	cmp.w	sl, #0
   e2bdc:	d12a      	bne.n	e2c34 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
   e2bde:	6832      	ldr	r2, [r6, #0]
   e2be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e2be2:	4313      	orrs	r3, r2
   e2be4:	6033      	str	r3, [r6, #0]

    return( 0 );
   e2be6:	2000      	movs	r0, #0
   e2be8:	e036      	b.n	e2c58 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
   e2bea:	464b      	mov	r3, r9
   e2bec:	9a06      	ldr	r2, [sp, #24]
   e2bee:	4629      	mov	r1, r5
   e2bf0:	4620      	mov	r0, r4
   e2bf2:	f7ff feb0 	bl	e2956 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
   e2bf6:	6833      	ldr	r3, [r6, #0]
   e2bf8:	4318      	orrs	r0, r3
   e2bfa:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
   e2bfc:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
   e2c00:	f7ff fa06 	bl	e2010 <mbedtls_x509_time_is_past>
   e2c04:	b118      	cbz	r0, e2c0e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   e2c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e2c08:	f043 0301 	orr.w	r3, r3, #1
   e2c0c:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
   e2c0e:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   e2c12:	f7ff f9ff 	bl	e2014 <mbedtls_x509_time_is_future>
   e2c16:	b118      	cbz	r0, e2c20 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
   e2c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e2c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   e2c1e:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
   e2c20:	f1ba 0f00 	cmp.w	sl, #0
   e2c24:	d0db      	beq.n	e2bde <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
   e2c26:	ab0b      	add	r3, sp, #44	; 0x2c
   e2c28:	f108 0201 	add.w	r2, r8, #1
   e2c2c:	4629      	mov	r1, r5
   e2c2e:	982a      	ldr	r0, [sp, #168]	; 0xa8
   e2c30:	47d0      	blx	sl
   e2c32:	b988      	cbnz	r0, e2c58 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
   e2c34:	4633      	mov	r3, r6
   e2c36:	4642      	mov	r2, r8
   e2c38:	4621      	mov	r1, r4
   e2c3a:	982a      	ldr	r0, [sp, #168]	; 0xa8
   e2c3c:	47d0      	blx	sl
   e2c3e:	2800      	cmp	r0, #0
   e2c40:	d0cd      	beq.n	e2bde <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
   e2c42:	e009      	b.n	e2c58 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   e2c44:	6833      	ldr	r3, [r6, #0]
   e2c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   e2c4a:	6033      	str	r3, [r6, #0]
   e2c4c:	e73a      	b.n	e2ac4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   e2c4e:	6833      	ldr	r3, [r6, #0]
   e2c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   e2c54:	6033      	str	r3, [r6, #0]
   e2c56:	e73f      	b.n	e2ad8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
   e2c58:	b01d      	add	sp, #116	; 0x74
   e2c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e2c60 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
   e2c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2c64:	b09d      	sub	sp, #116	; 0x74
   e2c66:	469a      	mov	sl, r3
   e2c68:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   e2c6a:	9206      	str	r2, [sp, #24]
    int ret;
    uint32_t parent_flags = 0;
   e2c6c:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
   e2c6e:	4605      	mov	r5, r0
   e2c70:	460f      	mov	r7, r1
   e2c72:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
   e2c76:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
   e2c78:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
   e2c7a:	b146      	cbz	r6, e2c8e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
   e2c7c:	f100 016c 	add.w	r1, r0, #108	; 0x6c
   e2c80:	304c      	adds	r0, #76	; 0x4c
   e2c82:	f7ff f9e7 	bl	e2054 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   e2c86:	2800      	cmp	r0, #0
   e2c88:	d07a      	beq.n	e2d80 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
   e2c8a:	2e07      	cmp	r6, #7
   e2c8c:	dc76      	bgt.n	e2d7c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
   e2c8e:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
   e2c92:	f7ff f9bd 	bl	e2010 <mbedtls_x509_time_is_past>
   e2c96:	b118      	cbz	r0, e2ca0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   e2c98:	6823      	ldr	r3, [r4, #0]
   e2c9a:	f043 0301 	orr.w	r3, r3, #1
   e2c9e:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
   e2ca0:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   e2ca4:	f7ff f9b6 	bl	e2014 <mbedtls_x509_time_is_future>
   e2ca8:	b118      	cbz	r0, e2cb2 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   e2caa:	6823      	ldr	r3, [r4, #0]
   e2cac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   e2cb0:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   e2cb2:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
   e2cb6:	1e5a      	subs	r2, r3, #1
   e2cb8:	2301      	movs	r3, #1
   e2cba:	4093      	lsls	r3, r2
   e2cbc:	f8d8 2000 	ldr.w	r2, [r8]
   e2cc0:	4213      	tst	r3, r2
   e2cc2:	d061      	beq.n	e2d88 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
   e2cc4:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
   e2cc8:	1e5a      	subs	r2, r3, #1
   e2cca:	2301      	movs	r3, #1
   e2ccc:	4093      	lsls	r3, r2
   e2cce:	f8d8 2004 	ldr.w	r2, [r8, #4]
   e2cd2:	4213      	tst	r3, r2
   e2cd4:	d05d      	beq.n	e2d92 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
   e2cd6:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
   e2cda:	f7f6 fe23 	bl	d9924 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   e2cde:	ab0c      	add	r3, sp, #48	; 0x30
   e2ce0:	692a      	ldr	r2, [r5, #16]
   e2ce2:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
   e2ce4:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   e2ce6:	f7f6 fe8f 	bl	d9a08 <mbedtls_md>
   e2cea:	bb48      	cbnz	r0, e2d40 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
   e2cec:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
   e2cf0:	464a      	mov	r2, r9
   e2cf2:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
   e2cf6:	f108 000c 	add.w	r0, r8, #12
   e2cfa:	f7ff fa32 	bl	e2162 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
   e2cfe:	b118      	cbz	r0, e2d08 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e2d00:	6823      	ldr	r3, [r4, #0]
   e2d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   e2d06:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   e2d08:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
   e2d0c:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
   e2d10:	9307      	str	r3, [sp, #28]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
   e2d12:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   e2d14:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
   e2d18:	9109      	str	r1, [sp, #36]	; 0x24
   e2d1a:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
   e2d1c:	f7f6 ff40 	bl	d9ba0 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   e2d20:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   e2d24:	9203      	str	r2, [sp, #12]
   e2d26:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
   e2d2a:	9202      	str	r2, [sp, #8]
   e2d2c:	aa0c      	add	r2, sp, #48	; 0x30
   e2d2e:	9001      	str	r0, [sp, #4]
   e2d30:	9200      	str	r2, [sp, #0]
   e2d32:	9b08      	ldr	r3, [sp, #32]
   e2d34:	9909      	ldr	r1, [sp, #36]	; 0x24
   e2d36:	9807      	ldr	r0, [sp, #28]
   e2d38:	464a      	mov	r2, r9
   e2d3a:	f7f7 fa0d 	bl	da158 <mbedtls_pk_verify_ext>
   e2d3e:	b118      	cbz	r0, e2d48 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   e2d40:	6823      	ldr	r3, [r4, #0]
   e2d42:	f043 0308 	orr.w	r3, r3, #8
   e2d46:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
   e2d48:	4643      	mov	r3, r8
   e2d4a:	4652      	mov	r2, sl
   e2d4c:	4639      	mov	r1, r7
   e2d4e:	4628      	mov	r0, r5
   e2d50:	f7ff fe01 	bl	e2956 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
   e2d54:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
   e2d56:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
   e2d5a:	4318      	orrs	r0, r3
   e2d5c:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
   e2d5e:	f1b9 0f00 	cmp.w	r9, #0
   e2d62:	d029      	beq.n	e2db8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
   e2d64:	fab6 f386 	clz	r3, r6
   e2d68:	095b      	lsrs	r3, r3, #5
   e2d6a:	2200      	movs	r2, #0
   e2d6c:	4649      	mov	r1, r9
   e2d6e:	4638      	mov	r0, r7
   e2d70:	f7ff fda6 	bl	e28c0 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
   e2d74:	b190      	cbz	r0, e2d9c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
   e2d76:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
   e2d7a:	e7f0      	b.n	e2d5e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
   e2d7c:	4838      	ldr	r0, [pc, #224]	; (e2e60 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
   e2d7e:	e06b      	b.n	e2e58 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
   e2d80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   e2d82:	3301      	adds	r3, #1
   e2d84:	9328      	str	r3, [sp, #160]	; 0xa0
   e2d86:	e780      	b.n	e2c8a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   e2d88:	6823      	ldr	r3, [r4, #0]
   e2d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   e2d8e:	6023      	str	r3, [r4, #0]
   e2d90:	e798      	b.n	e2cc4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   e2d92:	6823      	ldr	r3, [r4, #0]
   e2d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   e2d98:	6023      	str	r3, [r4, #0]
   e2d9a:	e79c      	b.n	e2cd6 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
            break;
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
   e2d9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   e2d9e:	9304      	str	r3, [sp, #16]
   e2da0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   e2da2:	9303      	str	r3, [sp, #12]
   e2da4:	ab0b      	add	r3, sp, #44	; 0x2c
   e2da6:	9302      	str	r3, [sp, #8]
   e2da8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   e2daa:	9301      	str	r3, [sp, #4]
   e2dac:	1c73      	adds	r3, r6, #1
   e2dae:	9300      	str	r3, [sp, #0]
   e2db0:	4652      	mov	r2, sl
   e2db2:	4643      	mov	r3, r8
   e2db4:	4649      	mov	r1, r9
   e2db6:	e03b      	b.n	e2e30 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
   e2db8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
   e2dba:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
   e2dbe:	f106 0b02 	add.w	fp, r6, #2
   e2dc2:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
   e2dc6:	f1b9 0f00 	cmp.w	r9, #0
   e2dca:	d024      	beq.n	e2e16 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
   e2dcc:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
   e2dd0:	2b00      	cmp	r3, #0
   e2dd2:	dd01      	ble.n	e2dd8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
   e2dd4:	455b      	cmp	r3, fp
   e2dd6:	db08      	blt.n	e2dea <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
   e2dd8:	fab6 f386 	clz	r3, r6
   e2ddc:	095b      	lsrs	r3, r3, #5
   e2dde:	2200      	movs	r2, #0
   e2de0:	4649      	mov	r1, r9
   e2de2:	4638      	mov	r0, r7
   e2de4:	f7ff fd6c 	bl	e28c0 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
   e2de8:	b110      	cbz	r0, e2df0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
   e2dea:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
   e2dee:	e7ea      	b.n	e2dc6 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        }

        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
   e2df0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   e2df2:	9305      	str	r3, [sp, #20]
   e2df4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   e2df6:	9304      	str	r3, [sp, #16]
   e2df8:	ab0b      	add	r3, sp, #44	; 0x2c
   e2dfa:	9303      	str	r3, [sp, #12]
   e2dfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   e2dfe:	9302      	str	r3, [sp, #8]
   e2e00:	1c73      	adds	r3, r6, #1
   e2e02:	9301      	str	r3, [sp, #4]
   e2e04:	f8cd 8000 	str.w	r8, [sp]
   e2e08:	4653      	mov	r3, sl
   e2e0a:	9a06      	ldr	r2, [sp, #24]
   e2e0c:	4649      	mov	r1, r9
   e2e0e:	4638      	mov	r0, r7
   e2e10:	f7ff ff26 	bl	e2c60 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
   e2e14:	e00f      	b.n	e2e36 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
            if( ret != 0 )
                return( ret );
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
   e2e16:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   e2e18:	9304      	str	r3, [sp, #16]
   e2e1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   e2e1c:	9303      	str	r3, [sp, #12]
   e2e1e:	ab0b      	add	r3, sp, #44	; 0x2c
   e2e20:	9302      	str	r3, [sp, #8]
   e2e22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   e2e24:	9301      	str	r3, [sp, #4]
   e2e26:	9906      	ldr	r1, [sp, #24]
   e2e28:	1c73      	adds	r3, r6, #1
   e2e2a:	9300      	str	r3, [sp, #0]
   e2e2c:	4652      	mov	r2, sl
   e2e2e:	4643      	mov	r3, r8
   e2e30:	4638      	mov	r0, r7
   e2e32:	f7ff fe1e 	bl	e2a72 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
            if( ret != 0 )
   e2e36:	b978      	cbnz	r0, e2e58 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
   e2e38:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   e2e3a:	b92b      	cbnz	r3, e2e48 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
   e2e3c:	6822      	ldr	r2, [r4, #0]
   e2e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e2e40:	4313      	orrs	r3, r2
   e2e42:	6023      	str	r3, [r4, #0]

    return( 0 );
   e2e44:	2000      	movs	r0, #0
   e2e46:	e007      	b.n	e2e58 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
   e2e48:	4629      	mov	r1, r5
   e2e4a:	4623      	mov	r3, r4
   e2e4c:	4632      	mov	r2, r6
   e2e4e:	982b      	ldr	r0, [sp, #172]	; 0xac
   e2e50:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
   e2e52:	47a8      	blx	r5
   e2e54:	2800      	cmp	r0, #0
   e2e56:	d0f1      	beq.n	e2e3c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
   e2e58:	b01d      	add	sp, #116	; 0x74
   e2e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2e5e:	bf00      	nop
   e2e60:	ffffd000 	.word	0xffffd000

000e2e64 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
   e2e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2e68:	b089      	sub	sp, #36	; 0x24
   e2e6a:	4693      	mov	fp, r2
   e2e6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   e2e6e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
   e2e72:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
   e2e74:	4605      	mov	r5, r0
   e2e76:	468a      	mov	sl, r1
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
   e2e78:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
   e2e7a:	461f      	mov	r7, r3
   e2e7c:	2b00      	cmp	r3, #0
   e2e7e:	d06e      	beq.n	e2f5e <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
   e2e80:	f1b8 0f00 	cmp.w	r8, #0
   e2e84:	d048      	beq.n	e2f18 <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
   e2e86:	4640      	mov	r0, r8
   e2e88:	f003 feef 	bl	e6c6a <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   e2e8c:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
   e2e90:	069b      	lsls	r3, r3, #26
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
   e2e92:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   e2e94:	d50d      	bpl.n	e2eb2 <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
   e2e96:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
   e2e9a:	6873      	ldr	r3, [r6, #4]
   e2e9c:	4599      	cmp	r9, r3
   e2e9e:	d12c      	bne.n	e2efa <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
   e2ea0:	464a      	mov	r2, r9
   e2ea2:	68b1      	ldr	r1, [r6, #8]
   e2ea4:	9307      	str	r3, [sp, #28]
   e2ea6:	4640      	mov	r0, r8
   e2ea8:	f7ff f8be 	bl	e2028 <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
   e2eac:	9b07      	ldr	r3, [sp, #28]
   e2eae:	bb20      	cbnz	r0, e2efa <mbedtls_x509_crt_verify_with_profile+0x96>
   e2eb0:	e032      	b.n	e2f18 <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
   e2eb2:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
   e2eb6:	6872      	ldr	r2, [r6, #4]
   e2eb8:	2a03      	cmp	r2, #3
   e2eba:	d118      	bne.n	e2eee <mbedtls_x509_crt_verify_with_profile+0x8a>
   e2ebc:	68b1      	ldr	r1, [r6, #8]
   e2ebe:	4855      	ldr	r0, [pc, #340]	; (e3014 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
   e2ec0:	f003 fe32 	bl	e6b28 <memcmp>
   e2ec4:	b998      	cbnz	r0, e2eee <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
   e2ec6:	6933      	ldr	r3, [r6, #16]
   e2ec8:	4599      	cmp	r9, r3
   e2eca:	d107      	bne.n	e2edc <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
   e2ecc:	464a      	mov	r2, r9
   e2ece:	4641      	mov	r1, r8
   e2ed0:	6970      	ldr	r0, [r6, #20]
   e2ed2:	9307      	str	r3, [sp, #28]
   e2ed4:	f7ff f8a8 	bl	e2028 <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
   e2ed8:	9b07      	ldr	r3, [sp, #28]
   e2eda:	b1e8      	cbz	r0, e2f18 <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
   e2edc:	2b02      	cmp	r3, #2
   e2ede:	d906      	bls.n	e2eee <mbedtls_x509_crt_verify_with_profile+0x8a>
   e2ee0:	2202      	movs	r2, #2
   e2ee2:	494d      	ldr	r1, [pc, #308]	; (e3018 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
   e2ee4:	6970      	ldr	r0, [r6, #20]
   e2ee6:	f003 fe1f 	bl	e6b28 <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
   e2eea:	2800      	cmp	r0, #0
   e2eec:	d053      	beq.n	e2f96 <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
   e2eee:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
   e2ef0:	2e00      	cmp	r6, #0
   e2ef2:	d1e0      	bne.n	e2eb6 <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   e2ef4:	2304      	movs	r3, #4
   e2ef6:	6023      	str	r3, [r4, #0]
   e2ef8:	e00e      	b.n	e2f18 <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
   e2efa:	2b02      	cmp	r3, #2
   e2efc:	d947      	bls.n	e2f8e <mbedtls_x509_crt_verify_with_profile+0x12a>
   e2efe:	2202      	movs	r2, #2
   e2f00:	4945      	ldr	r1, [pc, #276]	; (e3018 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
   e2f02:	68b0      	ldr	r0, [r6, #8]
   e2f04:	f003 fe10 	bl	e6b28 <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
   e2f08:	2800      	cmp	r0, #0
   e2f0a:	d140      	bne.n	e2f8e <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
   e2f0c:	4631      	mov	r1, r6
   e2f0e:	4640      	mov	r0, r8
   e2f10:	f7ff f8e0 	bl	e20d4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
   e2f14:	2800      	cmp	r0, #0
   e2f16:	d13a      	bne.n	e2f8e <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
   e2f18:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
   e2f1c:	4630      	mov	r0, r6
   e2f1e:	f7f7 f981 	bl	da224 <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   e2f22:	2301      	movs	r3, #1
   e2f24:	1e42      	subs	r2, r0, #1
   e2f26:	4093      	lsls	r3, r2
   e2f28:	687a      	ldr	r2, [r7, #4]
   e2f2a:	4213      	tst	r3, r2
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
   e2f2c:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   e2f2e:	d03a      	beq.n	e2fa6 <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
   e2f30:	4632      	mov	r2, r6
   e2f32:	f107 000c 	add.w	r0, r7, #12
   e2f36:	f7ff f914 	bl	e2162 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
   e2f3a:	b118      	cbz	r0, e2f44 <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e2f3c:	6823      	ldr	r3, [r4, #0]
   e2f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   e2f42:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
   e2f44:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
   e2f46:	2e00      	cmp	r6, #0
   e2f48:	d03d      	beq.n	e2fc6 <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
   e2f4a:	2301      	movs	r3, #1
   e2f4c:	2200      	movs	r2, #0
   e2f4e:	4631      	mov	r1, r6
   e2f50:	4628      	mov	r0, r5
   e2f52:	f7ff fcb5 	bl	e28c0 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
   e2f56:	b358      	cbz	r0, e2fb0 <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
   e2f58:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   e2f5c:	e7f3      	b.n	e2f46 <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   e2f5e:	482f      	ldr	r0, [pc, #188]	; (e301c <mbedtls_x509_crt_verify_with_profile+0x1b8>)
   e2f60:	e011      	b.n	e2f86 <mbedtls_x509_crt_verify_with_profile+0x122>
                break;

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
   e2f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2f64:	9305      	str	r3, [sp, #20]
   e2f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2f68:	9304      	str	r3, [sp, #16]
   e2f6a:	9002      	str	r0, [sp, #8]
   e2f6c:	9001      	str	r0, [sp, #4]
   e2f6e:	9403      	str	r4, [sp, #12]
   e2f70:	9700      	str	r7, [sp, #0]
   e2f72:	465b      	mov	r3, fp
   e2f74:	4652      	mov	r2, sl
   e2f76:	4631      	mov	r1, r6
   e2f78:	4628      	mov	r0, r5
   e2f7a:	f7ff fe71 	bl	e2c60 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
   e2f7e:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
   e2f82:	d12e      	bne.n	e2fe2 <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
   e2f84:	4826      	ldr	r0, [pc, #152]	; (e3020 <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
   e2f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e2f8a:	6023      	str	r3, [r4, #0]
        return( ret );
   e2f8c:	e03f      	b.n	e300e <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
   e2f8e:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
   e2f90:	2e00      	cmp	r6, #0
   e2f92:	d182      	bne.n	e2e9a <mbedtls_x509_crt_verify_with_profile+0x36>
   e2f94:	e7ae      	b.n	e2ef4 <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
   e2f96:	f106 010c 	add.w	r1, r6, #12
   e2f9a:	4640      	mov	r0, r8
   e2f9c:	f7ff f89a 	bl	e20d4 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
   e2fa0:	2800      	cmp	r0, #0
   e2fa2:	d1a4      	bne.n	e2eee <mbedtls_x509_crt_verify_with_profile+0x8a>
   e2fa4:	e7b8      	b.n	e2f18 <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   e2fa6:	6823      	ldr	r3, [r4, #0]
   e2fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   e2fac:	6023      	str	r3, [r4, #0]
   e2fae:	e7bf      	b.n	e2f30 <mbedtls_x509_crt_verify_with_profile+0xcc>
            break;
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
   e2fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2fb2:	9304      	str	r3, [sp, #16]
   e2fb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2fb6:	9303      	str	r3, [sp, #12]
   e2fb8:	9402      	str	r4, [sp, #8]
   e2fba:	9001      	str	r0, [sp, #4]
   e2fbc:	9000      	str	r0, [sp, #0]
   e2fbe:	463b      	mov	r3, r7
   e2fc0:	465a      	mov	r2, fp
   e2fc2:	4631      	mov	r1, r6
   e2fc4:	e01f      	b.n	e3006 <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
   e2fc6:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
   e2fca:	b196      	cbz	r6, e2ff2 <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
   e2fcc:	2301      	movs	r3, #1
   e2fce:	2200      	movs	r2, #0
   e2fd0:	4631      	mov	r1, r6
   e2fd2:	4628      	mov	r0, r5
   e2fd4:	f7ff fc74 	bl	e28c0 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
   e2fd8:	2800      	cmp	r0, #0
   e2fda:	d0c2      	beq.n	e2f62 <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
   e2fdc:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   e2fe0:	e7f3      	b.n	e2fca <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
   e2fe2:	2800      	cmp	r0, #0
   e2fe4:	d1cf      	bne.n	e2f86 <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
   e2fe6:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
   e2fe8:	480e      	ldr	r0, [pc, #56]	; (e3024 <mbedtls_x509_crt_verify_with_profile+0x1c0>)
   e2fea:	2b00      	cmp	r3, #0
   e2fec:	bf08      	it	eq
   e2fee:	2000      	moveq	r0, #0
   e2ff0:	e00d      	b.n	e300e <mbedtls_x509_crt_verify_with_profile+0x1aa>
            if( ret != 0 )
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
   e2ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2ff4:	9304      	str	r3, [sp, #16]
   e2ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2ff8:	9303      	str	r3, [sp, #12]
   e2ffa:	9402      	str	r4, [sp, #8]
   e2ffc:	9601      	str	r6, [sp, #4]
   e2ffe:	9600      	str	r6, [sp, #0]
   e3000:	463b      	mov	r3, r7
   e3002:	465a      	mov	r2, fp
   e3004:	4651      	mov	r1, sl
   e3006:	4628      	mov	r0, r5
   e3008:	f7ff fd33 	bl	e2a72 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
   e300c:	e7b7      	b.n	e2f7e <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
   e300e:	b009      	add	sp, #36	; 0x24
   e3010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3014:	000e80f4 	.word	0x000e80f4
   e3018:	000e9283 	.word	0x000e9283
   e301c:	ffffd800 	.word	0xffffd800
   e3020:	ffffd000 	.word	0xffffd000
   e3024:	ffffd900 	.word	0xffffd900

000e3028 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
   e3028:	f44f 729a 	mov.w	r2, #308	; 0x134
   e302c:	2100      	movs	r1, #0
   e302e:	f003 bdb0 	b.w	e6b92 <memset>

000e3032 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
   e3032:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
   e3034:	4605      	mov	r5, r0
   e3036:	2800      	cmp	r0, #0
   e3038:	d053      	beq.n	e30e2 <mbedtls_x509_crt_free+0xb0>
   e303a:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
   e303c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   e3040:	f7f6 ffd2 	bl	d9fe8 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
   e3044:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
   e3046:	b14a      	cbz	r2, e305c <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   e3048:	4610      	mov	r0, r2
   e304a:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   e304c:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   e304e:	f7fe ffe3 	bl	e2018 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
   e3052:	4610      	mov	r0, r2
   e3054:	f000 ffb0 	bl	e3fb8 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   e3058:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
   e305a:	e7f4      	b.n	e3046 <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
   e305c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
   e3060:	b14a      	cbz	r2, e3076 <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   e3062:	4610      	mov	r0, r2
   e3064:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   e3066:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   e3068:	f7fe ffd6 	bl	e2018 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
   e306c:	4610      	mov	r0, r2
   e306e:	f000 ffa3 	bl	e3fb8 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   e3072:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
   e3074:	e7f4      	b.n	e3060 <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
   e3076:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
   e307a:	b14a      	cbz	r2, e3090 <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
   e307c:	4610      	mov	r0, r2
   e307e:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   e3080:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
   e3082:	f7fe ffc9 	bl	e2018 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
   e3086:	4610      	mov	r0, r2
   e3088:	f000 ff96 	bl	e3fb8 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   e308c:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
   e308e:	e7f4      	b.n	e307a <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
   e3090:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
   e3094:	b14a      	cbz	r2, e30aa <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
   e3096:	4610      	mov	r0, r2
   e3098:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   e309a:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
   e309c:	f7fe ffbc 	bl	e2018 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
   e30a0:	4610      	mov	r0, r2
   e30a2:	f000 ff89 	bl	e3fb8 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   e30a6:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
   e30a8:	e7f4      	b.n	e3094 <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
   e30aa:	68a0      	ldr	r0, [r4, #8]
   e30ac:	b128      	cbz	r0, e30ba <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
   e30ae:	6861      	ldr	r1, [r4, #4]
   e30b0:	f7fe ffb2 	bl	e2018 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
   e30b4:	68a0      	ldr	r0, [r4, #8]
   e30b6:	f000 ff7f 	bl	e3fb8 <free>
        }

        cert_cur = cert_cur->next;
   e30ba:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
   e30be:	2c00      	cmp	r4, #0
   e30c0:	d1bc      	bne.n	e303c <mbedtls_x509_crt_free+0xa>
   e30c2:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   e30c4:	f44f 719a 	mov.w	r1, #308	; 0x134
   e30c8:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
   e30ca:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   e30ce:	f7fe ffa3 	bl	e2018 <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
   e30d2:	42aa      	cmp	r2, r5
   e30d4:	d002      	beq.n	e30dc <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
   e30d6:	4610      	mov	r0, r2
   e30d8:	f000 ff6e 	bl	e3fb8 <free>
    }
    while( cert_cur != NULL );
   e30dc:	4622      	mov	r2, r4
   e30de:	2c00      	cmp	r4, #0
   e30e0:	d1f0      	bne.n	e30c4 <mbedtls_x509_crt_free+0x92>
   e30e2:	bd70      	pop	{r4, r5, r6, pc}

000e30e4 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
   e30e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e30e8:	4688      	mov	r8, r1
   e30ea:	b09b      	sub	sp, #108	; 0x6c
   e30ec:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
   e30ee:	4682      	mov	sl, r0
   e30f0:	2800      	cmp	r0, #0
   e30f2:	f000 812b 	beq.w	e334c <mbedtls_x509_crt_parse_der+0x268>
   e30f6:	2900      	cmp	r1, #0
   e30f8:	f000 8128 	beq.w	e334c <mbedtls_x509_crt_parse_der+0x268>
   e30fc:	4604      	mov	r4, r0
   e30fe:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
   e3102:	69a3      	ldr	r3, [r4, #24]
   e3104:	b1a3      	cbz	r3, e3130 <mbedtls_x509_crt_parse_der+0x4c>
   e3106:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   e310a:	46a1      	mov	r9, r4
   e310c:	b10b      	cbz	r3, e3112 <mbedtls_x509_crt_parse_der+0x2e>
   e310e:	461c      	mov	r4, r3
   e3110:	e7f7      	b.n	e3102 <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
   e3112:	f44f 719a 	mov.w	r1, #308	; 0x134
   e3116:	2001      	movs	r0, #1
   e3118:	f003 fcf0 	bl	e6afc <calloc>
   e311c:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
   e3120:	2800      	cmp	r0, #0
   e3122:	f000 8115 	beq.w	e3350 <mbedtls_x509_crt_parse_der+0x26c>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
   e3126:	f7ff ff7f 	bl	e3028 <mbedtls_x509_crt_init>
   e312a:	46a1      	mov	r9, r4
        crt = crt->next;
   e312c:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   e3130:	2300      	movs	r3, #0
   e3132:	930b      	str	r3, [sp, #44]	; 0x2c
   e3134:	930c      	str	r3, [sp, #48]	; 0x30
   e3136:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   e3138:	930e      	str	r3, [sp, #56]	; 0x38
   e313a:	930f      	str	r3, [sp, #60]	; 0x3c
   e313c:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   e313e:	9311      	str	r3, [sp, #68]	; 0x44
   e3140:	9312      	str	r3, [sp, #72]	; 0x48
   e3142:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
   e3144:	2c00      	cmp	r4, #0
   e3146:	f000 80e8 	beq.w	e331a <mbedtls_x509_crt_parse_der+0x236>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
   e314a:	ae1a      	add	r6, sp, #104	; 0x68
    end = p + len;
   e314c:	eb08 0b05 	add.w	fp, r8, r5
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
   e3150:	f846 5d54 	str.w	r5, [r6, #-84]!
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e3154:	2330      	movs	r3, #48	; 0x30
   e3156:	4632      	mov	r2, r6
   e3158:	4659      	mov	r1, fp
   e315a:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
   e315c:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e3160:	f7f4 f8a8 	bl	d72b4 <mbedtls_asn1_get_tag>
   e3164:	b120      	cbz	r0, e3170 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   e3166:	4620      	mov	r0, r4
   e3168:	f7ff ff63 	bl	e3032 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   e316c:	4da3      	ldr	r5, [pc, #652]	; (e33fc <mbedtls_x509_crt_parse_der+0x318>)
   e316e:	e0e0      	b.n	e3332 <mbedtls_x509_crt_parse_der+0x24e>
    }

    if( len > (size_t) ( end - p ) )
   e3170:	9d06      	ldr	r5, [sp, #24]
   e3172:	9f05      	ldr	r7, [sp, #20]
   e3174:	ebc5 0b0b 	rsb	fp, r5, fp
   e3178:	45bb      	cmp	fp, r7
   e317a:	f0c0 80c9 	bcc.w	e3310 <mbedtls_x509_crt_parse_der+0x22c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
   e317e:	443d      	add	r5, r7
   e3180:	ebc8 0505 	rsb	r5, r8, r5
   e3184:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
   e3186:	4629      	mov	r1, r5
   e3188:	2001      	movs	r0, #1
   e318a:	f003 fcb7 	bl	e6afc <calloc>
   e318e:	4683      	mov	fp, r0
   e3190:	9006      	str	r0, [sp, #24]
   e3192:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
   e3194:	2800      	cmp	r0, #0
   e3196:	f000 80c2 	beq.w	e331e <mbedtls_x509_crt_parse_der+0x23a>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   e319a:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
   e319c:	1bed      	subs	r5, r5, r7
   e319e:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   e31a0:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
   e31a2:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   e31a4:	f003 fccf 	bl	e6b46 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
   e31a8:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e31aa:	2330      	movs	r3, #48	; 0x30
   e31ac:	4632      	mov	r2, r6
   e31ae:	4639      	mov	r1, r7
   e31b0:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
   e31b2:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e31b4:	f7f4 f87e 	bl	d72b4 <mbedtls_asn1_get_tag>
   e31b8:	4680      	mov	r8, r0
   e31ba:	b128      	cbz	r0, e31c8 <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   e31bc:	4620      	mov	r0, r4
   e31be:	f7ff ff38 	bl	e3032 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   e31c2:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
   e31c6:	e0b1      	b.n	e332c <mbedtls_x509_crt_parse_der+0x248>
    }

    end = p + len;
   e31c8:	9b05      	ldr	r3, [sp, #20]
   e31ca:	9e06      	ldr	r6, [sp, #24]
   e31cc:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
   e31ce:	6963      	ldr	r3, [r4, #20]
   e31d0:	1af3      	subs	r3, r6, r3
   e31d2:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e31d4:	aa17      	add	r2, sp, #92	; 0x5c
   e31d6:	23a0      	movs	r3, #160	; 0xa0
   e31d8:	4631      	mov	r1, r6
   e31da:	a806      	add	r0, sp, #24
   e31dc:	f7f4 f86a 	bl	d72b4 <mbedtls_asn1_get_tag>
   e31e0:	4605      	mov	r5, r0
   e31e2:	b128      	cbz	r0, e31f0 <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e31e4:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e31e8:	d114      	bne.n	e3214 <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
   e31ea:	f8c4 8018 	str.w	r8, [r4, #24]
   e31ee:	e014      	b.n	e321a <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
   e31f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e31f2:	9d06      	ldr	r5, [sp, #24]
   e31f4:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   e31f6:	f104 0218 	add.w	r2, r4, #24
   e31fa:	4629      	mov	r1, r5
   e31fc:	a806      	add	r0, sp, #24
   e31fe:	f7f4 f886 	bl	d730e <mbedtls_asn1_get_int>
   e3202:	b110      	cbz	r0, e320a <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   e3204:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
   e3208:	e004      	b.n	e3214 <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
   e320a:	9b06      	ldr	r3, [sp, #24]
   e320c:	429d      	cmp	r5, r3
   e320e:	d004      	beq.n	e321a <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e3210:	4d7b      	ldr	r5, [pc, #492]	; (e3400 <mbedtls_x509_crt_parse_der+0x31c>)
   e3212:	e0d5      	b.n	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   e3214:	2d00      	cmp	r5, #0
   e3216:	f040 80d3 	bne.w	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
   e321a:	f104 021c 	add.w	r2, r4, #28
   e321e:	4631      	mov	r1, r6
   e3220:	a806      	add	r0, sp, #24
   e3222:	f7fe fc27 	bl	e1a74 <mbedtls_x509_get_serial>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
   e3226:	4605      	mov	r5, r0
   e3228:	2800      	cmp	r0, #0
   e322a:	f040 80c9 	bne.w	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
   e322e:	f104 0828 	add.w	r8, r4, #40	; 0x28
   e3232:	ab0b      	add	r3, sp, #44	; 0x2c
   e3234:	4642      	mov	r2, r8
   e3236:	4631      	mov	r1, r6
   e3238:	a806      	add	r0, sp, #24
   e323a:	f7fe fc43 	bl	e1ac4 <mbedtls_x509_get_alg>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   e323e:	4605      	mov	r5, r0
   e3240:	2800      	cmp	r0, #0
   e3242:	f040 80bd 	bne.w	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
   e3246:	e085      	b.n	e3354 <mbedtls_x509_crt_parse_der+0x270>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
   e3248:	3301      	adds	r3, #1
   e324a:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
   e324c:	f504 7396 	add.w	r3, r4, #300	; 0x12c
   e3250:	9300      	str	r3, [sp, #0]
   e3252:	f504 7294 	add.w	r2, r4, #296	; 0x128
   e3256:	f204 1329 	addw	r3, r4, #297	; 0x129
   e325a:	a90b      	add	r1, sp, #44	; 0x2c
   e325c:	4640      	mov	r0, r8
   e325e:	f7fe fd85 	bl	e1d6c <mbedtls_x509_get_sig_alg>
   e3262:	4605      	mov	r5, r0
   e3264:	2800      	cmp	r0, #0
   e3266:	f040 80ab 	bne.w	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
   e326a:	9b06      	ldr	r3, [sp, #24]
   e326c:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e326e:	aa05      	add	r2, sp, #20
   e3270:	2330      	movs	r3, #48	; 0x30
   e3272:	4631      	mov	r1, r6
   e3274:	a806      	add	r0, sp, #24
   e3276:	f7f4 f81d 	bl	d72b4 <mbedtls_asn1_get_tag>
   e327a:	4605      	mov	r5, r0
   e327c:	2800      	cmp	r0, #0
   e327e:	d150      	bne.n	e3322 <mbedtls_x509_crt_parse_der+0x23e>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
   e3280:	9b05      	ldr	r3, [sp, #20]
   e3282:	9906      	ldr	r1, [sp, #24]
   e3284:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   e3288:	4419      	add	r1, r3
   e328a:	a806      	add	r0, sp, #24
   e328c:	f7fe fc22 	bl	e1ad4 <mbedtls_x509_get_name>
   e3290:	4605      	mov	r5, r0
   e3292:	2800      	cmp	r0, #0
   e3294:	f040 8094 	bne.w	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
   e3298:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   e329a:	9b06      	ldr	r3, [sp, #24]
   e329c:	1a9b      	subs	r3, r3, r2
   e329e:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e32a0:	aa17      	add	r2, sp, #92	; 0x5c
   e32a2:	2330      	movs	r3, #48	; 0x30
   e32a4:	4631      	mov	r1, r6
   e32a6:	a806      	add	r0, sp, #24
   e32a8:	f7f4 f804 	bl	d72b4 <mbedtls_asn1_get_tag>
   e32ac:	2800      	cmp	r0, #0
   e32ae:	d05a      	beq.n	e3366 <mbedtls_x509_crt_parse_der+0x282>
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
   e32b0:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
   e32b4:	f040 8084 	bne.w	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
   e32b8:	f10d 0868 	add.w	r8, sp, #104	; 0x68

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e32bc:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
   e32be:	f858 3d50 	ldr.w	r3, [r8, #-80]!
   e32c2:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   e32c4:	4631      	mov	r1, r6
   e32c6:	2330      	movs	r3, #48	; 0x30
   e32c8:	4640      	mov	r0, r8
   e32ca:	f7f3 fff3 	bl	d72b4 <mbedtls_asn1_get_tag>
   e32ce:	4605      	mov	r5, r0
   e32d0:	bb38      	cbnz	r0, e3322 <mbedtls_x509_crt_parse_der+0x23e>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   e32d2:	9b05      	ldr	r3, [sp, #20]
   e32d4:	2b00      	cmp	r3, #0
   e32d6:	d15f      	bne.n	e3398 <mbedtls_x509_crt_parse_der+0x2b4>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
   e32d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   e32da:	9b06      	ldr	r3, [sp, #24]
   e32dc:	1a9b      	subs	r3, r3, r2
   e32de:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
   e32e0:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
   e32e4:	4631      	mov	r1, r6
   e32e6:	4640      	mov	r0, r8
   e32e8:	f7f7 fd98 	bl	dae1c <mbedtls_pk_parse_subpubkey>
   e32ec:	4605      	mov	r5, r0
   e32ee:	2800      	cmp	r0, #0
   e32f0:	d166      	bne.n	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
   e32f2:	69a3      	ldr	r3, [r4, #24]
   e32f4:	3b02      	subs	r3, #2
   e32f6:	2b01      	cmp	r3, #1
   e32f8:	d958      	bls.n	e33ac <mbedtls_x509_crt_parse_der+0x2c8>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
   e32fa:	69a3      	ldr	r3, [r4, #24]
   e32fc:	3b02      	subs	r3, #2
   e32fe:	2b01      	cmp	r3, #1
   e3300:	d962      	bls.n	e33c8 <mbedtls_x509_crt_parse_der+0x2e4>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
   e3302:	69a3      	ldr	r3, [r4, #24]
   e3304:	2b03      	cmp	r3, #3
   e3306:	d06a      	beq.n	e33de <mbedtls_x509_crt_parse_der+0x2fa>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
   e3308:	9b06      	ldr	r3, [sp, #24]
   e330a:	429e      	cmp	r6, r3
   e330c:	f000 810e 	beq.w	e352c <mbedtls_x509_crt_parse_der+0x448>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
   e3310:	4620      	mov	r0, r4
   e3312:	f7ff fe8e 	bl	e3032 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e3316:	4d3b      	ldr	r5, [pc, #236]	; (e3404 <mbedtls_x509_crt_parse_der+0x320>)
   e3318:	e00b      	b.n	e3332 <mbedtls_x509_crt_parse_der+0x24e>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e331a:	4d3b      	ldr	r5, [pc, #236]	; (e3408 <mbedtls_x509_crt_parse_der+0x324>)
   e331c:	e009      	b.n	e3332 <mbedtls_x509_crt_parse_der+0x24e>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   e331e:	4d3b      	ldr	r5, [pc, #236]	; (e340c <mbedtls_x509_crt_parse_der+0x328>)
   e3320:	e007      	b.n	e3332 <mbedtls_x509_crt_parse_der+0x24e>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   e3322:	4620      	mov	r0, r4
   e3324:	f7ff fe85 	bl	e3032 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   e3328:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
   e332c:	2d00      	cmp	r5, #0
   e332e:	f000 81ff 	beq.w	e3730 <mbedtls_x509_crt_parse_der+0x64c>
    {
        if( prev )
   e3332:	f1b9 0f00 	cmp.w	r9, #0
   e3336:	d002      	beq.n	e333e <mbedtls_x509_crt_parse_der+0x25a>
            prev->next = NULL;
   e3338:	2300      	movs	r3, #0
   e333a:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
   e333e:	4554      	cmp	r4, sl
   e3340:	f000 81f6 	beq.w	e3730 <mbedtls_x509_crt_parse_der+0x64c>
            mbedtls_free( crt );
   e3344:	4620      	mov	r0, r4
   e3346:	f000 fe37 	bl	e3fb8 <free>
   e334a:	e1f1      	b.n	e3730 <mbedtls_x509_crt_parse_der+0x64c>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e334c:	4d2e      	ldr	r5, [pc, #184]	; (e3408 <mbedtls_x509_crt_parse_der+0x324>)
   e334e:	e1ef      	b.n	e3730 <mbedtls_x509_crt_parse_der+0x64c>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   e3350:	4d2e      	ldr	r5, [pc, #184]	; (e340c <mbedtls_x509_crt_parse_der+0x328>)
   e3352:	e1ed      	b.n	e3730 <mbedtls_x509_crt_parse_der+0x64c>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
   e3354:	69a3      	ldr	r3, [r4, #24]
   e3356:	2b02      	cmp	r3, #2
   e3358:	f67f af76 	bls.w	e3248 <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
   e335c:	4620      	mov	r0, r4
   e335e:	f7ff fe68 	bl	e3032 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   e3362:	4d2b      	ldr	r5, [pc, #172]	; (e3410 <mbedtls_x509_crt_parse_der+0x32c>)
   e3364:	e7e5      	b.n	e3332 <mbedtls_x509_crt_parse_der+0x24e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
   e3366:	9a06      	ldr	r2, [sp, #24]
   e3368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e336a:	eb02 0803 	add.w	r8, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
   e336e:	4641      	mov	r1, r8
   e3370:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   e3374:	a806      	add	r0, sp, #24
   e3376:	f7fe fc25 	bl	e1bc4 <mbedtls_x509_get_time>
   e337a:	4605      	mov	r5, r0
   e337c:	bb00      	cbnz	r0, e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
   e337e:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
   e3382:	4641      	mov	r1, r8
   e3384:	a806      	add	r0, sp, #24
   e3386:	f7fe fc1d 	bl	e1bc4 <mbedtls_x509_get_time>
   e338a:	4605      	mov	r5, r0
   e338c:	b9c0      	cbnz	r0, e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
        return( ret );

    if( *p != end )
   e338e:	9b06      	ldr	r3, [sp, #24]
   e3390:	4598      	cmp	r8, r3
   e3392:	d091      	beq.n	e32b8 <mbedtls_x509_crt_parse_der+0x1d4>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e3394:	4d1f      	ldr	r5, [pc, #124]	; (e3414 <mbedtls_x509_crt_parse_der+0x330>)
   e3396:	e013      	b.n	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   e3398:	9906      	ldr	r1, [sp, #24]
   e339a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   e339e:	4419      	add	r1, r3
   e33a0:	4640      	mov	r0, r8
   e33a2:	f7fe fb97 	bl	e1ad4 <mbedtls_x509_get_name>
   e33a6:	4605      	mov	r5, r0
   e33a8:	b950      	cbnz	r0, e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
   e33aa:	e795      	b.n	e32d8 <mbedtls_x509_crt_parse_der+0x1f4>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
   e33ac:	2301      	movs	r3, #1
   e33ae:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   e33b2:	4631      	mov	r1, r6
   e33b4:	4640      	mov	r0, r8
   e33b6:	f7fe feb9 	bl	e212c <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   e33ba:	4605      	mov	r5, r0
   e33bc:	2800      	cmp	r0, #0
   e33be:	d09c      	beq.n	e32fa <mbedtls_x509_crt_parse_der+0x216>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   e33c0:	4620      	mov	r0, r4
   e33c2:	f7ff fe36 	bl	e3032 <mbedtls_x509_crt_free>
   e33c6:	e7b1      	b.n	e332c <mbedtls_x509_crt_parse_der+0x248>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
   e33c8:	2302      	movs	r3, #2
   e33ca:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   e33ce:	4631      	mov	r1, r6
   e33d0:	4640      	mov	r0, r8
   e33d2:	f7fe feab 	bl	e212c <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   e33d6:	4605      	mov	r5, r0
   e33d8:	2800      	cmp	r0, #0
   e33da:	d092      	beq.n	e3302 <mbedtls_x509_crt_parse_der+0x21e>
   e33dc:	e7f0      	b.n	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
   e33de:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
   e33e2:	4631      	mov	r1, r6
   e33e4:	4640      	mov	r0, r8
   e33e6:	f7fe fce1 	bl	e1dac <mbedtls_x509_get_ext>
   e33ea:	4603      	mov	r3, r0
   e33ec:	b908      	cbnz	r0, e33f2 <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   e33ee:	4680      	mov	r8, r0
   e33f0:	e056      	b.n	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e33f2:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e33f6:	f040 808f 	bne.w	e3518 <mbedtls_x509_crt_parse_der+0x434>
   e33fa:	e785      	b.n	e3308 <mbedtls_x509_crt_parse_der+0x224>
   e33fc:	ffffde80 	.word	0xffffde80
   e3400:	ffffdd9a 	.word	0xffffdd9a
   e3404:	ffffde1a 	.word	0xffffde1a
   e3408:	ffffd800 	.word	0xffffd800
   e340c:	ffffd780 	.word	0xffffd780
   e3410:	ffffda80 	.word	0xffffda80
   e3414:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e3418:	2330      	movs	r3, #48	; 0x30
   e341a:	aa07      	add	r2, sp, #28
   e341c:	4631      	mov	r1, r6
   e341e:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   e3420:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   e3424:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
   e3428:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
   e342c:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
   e3430:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e3434:	f7f3 ff3e 	bl	d72b4 <mbedtls_asn1_get_tag>
   e3438:	2800      	cmp	r0, #0
   e343a:	d16b      	bne.n	e3514 <mbedtls_x509_crt_parse_der+0x430>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
   e343c:	9b06      	ldr	r3, [sp, #24]
   e343e:	9d07      	ldr	r5, [sp, #28]
   e3440:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
   e3442:	781b      	ldrb	r3, [r3, #0]
   e3444:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
   e3446:	aa15      	add	r2, sp, #84	; 0x54
   e3448:	2306      	movs	r3, #6
   e344a:	4631      	mov	r1, r6
   e344c:	a806      	add	r0, sp, #24
   e344e:	f7f3 ff31 	bl	d72b4 <mbedtls_asn1_get_tag>
   e3452:	2800      	cmp	r0, #0
   e3454:	d15e      	bne.n	e3514 <mbedtls_x509_crt_parse_der+0x430>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
   e3456:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
   e3458:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
   e345a:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
   e345c:	4413      	add	r3, r2
   e345e:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
   e3460:	1af3      	subs	r3, r6, r3
   e3462:	2b00      	cmp	r3, #0
   e3464:	dd50      	ble.n	e3508 <mbedtls_x509_crt_parse_der+0x424>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   e3466:	aa08      	add	r2, sp, #32
   e3468:	4629      	mov	r1, r5
   e346a:	a806      	add	r0, sp, #24
   e346c:	f7f3 ff36 	bl	d72dc <mbedtls_asn1_get_bool>
   e3470:	b9d0      	cbnz	r0, e34a8 <mbedtls_x509_crt_parse_der+0x3c4>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
   e3472:	2304      	movs	r3, #4
   e3474:	aa07      	add	r2, sp, #28
   e3476:	4629      	mov	r1, r5
   e3478:	a806      	add	r0, sp, #24
   e347a:	f7f3 ff1b 	bl	d72b4 <mbedtls_asn1_get_tag>
   e347e:	2800      	cmp	r0, #0
   e3480:	d148      	bne.n	e3514 <mbedtls_x509_crt_parse_der+0x430>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
   e3482:	9b07      	ldr	r3, [sp, #28]
   e3484:	9a06      	ldr	r2, [sp, #24]
   e3486:	4413      	add	r3, r2
   e3488:	429d      	cmp	r5, r3
   e348a:	d141      	bne.n	e3510 <mbedtls_x509_crt_parse_der+0x42c>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
   e348c:	a909      	add	r1, sp, #36	; 0x24
   e348e:	a814      	add	r0, sp, #80	; 0x50
   e3490:	f7f6 fc28 	bl	d9ce4 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
   e3494:	b160      	cbz	r0, e34b0 <mbedtls_x509_crt_parse_der+0x3cc>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
   e3496:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
   e3498:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
   e349a:	2b00      	cmp	r3, #0
   e349c:	f040 8140 	bne.w	e3720 <mbedtls_x509_crt_parse_der+0x63c>
            return( 0 );

        return( ret );
    }

    while( *p < end )
   e34a0:	9b06      	ldr	r3, [sp, #24]
   e34a2:	429e      	cmp	r6, r3
   e34a4:	d8b8      	bhi.n	e3418 <mbedtls_x509_crt_parse_der+0x334>
   e34a6:	e031      	b.n	e350c <mbedtls_x509_crt_parse_der+0x428>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   e34a8:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e34ac:	d0e1      	beq.n	e3472 <mbedtls_x509_crt_parse_der+0x38e>
   e34ae:	e031      	b.n	e3514 <mbedtls_x509_crt_parse_der+0x430>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
   e34b0:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   e34b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e34b6:	ea11 0302 	ands.w	r3, r1, r2
   e34ba:	f040 8133 	bne.w	e3724 <mbedtls_x509_crt_parse_der+0x640>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
   e34be:	4311      	orrs	r1, r2

        switch( ext_type )
   e34c0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
   e34c4:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8

        switch( ext_type )
   e34c8:	d069      	beq.n	e359e <mbedtls_x509_crt_parse_der+0x4ba>
   e34ca:	dc60      	bgt.n	e358e <mbedtls_x509_crt_parse_der+0x4aa>
   e34cc:	2a04      	cmp	r2, #4
   e34ce:	f000 80a6 	beq.w	e361e <mbedtls_x509_crt_parse_der+0x53a>
   e34d2:	2a20      	cmp	r2, #32
   e34d4:	f040 8128 	bne.w	e3728 <mbedtls_x509_crt_parse_der+0x644>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e34d8:	2330      	movs	r3, #48	; 0x30
   e34da:	aa0a      	add	r2, sp, #40	; 0x28
   e34dc:	4629      	mov	r1, r5
   e34de:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   e34e0:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e34e4:	f7f3 fee6 	bl	d72b4 <mbedtls_asn1_get_tag>
   e34e8:	2800      	cmp	r0, #0
   e34ea:	f040 80d2 	bne.w	e3692 <mbedtls_x509_crt_parse_der+0x5ae>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
   e34ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e34f0:	9a06      	ldr	r2, [sp, #24]
   e34f2:	4413      	add	r3, r2
   e34f4:	429d      	cmp	r5, r3
   e34f6:	d10b      	bne.n	e3510 <mbedtls_x509_crt_parse_der+0x42c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
   e34f8:	9a06      	ldr	r2, [sp, #24]
   e34fa:	4295      	cmp	r5, r2
   e34fc:	f240 80f2 	bls.w	e36e4 <mbedtls_x509_crt_parse_der+0x600>
    {
        if( ( end - *p ) < 1 )
   e3500:	1aab      	subs	r3, r5, r2
   e3502:	2b00      	cmp	r3, #0
   e3504:	f300 80ba 	bgt.w	e367c <mbedtls_x509_crt_parse_der+0x598>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   e3508:	4b8b      	ldr	r3, [pc, #556]	; (e3738 <mbedtls_x509_crt_parse_der+0x654>)
   e350a:	e008      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
   e350c:	f43f aefc 	beq.w	e3308 <mbedtls_x509_crt_parse_der+0x224>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e3510:	4b8a      	ldr	r3, [pc, #552]	; (e373c <mbedtls_x509_crt_parse_der+0x658>)
   e3512:	e004      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   e3514:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
   e3518:	2b00      	cmp	r3, #0
   e351a:	f43f aef5 	beq.w	e3308 <mbedtls_x509_crt_parse_der+0x224>
        {
            mbedtls_x509_crt_free( crt );
   e351e:	4620      	mov	r0, r4
   e3520:	9303      	str	r3, [sp, #12]
   e3522:	f7ff fd86 	bl	e3032 <mbedtls_x509_crt_free>
   e3526:	9b03      	ldr	r3, [sp, #12]
   e3528:	461d      	mov	r5, r3
   e352a:	e6ff      	b.n	e332c <mbedtls_x509_crt_parse_der+0x248>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   e352c:	ab0e      	add	r3, sp, #56	; 0x38
   e352e:	aa11      	add	r2, sp, #68	; 0x44
   e3530:	4639      	mov	r1, r7
   e3532:	a806      	add	r0, sp, #24
   e3534:	f7fe fac6 	bl	e1ac4 <mbedtls_x509_get_alg>
   e3538:	4605      	mov	r5, r0
   e353a:	2800      	cmp	r0, #0
   e353c:	f47f af40 	bne.w	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
   e3540:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e3542:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e3544:	429a      	cmp	r2, r3
   e3546:	d10e      	bne.n	e3566 <mbedtls_x509_crt_parse_der+0x482>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   e3548:	9913      	ldr	r1, [sp, #76]	; 0x4c
   e354a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e354c:	f003 faec 	bl	e6b28 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
   e3550:	b948      	cbnz	r0, e3566 <mbedtls_x509_crt_parse_der+0x482>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
   e3552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   e3554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e3556:	429a      	cmp	r2, r3
   e3558:	d105      	bne.n	e3566 <mbedtls_x509_crt_parse_der+0x482>
        sig_params1.len != sig_params2.len ||
   e355a:	b14a      	cbz	r2, e3570 <mbedtls_x509_crt_parse_der+0x48c>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   e355c:	9910      	ldr	r1, [sp, #64]	; 0x40
   e355e:	980d      	ldr	r0, [sp, #52]	; 0x34
   e3560:	f003 fae2 	bl	e6b28 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
   e3564:	b120      	cbz	r0, e3570 <mbedtls_x509_crt_parse_der+0x48c>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
   e3566:	4620      	mov	r0, r4
   e3568:	f7ff fd63 	bl	e3032 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   e356c:	4d74      	ldr	r5, [pc, #464]	; (e3740 <mbedtls_x509_crt_parse_der+0x65c>)
   e356e:	e6e0      	b.n	e3332 <mbedtls_x509_crt_parse_der+0x24e>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
   e3570:	f504 728e 	add.w	r2, r4, #284	; 0x11c
   e3574:	4639      	mov	r1, r7
   e3576:	a806      	add	r0, sp, #24
   e3578:	f7fe fbda 	bl	e1d30 <mbedtls_x509_get_sig>
   e357c:	4605      	mov	r5, r0
   e357e:	2800      	cmp	r0, #0
   e3580:	f47f af1e 	bne.w	e33c0 <mbedtls_x509_crt_parse_der+0x2dc>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( p != end )
   e3584:	9b06      	ldr	r3, [sp, #24]
   e3586:	429f      	cmp	r7, r3
   e3588:	f000 80d2 	beq.w	e3730 <mbedtls_x509_crt_parse_der+0x64c>
   e358c:	e6c0      	b.n	e3310 <mbedtls_x509_crt_parse_der+0x22c>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
   e358e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   e3592:	d064      	beq.n	e365e <mbedtls_x509_crt_parse_der+0x57a>
   e3594:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   e3598:	f000 80ab 	beq.w	e36f2 <mbedtls_x509_crt_parse_der+0x60e>
   e359c:	e0c4      	b.n	e3728 <mbedtls_x509_crt_parse_der+0x644>
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   e359e:	f504 7280 	add.w	r2, r4, #256	; 0x100
   e35a2:	9203      	str	r2, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
   e35a4:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
   e35a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e35ac:	aa17      	add	r2, sp, #92	; 0x5c
   e35ae:	2330      	movs	r3, #48	; 0x30
   e35b0:	4629      	mov	r1, r5
   e35b2:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   e35b4:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   e35b8:	f7f3 fe7c 	bl	d72b4 <mbedtls_asn1_get_tag>
   e35bc:	2800      	cmp	r0, #0
   e35be:	d168      	bne.n	e3692 <mbedtls_x509_crt_parse_der+0x5ae>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
   e35c0:	9b06      	ldr	r3, [sp, #24]
   e35c2:	429d      	cmp	r5, r3
   e35c4:	f43f af6c 	beq.w	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
   e35c8:	465a      	mov	r2, fp
   e35ca:	4629      	mov	r1, r5
   e35cc:	a806      	add	r0, sp, #24
   e35ce:	f7f3 fe85 	bl	d72dc <mbedtls_asn1_get_bool>
   e35d2:	b178      	cbz	r0, e35f4 <mbedtls_x509_crt_parse_der+0x510>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   e35d4:	f110 0f62 	cmn.w	r0, #98	; 0x62
   e35d8:	d15b      	bne.n	e3692 <mbedtls_x509_crt_parse_der+0x5ae>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
   e35da:	465a      	mov	r2, fp
   e35dc:	4629      	mov	r1, r5
   e35de:	a806      	add	r0, sp, #24
   e35e0:	f7f3 fe95 	bl	d730e <mbedtls_asn1_get_int>

        if( ret != 0 )
   e35e4:	2800      	cmp	r0, #0
   e35e6:	d154      	bne.n	e3692 <mbedtls_x509_crt_parse_der+0x5ae>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
   e35e8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   e35ec:	b113      	cbz	r3, e35f4 <mbedtls_x509_crt_parse_der+0x510>
            *ca_istrue = 1;
   e35ee:	2301      	movs	r3, #1
   e35f0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
   e35f4:	9b06      	ldr	r3, [sp, #24]
   e35f6:	429d      	cmp	r5, r3
   e35f8:	f43f af52 	beq.w	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
   e35fc:	9a03      	ldr	r2, [sp, #12]
   e35fe:	4629      	mov	r1, r5
   e3600:	a806      	add	r0, sp, #24
   e3602:	f7f3 fe84 	bl	d730e <mbedtls_asn1_get_int>
   e3606:	2800      	cmp	r0, #0
   e3608:	d143      	bne.n	e3692 <mbedtls_x509_crt_parse_der+0x5ae>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
   e360a:	9b06      	ldr	r3, [sp, #24]
   e360c:	429d      	cmp	r5, r3
   e360e:	f47f af7f 	bne.w	e3510 <mbedtls_x509_crt_parse_der+0x42c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
   e3612:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   e3616:	3301      	adds	r3, #1
   e3618:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   e361c:	e740      	b.n	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   e361e:	aa17      	add	r2, sp, #92	; 0x5c
   e3620:	4629      	mov	r1, r5
   e3622:	a806      	add	r0, sp, #24
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   e3624:	9317      	str	r3, [sp, #92]	; 0x5c
   e3626:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   e362a:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   e362c:	f7f3 fea6 	bl	d737c <mbedtls_asn1_get_bitstring>
   e3630:	2800      	cmp	r0, #0
   e3632:	d168      	bne.n	e3706 <mbedtls_x509_crt_parse_der+0x622>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
   e3634:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e3636:	2a00      	cmp	r2, #0
   e3638:	d078      	beq.n	e372c <mbedtls_x509_crt_parse_der+0x648>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
   e363a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   e363e:	9d19      	ldr	r5, [sp, #100]	; 0x64
   e3640:	5c2b      	ldrb	r3, [r5, r0]
   e3642:	00c1      	lsls	r1, r0, #3
   e3644:	408b      	lsls	r3, r1
   e3646:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   e364a:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   e364c:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   e364e:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   e3650:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   e3654:	f43f af24 	beq.w	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
   e3658:	2804      	cmp	r0, #4
   e365a:	d1f1      	bne.n	e3640 <mbedtls_x509_crt_parse_der+0x55c>
   e365c:	e720      	b.n	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
   e365e:	2306      	movs	r3, #6
   e3660:	f504 7284 	add.w	r2, r4, #264	; 0x108
   e3664:	4629      	mov	r1, r5
   e3666:	a806      	add	r0, sp, #24
   e3668:	f7f3 fec1 	bl	d73ee <mbedtls_asn1_get_sequence_of>
   e366c:	2800      	cmp	r0, #0
   e366e:	d14a      	bne.n	e3706 <mbedtls_x509_crt_parse_der+0x622>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
   e3670:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   e3674:	2b00      	cmp	r3, #0
   e3676:	f47f af13 	bne.w	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
   e367a:	e057      	b.n	e372c <mbedtls_x509_crt_parse_der+0x648>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
   e367c:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
   e3680:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   e3682:	4629      	mov	r1, r5
   e3684:	aa17      	add	r2, sp, #92	; 0x5c
   e3686:	a806      	add	r0, sp, #24
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
   e3688:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   e368a:	f7f3 fdc1 	bl	d7210 <mbedtls_asn1_get_len>
   e368e:	9b03      	ldr	r3, [sp, #12]
   e3690:	b128      	cbz	r0, e369e <mbedtls_x509_crt_parse_der+0x5ba>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   e3692:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   e3696:	2b00      	cmp	r3, #0
   e3698:	f43f af02 	beq.w	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
   e369c:	e73f      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>
        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
   e369e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   e36a2:	2a80      	cmp	r2, #128	; 0x80
   e36a4:	d13c      	bne.n	e3720 <mbedtls_x509_crt_parse_der+0x63c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
   e36a6:	2b82      	cmp	r3, #130	; 0x82
   e36a8:	d002      	beq.n	e36b0 <mbedtls_x509_crt_parse_der+0x5cc>
        {
            *p += tag_len;
   e36aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e36ac:	9a06      	ldr	r2, [sp, #24]
   e36ae:	e016      	b.n	e36de <mbedtls_x509_crt_parse_der+0x5fa>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
   e36b0:	f8db 3008 	ldr.w	r3, [fp, #8]
   e36b4:	b153      	cbz	r3, e36cc <mbedtls_x509_crt_parse_der+0x5e8>
        {
            if( cur->next != NULL )
   e36b6:	f8db 300c 	ldr.w	r3, [fp, #12]
   e36ba:	bb9b      	cbnz	r3, e3724 <mbedtls_x509_crt_parse_der+0x640>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
   e36bc:	2110      	movs	r1, #16
   e36be:	2001      	movs	r0, #1
   e36c0:	f003 fa1c 	bl	e6afc <calloc>
   e36c4:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
   e36c8:	b188      	cbz	r0, e36ee <mbedtls_x509_crt_parse_der+0x60a>
   e36ca:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
   e36cc:	2382      	movs	r3, #130	; 0x82
   e36ce:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
   e36d2:	9a06      	ldr	r2, [sp, #24]
   e36d4:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
   e36d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e36da:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
   e36de:	4413      	add	r3, r2
   e36e0:	9306      	str	r3, [sp, #24]
   e36e2:	e709      	b.n	e34f8 <mbedtls_x509_crt_parse_der+0x414>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   e36e4:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
   e36e8:	f43f aeda 	beq.w	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
   e36ec:	e710      	b.n	e3510 <mbedtls_x509_crt_parse_der+0x42c>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   e36ee:	4b15      	ldr	r3, [pc, #84]	; (e3744 <mbedtls_x509_crt_parse_der+0x660>)
   e36f0:	e715      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   e36f2:	aa17      	add	r2, sp, #92	; 0x5c
   e36f4:	4629      	mov	r1, r5
   e36f6:	a806      	add	r0, sp, #24
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   e36f8:	9317      	str	r3, [sp, #92]	; 0x5c
   e36fa:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   e36fe:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   e3700:	f7f3 fe3c 	bl	d737c <mbedtls_asn1_get_bitstring>
   e3704:	b120      	cbz	r0, e3710 <mbedtls_x509_crt_parse_der+0x62c>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
   e3706:	f5b0 5314 	subs.w	r3, r0, #9472	; 0x2500
   e370a:	f43f aec9 	beq.w	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
   e370e:	e706      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
   e3710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3712:	2b01      	cmp	r3, #1
   e3714:	d10a      	bne.n	e372c <mbedtls_x509_crt_parse_der+0x648>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
   e3716:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e3718:	781b      	ldrb	r3, [r3, #0]
   e371a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
   e371e:	e6bf      	b.n	e34a0 <mbedtls_x509_crt_parse_der+0x3bc>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e3720:	4b09      	ldr	r3, [pc, #36]	; (e3748 <mbedtls_x509_crt_parse_der+0x664>)
   e3722:	e6fc      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
   e3724:	4b09      	ldr	r3, [pc, #36]	; (e374c <mbedtls_x509_crt_parse_der+0x668>)
   e3726:	e6fa      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
   e3728:	4b09      	ldr	r3, [pc, #36]	; (e3750 <mbedtls_x509_crt_parse_der+0x66c>)
   e372a:	e6f8      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   e372c:	4b09      	ldr	r3, [pc, #36]	; (e3754 <mbedtls_x509_crt_parse_der+0x670>)
   e372e:	e6f6      	b.n	e351e <mbedtls_x509_crt_parse_der+0x43a>

        return( ret );
    }

    return( 0 );
}
   e3730:	4628      	mov	r0, r5
   e3732:	b01b      	add	sp, #108	; 0x6c
   e3734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3738:	ffffdaa0 	.word	0xffffdaa0
   e373c:	ffffda9a 	.word	0xffffda9a
   e3740:	ffffd980 	.word	0xffffd980
   e3744:	ffffda96 	.word	0xffffda96
   e3748:	ffffda9e 	.word	0xffffda9e
   e374c:	ffffdb00 	.word	0xffffdb00
   e3750:	ffffdf80 	.word	0xffffdf80
   e3754:	ffffda9c 	.word	0xffffda9c

000e3758 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
   e3758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e375c:	460d      	mov	r5, r1
   e375e:	b088      	sub	sp, #32
   e3760:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
   e3762:	4681      	mov	r9, r0
   e3764:	2800      	cmp	r0, #0
   e3766:	d054      	beq.n	e3812 <mbedtls_x509_crt_parse+0xba>
   e3768:	2900      	cmp	r1, #0
   e376a:	d052      	beq.n	e3812 <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   e376c:	2a00      	cmp	r2, #0
   e376e:	d054      	beq.n	e381a <mbedtls_x509_crt_parse+0xc2>
   e3770:	188b      	adds	r3, r1, r2
   e3772:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   e3776:	2c00      	cmp	r4, #0
   e3778:	d14f      	bne.n	e381a <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
   e377a:	492c      	ldr	r1, [pc, #176]	; (e382c <mbedtls_x509_crt_parse+0xd4>)
   e377c:	4628      	mov	r0, r5
   e377e:	f003 fa7c 	bl	e6c7a <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   e3782:	2800      	cmp	r0, #0
   e3784:	d049      	beq.n	e381a <mbedtls_x509_crt_parse+0xc2>
   e3786:	46a0      	mov	r8, r4
   e3788:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
   e378a:	2f01      	cmp	r7, #1
   e378c:	d938      	bls.n	e3800 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
   e378e:	a805      	add	r0, sp, #20
   e3790:	f7f6 fb76 	bl	d9e80 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
   e3794:	ab04      	add	r3, sp, #16
   e3796:	9302      	str	r3, [sp, #8]
   e3798:	2300      	movs	r3, #0
   e379a:	9301      	str	r3, [sp, #4]
   e379c:	9300      	str	r3, [sp, #0]
   e379e:	4a24      	ldr	r2, [pc, #144]	; (e3830 <mbedtls_x509_crt_parse+0xd8>)
   e37a0:	4922      	ldr	r1, [pc, #136]	; (e382c <mbedtls_x509_crt_parse+0xd4>)
   e37a2:	462b      	mov	r3, r5
   e37a4:	a805      	add	r0, sp, #20
   e37a6:	f7f6 fb71 	bl	d9e8c <mbedtls_pem_read_buffer>
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );

            if( ret == 0 )
   e37aa:	4606      	mov	r6, r0
   e37ac:	b968      	cbnz	r0, e37ca <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
   e37ae:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   e37b0:	9a06      	ldr	r2, [sp, #24]
   e37b2:	9905      	ldr	r1, [sp, #20]
   e37b4:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
   e37b6:	1aff      	subs	r7, r7, r3
                buf += use_len;
   e37b8:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   e37ba:	f7ff fc93 	bl	e30e4 <mbedtls_x509_crt_parse_der>
   e37be:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
   e37c0:	a805      	add	r0, sp, #20
   e37c2:	f7f6 fbf1 	bl	d9fa8 <mbedtls_pem_free>

            if( ret != 0 )
   e37c6:	b96e      	cbnz	r6, e37e4 <mbedtls_x509_crt_parse+0x8c>
   e37c8:	e015      	b.n	e37f6 <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
   e37ca:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
   e37ce:	d015      	beq.n	e37fc <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   e37d0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   e37d4:	d014      	beq.n	e3800 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
   e37d6:	a805      	add	r0, sp, #20
   e37d8:	f7f6 fbe6 	bl	d9fa8 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
   e37dc:	9b04      	ldr	r3, [sp, #16]
   e37de:	1aff      	subs	r7, r7, r3
                buf += use_len;
   e37e0:	441d      	add	r5, r3
   e37e2:	e002      	b.n	e37ea <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
   e37e4:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
   e37e8:	d008      	beq.n	e37fc <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
   e37ea:	f1b8 0f00 	cmp.w	r8, #0
   e37ee:	bf08      	it	eq
   e37f0:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
   e37f2:	3401      	adds	r4, #1
                continue;
   e37f4:	e7c9      	b.n	e378a <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
   e37f6:	f04f 0a01 	mov.w	sl, #1
   e37fa:	e7c6      	b.n	e378a <mbedtls_x509_crt_parse+0x32>
   e37fc:	4630      	mov	r0, r6
   e37fe:	e011      	b.n	e3824 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
   e3800:	f1ba 0f00 	cmp.w	sl, #0
   e3804:	d107      	bne.n	e3816 <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
   e3806:	480b      	ldr	r0, [pc, #44]	; (e3834 <mbedtls_x509_crt_parse+0xdc>)
   e3808:	f1b8 0f00 	cmp.w	r8, #0
   e380c:	bf18      	it	ne
   e380e:	4640      	movne	r0, r8
   e3810:	e008      	b.n	e3824 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   e3812:	4809      	ldr	r0, [pc, #36]	; (e3838 <mbedtls_x509_crt_parse+0xe0>)
   e3814:	e006      	b.n	e3824 <mbedtls_x509_crt_parse+0xcc>
   e3816:	4620      	mov	r0, r4
   e3818:	e004      	b.n	e3824 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   e381a:	463a      	mov	r2, r7
   e381c:	4629      	mov	r1, r5
   e381e:	4648      	mov	r0, r9
   e3820:	f7ff fc60 	bl	e30e4 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
   e3824:	b008      	add	sp, #32
   e3826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e382a:	bf00      	nop
   e382c:	000e9286 	.word	0x000e9286
   e3830:	000e92a2 	.word	0x000e92a2
   e3834:	ffffd880 	.word	0xffffd880
   e3838:	ffffd800 	.word	0xffffd800

000e383c <_Z14base64_enc_leni>:
	return decLen;
}

int base64_enc_len(int plainLen) {
	int n = plainLen;
	return (n + 2 - ((n + 2) % 3)) / 3 * 4;
   e383c:	2303      	movs	r3, #3
   e383e:	3002      	adds	r0, #2
   e3840:	fb90 f0f3 	sdiv	r0, r0, r3
   e3844:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   e3848:	fb90 f0f3 	sdiv	r0, r0, r3
}
   e384c:	0080      	lsls	r0, r0, #2
   e384e:	4770      	bx	lr

000e3850 <_Z14base64_dec_lenPci>:

int base64_dec_len(char * input, int inputLen) {
   e3850:	4408      	add	r0, r1
	int i = 0;
	int numEq = 0;
   e3852:	2200      	movs	r2, #0
	for(i = inputLen - 1; input[i] == '='; i--) {
   e3854:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   e3858:	2b3d      	cmp	r3, #61	; 0x3d
   e385a:	d101      	bne.n	e3860 <_Z14base64_dec_lenPci+0x10>
		numEq++;
   e385c:	3201      	adds	r2, #1
}

int base64_dec_len(char * input, int inputLen) {
	int i = 0;
	int numEq = 0;
	for(i = inputLen - 1; input[i] == '='; i--) {
   e385e:	e7f9      	b.n	e3854 <_Z14base64_dec_lenPci+0x4>
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
   e3860:	2306      	movs	r3, #6
   e3862:	4359      	muls	r1, r3
   e3864:	2008      	movs	r0, #8
   e3866:	fb91 f0f0 	sdiv	r0, r1, r0
}
   e386a:	1a80      	subs	r0, r0, r2
   e386c:	4770      	bx	lr

000e386e <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(unsigned char * a4, unsigned char * a3) {
	a4[0] = (a3[0] & 0xfc) >> 2;
   e386e:	780b      	ldrb	r3, [r1, #0]
   e3870:	089b      	lsrs	r3, r3, #2
   e3872:	7003      	strb	r3, [r0, #0]
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
   e3874:	780b      	ldrb	r3, [r1, #0]
   e3876:	784a      	ldrb	r2, [r1, #1]
   e3878:	011b      	lsls	r3, r3, #4
   e387a:	f003 0330 	and.w	r3, r3, #48	; 0x30
   e387e:	eb03 1312 	add.w	r3, r3, r2, lsr #4
   e3882:	7043      	strb	r3, [r0, #1]
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
   e3884:	784b      	ldrb	r3, [r1, #1]
   e3886:	788a      	ldrb	r2, [r1, #2]
   e3888:	009b      	lsls	r3, r3, #2
   e388a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   e388e:	eb03 1392 	add.w	r3, r3, r2, lsr #6
   e3892:	7083      	strb	r3, [r0, #2]
	a4[3] = (a3[2] & 0x3f);
   e3894:	788b      	ldrb	r3, [r1, #2]
   e3896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   e389a:	70c3      	strb	r3, [r0, #3]
   e389c:	4770      	bx	lr
	...

000e38a0 <_Z13base64_encodePcS_i>:
/* 'Private' declarations */
inline void a3_to_a4(unsigned char * a4, unsigned char * a3);
inline void a4_to_a3(unsigned char * a3, unsigned char * a4);
inline unsigned char b64_lookup(char c);

int base64_encode(char *output, char *input, int inputLen) {
   e38a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int i = 0, j = 0;
	int encLen = 0;
   e38a4:	2400      	movs	r4, #0
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
   e38a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; e394c <_Z13base64_encodePcS_i+0xac>
/* 'Private' declarations */
inline void a3_to_a4(unsigned char * a4, unsigned char * a3);
inline void a4_to_a3(unsigned char * a3, unsigned char * a4);
inline unsigned char b64_lookup(char c);

int base64_encode(char *output, char *input, int inputLen) {
   e38aa:	4606      	mov	r6, r0
   e38ac:	460f      	mov	r7, r1
   e38ae:	eb01 0802 	add.w	r8, r1, r2
	int i = 0, j = 0;
   e38b2:	4625      	mov	r5, r4
	int encLen = 0;
	unsigned char a3[3];
	unsigned char a4[4];

	while(inputLen--) {
   e38b4:	4547      	cmp	r7, r8
   e38b6:	d01c      	beq.n	e38f2 <_Z13base64_encodePcS_i+0x52>
		a3[i++] = *(input++);
   e38b8:	ab02      	add	r3, sp, #8
   e38ba:	1c69      	adds	r1, r5, #1
   e38bc:	442b      	add	r3, r5
   e38be:	f817 2b01 	ldrb.w	r2, [r7], #1
   e38c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		if(i == 3) {
   e38c6:	2903      	cmp	r1, #3
   e38c8:	d001      	beq.n	e38ce <_Z13base64_encodePcS_i+0x2e>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
   e38ca:	460d      	mov	r5, r1
   e38cc:	e7f2      	b.n	e38b4 <_Z13base64_encodePcS_i+0x14>
	unsigned char a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
   e38ce:	ad01      	add	r5, sp, #4
   e38d0:	4669      	mov	r1, sp
   e38d2:	4628      	mov	r0, r5
   e38d4:	f7ff ffcb 	bl	e386e <_Z8a3_to_a4PhS_>
   e38d8:	1931      	adds	r1, r6, r4

			for(i = 0; i < 4; i++) {
   e38da:	2300      	movs	r3, #0
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
   e38dc:	5cea      	ldrb	r2, [r5, r3]
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
   e38de:	3301      	adds	r3, #1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
   e38e0:	f819 2002 	ldrb.w	r2, [r9, r2]
   e38e4:	f801 2b01 	strb.w	r2, [r1], #1
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
   e38e8:	2b04      	cmp	r3, #4
   e38ea:	d1f7      	bne.n	e38dc <_Z13base64_encodePcS_i+0x3c>
   e38ec:	3404      	adds	r4, #4
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
   e38ee:	2100      	movs	r1, #0
   e38f0:	e7eb      	b.n	e38ca <_Z13base64_encodePcS_i+0x2a>
		}
	}

	if(i) {
   e38f2:	b325      	cbz	r5, e393e <_Z13base64_encodePcS_i+0x9e>
   e38f4:	4669      	mov	r1, sp
   e38f6:	194b      	adds	r3, r1, r5
		for(j = i; j < 3; j++) {
			a3[j] = '\0';
   e38f8:	2200      	movs	r2, #0
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
   e38fa:	1a58      	subs	r0, r3, r1
   e38fc:	2802      	cmp	r0, #2
   e38fe:	dc02      	bgt.n	e3906 <_Z13base64_encodePcS_i+0x66>
			a3[j] = '\0';
   e3900:	f803 2b01 	strb.w	r2, [r3], #1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
   e3904:	e7f9      	b.n	e38fa <_Z13base64_encodePcS_i+0x5a>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
   e3906:	af01      	add	r7, sp, #4
   e3908:	4638      	mov	r0, r7
   e390a:	f7ff ffb0 	bl	e386e <_Z8a3_to_a4PhS_>

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
   e390e:	480f      	ldr	r0, [pc, #60]	; (e394c <_Z13base64_encodePcS_i+0xac>)
   e3910:	1932      	adds	r2, r6, r4
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
   e3912:	2300      	movs	r3, #0
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
   e3914:	5cf9      	ldrb	r1, [r7, r3]
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
   e3916:	3301      	adds	r3, #1
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
   e3918:	5c41      	ldrb	r1, [r0, r1]
   e391a:	f802 1b01 	strb.w	r1, [r2], #1
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
   e391e:	429d      	cmp	r5, r3
   e3920:	daf8      	bge.n	e3914 <_Z13base64_encodePcS_i+0x74>
   e3922:	3401      	adds	r4, #1
   e3924:	442c      	add	r4, r5
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
   e3926:	1bab      	subs	r3, r5, r6
   e3928:	1932      	adds	r2, r6, r4
   e392a:	1b1b      	subs	r3, r3, r4
			output[encLen++] = '=';
   e392c:	213d      	movs	r1, #61	; 0x3d

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
   e392e:	1898      	adds	r0, r3, r2
   e3930:	2802      	cmp	r0, #2
   e3932:	eba2 0406 	sub.w	r4, r2, r6
   e3936:	dc02      	bgt.n	e393e <_Z13base64_encodePcS_i+0x9e>
			output[encLen++] = '=';
   e3938:	f802 1b01 	strb.w	r1, [r2], #1

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
   e393c:	e7f7      	b.n	e392e <_Z13base64_encodePcS_i+0x8e>
			output[encLen++] = '=';
		}
	}
	output[encLen] = '\0';
   e393e:	2300      	movs	r3, #0
	return encLen;
}
   e3940:	4620      	mov	r0, r4

		while((i++ < 3)) {
			output[encLen++] = '=';
		}
	}
	output[encLen] = '\0';
   e3942:	5533      	strb	r3, [r6, r4]
	return encLen;
}
   e3944:	b003      	add	sp, #12
   e3946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e394a:	bf00      	nop
   e394c:	000e96b0 	.word	0x000e96b0

000e3950 <_Z8a4_to_a3PhS_>:
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
	a4[3] = (a3[2] & 0x3f);
}

inline void a4_to_a3(unsigned char * a3, unsigned char * a4) {
	a3[0] = (a4[0] << 2) + ((a4[1] & 0x30) >> 4);
   e3950:	784b      	ldrb	r3, [r1, #1]
   e3952:	780a      	ldrb	r2, [r1, #0]
   e3954:	f3c3 1301 	ubfx	r3, r3, #4, #2
   e3958:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   e395c:	7003      	strb	r3, [r0, #0]
	a3[1] = ((a4[1] & 0xf) << 4) + ((a4[2] & 0x3c) >> 2);
   e395e:	788b      	ldrb	r3, [r1, #2]
   e3960:	784a      	ldrb	r2, [r1, #1]
   e3962:	f3c3 0383 	ubfx	r3, r3, #2, #4
   e3966:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   e396a:	7043      	strb	r3, [r0, #1]
	a3[2] = ((a4[2] & 0x3) << 6) + a4[3];
   e396c:	788a      	ldrb	r2, [r1, #2]
   e396e:	78cb      	ldrb	r3, [r1, #3]
   e3970:	eb03 1382 	add.w	r3, r3, r2, lsl #6
   e3974:	7083      	strb	r3, [r0, #2]
   e3976:	4770      	bx	lr

000e3978 <_Z10b64_lookupc>:
}

inline unsigned char b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
   e3978:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e397c:	b2db      	uxtb	r3, r3
   e397e:	2b19      	cmp	r3, #25
   e3980:	d913      	bls.n	e39aa <_Z10b64_lookupc+0x32>
	if(c >='a' && c <='z') return c - 71;
   e3982:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e3986:	2b19      	cmp	r3, #25
   e3988:	d801      	bhi.n	e398e <_Z10b64_lookupc+0x16>
   e398a:	3847      	subs	r0, #71	; 0x47
   e398c:	e004      	b.n	e3998 <_Z10b64_lookupc+0x20>
	if(c >='0' && c <='9') return c + 4;
   e398e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e3992:	2b09      	cmp	r3, #9
   e3994:	d802      	bhi.n	e399c <_Z10b64_lookupc+0x24>
   e3996:	3004      	adds	r0, #4
   e3998:	b2c0      	uxtb	r0, r0
   e399a:	4770      	bx	lr
	if(c == '+') return 62;
   e399c:	282b      	cmp	r0, #43	; 0x2b
   e399e:	d006      	beq.n	e39ae <_Z10b64_lookupc+0x36>
	if(c == '/') return 63;
   e39a0:	282f      	cmp	r0, #47	; 0x2f
	return -1;
   e39a2:	bf0c      	ite	eq
   e39a4:	203f      	moveq	r0, #63	; 0x3f
   e39a6:	20ff      	movne	r0, #255	; 0xff
   e39a8:	4770      	bx	lr
   e39aa:	4618      	mov	r0, r3
   e39ac:	4770      	bx	lr

inline unsigned char b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
	if(c >='a' && c <='z') return c - 71;
	if(c >='0' && c <='9') return c + 4;
	if(c == '+') return 62;
   e39ae:	203e      	movs	r0, #62	; 0x3e
	if(c == '/') return 63;
	return -1;
}
   e39b0:	4770      	bx	lr

000e39b2 <_Z13base64_decodePcS_i>:
	}
	output[encLen] = '\0';
	return encLen;
}

int base64_decode(char * output, char * input, int inputLen) {
   e39b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int i = 0, j = 0;
	int decLen = 0;
   e39b6:	2500      	movs	r5, #0
	}
	output[encLen] = '\0';
	return encLen;
}

int base64_decode(char * output, char * input, int inputLen) {
   e39b8:	4680      	mov	r8, r0
   e39ba:	460e      	mov	r6, r1
   e39bc:	188f      	adds	r7, r1, r2
	int i = 0, j = 0;
   e39be:	462c      	mov	r4, r5
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
				a4[i] = b64_lookup(a4[i]);
   e39c0:	f10d 0904 	add.w	r9, sp, #4
	int decLen = 0;
	unsigned char a3[3];
	unsigned char a4[4];


	while (inputLen--) {
   e39c4:	42be      	cmp	r6, r7
   e39c6:	d027      	beq.n	e3a18 <_Z13base64_decodePcS_i+0x66>
		if(*input == '=') {
   e39c8:	f816 2b01 	ldrb.w	r2, [r6], #1
   e39cc:	2a3d      	cmp	r2, #61	; 0x3d
   e39ce:	d023      	beq.n	e3a18 <_Z13base64_decodePcS_i+0x66>
			break;
		}

		a4[i++] = *(input++);
   e39d0:	a902      	add	r1, sp, #8
   e39d2:	1c63      	adds	r3, r4, #1
   e39d4:	440c      	add	r4, r1
		if (i == 4) {
   e39d6:	2b04      	cmp	r3, #4
	while (inputLen--) {
		if(*input == '=') {
			break;
		}

		a4[i++] = *(input++);
   e39d8:	f804 2c04 	strb.w	r2, [r4, #-4]
		if (i == 4) {
   e39dc:	d001      	beq.n	e39e2 <_Z13base64_decodePcS_i+0x30>
			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
			}
			i = 0;
   e39de:	461c      	mov	r4, r3
   e39e0:	e7f0      	b.n	e39c4 <_Z13base64_decodePcS_i+0x12>
   e39e2:	2400      	movs	r4, #0
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
				a4[i] = b64_lookup(a4[i]);
   e39e4:	f819 0004 	ldrb.w	r0, [r9, r4]
   e39e8:	f7ff ffc6 	bl	e3978 <_Z10b64_lookupc>
   e39ec:	f809 0004 	strb.w	r0, [r9, r4]
			break;
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
   e39f0:	3401      	adds	r4, #1
   e39f2:	2c04      	cmp	r4, #4
   e39f4:	d1f6      	bne.n	e39e4 <_Z13base64_decodePcS_i+0x32>
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);
   e39f6:	4649      	mov	r1, r9
   e39f8:	4668      	mov	r0, sp
   e39fa:	f7ff ffa9 	bl	e3950 <_Z8a4_to_a3PhS_>
   e39fe:	eb08 0205 	add.w	r2, r8, r5

			for (i = 0; i < 3; i++) {
   e3a02:	2300      	movs	r3, #0
				output[decLen++] = a3[i];
   e3a04:	f81d 1003 	ldrb.w	r1, [sp, r3]
   e3a08:	f802 1b01 	strb.w	r1, [r2], #1
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
   e3a0c:	3301      	adds	r3, #1
   e3a0e:	2b03      	cmp	r3, #3
   e3a10:	d1f8      	bne.n	e3a04 <_Z13base64_decodePcS_i+0x52>
   e3a12:	3503      	adds	r5, #3
				output[decLen++] = a3[i];
			}
			i = 0;
   e3a14:	2300      	movs	r3, #0
   e3a16:	e7e2      	b.n	e39de <_Z13base64_decodePcS_i+0x2c>
		}
	}

	if (i) {
   e3a18:	b314      	cbz	r4, e3a60 <_Z13base64_decodePcS_i+0xae>
   e3a1a:	4623      	mov	r3, r4
   e3a1c:	2200      	movs	r2, #0
		for (j = i; j < 4; j++) {
   e3a1e:	2b03      	cmp	r3, #3
   e3a20:	af01      	add	r7, sp, #4
   e3a22:	dc02      	bgt.n	e3a2a <_Z13base64_decodePcS_i+0x78>
			a4[j] = '\0';
   e3a24:	54fa      	strb	r2, [r7, r3]
			i = 0;
		}
	}

	if (i) {
		for (j = i; j < 4; j++) {
   e3a26:	3301      	adds	r3, #1
   e3a28:	e7f9      	b.n	e3a1e <_Z13base64_decodePcS_i+0x6c>
   e3a2a:	2600      	movs	r6, #0
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
			a4[j] = b64_lookup(a4[j]);
   e3a2c:	5db8      	ldrb	r0, [r7, r6]
   e3a2e:	f7ff ffa3 	bl	e3978 <_Z10b64_lookupc>
   e3a32:	55b8      	strb	r0, [r7, r6]
	if (i) {
		for (j = i; j < 4; j++) {
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
   e3a34:	3601      	adds	r6, #1
   e3a36:	2e04      	cmp	r6, #4
   e3a38:	d1f8      	bne.n	e3a2c <_Z13base64_decodePcS_i+0x7a>
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);
   e3a3a:	4639      	mov	r1, r7
   e3a3c:	4668      	mov	r0, sp
   e3a3e:	f7ff ff87 	bl	e3950 <_Z8a4_to_a3PhS_>

		for (j = 0; j < i - 1; j++) {
   e3a42:	3c01      	subs	r4, #1
   e3a44:	4629      	mov	r1, r5
   e3a46:	eb08 0205 	add.w	r2, r8, r5
   e3a4a:	2300      	movs	r3, #0
   e3a4c:	42a3      	cmp	r3, r4
   e3a4e:	eb03 0501 	add.w	r5, r3, r1
   e3a52:	da05      	bge.n	e3a60 <_Z13base64_decodePcS_i+0xae>
			output[decLen++] = a3[j];
   e3a54:	f81d 0003 	ldrb.w	r0, [sp, r3]
   e3a58:	f802 0b01 	strb.w	r0, [r2], #1
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);

		for (j = 0; j < i - 1; j++) {
   e3a5c:	3301      	adds	r3, #1
   e3a5e:	e7f5      	b.n	e3a4c <_Z13base64_decodePcS_i+0x9a>
			output[decLen++] = a3[j];
		}
	}
	output[decLen] = '\0';
   e3a60:	2300      	movs	r3, #0
	return decLen;
}
   e3a62:	4628      	mov	r0, r5

		for (j = 0; j < i - 1; j++) {
			output[decLen++] = a3[j];
		}
	}
	output[decLen] = '\0';
   e3a64:	f808 3005 	strb.w	r3, [r8, r5]
	return decLen;
}
   e3a68:	b003      	add	sp, #12
   e3a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000e3a70 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   e3a70:	b508      	push	{r3, lr}
   e3a72:	4b02      	ldr	r3, [pc, #8]	; (e3a7c <os_thread_is_current+0xc>)
   e3a74:	681b      	ldr	r3, [r3, #0]
   e3a76:	689b      	ldr	r3, [r3, #8]
   e3a78:	9301      	str	r3, [sp, #4]
   e3a7a:	bd08      	pop	{r3, pc}
   e3a7c:	00030248 	.word	0x00030248

000e3a80 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   e3a80:	b508      	push	{r3, lr}
   e3a82:	4b02      	ldr	r3, [pc, #8]	; (e3a8c <os_thread_join+0xc>)
   e3a84:	681b      	ldr	r3, [r3, #0]
   e3a86:	691b      	ldr	r3, [r3, #16]
   e3a88:	9301      	str	r3, [sp, #4]
   e3a8a:	bd08      	pop	{r3, pc}
   e3a8c:	00030248 	.word	0x00030248

000e3a90 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   e3a90:	b508      	push	{r3, lr}
   e3a92:	4b02      	ldr	r3, [pc, #8]	; (e3a9c <os_thread_cleanup+0xc>)
   e3a94:	681b      	ldr	r3, [r3, #0]
   e3a96:	695b      	ldr	r3, [r3, #20]
   e3a98:	9301      	str	r3, [sp, #4]
   e3a9a:	bd08      	pop	{r3, pc}
   e3a9c:	00030248 	.word	0x00030248

000e3aa0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   e3aa0:	b508      	push	{r3, lr}
   e3aa2:	4b02      	ldr	r3, [pc, #8]	; (e3aac <os_mutex_create+0xc>)
   e3aa4:	681b      	ldr	r3, [r3, #0]
   e3aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e3aa8:	9301      	str	r3, [sp, #4]
   e3aaa:	bd08      	pop	{r3, pc}
   e3aac:	00030248 	.word	0x00030248

000e3ab0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   e3ab0:	b508      	push	{r3, lr}
   e3ab2:	4b02      	ldr	r3, [pc, #8]	; (e3abc <os_mutex_recursive_create+0xc>)
   e3ab4:	681b      	ldr	r3, [r3, #0]
   e3ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e3ab8:	9301      	str	r3, [sp, #4]
   e3aba:	bd08      	pop	{r3, pc}
   e3abc:	00030248 	.word	0x00030248

000e3ac0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   e3ac0:	b508      	push	{r3, lr}
   e3ac2:	4b02      	ldr	r3, [pc, #8]	; (e3acc <HAL_RNG_GetRandomNumber+0xc>)
   e3ac4:	681b      	ldr	r3, [r3, #0]
   e3ac6:	685b      	ldr	r3, [r3, #4]
   e3ac8:	9301      	str	r3, [sp, #4]
   e3aca:	bd08      	pop	{r3, pc}
   e3acc:	00030218 	.word	0x00030218

000e3ad0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   e3ad0:	b508      	push	{r3, lr}
   e3ad2:	4b02      	ldr	r3, [pc, #8]	; (e3adc <HAL_Delay_Microseconds+0xc>)
   e3ad4:	681b      	ldr	r3, [r3, #0]
   e3ad6:	68db      	ldr	r3, [r3, #12]
   e3ad8:	9301      	str	r3, [sp, #4]
   e3ada:	bd08      	pop	{r3, pc}
   e3adc:	00030218 	.word	0x00030218

000e3ae0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   e3ae0:	b508      	push	{r3, lr}
   e3ae2:	4b02      	ldr	r3, [pc, #8]	; (e3aec <HAL_Timer_Get_Milli_Seconds+0xc>)
   e3ae4:	681b      	ldr	r3, [r3, #0]
   e3ae6:	695b      	ldr	r3, [r3, #20]
   e3ae8:	9301      	str	r3, [sp, #4]
   e3aea:	bd08      	pop	{r3, pc}
   e3aec:	00030218 	.word	0x00030218

000e3af0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   e3af0:	b508      	push	{r3, lr}
   e3af2:	4b02      	ldr	r3, [pc, #8]	; (e3afc <HAL_RTC_Get_UnixTime+0xc>)
   e3af4:	681b      	ldr	r3, [r3, #0]
   e3af6:	69db      	ldr	r3, [r3, #28]
   e3af8:	9301      	str	r3, [sp, #4]
   e3afa:	bd08      	pop	{r3, pc}
   e3afc:	00030218 	.word	0x00030218

000e3b00 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   e3b00:	b508      	push	{r3, lr}
   e3b02:	4b02      	ldr	r3, [pc, #8]	; (e3b0c <HAL_RTC_Time_Is_Valid+0xc>)
   e3b04:	681b      	ldr	r3, [r3, #0]
   e3b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e3b08:	9301      	str	r3, [sp, #4]
   e3b0a:	bd08      	pop	{r3, pc}
   e3b0c:	00030218 	.word	0x00030218

000e3b10 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   e3b10:	b508      	push	{r3, lr}
   e3b12:	4b02      	ldr	r3, [pc, #8]	; (e3b1c <hal_timer_millis+0xc>)
   e3b14:	681b      	ldr	r3, [r3, #0]
   e3b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   e3b18:	9301      	str	r3, [sp, #4]
   e3b1a:	bd08      	pop	{r3, pc}
   e3b1c:	00030218 	.word	0x00030218

000e3b20 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   e3b20:	b508      	push	{r3, lr}
   e3b22:	4b02      	ldr	r3, [pc, #8]	; (e3b2c <HAL_Pin_Map+0xc>)
   e3b24:	681b      	ldr	r3, [r3, #0]
   e3b26:	681b      	ldr	r3, [r3, #0]
   e3b28:	9301      	str	r3, [sp, #4]
   e3b2a:	bd08      	pop	{r3, pc}
   e3b2c:	0003022c 	.word	0x0003022c

000e3b30 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   e3b30:	b508      	push	{r3, lr}
   e3b32:	4b02      	ldr	r3, [pc, #8]	; (e3b3c <HAL_Validate_Pin_Function+0xc>)
   e3b34:	681b      	ldr	r3, [r3, #0]
   e3b36:	685b      	ldr	r3, [r3, #4]
   e3b38:	9301      	str	r3, [sp, #4]
   e3b3a:	bd08      	pop	{r3, pc}
   e3b3c:	0003022c 	.word	0x0003022c

000e3b40 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   e3b40:	b508      	push	{r3, lr}
   e3b42:	4b02      	ldr	r3, [pc, #8]	; (e3b4c <HAL_Pin_Mode+0xc>)
   e3b44:	681b      	ldr	r3, [r3, #0]
   e3b46:	689b      	ldr	r3, [r3, #8]
   e3b48:	9301      	str	r3, [sp, #4]
   e3b4a:	bd08      	pop	{r3, pc}
   e3b4c:	0003022c 	.word	0x0003022c

000e3b50 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   e3b50:	b508      	push	{r3, lr}
   e3b52:	4b02      	ldr	r3, [pc, #8]	; (e3b5c <HAL_Get_Pin_Mode+0xc>)
   e3b54:	681b      	ldr	r3, [r3, #0]
   e3b56:	68db      	ldr	r3, [r3, #12]
   e3b58:	9301      	str	r3, [sp, #4]
   e3b5a:	bd08      	pop	{r3, pc}
   e3b5c:	0003022c 	.word	0x0003022c

000e3b60 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   e3b60:	b508      	push	{r3, lr}
   e3b62:	4b02      	ldr	r3, [pc, #8]	; (e3b6c <HAL_GPIO_Write+0xc>)
   e3b64:	681b      	ldr	r3, [r3, #0]
   e3b66:	691b      	ldr	r3, [r3, #16]
   e3b68:	9301      	str	r3, [sp, #4]
   e3b6a:	bd08      	pop	{r3, pc}
   e3b6c:	0003022c 	.word	0x0003022c

000e3b70 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   e3b70:	b508      	push	{r3, lr}
   e3b72:	4b02      	ldr	r3, [pc, #8]	; (e3b7c <HAL_Interrupts_Enable_All+0xc>)
   e3b74:	681b      	ldr	r3, [r3, #0]
   e3b76:	6a1b      	ldr	r3, [r3, #32]
   e3b78:	9301      	str	r3, [sp, #4]
   e3b7a:	bd08      	pop	{r3, pc}
   e3b7c:	0003022c 	.word	0x0003022c

000e3b80 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   e3b80:	b508      	push	{r3, lr}
   e3b82:	4b02      	ldr	r3, [pc, #8]	; (e3b8c <HAL_Interrupts_Disable_All+0xc>)
   e3b84:	681b      	ldr	r3, [r3, #0]
   e3b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e3b88:	9301      	str	r3, [sp, #4]
   e3b8a:	bd08      	pop	{r3, pc}
   e3b8c:	0003022c 	.word	0x0003022c

000e3b90 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   e3b90:	b508      	push	{r3, lr}
   e3b92:	4b02      	ldr	r3, [pc, #8]	; (e3b9c <HAL_ADC_Read+0xc>)
   e3b94:	681b      	ldr	r3, [r3, #0]
   e3b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e3b98:	9301      	str	r3, [sp, #4]
   e3b9a:	bd08      	pop	{r3, pc}
   e3b9c:	0003022c 	.word	0x0003022c

000e3ba0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   e3ba0:	b508      	push	{r3, lr}
   e3ba2:	4b02      	ldr	r3, [pc, #8]	; (e3bac <HAL_I2C_Write_Data+0xc>)
   e3ba4:	681b      	ldr	r3, [r3, #0]
   e3ba6:	6a1b      	ldr	r3, [r3, #32]
   e3ba8:	9301      	str	r3, [sp, #4]
   e3baa:	bd08      	pop	{r3, pc}
   e3bac:	00030228 	.word	0x00030228

000e3bb0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   e3bb0:	b508      	push	{r3, lr}
   e3bb2:	4b02      	ldr	r3, [pc, #8]	; (e3bbc <HAL_I2C_Available_Data+0xc>)
   e3bb4:	681b      	ldr	r3, [r3, #0]
   e3bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e3bb8:	9301      	str	r3, [sp, #4]
   e3bba:	bd08      	pop	{r3, pc}
   e3bbc:	00030228 	.word	0x00030228

000e3bc0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   e3bc0:	b508      	push	{r3, lr}
   e3bc2:	4b02      	ldr	r3, [pc, #8]	; (e3bcc <HAL_I2C_Read_Data+0xc>)
   e3bc4:	681b      	ldr	r3, [r3, #0]
   e3bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e3bc8:	9301      	str	r3, [sp, #4]
   e3bca:	bd08      	pop	{r3, pc}
   e3bcc:	00030228 	.word	0x00030228

000e3bd0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   e3bd0:	b508      	push	{r3, lr}
   e3bd2:	4b02      	ldr	r3, [pc, #8]	; (e3bdc <HAL_I2C_Peek_Data+0xc>)
   e3bd4:	681b      	ldr	r3, [r3, #0]
   e3bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e3bd8:	9301      	str	r3, [sp, #4]
   e3bda:	bd08      	pop	{r3, pc}
   e3bdc:	00030228 	.word	0x00030228

000e3be0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   e3be0:	b508      	push	{r3, lr}
   e3be2:	4b02      	ldr	r3, [pc, #8]	; (e3bec <HAL_I2C_Flush_Data+0xc>)
   e3be4:	681b      	ldr	r3, [r3, #0]
   e3be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e3be8:	9301      	str	r3, [sp, #4]
   e3bea:	bd08      	pop	{r3, pc}
   e3bec:	00030228 	.word	0x00030228

000e3bf0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   e3bf0:	b508      	push	{r3, lr}
   e3bf2:	4b02      	ldr	r3, [pc, #8]	; (e3bfc <HAL_I2C_Is_Enabled+0xc>)
   e3bf4:	681b      	ldr	r3, [r3, #0]
   e3bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e3bf8:	9301      	str	r3, [sp, #4]
   e3bfa:	bd08      	pop	{r3, pc}
   e3bfc:	00030228 	.word	0x00030228

000e3c00 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   e3c00:	b508      	push	{r3, lr}
   e3c02:	4b02      	ldr	r3, [pc, #8]	; (e3c0c <HAL_I2C_Init+0xc>)
   e3c04:	681b      	ldr	r3, [r3, #0]
   e3c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e3c08:	9301      	str	r3, [sp, #4]
   e3c0a:	bd08      	pop	{r3, pc}
   e3c0c:	00030228 	.word	0x00030228

000e3c10 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   e3c10:	b508      	push	{r3, lr}
   e3c12:	4b02      	ldr	r3, [pc, #8]	; (e3c1c <if_index_to_name+0xc>)
   e3c14:	681b      	ldr	r3, [r3, #0]
   e3c16:	695b      	ldr	r3, [r3, #20]
   e3c18:	9301      	str	r3, [sp, #4]
   e3c1a:	bd08      	pop	{r3, pc}
   e3c1c:	0003026c 	.word	0x0003026c

000e3c20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   e3c20:	b508      	push	{r3, lr}
   e3c22:	4b02      	ldr	r3, [pc, #8]	; (e3c2c <inet_inet_ntop+0xc>)
   e3c24:	681b      	ldr	r3, [r3, #0]
   e3c26:	695b      	ldr	r3, [r3, #20]
   e3c28:	9301      	str	r3, [sp, #4]
   e3c2a:	bd08      	pop	{r3, pc}
   e3c2c:	00030264 	.word	0x00030264

000e3c30 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   e3c30:	b508      	push	{r3, lr}
   e3c32:	4b02      	ldr	r3, [pc, #8]	; (e3c3c <inet_htonl+0xc>)
   e3c34:	681b      	ldr	r3, [r3, #0]
   e3c36:	6a1b      	ldr	r3, [r3, #32]
   e3c38:	9301      	str	r3, [sp, #4]
   e3c3a:	bd08      	pop	{r3, pc}
   e3c3c:	00030264 	.word	0x00030264

000e3c40 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   e3c40:	b508      	push	{r3, lr}
   e3c42:	4b02      	ldr	r3, [pc, #8]	; (e3c4c <inet_htons+0xc>)
   e3c44:	681b      	ldr	r3, [r3, #0]
   e3c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e3c48:	9301      	str	r3, [sp, #4]
   e3c4a:	bd08      	pop	{r3, pc}
   e3c4c:	00030264 	.word	0x00030264

000e3c50 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   e3c50:	b508      	push	{r3, lr}
   e3c52:	4b02      	ldr	r3, [pc, #8]	; (e3c5c <netdb_freeaddrinfo+0xc>)
   e3c54:	681b      	ldr	r3, [r3, #0]
   e3c56:	689b      	ldr	r3, [r3, #8]
   e3c58:	9301      	str	r3, [sp, #4]
   e3c5a:	bd08      	pop	{r3, pc}
   e3c5c:	00030268 	.word	0x00030268

000e3c60 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   e3c60:	b508      	push	{r3, lr}
   e3c62:	4b02      	ldr	r3, [pc, #8]	; (e3c6c <netdb_getaddrinfo+0xc>)
   e3c64:	681b      	ldr	r3, [r3, #0]
   e3c66:	68db      	ldr	r3, [r3, #12]
   e3c68:	9301      	str	r3, [sp, #4]
   e3c6a:	bd08      	pop	{r3, pc}
   e3c6c:	00030268 	.word	0x00030268

000e3c70 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   e3c70:	b508      	push	{r3, lr}
   e3c72:	4b02      	ldr	r3, [pc, #8]	; (e3c7c <sock_setsockopt+0xc>)
   e3c74:	681b      	ldr	r3, [r3, #0]
   e3c76:	699b      	ldr	r3, [r3, #24]
   e3c78:	9301      	str	r3, [sp, #4]
   e3c7a:	bd08      	pop	{r3, pc}
   e3c7c:	00030238 	.word	0x00030238

000e3c80 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   e3c80:	b508      	push	{r3, lr}
   e3c82:	4b02      	ldr	r3, [pc, #8]	; (e3c8c <sock_close+0xc>)
   e3c84:	681b      	ldr	r3, [r3, #0]
   e3c86:	69db      	ldr	r3, [r3, #28]
   e3c88:	9301      	str	r3, [sp, #4]
   e3c8a:	bd08      	pop	{r3, pc}
   e3c8c:	00030238 	.word	0x00030238

000e3c90 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   e3c90:	b508      	push	{r3, lr}
   e3c92:	4b02      	ldr	r3, [pc, #8]	; (e3c9c <sock_connect+0xc>)
   e3c94:	681b      	ldr	r3, [r3, #0]
   e3c96:	6a1b      	ldr	r3, [r3, #32]
   e3c98:	9301      	str	r3, [sp, #4]
   e3c9a:	bd08      	pop	{r3, pc}
   e3c9c:	00030238 	.word	0x00030238

000e3ca0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   e3ca0:	b508      	push	{r3, lr}
   e3ca2:	4b02      	ldr	r3, [pc, #8]	; (e3cac <sock_recv+0xc>)
   e3ca4:	681b      	ldr	r3, [r3, #0]
   e3ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e3ca8:	9301      	str	r3, [sp, #4]
   e3caa:	bd08      	pop	{r3, pc}
   e3cac:	00030238 	.word	0x00030238

000e3cb0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   e3cb0:	b508      	push	{r3, lr}
   e3cb2:	4b02      	ldr	r3, [pc, #8]	; (e3cbc <sock_send+0xc>)
   e3cb4:	681b      	ldr	r3, [r3, #0]
   e3cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e3cb8:	9301      	str	r3, [sp, #4]
   e3cba:	bd08      	pop	{r3, pc}
   e3cbc:	00030238 	.word	0x00030238

000e3cc0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   e3cc0:	b508      	push	{r3, lr}
   e3cc2:	4b02      	ldr	r3, [pc, #8]	; (e3ccc <sock_socket+0xc>)
   e3cc4:	681b      	ldr	r3, [r3, #0]
   e3cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e3cc8:	9301      	str	r3, [sp, #4]
   e3cca:	bd08      	pop	{r3, pc}
   e3ccc:	00030238 	.word	0x00030238

000e3cd0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   e3cd0:	b508      	push	{r3, lr}
   e3cd2:	4b02      	ldr	r3, [pc, #8]	; (e3cdc <HAL_SPI_Init+0xc>)
   e3cd4:	681b      	ldr	r3, [r3, #0]
   e3cd6:	69db      	ldr	r3, [r3, #28]
   e3cd8:	9301      	str	r3, [sp, #4]
   e3cda:	bd08      	pop	{r3, pc}
   e3cdc:	00030230 	.word	0x00030230

000e3ce0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   e3ce0:	b508      	push	{r3, lr}
   e3ce2:	4b02      	ldr	r3, [pc, #8]	; (e3cec <HAL_SPI_Is_Enabled+0xc>)
   e3ce4:	681b      	ldr	r3, [r3, #0]
   e3ce6:	6a1b      	ldr	r3, [r3, #32]
   e3ce8:	9301      	str	r3, [sp, #4]
   e3cea:	bd08      	pop	{r3, pc}
   e3cec:	00030230 	.word	0x00030230

000e3cf0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   e3cf0:	b508      	push	{r3, lr}
   e3cf2:	4b02      	ldr	r3, [pc, #8]	; (e3cfc <HAL_USART_Init+0xc>)
   e3cf4:	681b      	ldr	r3, [r3, #0]
   e3cf6:	681b      	ldr	r3, [r3, #0]
   e3cf8:	9301      	str	r3, [sp, #4]
   e3cfa:	bd08      	pop	{r3, pc}
   e3cfc:	0003023c 	.word	0x0003023c

000e3d00 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   e3d00:	b508      	push	{r3, lr}
   e3d02:	4b02      	ldr	r3, [pc, #8]	; (e3d0c <HAL_USART_Write_Data+0xc>)
   e3d04:	681b      	ldr	r3, [r3, #0]
   e3d06:	68db      	ldr	r3, [r3, #12]
   e3d08:	9301      	str	r3, [sp, #4]
   e3d0a:	bd08      	pop	{r3, pc}
   e3d0c:	0003023c 	.word	0x0003023c

000e3d10 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   e3d10:	b508      	push	{r3, lr}
   e3d12:	4b02      	ldr	r3, [pc, #8]	; (e3d1c <HAL_USART_Available_Data+0xc>)
   e3d14:	681b      	ldr	r3, [r3, #0]
   e3d16:	691b      	ldr	r3, [r3, #16]
   e3d18:	9301      	str	r3, [sp, #4]
   e3d1a:	bd08      	pop	{r3, pc}
   e3d1c:	0003023c 	.word	0x0003023c

000e3d20 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   e3d20:	b508      	push	{r3, lr}
   e3d22:	4b02      	ldr	r3, [pc, #8]	; (e3d2c <HAL_USART_Read_Data+0xc>)
   e3d24:	681b      	ldr	r3, [r3, #0]
   e3d26:	695b      	ldr	r3, [r3, #20]
   e3d28:	9301      	str	r3, [sp, #4]
   e3d2a:	bd08      	pop	{r3, pc}
   e3d2c:	0003023c 	.word	0x0003023c

000e3d30 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   e3d30:	b508      	push	{r3, lr}
   e3d32:	4b02      	ldr	r3, [pc, #8]	; (e3d3c <HAL_USART_Peek_Data+0xc>)
   e3d34:	681b      	ldr	r3, [r3, #0]
   e3d36:	699b      	ldr	r3, [r3, #24]
   e3d38:	9301      	str	r3, [sp, #4]
   e3d3a:	bd08      	pop	{r3, pc}
   e3d3c:	0003023c 	.word	0x0003023c

000e3d40 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   e3d40:	b508      	push	{r3, lr}
   e3d42:	4b02      	ldr	r3, [pc, #8]	; (e3d4c <HAL_USART_Flush_Data+0xc>)
   e3d44:	681b      	ldr	r3, [r3, #0]
   e3d46:	69db      	ldr	r3, [r3, #28]
   e3d48:	9301      	str	r3, [sp, #4]
   e3d4a:	bd08      	pop	{r3, pc}
   e3d4c:	0003023c 	.word	0x0003023c

000e3d50 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   e3d50:	b508      	push	{r3, lr}
   e3d52:	4b02      	ldr	r3, [pc, #8]	; (e3d5c <HAL_USART_Is_Enabled+0xc>)
   e3d54:	681b      	ldr	r3, [r3, #0]
   e3d56:	6a1b      	ldr	r3, [r3, #32]
   e3d58:	9301      	str	r3, [sp, #4]
   e3d5a:	bd08      	pop	{r3, pc}
   e3d5c:	0003023c 	.word	0x0003023c

000e3d60 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   e3d60:	b508      	push	{r3, lr}
   e3d62:	4b02      	ldr	r3, [pc, #8]	; (e3d6c <HAL_USART_Available_Data_For_Write+0xc>)
   e3d64:	681b      	ldr	r3, [r3, #0]
   e3d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e3d68:	9301      	str	r3, [sp, #4]
   e3d6a:	bd08      	pop	{r3, pc}
   e3d6c:	0003023c 	.word	0x0003023c

000e3d70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   e3d70:	b508      	push	{r3, lr}
   e3d72:	4b02      	ldr	r3, [pc, #8]	; (e3d7c <HAL_USB_USART_Init+0xc>)
   e3d74:	681b      	ldr	r3, [r3, #0]
   e3d76:	681b      	ldr	r3, [r3, #0]
   e3d78:	9301      	str	r3, [sp, #4]
   e3d7a:	bd08      	pop	{r3, pc}
   e3d7c:	0003024c 	.word	0x0003024c

000e3d80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   e3d80:	b508      	push	{r3, lr}
   e3d82:	4b02      	ldr	r3, [pc, #8]	; (e3d8c <HAL_USB_USART_Begin+0xc>)
   e3d84:	681b      	ldr	r3, [r3, #0]
   e3d86:	685b      	ldr	r3, [r3, #4]
   e3d88:	9301      	str	r3, [sp, #4]
   e3d8a:	bd08      	pop	{r3, pc}
   e3d8c:	0003024c 	.word	0x0003024c

000e3d90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   e3d90:	b508      	push	{r3, lr}
   e3d92:	4b02      	ldr	r3, [pc, #8]	; (e3d9c <HAL_USB_USART_Available_Data+0xc>)
   e3d94:	681b      	ldr	r3, [r3, #0]
   e3d96:	691b      	ldr	r3, [r3, #16]
   e3d98:	9301      	str	r3, [sp, #4]
   e3d9a:	bd08      	pop	{r3, pc}
   e3d9c:	0003024c 	.word	0x0003024c

000e3da0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   e3da0:	b508      	push	{r3, lr}
   e3da2:	4b02      	ldr	r3, [pc, #8]	; (e3dac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   e3da4:	681b      	ldr	r3, [r3, #0]
   e3da6:	695b      	ldr	r3, [r3, #20]
   e3da8:	9301      	str	r3, [sp, #4]
   e3daa:	bd08      	pop	{r3, pc}
   e3dac:	0003024c 	.word	0x0003024c

000e3db0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e3db0:	b508      	push	{r3, lr}
   e3db2:	4b02      	ldr	r3, [pc, #8]	; (e3dbc <HAL_USB_USART_Receive_Data+0xc>)
   e3db4:	681b      	ldr	r3, [r3, #0]
   e3db6:	699b      	ldr	r3, [r3, #24]
   e3db8:	9301      	str	r3, [sp, #4]
   e3dba:	bd08      	pop	{r3, pc}
   e3dbc:	0003024c 	.word	0x0003024c

000e3dc0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e3dc0:	b508      	push	{r3, lr}
   e3dc2:	4b02      	ldr	r3, [pc, #8]	; (e3dcc <HAL_USB_USART_Send_Data+0xc>)
   e3dc4:	681b      	ldr	r3, [r3, #0]
   e3dc6:	69db      	ldr	r3, [r3, #28]
   e3dc8:	9301      	str	r3, [sp, #4]
   e3dca:	bd08      	pop	{r3, pc}
   e3dcc:	0003024c 	.word	0x0003024c

000e3dd0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   e3dd0:	b508      	push	{r3, lr}
   e3dd2:	4b02      	ldr	r3, [pc, #8]	; (e3ddc <HAL_USB_USART_Flush_Data+0xc>)
   e3dd4:	681b      	ldr	r3, [r3, #0]
   e3dd6:	6a1b      	ldr	r3, [r3, #32]
   e3dd8:	9301      	str	r3, [sp, #4]
   e3dda:	bd08      	pop	{r3, pc}
   e3ddc:	0003024c 	.word	0x0003024c

000e3de0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   e3de0:	b508      	push	{r3, lr}
   e3de2:	4b02      	ldr	r3, [pc, #8]	; (e3dec <panic_+0xc>)
   e3de4:	681b      	ldr	r3, [r3, #0]
   e3de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e3de8:	9301      	str	r3, [sp, #4]
   e3dea:	bd08      	pop	{r3, pc}
   e3dec:	00030260 	.word	0x00030260

000e3df0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   e3df0:	b508      	push	{r3, lr}
   e3df2:	4b02      	ldr	r3, [pc, #8]	; (e3dfc <log_message+0xc>)
   e3df4:	681b      	ldr	r3, [r3, #0]
   e3df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   e3df8:	9301      	str	r3, [sp, #4]
   e3dfa:	bd08      	pop	{r3, pc}
   e3dfc:	00030260 	.word	0x00030260

000e3e00 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   e3e00:	b508      	push	{r3, lr}
   e3e02:	4b02      	ldr	r3, [pc, #8]	; (e3e0c <system_mode+0xc>)
   e3e04:	681b      	ldr	r3, [r3, #0]
   e3e06:	681b      	ldr	r3, [r3, #0]
   e3e08:	9301      	str	r3, [sp, #4]
   e3e0a:	bd08      	pop	{r3, pc}
   e3e0c:	00030220 	.word	0x00030220

000e3e10 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   e3e10:	b508      	push	{r3, lr}
   e3e12:	4b02      	ldr	r3, [pc, #8]	; (e3e1c <set_system_mode+0xc>)
   e3e14:	681b      	ldr	r3, [r3, #0]
   e3e16:	685b      	ldr	r3, [r3, #4]
   e3e18:	9301      	str	r3, [sp, #4]
   e3e1a:	bd08      	pop	{r3, pc}
   e3e1c:	00030220 	.word	0x00030220

000e3e20 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   e3e20:	b508      	push	{r3, lr}
   e3e22:	4b02      	ldr	r3, [pc, #8]	; (e3e2c <system_delay_ms+0xc>)
   e3e24:	681b      	ldr	r3, [r3, #0]
   e3e26:	695b      	ldr	r3, [r3, #20]
   e3e28:	9301      	str	r3, [sp, #4]
   e3e2a:	bd08      	pop	{r3, pc}
   e3e2c:	00030220 	.word	0x00030220

000e3e30 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   e3e30:	b508      	push	{r3, lr}
   e3e32:	4b02      	ldr	r3, [pc, #8]	; (e3e3c <application_thread_current+0xc>)
   e3e34:	681b      	ldr	r3, [r3, #0]
   e3e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e3e38:	9301      	str	r3, [sp, #4]
   e3e3a:	bd08      	pop	{r3, pc}
   e3e3c:	00030220 	.word	0x00030220

000e3e40 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   e3e40:	b508      	push	{r3, lr}
   e3e42:	4b02      	ldr	r3, [pc, #8]	; (e3e4c <application_thread_invoke+0xc>)
   e3e44:	681b      	ldr	r3, [r3, #0]
   e3e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   e3e48:	9301      	str	r3, [sp, #4]
   e3e4a:	bd08      	pop	{r3, pc}
   e3e4c:	00030220 	.word	0x00030220

000e3e50 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   e3e50:	b508      	push	{r3, lr}
   e3e52:	4b02      	ldr	r3, [pc, #8]	; (e3e5c <system_thread_get_state+0xc>)
   e3e54:	681b      	ldr	r3, [r3, #0]
   e3e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e3e58:	9301      	str	r3, [sp, #4]
   e3e5a:	bd08      	pop	{r3, pc}
   e3e5c:	00030220 	.word	0x00030220

000e3e60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   e3e60:	b508      	push	{r3, lr}
   e3e62:	4b03      	ldr	r3, [pc, #12]	; (e3e70 <system_ctrl_set_app_request_handler+0x10>)
   e3e64:	681b      	ldr	r3, [r3, #0]
   e3e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   e3e6a:	9301      	str	r3, [sp, #4]
   e3e6c:	bd08      	pop	{r3, pc}
   e3e6e:	0000      	.short	0x0000
   e3e70:	00030220 	.word	0x00030220

000e3e74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   e3e74:	b508      	push	{r3, lr}
   e3e76:	4b03      	ldr	r3, [pc, #12]	; (e3e84 <system_ctrl_set_result+0x10>)
   e3e78:	681b      	ldr	r3, [r3, #0]
   e3e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   e3e7e:	9301      	str	r3, [sp, #4]
   e3e80:	bd08      	pop	{r3, pc}
   e3e82:	0000      	.short	0x0000
   e3e84:	00030220 	.word	0x00030220

000e3e88 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   e3e88:	b508      	push	{r3, lr}
   e3e8a:	4b02      	ldr	r3, [pc, #8]	; (e3e94 <spark_variable+0xc>)
   e3e8c:	681b      	ldr	r3, [r3, #0]
   e3e8e:	681b      	ldr	r3, [r3, #0]
   e3e90:	9301      	str	r3, [sp, #4]
   e3e92:	bd08      	pop	{r3, pc}
   e3e94:	00030244 	.word	0x00030244

000e3e98 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   e3e98:	b508      	push	{r3, lr}
   e3e9a:	4b02      	ldr	r3, [pc, #8]	; (e3ea4 <spark_function+0xc>)
   e3e9c:	681b      	ldr	r3, [r3, #0]
   e3e9e:	685b      	ldr	r3, [r3, #4]
   e3ea0:	9301      	str	r3, [sp, #4]
   e3ea2:	bd08      	pop	{r3, pc}
   e3ea4:	00030244 	.word	0x00030244

000e3ea8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   e3ea8:	b508      	push	{r3, lr}
   e3eaa:	4b02      	ldr	r3, [pc, #8]	; (e3eb4 <spark_process+0xc>)
   e3eac:	681b      	ldr	r3, [r3, #0]
   e3eae:	689b      	ldr	r3, [r3, #8]
   e3eb0:	9301      	str	r3, [sp, #4]
   e3eb2:	bd08      	pop	{r3, pc}
   e3eb4:	00030244 	.word	0x00030244

000e3eb8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   e3eb8:	b508      	push	{r3, lr}
   e3eba:	4b02      	ldr	r3, [pc, #8]	; (e3ec4 <spark_cloud_flag_connected+0xc>)
   e3ebc:	681b      	ldr	r3, [r3, #0]
   e3ebe:	695b      	ldr	r3, [r3, #20]
   e3ec0:	9301      	str	r3, [sp, #4]
   e3ec2:	bd08      	pop	{r3, pc}
   e3ec4:	00030244 	.word	0x00030244

000e3ec8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   e3ec8:	b508      	push	{r3, lr}
   e3eca:	4b02      	ldr	r3, [pc, #8]	; (e3ed4 <spark_send_event+0xc>)
   e3ecc:	681b      	ldr	r3, [r3, #0]
   e3ece:	6a1b      	ldr	r3, [r3, #32]
   e3ed0:	9301      	str	r3, [sp, #4]
   e3ed2:	bd08      	pop	{r3, pc}
   e3ed4:	00030244 	.word	0x00030244

000e3ed8 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   e3ed8:	b508      	push	{r3, lr}
   e3eda:	4b02      	ldr	r3, [pc, #8]	; (e3ee4 <spark_sync_time+0xc>)
   e3edc:	681b      	ldr	r3, [r3, #0]
   e3ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e3ee0:	9301      	str	r3, [sp, #4]
   e3ee2:	bd08      	pop	{r3, pc}
   e3ee4:	00030244 	.word	0x00030244

000e3ee8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   e3ee8:	b508      	push	{r3, lr}
   e3eea:	4b02      	ldr	r3, [pc, #8]	; (e3ef4 <spark_sync_time_pending+0xc>)
   e3eec:	681b      	ldr	r3, [r3, #0]
   e3eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e3ef0:	9301      	str	r3, [sp, #4]
   e3ef2:	bd08      	pop	{r3, pc}
   e3ef4:	00030244 	.word	0x00030244

000e3ef8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   e3ef8:	b508      	push	{r3, lr}
   e3efa:	4b02      	ldr	r3, [pc, #8]	; (e3f04 <spark_set_random_seed_from_cloud_handler+0xc>)
   e3efc:	681b      	ldr	r3, [r3, #0]
   e3efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e3f00:	9301      	str	r3, [sp, #4]
   e3f02:	bd08      	pop	{r3, pc}
   e3f04:	00030244 	.word	0x00030244

000e3f08 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   e3f08:	b508      	push	{r3, lr}
   e3f0a:	4b02      	ldr	r3, [pc, #8]	; (e3f14 <network_connect+0xc>)
   e3f0c:	681b      	ldr	r3, [r3, #0]
   e3f0e:	685b      	ldr	r3, [r3, #4]
   e3f10:	9301      	str	r3, [sp, #4]
   e3f12:	bd08      	pop	{r3, pc}
   e3f14:	00030240 	.word	0x00030240

000e3f18 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   e3f18:	b508      	push	{r3, lr}
   e3f1a:	4b02      	ldr	r3, [pc, #8]	; (e3f24 <network_connecting+0xc>)
   e3f1c:	681b      	ldr	r3, [r3, #0]
   e3f1e:	689b      	ldr	r3, [r3, #8]
   e3f20:	9301      	str	r3, [sp, #4]
   e3f22:	bd08      	pop	{r3, pc}
   e3f24:	00030240 	.word	0x00030240

000e3f28 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   e3f28:	b508      	push	{r3, lr}
   e3f2a:	4b02      	ldr	r3, [pc, #8]	; (e3f34 <network_disconnect+0xc>)
   e3f2c:	681b      	ldr	r3, [r3, #0]
   e3f2e:	68db      	ldr	r3, [r3, #12]
   e3f30:	9301      	str	r3, [sp, #4]
   e3f32:	bd08      	pop	{r3, pc}
   e3f34:	00030240 	.word	0x00030240

000e3f38 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   e3f38:	b508      	push	{r3, lr}
   e3f3a:	4b02      	ldr	r3, [pc, #8]	; (e3f44 <network_ready+0xc>)
   e3f3c:	681b      	ldr	r3, [r3, #0]
   e3f3e:	691b      	ldr	r3, [r3, #16]
   e3f40:	9301      	str	r3, [sp, #4]
   e3f42:	bd08      	pop	{r3, pc}
   e3f44:	00030240 	.word	0x00030240

000e3f48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   e3f48:	b508      	push	{r3, lr}
   e3f4a:	4b02      	ldr	r3, [pc, #8]	; (e3f54 <network_on+0xc>)
   e3f4c:	681b      	ldr	r3, [r3, #0]
   e3f4e:	695b      	ldr	r3, [r3, #20]
   e3f50:	9301      	str	r3, [sp, #4]
   e3f52:	bd08      	pop	{r3, pc}
   e3f54:	00030240 	.word	0x00030240

000e3f58 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   e3f58:	b508      	push	{r3, lr}
   e3f5a:	4b02      	ldr	r3, [pc, #8]	; (e3f64 <network_off+0xc>)
   e3f5c:	681b      	ldr	r3, [r3, #0]
   e3f5e:	699b      	ldr	r3, [r3, #24]
   e3f60:	9301      	str	r3, [sp, #4]
   e3f62:	bd08      	pop	{r3, pc}
   e3f64:	00030240 	.word	0x00030240

000e3f68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   e3f68:	b508      	push	{r3, lr}
   e3f6a:	4b02      	ldr	r3, [pc, #8]	; (e3f74 <network_listen+0xc>)
   e3f6c:	681b      	ldr	r3, [r3, #0]
   e3f6e:	69db      	ldr	r3, [r3, #28]
   e3f70:	9301      	str	r3, [sp, #4]
   e3f72:	bd08      	pop	{r3, pc}
   e3f74:	00030240 	.word	0x00030240

000e3f78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   e3f78:	b508      	push	{r3, lr}
   e3f7a:	4b02      	ldr	r3, [pc, #8]	; (e3f84 <network_listening+0xc>)
   e3f7c:	681b      	ldr	r3, [r3, #0]
   e3f7e:	6a1b      	ldr	r3, [r3, #32]
   e3f80:	9301      	str	r3, [sp, #4]
   e3f82:	bd08      	pop	{r3, pc}
   e3f84:	00030240 	.word	0x00030240

000e3f88 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   e3f88:	b508      	push	{r3, lr}
   e3f8a:	4b02      	ldr	r3, [pc, #8]	; (e3f94 <network_set_listen_timeout+0xc>)
   e3f8c:	681b      	ldr	r3, [r3, #0]
   e3f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e3f90:	9301      	str	r3, [sp, #4]
   e3f92:	bd08      	pop	{r3, pc}
   e3f94:	00030240 	.word	0x00030240

000e3f98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   e3f98:	b508      	push	{r3, lr}
   e3f9a:	4b02      	ldr	r3, [pc, #8]	; (e3fa4 <network_get_listen_timeout+0xc>)
   e3f9c:	681b      	ldr	r3, [r3, #0]
   e3f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e3fa0:	9301      	str	r3, [sp, #4]
   e3fa2:	bd08      	pop	{r3, pc}
   e3fa4:	00030240 	.word	0x00030240

000e3fa8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   e3fa8:	b508      	push	{r3, lr}
   e3faa:	4b02      	ldr	r3, [pc, #8]	; (e3fb4 <malloc+0xc>)
   e3fac:	681b      	ldr	r3, [r3, #0]
   e3fae:	681b      	ldr	r3, [r3, #0]
   e3fb0:	9301      	str	r3, [sp, #4]
   e3fb2:	bd08      	pop	{r3, pc}
   e3fb4:	0003021c 	.word	0x0003021c

000e3fb8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   e3fb8:	b508      	push	{r3, lr}
   e3fba:	4b02      	ldr	r3, [pc, #8]	; (e3fc4 <free+0xc>)
   e3fbc:	681b      	ldr	r3, [r3, #0]
   e3fbe:	685b      	ldr	r3, [r3, #4]
   e3fc0:	9301      	str	r3, [sp, #4]
   e3fc2:	bd08      	pop	{r3, pc}
   e3fc4:	0003021c 	.word	0x0003021c

000e3fc8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   e3fc8:	b508      	push	{r3, lr}
   e3fca:	4b02      	ldr	r3, [pc, #8]	; (e3fd4 <realloc+0xc>)
   e3fcc:	681b      	ldr	r3, [r3, #0]
   e3fce:	689b      	ldr	r3, [r3, #8]
   e3fd0:	9301      	str	r3, [sp, #4]
   e3fd2:	bd08      	pop	{r3, pc}
   e3fd4:	0003021c 	.word	0x0003021c

000e3fd8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   e3fd8:	b508      	push	{r3, lr}
   e3fda:	4b02      	ldr	r3, [pc, #8]	; (e3fe4 <sprintf+0xc>)
   e3fdc:	681b      	ldr	r3, [r3, #0]
   e3fde:	68db      	ldr	r3, [r3, #12]
   e3fe0:	9301      	str	r3, [sp, #4]
   e3fe2:	bd08      	pop	{r3, pc}
   e3fe4:	0003021c 	.word	0x0003021c

000e3fe8 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   e3fe8:	b508      	push	{r3, lr}
   e3fea:	4b02      	ldr	r3, [pc, #8]	; (e3ff4 <snprintf+0xc>)
   e3fec:	681b      	ldr	r3, [r3, #0]
   e3fee:	69db      	ldr	r3, [r3, #28]
   e3ff0:	9301      	str	r3, [sp, #4]
   e3ff2:	bd08      	pop	{r3, pc}
   e3ff4:	0003021c 	.word	0x0003021c

000e3ff8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   e3ff8:	b508      	push	{r3, lr}
   e3ffa:	4b02      	ldr	r3, [pc, #8]	; (e4004 <vsnprintf+0xc>)
   e3ffc:	681b      	ldr	r3, [r3, #0]
   e3ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e4000:	9301      	str	r3, [sp, #4]
   e4002:	bd08      	pop	{r3, pc}
   e4004:	0003021c 	.word	0x0003021c

000e4008 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   e4008:	b508      	push	{r3, lr}
   e400a:	4b02      	ldr	r3, [pc, #8]	; (e4014 <abort+0xc>)
   e400c:	681b      	ldr	r3, [r3, #0]
   e400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e4010:	9301      	str	r3, [sp, #4]
   e4012:	bd08      	pop	{r3, pc}
   e4014:	0003021c 	.word	0x0003021c

000e4018 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   e4018:	b508      	push	{r3, lr}
   e401a:	4b02      	ldr	r3, [pc, #8]	; (e4024 <_malloc_r+0xc>)
   e401c:	681b      	ldr	r3, [r3, #0]
   e401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e4020:	9301      	str	r3, [sp, #4]
   e4022:	bd08      	pop	{r3, pc}
   e4024:	0003021c 	.word	0x0003021c

000e4028 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   e4028:	b508      	push	{r3, lr}
   e402a:	4b02      	ldr	r3, [pc, #8]	; (e4034 <__errno+0xc>)
   e402c:	681b      	ldr	r3, [r3, #0]
   e402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e4030:	9301      	str	r3, [sp, #4]
   e4032:	bd08      	pop	{r3, pc}
   e4034:	0003021c 	.word	0x0003021c

000e4038 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   e4038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e403c:	ed2d 8b02 	vpush	{d8}
   e4040:	eeb0 8a44 	vmov.f32	s16, s8
   e4044:	eef0 8a64 	vmov.f32	s17, s9
   e4048:	ec55 4b11 	vmov	r4, r5, d1
   e404c:	ec57 6b12 	vmov	r6, r7, d2
   e4050:	b083      	sub	sp, #12
    if (fromEnd == fromStart) {
   e4052:	ee11 2a10 	vmov	r2, s2
   e4056:	462b      	mov	r3, r5
   e4058:	ee12 0a10 	vmov	r0, s4
   e405c:	4639      	mov	r1, r7
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   e405e:	ed8d 0b00 	vstr	d0, [sp]
   e4062:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   e4066:	f002 faf7 	bl	e6658 <__aeabi_dcmpeq>
   e406a:	ed9d 0b00 	vldr	d0, [sp]
   e406e:	bb38      	cbnz	r0, e40c0 <_Z3mapddddd+0x88>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   e4070:	ec51 0b10 	vmov	r0, r1, d0
   e4074:	4622      	mov	r2, r4
   e4076:	462b      	mov	r3, r5
   e4078:	f001 fed2 	bl	e5e20 <__aeabi_dsub>
   e407c:	4652      	mov	r2, sl
   e407e:	4680      	mov	r8, r0
   e4080:	4689      	mov	r9, r1
   e4082:	465b      	mov	r3, fp
   e4084:	ec51 0b18 	vmov	r0, r1, d8
   e4088:	f001 feca 	bl	e5e20 <__aeabi_dsub>
   e408c:	4602      	mov	r2, r0
   e408e:	460b      	mov	r3, r1
   e4090:	4640      	mov	r0, r8
   e4092:	4649      	mov	r1, r9
   e4094:	f002 f878 	bl	e6188 <__aeabi_dmul>
   e4098:	4622      	mov	r2, r4
   e409a:	4680      	mov	r8, r0
   e409c:	4689      	mov	r9, r1
   e409e:	462b      	mov	r3, r5
   e40a0:	4630      	mov	r0, r6
   e40a2:	4639      	mov	r1, r7
   e40a4:	f001 febc 	bl	e5e20 <__aeabi_dsub>
   e40a8:	4602      	mov	r2, r0
   e40aa:	460b      	mov	r3, r1
   e40ac:	4640      	mov	r0, r8
   e40ae:	4649      	mov	r1, r9
   e40b0:	f002 f994 	bl	e63dc <__aeabi_ddiv>
   e40b4:	4652      	mov	r2, sl
   e40b6:	465b      	mov	r3, fp
   e40b8:	f001 feb4 	bl	e5e24 <__adddf3>
   e40bc:	ec41 0b10 	vmov	d0, r0, r1
}
   e40c0:	b003      	add	sp, #12
   e40c2:	ecbd 8b02 	vpop	{d8}
   e40c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e40ca <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   e40ca:	2100      	movs	r1, #0
   e40cc:	f7ff bea8 	b.w	e3e20 <system_delay_ms>

000e40d0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   e40d0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e40d2:	6883      	ldr	r3, [r0, #8]
   e40d4:	4604      	mov	r4, r0
   e40d6:	b90b      	cbnz	r3, e40dc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   e40d8:	f001 fd53 	bl	e5b82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e40dc:	68c3      	ldr	r3, [r0, #12]
   e40de:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   e40e0:	68a3      	ldr	r3, [r4, #8]
   e40e2:	b11b      	cbz	r3, e40ec <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e40e4:	2203      	movs	r2, #3
   e40e6:	4621      	mov	r1, r4
   e40e8:	4620      	mov	r0, r4
   e40ea:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   e40ec:	4620      	mov	r0, r4
   e40ee:	2110      	movs	r1, #16
}
   e40f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   e40f4:	f001 bd43 	b.w	e5b7e <_ZdlPvj>

000e40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   e40f8:	680b      	ldr	r3, [r1, #0]
   e40fa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   e40fc:	b113      	cbz	r3, e4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   e40fe:	685a      	ldr	r2, [r3, #4]
   e4100:	3201      	adds	r2, #1
   e4102:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   e4104:	4770      	bx	lr
	...

000e4108 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e4108:	4802      	ldr	r0, [pc, #8]	; (e4114 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   e410a:	2300      	movs	r3, #0
   e410c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   e410e:	f7ff bccf 	b.w	e3ab0 <os_mutex_recursive_create>
   e4112:	bf00      	nop
   e4114:	2003e4c8 	.word	0x2003e4c8

000e4118 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e4118:	4770      	bx	lr

000e411a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   e411a:	2000      	movs	r0, #0
   e411c:	4770      	bx	lr

000e411e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e411e:	b510      	push	{r4, lr}
   e4120:	2110      	movs	r1, #16
   e4122:	4604      	mov	r4, r0
   e4124:	f001 fd2b 	bl	e5b7e <_ZdlPvj>
   e4128:	4620      	mov	r0, r4
   e412a:	bd10      	pop	{r4, pc}

000e412c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   e412c:	b508      	push	{r3, lr}
      { delete this; }
   e412e:	b108      	cbz	r0, e4134 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   e4130:	f7ff fff5 	bl	e411e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   e4134:	bd08      	pop	{r3, pc}

000e4136 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e4136:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   e4138:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e413a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   e413c:	b113      	cbz	r3, e4144 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e413e:	2203      	movs	r2, #3
   e4140:	4601      	mov	r1, r0
   e4142:	4798      	blx	r3
    }
   e4144:	4620      	mov	r0, r4
   e4146:	bd10      	pop	{r4, pc}

000e4148 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   e4148:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   e414a:	68c4      	ldr	r4, [r0, #12]
   e414c:	b1ec      	cbz	r4, e418a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   e414e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   e4150:	2b02      	cmp	r3, #2
   e4152:	d102      	bne.n	e415a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   e4154:	68e0      	ldr	r0, [r4, #12]
   e4156:	f7ff ff2f 	bl	e3fb8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   e415a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   e415c:	b135      	cbz	r5, e416c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e415e:	4628      	mov	r0, r5
   e4160:	f7ff ffe9 	bl	e4136 <_ZNSt14_Function_baseD1Ev>
   e4164:	2110      	movs	r1, #16
   e4166:	4628      	mov	r0, r5
   e4168:	f001 fd09 	bl	e5b7e <_ZdlPvj>
   e416c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   e416e:	b135      	cbz	r5, e417e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   e4170:	4628      	mov	r0, r5
   e4172:	f7ff ffe0 	bl	e4136 <_ZNSt14_Function_baseD1Ev>
   e4176:	2110      	movs	r1, #16
   e4178:	4628      	mov	r0, r5
   e417a:	f001 fd00 	bl	e5b7e <_ZdlPvj>
   e417e:	4620      	mov	r0, r4
   e4180:	2114      	movs	r1, #20
   e4182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e4186:	f001 bcfa 	b.w	e5b7e <_ZdlPvj>
   e418a:	bd38      	pop	{r3, r4, r5, pc}

000e418c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   e418c:	b510      	push	{r4, lr}
   e418e:	b088      	sub	sp, #32
   e4190:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   e4192:	4668      	mov	r0, sp
   e4194:	f000 fe83 	bl	e4e9e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   e4198:	4669      	mov	r1, sp
   e419a:	a804      	add	r0, sp, #16
   e419c:	f000 fea1 	bl	e4ee2 <_ZN6StringC1ERKS_>
   e41a0:	a804      	add	r0, sp, #16
   e41a2:	47a0      	blx	r4
   e41a4:	4604      	mov	r4, r0
   e41a6:	a804      	add	r0, sp, #16
   e41a8:	f000 fe32 	bl	e4e10 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   e41ac:	4668      	mov	r0, sp
   e41ae:	f000 fe2f 	bl	e4e10 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   e41b2:	4620      	mov	r0, r4
   e41b4:	b008      	add	sp, #32
   e41b6:	bd10      	pop	{r4, pc}

000e41b8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   e41b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   e41ba:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   e41bc:	b085      	sub	sp, #20
   e41be:	4607      	mov	r7, r0
   e41c0:	460e      	mov	r6, r1
   e41c2:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   e41c4:	2100      	movs	r1, #0
   e41c6:	4622      	mov	r2, r4
   e41c8:	4668      	mov	r0, sp
   e41ca:	f002 fce2 	bl	e6b92 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   e41ce:	2200      	movs	r2, #0
   e41d0:	4669      	mov	r1, sp
   e41d2:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   e41d4:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   e41d8:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   e41da:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   e41dc:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   e41de:	f7ff fe5b 	bl	e3e98 <spark_function>
}
   e41e2:	b005      	add	sp, #20
   e41e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e41e6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   e41e6:	b513      	push	{r0, r1, r4, lr}
   e41e8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   e41ea:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   e41ee:	2300      	movs	r3, #0
   e41f0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   e41f2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   e41f4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   e41f6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   e41f8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   e41fa:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   e41fc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   e41fe:	f7f0 f943 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e4202:	4620      	mov	r0, r4
   e4204:	b002      	add	sp, #8
   e4206:	bd10      	pop	{r4, pc}

000e4208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   e4208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   e420a:	460c      	mov	r4, r1
   e420c:	ad02      	add	r5, sp, #8
   e420e:	f854 3b04 	ldr.w	r3, [r4], #4
   e4212:	f845 3d08 	str.w	r3, [r5, #-8]!
   e4216:	4606      	mov	r6, r0
   e4218:	460f      	mov	r7, r1
   e421a:	a801      	add	r0, sp, #4
   e421c:	4621      	mov	r1, r4
   e421e:	f7ff ff6b 	bl	e40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   e4222:	4629      	mov	r1, r5
   e4224:	4630      	mov	r0, r6
   e4226:	f7ff ffde 	bl	e41e6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   e422a:	a801      	add	r0, sp, #4
   e422c:	f7f0 f92c 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e4230:	4620      	mov	r0, r4
   e4232:	f7f0 f929 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   e4236:	4638      	mov	r0, r7
   e4238:	2108      	movs	r1, #8
   e423a:	f001 fca0 	bl	e5b7e <_ZdlPvj>
        return p;
    }
   e423e:	4630      	mov	r0, r6
   e4240:	b003      	add	sp, #12
   e4242:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e4244 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   e4244:	b513      	push	{r0, r1, r4, lr}
   e4246:	460b      	mov	r3, r1
   e4248:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e424a:	c803      	ldmia	r0, {r0, r1}
   e424c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   e4250:	e893 0003 	ldmia.w	r3, {r0, r1}
   e4254:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   e4258:	e89d 0003 	ldmia.w	sp, {r0, r1}
   e425c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   e4260:	b002      	add	sp, #8
   e4262:	bd10      	pop	{r4, pc}

000e4264 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e4264:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   e4266:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e4268:	b90a      	cbnz	r2, e426e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   e426a:	f001 fc8a 	bl	e5b82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e426e:	68c3      	ldr	r3, [r0, #12]
    }
   e4270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e4274:	4718      	bx	r3

000e4276 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   e4276:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   e4278:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   e427a:	f100 0110 	add.w	r1, r0, #16
   e427e:	f7ff fff1 	bl	e4264 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   e4282:	bd08      	pop	{r3, pc}

000e4284 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e4284:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   e4286:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e4288:	b90a      	cbnz	r2, e428e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   e428a:	f001 fc7a 	bl	e5b82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e428e:	68c3      	ldr	r3, [r0, #12]
    }
   e4290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e4294:	4718      	bx	r3

000e4296 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   e4296:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   e4298:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   e429a:	f100 0110 	add.w	r1, r0, #16
   e429e:	f7ff fff1 	bl	e4284 <_ZNKSt8functionIFvRKbEEclES1_>
   e42a2:	bd08      	pop	{r3, pc}

000e42a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e42a4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e42a6:	2300      	movs	r3, #0
   e42a8:	6083      	str	r3, [r0, #8]
   e42aa:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e42ac:	4604      	mov	r4, r0
   e42ae:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   e42b0:	b12b      	cbz	r3, e42be <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   e42b2:	2202      	movs	r2, #2
   e42b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   e42b6:	68eb      	ldr	r3, [r5, #12]
   e42b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   e42ba:	68ab      	ldr	r3, [r5, #8]
   e42bc:	60a3      	str	r3, [r4, #8]
	}
    }
   e42be:	4620      	mov	r0, r4
   e42c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000e42c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   e42c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   e42c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
   e42cc:	b086      	sub	sp, #24
   e42ce:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e42d0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   e42d4:	808b      	strh	r3, [r1, #4]
   e42d6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e42d8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   e42da:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   e42de:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   e42e0:	f04f 0002 	mov.w	r0, #2
   e42e4:	e8d4 1f4f 	ldrexb	r1, [r4]
   e42e8:	4299      	cmp	r1, r3
   e42ea:	d103      	bne.n	e42f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   e42ec:	e8c4 0f45 	strexb	r5, r0, [r4]
   e42f0:	2d00      	cmp	r5, #0
   e42f2:	d1f7      	bne.n	e42e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   e42f4:	d002      	beq.n	e42fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   e42f6:	f88d 1000 	strb.w	r1, [sp]
   e42fa:	e06b      	b.n	e43d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   e42fc:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e4300:	bf1e      	ittt	ne
   e4302:	60e7      	strne	r7, [r4, #12]
   e4304:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   e4306:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e4308:	2301      	movs	r3, #1
   e430a:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   e430e:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e4310:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   e4312:	f104 0308 	add.w	r3, r4, #8
   e4316:	f3bf 8f5f 	dmb	sy
   e431a:	e853 6f00 	ldrex	r6, [r3]
   e431e:	e843 0200 	strex	r2, r0, [r3]
   e4322:	2a00      	cmp	r2, #0
   e4324:	d1f9      	bne.n	e431a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   e4326:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   e432a:	2e00      	cmp	r6, #0
   e432c:	d052      	beq.n	e43d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   e432e:	f7ff fd7f 	bl	e3e30 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   e4332:	b120      	cbz	r0, e433e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   e4334:	4629      	mov	r1, r5
   e4336:	4630      	mov	r0, r6
   e4338:	f7ff ff94 	bl	e4264 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   e433c:	e043      	b.n	e43c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   e433e:	4631      	mov	r1, r6
   e4340:	4668      	mov	r0, sp
   e4342:	f7ff ffaf 	bl	e42a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   e4346:	68e0      	ldr	r0, [r4, #12]
   e4348:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   e434c:	b108      	cbz	r0, e4352 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   e434e:	f002 fc71 	bl	e6c34 <strdup>
   e4352:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   e4354:	2010      	movs	r0, #16
   e4356:	f8ad 5014 	strh.w	r5, [sp, #20]
   e435a:	f7ef fe9c 	bl	d4096 <_Znwj>
   e435e:	4605      	mov	r5, r0
   e4360:	b330      	cbz	r0, e43b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e4362:	f04f 0800 	mov.w	r8, #0
   e4366:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e436a:	2018      	movs	r0, #24
   e436c:	f7ef fe93 	bl	d4096 <_Znwj>
   e4370:	4604      	mov	r4, r0
   e4372:	b1c0      	cbz	r0, e43a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e4374:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   e4378:	4601      	mov	r1, r0
   e437a:	4668      	mov	r0, sp
   e437c:	f7ff ff62 	bl	e4244 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e4380:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   e4382:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e4384:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e4386:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   e4388:	9202      	str	r2, [sp, #8]
   e438a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e438c:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e438e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   e4392:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   e4394:	f64f 739c 	movw	r3, #65436	; 0xff9c
   e4398:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e439c:	9b04      	ldr	r3, [sp, #16]
   e439e:	9203      	str	r2, [sp, #12]
   e43a0:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   e43a2:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   e43a6:	4b0e      	ldr	r3, [pc, #56]	; (e43e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   e43a8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   e43aa:	4b0e      	ldr	r3, [pc, #56]	; (e43e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e43ac:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   e43ae:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   e43b0:	9804      	ldr	r0, [sp, #16]
   e43b2:	f7ff fe01 	bl	e3fb8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e43b6:	4668      	mov	r0, sp
   e43b8:	f7ff febd 	bl	e4136 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   e43bc:	2200      	movs	r2, #0
   e43be:	4629      	mov	r1, r5
   e43c0:	4809      	ldr	r0, [pc, #36]	; (e43e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   e43c2:	f7ff fd3d 	bl	e3e40 <application_thread_invoke>
   e43c6:	4630      	mov	r0, r6
   e43c8:	f7ff feb5 	bl	e4136 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   e43cc:	2110      	movs	r1, #16
   e43ce:	4630      	mov	r0, r6
   e43d0:	f001 fbd5 	bl	e5b7e <_ZdlPvj>
   e43d4:	4638      	mov	r0, r7
   e43d6:	f7ff fdef 	bl	e3fb8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   e43da:	b006      	add	sp, #24
   e43dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e43e0:	000e4277 	.word	0x000e4277
   e43e4:	000e44d5 	.word	0x000e44d5
   e43e8:	000e40d1 	.word	0x000e40d1

000e43ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   e43ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e43f0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   e43f2:	ad07      	add	r5, sp, #28
   e43f4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   e43f8:	4606      	mov	r6, r0
   e43fa:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   e43fc:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   e43fe:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   e4400:	460f      	mov	r7, r1
   e4402:	4690      	mov	r8, r2
   e4404:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   e4408:	f8c5 b004 	str.w	fp, [r5, #4]
   e440c:	f8c5 b008 	str.w	fp, [r5, #8]
   e4410:	9307      	str	r3, [sp, #28]
   e4412:	f7ef fe40 	bl	d4096 <_Znwj>
   e4416:	4604      	mov	r4, r0
   e4418:	b138      	cbz	r0, e442a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   e441a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e441e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   e4422:	f8c0 b004 	str.w	fp, [r0, #4]
   e4426:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   e442a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e442c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   e442e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   e4430:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e4432:	f7ef fe30 	bl	d4096 <_Znwj>
   e4436:	b128      	cbz	r0, e4444 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   e4438:	2301      	movs	r3, #1
   e443a:	6043      	str	r3, [r0, #4]
   e443c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   e443e:	4b23      	ldr	r3, [pc, #140]	; (e44cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   e4440:	6003      	str	r3, [r0, #0]
   e4442:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e4444:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   e4446:	4b22      	ldr	r3, [pc, #136]	; (e44d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   e4448:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   e444a:	2008      	movs	r0, #8
   e444c:	f7ef fe23 	bl	d4096 <_Znwj>
   e4450:	4604      	mov	r4, r0
   e4452:	b128      	cbz	r0, e4460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   e4454:	9b03      	ldr	r3, [sp, #12]
   e4456:	f840 3b04 	str.w	r3, [r0], #4
   e445a:	a904      	add	r1, sp, #16
   e445c:	f7ff fe4c 	bl	e40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   e4460:	9500      	str	r5, [sp, #0]
   e4462:	fa5f f38a 	uxtb.w	r3, sl
   e4466:	464a      	mov	r2, r9
   e4468:	4641      	mov	r1, r8
   e446a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   e446c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   e446e:	f7ff fd2b 	bl	e3ec8 <spark_send_event>
   e4472:	b9b8      	cbnz	r0, e44a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   e4474:	9b03      	ldr	r3, [sp, #12]
   e4476:	785b      	ldrb	r3, [r3, #1]
   e4478:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   e447c:	b993      	cbnz	r3, e44a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   e447e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   e4482:	a905      	add	r1, sp, #20
   e4484:	a803      	add	r0, sp, #12
   e4486:	9205      	str	r2, [sp, #20]
   e4488:	f8ad 3018 	strh.w	r3, [sp, #24]
   e448c:	f7ff ff1a 	bl	e42c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   e4490:	9805      	ldr	r0, [sp, #20]
   e4492:	f7ff fd91 	bl	e3fb8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   e4496:	a805      	add	r0, sp, #20
   e4498:	9909      	ldr	r1, [sp, #36]	; 0x24
   e449a:	f7ff feb5 	bl	e4208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   e449e:	a806      	add	r0, sp, #24
   e44a0:	f7ef fff2 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   e44a4:	9b03      	ldr	r3, [sp, #12]
   e44a6:	9305      	str	r3, [sp, #20]
   e44a8:	a904      	add	r1, sp, #16
   e44aa:	a806      	add	r0, sp, #24
   e44ac:	f7ff fe24 	bl	e40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   e44b0:	a905      	add	r1, sp, #20
   e44b2:	4630      	mov	r0, r6
   e44b4:	f7ff fe97 	bl	e41e6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   e44b8:	a806      	add	r0, sp, #24
   e44ba:	f7ef ffe5 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e44be:	a804      	add	r0, sp, #16
   e44c0:	f7ef ffe2 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   e44c4:	4630      	mov	r0, r6
   e44c6:	b00b      	add	sp, #44	; 0x2c
   e44c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e44cc:	000e96fc 	.word	0x000e96fc
   e44d0:	000e4641 	.word	0x000e4641

000e44d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   e44d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   e44d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e44d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   e44da:	d006      	beq.n	e44ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   e44dc:	2a03      	cmp	r2, #3
   e44de:	d017      	beq.n	e4510 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   e44e0:	2a01      	cmp	r2, #1
   e44e2:	d121      	bne.n	e4528 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   e44e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   e44e6:	6003      	str	r3, [r0, #0]
	      break;
   e44e8:	e01e      	b.n	e4528 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e44ea:	2018      	movs	r0, #24
   e44ec:	680e      	ldr	r6, [r1, #0]
   e44ee:	f7ef fdd2 	bl	d4096 <_Znwj>
   e44f2:	4605      	mov	r5, r0
   e44f4:	b150      	cbz	r0, e450c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   e44f6:	4631      	mov	r1, r6
   e44f8:	f7ff fed4 	bl	e42a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   e44fc:	6930      	ldr	r0, [r6, #16]
   e44fe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   e4502:	b108      	cbz	r0, e4508 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   e4504:	f002 fb96 	bl	e6c34 <strdup>
   e4508:	6128      	str	r0, [r5, #16]
   e450a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e450c:	6025      	str	r5, [r4, #0]
   e450e:	e00b      	b.n	e4528 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e4510:	6804      	ldr	r4, [r0, #0]
   e4512:	b14c      	cbz	r4, e4528 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   e4514:	6920      	ldr	r0, [r4, #16]
   e4516:	f7ff fd4f 	bl	e3fb8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e451a:	4620      	mov	r0, r4
   e451c:	f7ff fe0b 	bl	e4136 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e4520:	2118      	movs	r1, #24
   e4522:	4620      	mov	r0, r4
   e4524:	f001 fb2b 	bl	e5b7e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   e4528:	2000      	movs	r0, #0
   e452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e452c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e452c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e452e:	2300      	movs	r3, #0
   e4530:	6083      	str	r3, [r0, #8]
   e4532:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e4534:	4604      	mov	r4, r0
   e4536:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   e4538:	b12b      	cbz	r3, e4546 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   e453a:	2202      	movs	r2, #2
   e453c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   e453e:	68eb      	ldr	r3, [r5, #12]
   e4540:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   e4542:	68ab      	ldr	r3, [r5, #8]
   e4544:	60a3      	str	r3, [r4, #8]
	}
    }
   e4546:	4620      	mov	r0, r4
   e4548:	bd38      	pop	{r3, r4, r5, pc}

000e454a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   e454a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   e454c:	b570      	push	{r4, r5, r6, lr}
   e454e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   e4550:	d006      	beq.n	e4560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   e4552:	2a03      	cmp	r2, #3
   e4554:	d011      	beq.n	e457a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   e4556:	2a01      	cmp	r2, #1
   e4558:	d118      	bne.n	e458c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   e455a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   e455c:	6003      	str	r3, [r0, #0]
	      break;
   e455e:	e015      	b.n	e458c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e4560:	2014      	movs	r0, #20
   e4562:	680e      	ldr	r6, [r1, #0]
   e4564:	f7ef fd97 	bl	d4096 <_Znwj>
   e4568:	4605      	mov	r5, r0
   e456a:	b120      	cbz	r0, e4576 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   e456c:	4631      	mov	r1, r6
   e456e:	f7ff ffdd 	bl	e452c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   e4572:	7c33      	ldrb	r3, [r6, #16]
   e4574:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e4576:	6025      	str	r5, [r4, #0]
   e4578:	e008      	b.n	e458c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e457a:	6804      	ldr	r4, [r0, #0]
   e457c:	b134      	cbz	r4, e458c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e457e:	4620      	mov	r0, r4
   e4580:	f7ff fdd9 	bl	e4136 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e4584:	2114      	movs	r1, #20
   e4586:	4620      	mov	r0, r4
   e4588:	f001 faf9 	bl	e5b7e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   e458c:	2000      	movs	r0, #0
   e458e:	bd70      	pop	{r4, r5, r6, pc}

000e4590 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   e4590:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   e4592:	2300      	movs	r3, #0
   e4594:	b087      	sub	sp, #28
   e4596:	460c      	mov	r4, r1
   e4598:	f3bf 8f5f 	dmb	sy
   e459c:	e850 6f00 	ldrex	r6, [r0]
   e45a0:	e840 3200 	strex	r2, r3, [r0]
   e45a4:	2a00      	cmp	r2, #0
   e45a6:	d1f9      	bne.n	e459c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   e45a8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   e45ac:	2e00      	cmp	r6, #0
   e45ae:	d03f      	beq.n	e4630 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   e45b0:	4618      	mov	r0, r3
   e45b2:	f7ff fc3d 	bl	e3e30 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   e45b6:	4607      	mov	r7, r0
   e45b8:	b120      	cbz	r0, e45c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   e45ba:	4621      	mov	r1, r4
   e45bc:	4630      	mov	r0, r6
   e45be:	f7ff fe61 	bl	e4284 <_ZNKSt8functionIFvRKbEEclES1_>
   e45c2:	e02e      	b.n	e4622 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   e45c4:	4631      	mov	r1, r6
   e45c6:	a801      	add	r0, sp, #4
   e45c8:	f7ff ffb0 	bl	e452c <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e45cc:	7823      	ldrb	r3, [r4, #0]
   e45ce:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   e45d2:	2010      	movs	r0, #16
   e45d4:	f7ef fd5f 	bl	d4096 <_Znwj>
   e45d8:	4605      	mov	r5, r0
   e45da:	b1d0      	cbz	r0, e4612 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e45dc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e45de:	2014      	movs	r0, #20
   e45e0:	f7ef fd59 	bl	d4096 <_Znwj>
   e45e4:	4604      	mov	r4, r0
   e45e6:	b178      	cbz	r0, e4608 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e45e8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   e45ea:	4601      	mov	r1, r0
   e45ec:	a801      	add	r0, sp, #4
   e45ee:	f7ff fe29 	bl	e4244 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e45f2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   e45f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e45f6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e45f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   e45fa:	9203      	str	r2, [sp, #12]
   e45fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e45fe:	60e3      	str	r3, [r4, #12]
   e4600:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e4604:	9204      	str	r2, [sp, #16]
   e4606:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   e4608:	4b0a      	ldr	r3, [pc, #40]	; (e4634 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   e460a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   e460c:	4b0a      	ldr	r3, [pc, #40]	; (e4638 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e460e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   e4610:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e4612:	a801      	add	r0, sp, #4
   e4614:	f7ff fd8f 	bl	e4136 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   e4618:	2200      	movs	r2, #0
   e461a:	4629      	mov	r1, r5
   e461c:	4807      	ldr	r0, [pc, #28]	; (e463c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   e461e:	f7ff fc0f 	bl	e3e40 <application_thread_invoke>
   e4622:	4630      	mov	r0, r6
   e4624:	f7ff fd87 	bl	e4136 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   e4628:	2110      	movs	r1, #16
   e462a:	4630      	mov	r0, r6
   e462c:	f001 faa7 	bl	e5b7e <_ZdlPvj>
        }
    }
   e4630:	b007      	add	sp, #28
   e4632:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e4634:	000e4297 	.word	0x000e4297
   e4638:	000e454b 	.word	0x000e454b
   e463c:	000e40d1 	.word	0x000e40d1

000e4640 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   e4640:	b530      	push	{r4, r5, lr}
   e4642:	b085      	sub	sp, #20
   e4644:	4604      	mov	r4, r0
   e4646:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   e4648:	4668      	mov	r0, sp
   e464a:	4611      	mov	r1, r2
   e464c:	f7ff fddc 	bl	e4208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   e4650:	b17c      	cbz	r4, e4672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   e4652:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   e4654:	4628      	mov	r0, r5
   e4656:	b10d      	cbz	r5, e465c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   e4658:	f002 faec 	bl	e6c34 <strdup>
   e465c:	9002      	str	r0, [sp, #8]
   e465e:	a902      	add	r1, sp, #8
   e4660:	4668      	mov	r0, sp
   e4662:	f8ad 400c 	strh.w	r4, [sp, #12]
   e4666:	f7ff fe2d 	bl	e42c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   e466a:	9802      	ldr	r0, [sp, #8]
   e466c:	f7ff fca4 	bl	e3fb8 <free>
   e4670:	e01d      	b.n	e46ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   e4672:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   e4674:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   e4678:	f04f 0201 	mov.w	r2, #1
   e467c:	e8d0 3f4f 	ldrexb	r3, [r0]
   e4680:	42a3      	cmp	r3, r4
   e4682:	d103      	bne.n	e468c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   e4684:	e8c0 2f41 	strexb	r1, r2, [r0]
   e4688:	2900      	cmp	r1, #0
   e468a:	d1f7      	bne.n	e467c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   e468c:	d002      	beq.n	e4694 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   e468e:	f88d 3008 	strb.w	r3, [sp, #8]
   e4692:	e00c      	b.n	e46ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   e4694:	f110 010c 	adds.w	r1, r0, #12
   e4698:	f04f 0301 	mov.w	r3, #1
   e469c:	bf18      	it	ne
   e469e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e46a0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   e46a4:	3004      	adds	r0, #4
   e46a6:	f800 3c03 	strb.w	r3, [r0, #-3]
   e46aa:	f7ff ff71 	bl	e4590 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   e46ae:	a801      	add	r0, sp, #4
   e46b0:	f7ef feea 	bl	d4488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   e46b4:	b005      	add	sp, #20
   e46b6:	bd30      	pop	{r4, r5, pc}

000e46b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e46b8:	2200      	movs	r2, #0
   e46ba:	4611      	mov	r1, r2
   e46bc:	6840      	ldr	r0, [r0, #4]
   e46be:	f7ff bc5b 	b.w	e3f78 <network_listening>

000e46c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e46c2:	2200      	movs	r2, #0
   e46c4:	4611      	mov	r1, r2
   e46c6:	6840      	ldr	r0, [r0, #4]
   e46c8:	f7ff bc66 	b.w	e3f98 <network_get_listen_timeout>

000e46cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e46cc:	2200      	movs	r2, #0
   e46ce:	6840      	ldr	r0, [r0, #4]
   e46d0:	f7ff bc5a 	b.w	e3f88 <network_set_listen_timeout>

000e46d4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e46d4:	2200      	movs	r2, #0
   e46d6:	f081 0101 	eor.w	r1, r1, #1
   e46da:	6840      	ldr	r0, [r0, #4]
   e46dc:	f7ff bc44 	b.w	e3f68 <network_listen>

000e46e0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   e46e0:	2300      	movs	r3, #0
   e46e2:	461a      	mov	r2, r3
   e46e4:	4619      	mov	r1, r3
   e46e6:	6840      	ldr	r0, [r0, #4]
   e46e8:	f7ff bc36 	b.w	e3f58 <network_off>

000e46ec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e46ec:	2300      	movs	r3, #0
   e46ee:	461a      	mov	r2, r3
   e46f0:	4619      	mov	r1, r3
   e46f2:	6840      	ldr	r0, [r0, #4]
   e46f4:	f7ff bc28 	b.w	e3f48 <network_on>

000e46f8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e46f8:	2200      	movs	r2, #0
   e46fa:	4611      	mov	r1, r2
   e46fc:	6840      	ldr	r0, [r0, #4]
   e46fe:	f7ff bc1b 	b.w	e3f38 <network_ready>

000e4702 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e4702:	2200      	movs	r2, #0
   e4704:	4611      	mov	r1, r2
   e4706:	6840      	ldr	r0, [r0, #4]
   e4708:	f7ff bc06 	b.w	e3f18 <network_connecting>

000e470c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e470c:	2200      	movs	r2, #0
   e470e:	2102      	movs	r1, #2
   e4710:	6840      	ldr	r0, [r0, #4]
   e4712:	f7ff bc09 	b.w	e3f28 <network_disconnect>

000e4716 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e4716:	2300      	movs	r3, #0
   e4718:	461a      	mov	r2, r3
   e471a:	6840      	ldr	r0, [r0, #4]
   e471c:	f7ff bbf4 	b.w	e3f08 <network_connect>

000e4720 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   e4720:	4b02      	ldr	r3, [pc, #8]	; (e472c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   e4722:	2203      	movs	r2, #3
   e4724:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   e4726:	4a02      	ldr	r2, [pc, #8]	; (e4730 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   e4728:	601a      	str	r2, [r3, #0]
   e472a:	4770      	bx	lr
   e472c:	2003e4cc 	.word	0x2003e4cc
   e4730:	000e9718 	.word	0x000e9718

000e4734 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   e4734:	4770      	bx	lr

000e4736 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   e4736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e4738:	4606      	mov	r6, r0
   e473a:	4615      	mov	r5, r2
   e473c:	460c      	mov	r4, r1
   e473e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e4740:	42bc      	cmp	r4, r7
   e4742:	d006      	beq.n	e4752 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   e4744:	6833      	ldr	r3, [r6, #0]
   e4746:	f814 1b01 	ldrb.w	r1, [r4], #1
   e474a:	689b      	ldr	r3, [r3, #8]
   e474c:	4630      	mov	r0, r6
   e474e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e4750:	e7f6      	b.n	e4740 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   e4752:	4628      	mov	r0, r5
   e4754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e4756 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   e4756:	2200      	movs	r2, #0
   e4758:	7c00      	ldrb	r0, [r0, #16]
   e475a:	f7ff ba21 	b.w	e3ba0 <HAL_I2C_Write_Data>

000e475e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   e475e:	2100      	movs	r1, #0
   e4760:	7c00      	ldrb	r0, [r0, #16]
   e4762:	f7ff ba25 	b.w	e3bb0 <HAL_I2C_Available_Data>

000e4766 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   e4766:	2100      	movs	r1, #0
   e4768:	7c00      	ldrb	r0, [r0, #16]
   e476a:	f7ff ba29 	b.w	e3bc0 <HAL_I2C_Read_Data>

000e476e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   e476e:	2100      	movs	r1, #0
   e4770:	7c00      	ldrb	r0, [r0, #16]
   e4772:	f7ff ba2d 	b.w	e3bd0 <HAL_I2C_Peek_Data>

000e4776 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   e4776:	2100      	movs	r1, #0
   e4778:	7c00      	ldrb	r0, [r0, #16]
   e477a:	f7ff ba31 	b.w	e3be0 <HAL_I2C_Flush_Data>

000e477e <_ZN7TwoWireD0Ev>:
   e477e:	b510      	push	{r4, lr}
   e4780:	2114      	movs	r1, #20
   e4782:	4604      	mov	r4, r0
   e4784:	f001 f9fb 	bl	e5b7e <_ZdlPvj>
   e4788:	4620      	mov	r0, r4
   e478a:	bd10      	pop	{r4, pc}

000e478c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   e478c:	b510      	push	{r4, lr}
   e478e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   e4790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e4794:	4608      	mov	r0, r1
   e4796:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e4798:	2100      	movs	r1, #0
   e479a:	4b04      	ldr	r3, [pc, #16]	; (e47ac <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   e479c:	7420      	strb	r0, [r4, #16]
   e479e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   e47a0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   e47a2:	f7ff fa2d 	bl	e3c00 <HAL_I2C_Init>

}
   e47a6:	4620      	mov	r0, r4
   e47a8:	bd10      	pop	{r4, pc}
   e47aa:	bf00      	nop
   e47ac:	000e974c 	.word	0x000e974c

000e47b0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   e47b0:	2100      	movs	r1, #0
   e47b2:	7c00      	ldrb	r0, [r0, #16]
   e47b4:	f7ff ba1c 	b.w	e3bf0 <HAL_I2C_Is_Enabled>

000e47b8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   e47b8:	f7ff b9e2 	b.w	e3b80 <HAL_Interrupts_Disable_All>

000e47bc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   e47bc:	f7ff b9d8 	b.w	e3b70 <HAL_Interrupts_Enable_All>

000e47c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e47c0:	4770      	bx	lr

000e47c2 <_ZN9IPAddressD0Ev>:
   e47c2:	b510      	push	{r4, lr}
   e47c4:	2118      	movs	r1, #24
   e47c6:	4604      	mov	r4, r0
   e47c8:	f001 f9d9 	bl	e5b7e <_ZdlPvj>
   e47cc:	4620      	mov	r0, r4
   e47ce:	bd10      	pop	{r4, pc}

000e47d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e47d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e47d2:	7d03      	ldrb	r3, [r0, #20]
   e47d4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e47d6:	b08d      	sub	sp, #52	; 0x34
   e47d8:	460e      	mov	r6, r1
   e47da:	f100 0704 	add.w	r7, r0, #4
   e47de:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e47e2:	d002      	beq.n	e47ea <_ZNK9IPAddress7printToER5Print+0x1a>
   e47e4:	f100 0508 	add.w	r5, r0, #8
   e47e8:	e018      	b.n	e481c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e47ea:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e47ec:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e47ee:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e47f2:	232f      	movs	r3, #47	; 0x2f
   e47f4:	462a      	mov	r2, r5
   e47f6:	200a      	movs	r0, #10
   e47f8:	f7ff fa12 	bl	e3c20 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e47fc:	4628      	mov	r0, r5
   e47fe:	f002 fa34 	bl	e6c6a <strlen>
   e4802:	6833      	ldr	r3, [r6, #0]
   e4804:	4602      	mov	r2, r0
   e4806:	68db      	ldr	r3, [r3, #12]
   e4808:	4629      	mov	r1, r5
   e480a:	4630      	mov	r0, r6
   e480c:	4798      	blx	r3
   e480e:	e00f      	b.n	e4830 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   e4810:	b124      	cbz	r4, e481c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   e4812:	212e      	movs	r1, #46	; 0x2e
   e4814:	4630      	mov	r0, r6
   e4816:	f000 f9eb 	bl	e4bf0 <_ZN5Print5printEc>
   e481a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   e481c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e4820:	220a      	movs	r2, #10
   e4822:	4630      	mov	r0, r6
   e4824:	f000 fa20 	bl	e4c68 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e4828:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e482a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e482c:	d1f0      	bne.n	e4810 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e482e:	4620      	mov	r0, r4
    }
    return n;
}
   e4830:	b00d      	add	sp, #52	; 0x34
   e4832:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e4834 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   e4834:	b510      	push	{r4, lr}
   e4836:	4b05      	ldr	r3, [pc, #20]	; (e484c <_ZN9IPAddressC1Ev+0x18>)
   e4838:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e483a:	2211      	movs	r2, #17
   e483c:	f840 3b04 	str.w	r3, [r0], #4
   e4840:	2100      	movs	r1, #0
   e4842:	f002 f9a6 	bl	e6b92 <memset>
{
    clear();
}
   e4846:	4620      	mov	r0, r4
   e4848:	bd10      	pop	{r4, pc}
   e484a:	bf00      	nop
   e484c:	000e9774 	.word	0x000e9774

000e4850 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   e4850:	4603      	mov	r3, r0
   e4852:	4a07      	ldr	r2, [pc, #28]	; (e4870 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e4854:	b510      	push	{r4, lr}
   e4856:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   e485a:	f101 0210 	add.w	r2, r1, #16
   e485e:	f851 4b04 	ldr.w	r4, [r1], #4
   e4862:	f843 4b04 	str.w	r4, [r3], #4
   e4866:	4291      	cmp	r1, r2
   e4868:	d1f9      	bne.n	e485e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e486a:	780a      	ldrb	r2, [r1, #0]
   e486c:	701a      	strb	r2, [r3, #0]
}
   e486e:	bd10      	pop	{r4, pc}
   e4870:	000e9774 	.word	0x000e9774

000e4874 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   e4874:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   e4876:	2b04      	cmp	r3, #4
   e4878:	d101      	bne.n	e487e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   e487a:	6840      	ldr	r0, [r0, #4]
   e487c:	e008      	b.n	e4890 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   e487e:	2b06      	cmp	r3, #6
   e4880:	d10a      	bne.n	e4898 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   e4882:	6843      	ldr	r3, [r0, #4]
   e4884:	b153      	cbz	r3, e489c <_ZNK9IPAddresscvbEv+0x28>
   e4886:	6883      	ldr	r3, [r0, #8]
   e4888:	b143      	cbz	r3, e489c <_ZNK9IPAddresscvbEv+0x28>
   e488a:	68c3      	ldr	r3, [r0, #12]
   e488c:	b133      	cbz	r3, e489c <_ZNK9IPAddresscvbEv+0x28>
   e488e:	6900      	ldr	r0, [r0, #16]
   e4890:	3000      	adds	r0, #0
   e4892:	bf18      	it	ne
   e4894:	2001      	movne	r0, #1
   e4896:	4770      	bx	lr
   e4898:	2000      	movs	r0, #0
   e489a:	4770      	bx	lr
   e489c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   e489e:	4770      	bx	lr

000e48a0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   e48a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e48a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e48a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e48aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e48ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   e48b2:	2304      	movs	r3, #4
   e48b4:	6041      	str	r1, [r0, #4]
   e48b6:	7503      	strb	r3, [r0, #20]
   e48b8:	bd10      	pop	{r4, pc}

000e48ba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   e48ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e48bc:	780d      	ldrb	r5, [r1, #0]
   e48be:	788b      	ldrb	r3, [r1, #2]
   e48c0:	784a      	ldrb	r2, [r1, #1]
   e48c2:	78c9      	ldrb	r1, [r1, #3]
   e48c4:	9100      	str	r1, [sp, #0]
   e48c6:	4629      	mov	r1, r5
   e48c8:	f7ff ffea 	bl	e48a0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   e48cc:	b003      	add	sp, #12
   e48ce:	bd30      	pop	{r4, r5, pc}

000e48d0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   e48d0:	b510      	push	{r4, lr}
   e48d2:	4b03      	ldr	r3, [pc, #12]	; (e48e0 <_ZN9IPAddressC1EPKh+0x10>)
   e48d4:	6003      	str	r3, [r0, #0]
   e48d6:	4604      	mov	r4, r0
{
    *this = address;
   e48d8:	f7ff ffef 	bl	e48ba <_ZN9IPAddressaSEPKh>
}
   e48dc:	4620      	mov	r0, r4
   e48de:	bd10      	pop	{r4, pc}
   e48e0:	000e9774 	.word	0x000e9774

000e48e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   e48e4:	4b01      	ldr	r3, [pc, #4]	; (e48ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   e48e6:	4a02      	ldr	r2, [pc, #8]	; (e48f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   e48e8:	601a      	str	r2, [r3, #0]
   e48ea:	4770      	bx	lr
   e48ec:	2003e4d4 	.word	0x2003e4d4
   e48f0:	000e9820 	.word	0x000e9820

000e48f4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e48f4:	2200      	movs	r2, #0
   e48f6:	4611      	mov	r1, r2
   e48f8:	6840      	ldr	r0, [r0, #4]
   e48fa:	f7ff bb3d 	b.w	e3f78 <network_listening>

000e48fe <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e48fe:	2200      	movs	r2, #0
   e4900:	4611      	mov	r1, r2
   e4902:	6840      	ldr	r0, [r0, #4]
   e4904:	f7ff bb48 	b.w	e3f98 <network_get_listen_timeout>

000e4908 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e4908:	2200      	movs	r2, #0
   e490a:	6840      	ldr	r0, [r0, #4]
   e490c:	f7ff bb3c 	b.w	e3f88 <network_set_listen_timeout>

000e4910 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e4910:	2200      	movs	r2, #0
   e4912:	f081 0101 	eor.w	r1, r1, #1
   e4916:	6840      	ldr	r0, [r0, #4]
   e4918:	f7ff bb26 	b.w	e3f68 <network_listen>

000e491c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   e491c:	2300      	movs	r3, #0
   e491e:	461a      	mov	r2, r3
   e4920:	4619      	mov	r1, r3
   e4922:	6840      	ldr	r0, [r0, #4]
   e4924:	f7ff bb18 	b.w	e3f58 <network_off>

000e4928 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e4928:	2300      	movs	r3, #0
   e492a:	461a      	mov	r2, r3
   e492c:	4619      	mov	r1, r3
   e492e:	6840      	ldr	r0, [r0, #4]
   e4930:	f7ff bb0a 	b.w	e3f48 <network_on>

000e4934 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e4934:	2200      	movs	r2, #0
   e4936:	4611      	mov	r1, r2
   e4938:	6840      	ldr	r0, [r0, #4]
   e493a:	f7ff bafd 	b.w	e3f38 <network_ready>

000e493e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e493e:	2200      	movs	r2, #0
   e4940:	4611      	mov	r1, r2
   e4942:	6840      	ldr	r0, [r0, #4]
   e4944:	f7ff bae8 	b.w	e3f18 <network_connecting>

000e4948 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e4948:	2200      	movs	r2, #0
   e494a:	2102      	movs	r1, #2
   e494c:	6840      	ldr	r0, [r0, #4]
   e494e:	f7ff baeb 	b.w	e3f28 <network_disconnect>

000e4952 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e4952:	2300      	movs	r3, #0
   e4954:	461a      	mov	r2, r3
   e4956:	6840      	ldr	r0, [r0, #4]
   e4958:	f7ff bad6 	b.w	e3f08 <network_connect>

000e495c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   e495c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e495e:	4605      	mov	r5, r0
   e4960:	b188      	cbz	r0, e4986 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e4962:	6804      	ldr	r4, [r0, #0]
   e4964:	b14c      	cbz	r4, e497a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   e4966:	68a3      	ldr	r3, [r4, #8]
   e4968:	b11b      	cbz	r3, e4972 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e496a:	2203      	movs	r2, #3
   e496c:	4621      	mov	r1, r4
   e496e:	4620      	mov	r0, r4
   e4970:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e4972:	2110      	movs	r1, #16
   e4974:	4620      	mov	r0, r4
   e4976:	f001 f902 	bl	e5b7e <_ZdlPvj>
   e497a:	4628      	mov	r0, r5
   e497c:	2114      	movs	r1, #20
      }
   e497e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e4982:	f001 b8fc 	b.w	e5b7e <_ZdlPvj>
   e4986:	bd38      	pop	{r3, r4, r5, pc}

000e4988 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   e4988:	b110      	cbz	r0, e4990 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   e498a:	6803      	ldr	r3, [r0, #0]
   e498c:	685b      	ldr	r3, [r3, #4]
   e498e:	4718      	bx	r3
   e4990:	4770      	bx	lr

000e4992 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   e4992:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e4994:	6803      	ldr	r3, [r0, #0]
   e4996:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   e4998:	b1bb      	cbz	r3, e49ca <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   e499a:	6858      	ldr	r0, [r3, #4]
   e499c:	f7ff f868 	bl	e3a70 <os_thread_is_current>
   e49a0:	b978      	cbnz	r0, e49c2 <_ZN6ThreadD1Ev+0x30>
   e49a2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   e49a4:	7c5a      	ldrb	r2, [r3, #17]
   e49a6:	b912      	cbnz	r2, e49ae <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   e49a8:	6858      	ldr	r0, [r3, #4]
   e49aa:	f7ff f869 	bl	e3a80 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   e49ae:	6823      	ldr	r3, [r4, #0]
   e49b0:	6858      	ldr	r0, [r3, #4]
   e49b2:	f7ff f86d 	bl	e3a90 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e49b6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   e49b8:	2300      	movs	r3, #0
   e49ba:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e49bc:	b128      	cbz	r0, e49ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   e49be:	f7ff ffcd 	bl	e495c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e49c2:	6820      	ldr	r0, [r4, #0]
   e49c4:	b108      	cbz	r0, e49ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   e49c6:	f7ff ffc9 	bl	e495c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   e49ca:	4620      	mov	r0, r4
   e49cc:	bd10      	pop	{r4, pc}
	...

000e49d0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   e49d0:	b538      	push	{r3, r4, r5, lr}
   e49d2:	4b0c      	ldr	r3, [pc, #48]	; (e4a04 <_ZN5spark9MeshClassD1Ev+0x34>)
   e49d4:	6003      	str	r3, [r0, #0]
   e49d6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e49d8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   e49dc:	b108      	cbz	r0, e49e2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e49de:	f7ef fb60 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e49e2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   e49e6:	b135      	cbz	r5, e49f6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e49e8:	4628      	mov	r0, r5
   e49ea:	f7ff ffd2 	bl	e4992 <_ZN6ThreadD1Ev>
   e49ee:	2104      	movs	r1, #4
   e49f0:	4628      	mov	r0, r5
   e49f2:	f001 f8c4 	bl	e5b7e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e49f6:	68a0      	ldr	r0, [r4, #8]
   e49f8:	b108      	cbz	r0, e49fe <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   e49fa:	f7ff ffc5 	bl	e4988 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   e49fe:	4620      	mov	r0, r4
   e4a00:	bd38      	pop	{r3, r4, r5, pc}
   e4a02:	bf00      	nop
   e4a04:	000e9854 	.word	0x000e9854

000e4a08 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   e4a08:	b538      	push	{r3, r4, r5, lr}
   e4a0a:	4c0d      	ldr	r4, [pc, #52]	; (e4a40 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   e4a0c:	4b0d      	ldr	r3, [pc, #52]	; (e4a44 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   e4a0e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e4a10:	2500      	movs	r5, #0
   e4a12:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   e4a14:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e4a18:	6063      	str	r3, [r4, #4]
   e4a1a:	60a5      	str	r5, [r4, #8]
   e4a1c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e4a20:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   e4a24:	f7ff f844 	bl	e3ab0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   e4a28:	4b07      	ldr	r3, [pc, #28]	; (e4a48 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   e4a2a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   e4a2e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   e4a30:	4620      	mov	r0, r4
   e4a32:	4a06      	ldr	r2, [pc, #24]	; (e4a4c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   e4a34:	4906      	ldr	r1, [pc, #24]	; (e4a50 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   e4a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   e4a3a:	f001 b89b 	b.w	e5b74 <__aeabi_atexit>
   e4a3e:	bf00      	nop
   e4a40:	2003e4d8 	.word	0x2003e4d8
   e4a44:	000e9888 	.word	0x000e9888
   e4a48:	000e9854 	.word	0x000e9854
   e4a4c:	2003bf30 	.word	0x2003bf30
   e4a50:	000e49d1 	.word	0x000e49d1

000e4a54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e4a54:	2300      	movs	r3, #0
   e4a56:	461a      	mov	r2, r3
   e4a58:	6840      	ldr	r0, [r0, #4]
   e4a5a:	f7ff ba55 	b.w	e3f08 <network_connect>

000e4a5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e4a5e:	2200      	movs	r2, #0
   e4a60:	2102      	movs	r1, #2
   e4a62:	6840      	ldr	r0, [r0, #4]
   e4a64:	f7ff ba60 	b.w	e3f28 <network_disconnect>

000e4a68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e4a68:	2200      	movs	r2, #0
   e4a6a:	4611      	mov	r1, r2
   e4a6c:	6840      	ldr	r0, [r0, #4]
   e4a6e:	f7ff ba53 	b.w	e3f18 <network_connecting>

000e4a72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e4a72:	2200      	movs	r2, #0
   e4a74:	4611      	mov	r1, r2
   e4a76:	6840      	ldr	r0, [r0, #4]
   e4a78:	f7ff ba5e 	b.w	e3f38 <network_ready>

000e4a7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e4a7c:	2300      	movs	r3, #0
   e4a7e:	461a      	mov	r2, r3
   e4a80:	4619      	mov	r1, r3
   e4a82:	6840      	ldr	r0, [r0, #4]
   e4a84:	f7ff ba60 	b.w	e3f48 <network_on>

000e4a88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e4a88:	2300      	movs	r3, #0
   e4a8a:	461a      	mov	r2, r3
   e4a8c:	4619      	mov	r1, r3
   e4a8e:	6840      	ldr	r0, [r0, #4]
   e4a90:	f7ff ba62 	b.w	e3f58 <network_off>

000e4a94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e4a94:	2200      	movs	r2, #0
   e4a96:	f081 0101 	eor.w	r1, r1, #1
   e4a9a:	6840      	ldr	r0, [r0, #4]
   e4a9c:	f7ff ba64 	b.w	e3f68 <network_listen>

000e4aa0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e4aa0:	2200      	movs	r2, #0
   e4aa2:	6840      	ldr	r0, [r0, #4]
   e4aa4:	f7ff ba70 	b.w	e3f88 <network_set_listen_timeout>

000e4aa8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e4aa8:	2200      	movs	r2, #0
   e4aaa:	4611      	mov	r1, r2
   e4aac:	6840      	ldr	r0, [r0, #4]
   e4aae:	f7ff ba73 	b.w	e3f98 <network_get_listen_timeout>

000e4ab2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e4ab2:	2200      	movs	r2, #0
   e4ab4:	4611      	mov	r1, r2
   e4ab6:	6840      	ldr	r0, [r0, #4]
   e4ab8:	f7ff ba5e 	b.w	e3f78 <network_listening>

000e4abc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e4abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e4ac0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   e4ac2:	b095      	sub	sp, #84	; 0x54
   e4ac4:	4616      	mov	r6, r2
   e4ac6:	460d      	mov	r5, r1
   e4ac8:	4607      	mov	r7, r0
    IPAddress addr;
   e4aca:	f7ff feb3 	bl	e4834 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   e4ace:	4621      	mov	r1, r4
   e4ad0:	2220      	movs	r2, #32
   e4ad2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e4ad4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e4ad6:	f002 f85c 	bl	e6b92 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e4ada:	2340      	movs	r3, #64	; 0x40
   e4adc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e4ade:	4621      	mov	r1, r4
   e4ae0:	466b      	mov	r3, sp
   e4ae2:	aa0c      	add	r2, sp, #48	; 0x30
   e4ae4:	4630      	mov	r0, r6
   e4ae6:	f7ff f8bb 	bl	e3c60 <netdb_getaddrinfo>
    if (!r) {
   e4aea:	4604      	mov	r4, r0
   e4aec:	2800      	cmp	r0, #0
   e4aee:	d144      	bne.n	e4b7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e4af0:	4602      	mov	r2, r0
   e4af2:	2101      	movs	r1, #1
   e4af4:	6868      	ldr	r0, [r5, #4]
   e4af6:	f7ff fa1f 	bl	e3f38 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e4afa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e4afc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e4afe:	4622      	mov	r2, r4
   e4b00:	6868      	ldr	r0, [r5, #4]
   e4b02:	f7ff fa19 	bl	e3f38 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e4b06:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e4b08:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   e4b0a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e4b0c:	2e00      	cmp	r6, #0
   e4b0e:	d034      	beq.n	e4b7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   e4b10:	2900      	cmp	r1, #0
   e4b12:	d132      	bne.n	e4b7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e4b14:	6873      	ldr	r3, [r6, #4]
   e4b16:	2b02      	cmp	r3, #2
   e4b18:	d002      	beq.n	e4b20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   e4b1a:	2b0a      	cmp	r3, #10
   e4b1c:	d009      	beq.n	e4b32 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   e4b1e:	e02a      	b.n	e4b76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   e4b20:	f1b8 0f00 	cmp.w	r8, #0
   e4b24:	d027      	beq.n	e4b76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e4b26:	6971      	ldr	r1, [r6, #20]
   e4b28:	4638      	mov	r0, r7
   e4b2a:	3104      	adds	r1, #4
   e4b2c:	f7ff fec5 	bl	e48ba <_ZN9IPAddressaSEPKh>
   e4b30:	e020      	b.n	e4b74 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   e4b32:	f1b9 0f00 	cmp.w	r9, #0
   e4b36:	d01e      	beq.n	e4b76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e4b38:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e4b3a:	2211      	movs	r2, #17
   e4b3c:	a801      	add	r0, sp, #4
   e4b3e:	f002 f828 	bl	e6b92 <memset>
                    a.v = 6;
   e4b42:	2306      	movs	r3, #6
   e4b44:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e4b48:	ad01      	add	r5, sp, #4
   e4b4a:	f104 0308 	add.w	r3, r4, #8
   e4b4e:	3418      	adds	r4, #24
   e4b50:	6818      	ldr	r0, [r3, #0]
   e4b52:	6859      	ldr	r1, [r3, #4]
   e4b54:	462a      	mov	r2, r5
   e4b56:	c203      	stmia	r2!, {r0, r1}
   e4b58:	3308      	adds	r3, #8
   e4b5a:	42a3      	cmp	r3, r4
   e4b5c:	4615      	mov	r5, r2
   e4b5e:	d1f7      	bne.n	e4b50 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   e4b60:	a901      	add	r1, sp, #4
   e4b62:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e4b64:	ad07      	add	r5, sp, #28
   e4b66:	f7ff fe73 	bl	e4850 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e4b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e4b6c:	1d3c      	adds	r4, r7, #4
   e4b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e4b70:	682b      	ldr	r3, [r5, #0]
   e4b72:	7023      	strb	r3, [r4, #0]
                    ok = true;
   e4b74:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e4b76:	69f6      	ldr	r6, [r6, #28]
   e4b78:	e7c8      	b.n	e4b0c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e4b7a:	9800      	ldr	r0, [sp, #0]
   e4b7c:	f7ff f868 	bl	e3c50 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e4b80:	4638      	mov	r0, r7
   e4b82:	b015      	add	sp, #84	; 0x54
   e4b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e4b88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e4b88:	4b02      	ldr	r3, [pc, #8]	; (e4b94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e4b8a:	4a03      	ldr	r2, [pc, #12]	; (e4b98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e4b8c:	601a      	str	r2, [r3, #0]
   e4b8e:	2200      	movs	r2, #0
   e4b90:	605a      	str	r2, [r3, #4]
   e4b92:	4770      	bx	lr
   e4b94:	2003e6a8 	.word	0x2003e6a8
   e4b98:	000e9888 	.word	0x000e9888

000e4b9c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   e4b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e4b9e:	4606      	mov	r6, r0
   e4ba0:	460d      	mov	r5, r1
   e4ba2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   e4ba4:	2400      	movs	r4, #0
  while (size--) {
   e4ba6:	42bd      	cmp	r5, r7
   e4ba8:	d00c      	beq.n	e4bc4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   e4baa:	6833      	ldr	r3, [r6, #0]
   e4bac:	f815 1b01 	ldrb.w	r1, [r5], #1
   e4bb0:	689b      	ldr	r3, [r3, #8]
   e4bb2:	4630      	mov	r0, r6
   e4bb4:	4798      	blx	r3
     if (chunk>=0)
   e4bb6:	2800      	cmp	r0, #0
   e4bb8:	db01      	blt.n	e4bbe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   e4bba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   e4bbc:	e7f3      	b.n	e4ba6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   e4bbe:	2c00      	cmp	r4, #0
   e4bc0:	bf08      	it	eq
   e4bc2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   e4bc4:	4620      	mov	r0, r4
   e4bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e4bc8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   e4bc8:	b570      	push	{r4, r5, r6, lr}
   e4bca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   e4bcc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   e4bce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   e4bd0:	b149      	cbz	r1, e4be6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   e4bd2:	f002 f84a 	bl	e6c6a <strlen>
   e4bd6:	682b      	ldr	r3, [r5, #0]
   e4bd8:	4602      	mov	r2, r0
   e4bda:	4621      	mov	r1, r4
   e4bdc:	4628      	mov	r0, r5
   e4bde:	68db      	ldr	r3, [r3, #12]
    }
   e4be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e4be4:	4718      	bx	r3
    }
   e4be6:	bd70      	pop	{r4, r5, r6, pc}

000e4be8 <_ZN5Print5printEPKc>:
   e4be8:	b508      	push	{r3, lr}
   e4bea:	f7ff ffed 	bl	e4bc8 <_ZN5Print5writeEPKc>
   e4bee:	bd08      	pop	{r3, pc}

000e4bf0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   e4bf0:	6803      	ldr	r3, [r0, #0]
   e4bf2:	689b      	ldr	r3, [r3, #8]
   e4bf4:	4718      	bx	r3

000e4bf6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   e4bf6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   e4bf8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   e4bfa:	4605      	mov	r5, r0
  size_t n = print('\r');
   e4bfc:	f7ff fff8 	bl	e4bf0 <_ZN5Print5printEc>
  n += print('\n');
   e4c00:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   e4c02:	4604      	mov	r4, r0
  n += print('\n');
   e4c04:	4628      	mov	r0, r5
   e4c06:	f7ff fff3 	bl	e4bf0 <_ZN5Print5printEc>
  return n;
}
   e4c0a:	4420      	add	r0, r4
   e4c0c:	bd38      	pop	{r3, r4, r5, pc}

000e4c0e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   e4c0e:	b530      	push	{r4, r5, lr}
   e4c10:	b08b      	sub	sp, #44	; 0x2c
   e4c12:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   e4c14:	2100      	movs	r1, #0
   e4c16:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   e4c1a:	2a01      	cmp	r2, #1
   e4c1c:	bf98      	it	ls
   e4c1e:	220a      	movls	r2, #10
   e4c20:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   e4c24:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   e4c28:	fb05 3312 	mls	r3, r5, r2, r3
   e4c2c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e4c30:	2b09      	cmp	r3, #9
   e4c32:	bf94      	ite	ls
   e4c34:	3330      	addls	r3, #48	; 0x30
   e4c36:	3337      	addhi	r3, #55	; 0x37
   e4c38:	b2db      	uxtb	r3, r3
   e4c3a:	4621      	mov	r1, r4
   e4c3c:	f804 3901 	strb.w	r3, [r4], #-1
   e4c40:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   e4c42:	2d00      	cmp	r5, #0
   e4c44:	d1ee      	bne.n	e4c24 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   e4c46:	f7ff ffbf 	bl	e4bc8 <_ZN5Print5writeEPKc>
}
   e4c4a:	b00b      	add	sp, #44	; 0x2c
   e4c4c:	bd30      	pop	{r4, r5, pc}

000e4c4e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   e4c4e:	b410      	push	{r4}
  if (base == 0) return write(n);
   e4c50:	b92a      	cbnz	r2, e4c5e <_ZN5Print5printEmi+0x10>
   e4c52:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   e4c54:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   e4c58:	689b      	ldr	r3, [r3, #8]
   e4c5a:	b2c9      	uxtb	r1, r1
   e4c5c:	4718      	bx	r3
  else return printNumber(n, base);
   e4c5e:	b2d2      	uxtb	r2, r2
}
   e4c60:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   e4c64:	f7ff bfd3 	b.w	e4c0e <_ZN5Print11printNumberEmh>

000e4c68 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   e4c68:	f7ff bff1 	b.w	e4c4e <_ZN5Print5printEmi>

000e4c6c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   e4c6c:	b40c      	push	{r2, r3}
   e4c6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e4c72:	b087      	sub	sp, #28
   e4c74:	af00      	add	r7, sp, #0
   e4c76:	f107 0438 	add.w	r4, r7, #56	; 0x38
   e4c7a:	4605      	mov	r5, r0
   e4c7c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   e4c80:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   e4c82:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   e4c84:	4623      	mov	r3, r4
   e4c86:	464a      	mov	r2, r9
   e4c88:	2114      	movs	r1, #20
   e4c8a:	1d38      	adds	r0, r7, #4
   e4c8c:	f7ff f9b4 	bl	e3ff8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   e4c90:	2813      	cmp	r0, #19
   e4c92:	d805      	bhi.n	e4ca0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   e4c94:	1d39      	adds	r1, r7, #4
   e4c96:	4628      	mov	r0, r5
   e4c98:	f7ff ff96 	bl	e4bc8 <_ZN5Print5writeEPKc>
   e4c9c:	4604      	mov	r4, r0
   e4c9e:	e013      	b.n	e4cc8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   e4ca0:	f100 0308 	add.w	r3, r0, #8
   e4ca4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   e4ca8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   e4caa:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   e4cae:	1c41      	adds	r1, r0, #1
   e4cb0:	4623      	mov	r3, r4
   e4cb2:	464a      	mov	r2, r9
   e4cb4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   e4cb6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   e4cb8:	f7ff f99e 	bl	e3ff8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   e4cbc:	4669      	mov	r1, sp
   e4cbe:	4628      	mov	r0, r5
   e4cc0:	f7ff ff82 	bl	e4bc8 <_ZN5Print5writeEPKc>
   e4cc4:	4604      	mov	r4, r0
   e4cc6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   e4cc8:	b11e      	cbz	r6, e4cd2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   e4cca:	4628      	mov	r0, r5
   e4ccc:	f7ff ff93 	bl	e4bf6 <_ZN5Print7printlnEv>
   e4cd0:	4404      	add	r4, r0
    return n;
}
   e4cd2:	4620      	mov	r0, r4
   e4cd4:	371c      	adds	r7, #28
   e4cd6:	46bd      	mov	sp, r7
   e4cd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e4cdc:	b002      	add	sp, #8
   e4cde:	4770      	bx	lr

000e4ce0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   e4ce0:	b510      	push	{r4, lr}
   e4ce2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e4ce4:	f7ff fa27 	bl	e4136 <_ZNSt14_Function_baseD1Ev>
   e4ce8:	4620      	mov	r0, r4
   e4cea:	bd10      	pop	{r4, pc}

000e4cec <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e4cec:	4803      	ldr	r0, [pc, #12]	; (e4cfc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   e4cee:	4a04      	ldr	r2, [pc, #16]	; (e4d00 <_GLOBAL__sub_I_RGB+0x14>)
   e4cf0:	4904      	ldr	r1, [pc, #16]	; (e4d04 <_GLOBAL__sub_I_RGB+0x18>)
   e4cf2:	2300      	movs	r3, #0
   e4cf4:	6083      	str	r3, [r0, #8]
   e4cf6:	f000 bf3d 	b.w	e5b74 <__aeabi_atexit>
   e4cfa:	bf00      	nop
   e4cfc:	2003e6b0 	.word	0x2003e6b0
   e4d00:	2003bf30 	.word	0x2003bf30
   e4d04:	000e4ce1 	.word	0x000e4ce1

000e4d08 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   e4d08:	4770      	bx	lr

000e4d0a <_ZN8SPIClassD0Ev>:
   e4d0a:	b510      	push	{r4, lr}
   e4d0c:	2110      	movs	r1, #16
   e4d0e:	4604      	mov	r4, r0
   e4d10:	f000 ff35 	bl	e5b7e <_ZdlPvj>
   e4d14:	4620      	mov	r0, r4
   e4d16:	bd10      	pop	{r4, pc}

000e4d18 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   e4d18:	b570      	push	{r4, r5, r6, lr}
   e4d1a:	4b08      	ldr	r3, [pc, #32]	; (e4d3c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   e4d1c:	6003      	str	r3, [r0, #0]
   e4d1e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   e4d20:	2500      	movs	r5, #0
   e4d22:	460e      	mov	r6, r1
   e4d24:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   e4d28:	f7fe feba 	bl	e3aa0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   e4d2c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   e4d2e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   e4d30:	f7fe ffce 	bl	e3cd0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   e4d34:	60a5      	str	r5, [r4, #8]
}
   e4d36:	4620      	mov	r0, r4
   e4d38:	bd70      	pop	{r4, r5, r6, pc}
   e4d3a:	bf00      	nop
   e4d3c:	000e98bc 	.word	0x000e98bc

000e4d40 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   e4d40:	7900      	ldrb	r0, [r0, #4]
   e4d42:	f7fe bfcd 	b.w	e3ce0 <HAL_SPI_Is_Enabled>
	...

000e4d48 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   e4d48:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4d4c:	ec59 8b10 	vmov	r8, r9, d0
   e4d50:	4607      	mov	r7, r0
   e4d52:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   e4d54:	2200      	movs	r2, #0
   e4d56:	2300      	movs	r3, #0
   e4d58:	ee10 0a10 	vmov	r0, s0
   e4d5c:	4649      	mov	r1, r9
   e4d5e:	f001 fc85 	bl	e666c <__aeabi_dcmplt>
   e4d62:	b128      	cbz	r0, e4d70 <_Z4dtoadhPc+0x28>
        val = -val;
   e4d64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   e4d68:	4699      	mov	r9, r3
        *sout++ = '-';
   e4d6a:	232d      	movs	r3, #45	; 0x2d
   e4d6c:	7033      	strb	r3, [r6, #0]
   e4d6e:	3601      	adds	r6, #1
   e4d70:	2300      	movs	r3, #0
    }
    long scale = 1;
   e4d72:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   e4d74:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   e4d76:	b2d9      	uxtb	r1, r3
   e4d78:	428f      	cmp	r7, r1
   e4d7a:	d902      	bls.n	e4d82 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   e4d7c:	4354      	muls	r4, r2
   e4d7e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   e4d80:	e7f9      	b.n	e4d76 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   e4d82:	4620      	mov	r0, r4
   e4d84:	f001 f99a 	bl	e60bc <__aeabi_i2d>
   e4d88:	4642      	mov	r2, r8
   e4d8a:	464b      	mov	r3, r9
   e4d8c:	f001 f9fc 	bl	e6188 <__aeabi_dmul>
   e4d90:	4682      	mov	sl, r0
   e4d92:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   e4d94:	f001 fd1a 	bl	e67cc <__aeabi_d2ulz>
   e4d98:	4680      	mov	r8, r0
   e4d9a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   e4d9c:	f001 f9be 	bl	e611c <__aeabi_ul2d>
   e4da0:	4602      	mov	r2, r0
   e4da2:	460b      	mov	r3, r1
   e4da4:	4650      	mov	r0, sl
   e4da6:	4659      	mov	r1, fp
   e4da8:	f001 f83a 	bl	e5e20 <__aeabi_dsub>
   e4dac:	2200      	movs	r2, #0
   e4dae:	4b17      	ldr	r3, [pc, #92]	; (e4e0c <_Z4dtoadhPc+0xc4>)
   e4db0:	f001 fc70 	bl	e6694 <__aeabi_dcmpge>
   e4db4:	b118      	cbz	r0, e4dbe <_Z4dtoadhPc+0x76>
        fixed++;
   e4db6:	f118 0801 	adds.w	r8, r8, #1
   e4dba:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   e4dbe:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   e4dc0:	4622      	mov	r2, r4
   e4dc2:	462b      	mov	r3, r5
   e4dc4:	4640      	mov	r0, r8
   e4dc6:	4649      	mov	r1, r9
   e4dc8:	f001 fce8 	bl	e679c <__aeabi_uldivmod>
   e4dcc:	2301      	movs	r3, #1
   e4dce:	220a      	movs	r2, #10
   e4dd0:	4631      	mov	r1, r6
   e4dd2:	f000 fd7e 	bl	e58d2 <ultoa>
    if (prec) {
   e4dd6:	b1af      	cbz	r7, e4e04 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   e4dd8:	4630      	mov	r0, r6
   e4dda:	f001 ff46 	bl	e6c6a <strlen>
        *sout++ = '.';
   e4dde:	232e      	movs	r3, #46	; 0x2e
   e4de0:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   e4de2:	3001      	adds	r0, #1
   e4de4:	4406      	add	r6, r0
   e4de6:	4622      	mov	r2, r4
   e4de8:	462b      	mov	r3, r5
   e4dea:	4640      	mov	r0, r8
   e4dec:	4649      	mov	r1, r9
   e4dee:	f001 fcd5 	bl	e679c <__aeabi_uldivmod>
   e4df2:	463b      	mov	r3, r7
   e4df4:	4610      	mov	r0, r2
   e4df6:	4631      	mov	r1, r6
   e4df8:	220a      	movs	r2, #10
    }
}
   e4dfa:	b001      	add	sp, #4
   e4dfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   e4e00:	f000 bd67 	b.w	e58d2 <ultoa>
    }
}
   e4e04:	b001      	add	sp, #4
   e4e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4e0a:	bf00      	nop
   e4e0c:	3fe00000 	.word	0x3fe00000

000e4e10 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   e4e10:	b510      	push	{r4, lr}
   e4e12:	4604      	mov	r4, r0
{
	free(buffer);
   e4e14:	6800      	ldr	r0, [r0, #0]
   e4e16:	f7ff f8cf 	bl	e3fb8 <free>
}
   e4e1a:	4620      	mov	r0, r4
   e4e1c:	bd10      	pop	{r4, pc}

000e4e1e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   e4e1e:	b510      	push	{r4, lr}
   e4e20:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   e4e22:	6800      	ldr	r0, [r0, #0]
   e4e24:	b108      	cbz	r0, e4e2a <_ZN6String10invalidateEv+0xc>
   e4e26:	f7ff f8c7 	bl	e3fb8 <free>
	buffer = NULL;
   e4e2a:	2300      	movs	r3, #0
   e4e2c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   e4e2e:	60a3      	str	r3, [r4, #8]
   e4e30:	6063      	str	r3, [r4, #4]
   e4e32:	bd10      	pop	{r4, pc}

000e4e34 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   e4e34:	b538      	push	{r3, r4, r5, lr}
   e4e36:	4604      	mov	r4, r0
   e4e38:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   e4e3a:	6800      	ldr	r0, [r0, #0]
   e4e3c:	3101      	adds	r1, #1
   e4e3e:	f7ff f8c3 	bl	e3fc8 <realloc>
	if (newbuffer) {
   e4e42:	b110      	cbz	r0, e4e4a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   e4e44:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   e4e48:	2001      	movs	r0, #1
	}
	return 0;
}
   e4e4a:	bd38      	pop	{r3, r4, r5, pc}

000e4e4c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   e4e4c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   e4e4e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   e4e50:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   e4e52:	b113      	cbz	r3, e4e5a <_ZN6String7reserveEj+0xe>
   e4e54:	6843      	ldr	r3, [r0, #4]
   e4e56:	428b      	cmp	r3, r1
   e4e58:	d207      	bcs.n	e4e6a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   e4e5a:	4620      	mov	r0, r4
   e4e5c:	f7ff ffea 	bl	e4e34 <_ZN6String12changeBufferEj>
   e4e60:	b120      	cbz	r0, e4e6c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   e4e62:	68a3      	ldr	r3, [r4, #8]
   e4e64:	b90b      	cbnz	r3, e4e6a <_ZN6String7reserveEj+0x1e>
   e4e66:	6822      	ldr	r2, [r4, #0]
   e4e68:	7013      	strb	r3, [r2, #0]
   e4e6a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   e4e6c:	bd10      	pop	{r4, pc}

000e4e6e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e4e6e:	b570      	push	{r4, r5, r6, lr}
   e4e70:	460e      	mov	r6, r1
	if (!reserve(length)) {
   e4e72:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e4e74:	4604      	mov	r4, r0
   e4e76:	4615      	mov	r5, r2
	if (!reserve(length)) {
   e4e78:	f7ff ffe8 	bl	e4e4c <_ZN6String7reserveEj>
   e4e7c:	b918      	cbnz	r0, e4e86 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   e4e7e:	4620      	mov	r0, r4
   e4e80:	f7ff ffcd 	bl	e4e1e <_ZN6String10invalidateEv>
		return *this;
   e4e84:	e009      	b.n	e4e9a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   e4e86:	462a      	mov	r2, r5
   e4e88:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   e4e8a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   e4e8c:	6820      	ldr	r0, [r4, #0]
   e4e8e:	f001 fe5a 	bl	e6b46 <memcpy>
	buffer[len] = 0;
   e4e92:	6822      	ldr	r2, [r4, #0]
   e4e94:	68a3      	ldr	r3, [r4, #8]
   e4e96:	2100      	movs	r1, #0
   e4e98:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   e4e9a:	4620      	mov	r0, r4
   e4e9c:	bd70      	pop	{r4, r5, r6, pc}

000e4e9e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   e4e9e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e4ea0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   e4ea2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e4ea4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e4ea6:	6043      	str	r3, [r0, #4]
	len = 0;
   e4ea8:	6083      	str	r3, [r0, #8]
	flags = 0;
   e4eaa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   e4eac:	460d      	mov	r5, r1
   e4eae:	b139      	cbz	r1, e4ec0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   e4eb0:	4608      	mov	r0, r1
   e4eb2:	f001 feda 	bl	e6c6a <strlen>
   e4eb6:	4629      	mov	r1, r5
   e4eb8:	4602      	mov	r2, r0
   e4eba:	4620      	mov	r0, r4
   e4ebc:	f7ff ffd7 	bl	e4e6e <_ZN6String4copyEPKcj>
}
   e4ec0:	4620      	mov	r0, r4
   e4ec2:	bd38      	pop	{r3, r4, r5, pc}

000e4ec4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   e4ec4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   e4ec6:	b510      	push	{r4, lr}
   e4ec8:	460b      	mov	r3, r1
   e4eca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   e4ecc:	d007      	beq.n	e4ede <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   e4ece:	6809      	ldr	r1, [r1, #0]
   e4ed0:	b119      	cbz	r1, e4eda <_ZN6StringaSERKS_+0x16>
   e4ed2:	689a      	ldr	r2, [r3, #8]
   e4ed4:	f7ff ffcb 	bl	e4e6e <_ZN6String4copyEPKcj>
   e4ed8:	e001      	b.n	e4ede <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   e4eda:	f7ff ffa0 	bl	e4e1e <_ZN6String10invalidateEv>

	return *this;
}
   e4ede:	4620      	mov	r0, r4
   e4ee0:	bd10      	pop	{r4, pc}

000e4ee2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   e4ee2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e4ee4:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   e4ee6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e4ee8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e4eea:	6043      	str	r3, [r0, #4]
	len = 0;
   e4eec:	6083      	str	r3, [r0, #8]
	flags = 0;
   e4eee:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   e4ef0:	f7ff ffe8 	bl	e4ec4 <_ZN6StringaSERKS_>
}
   e4ef4:	4620      	mov	r0, r4
   e4ef6:	bd10      	pop	{r4, pc}

000e4ef8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   e4ef8:	b538      	push	{r3, r4, r5, lr}
   e4efa:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   e4efc:	460c      	mov	r4, r1
   e4efe:	b141      	cbz	r1, e4f12 <_ZN6StringaSEPKc+0x1a>
   e4f00:	4608      	mov	r0, r1
   e4f02:	f001 feb2 	bl	e6c6a <strlen>
   e4f06:	4621      	mov	r1, r4
   e4f08:	4602      	mov	r2, r0
   e4f0a:	4628      	mov	r0, r5
   e4f0c:	f7ff ffaf 	bl	e4e6e <_ZN6String4copyEPKcj>
   e4f10:	e001      	b.n	e4f16 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   e4f12:	f7ff ff84 	bl	e4e1e <_ZN6String10invalidateEv>

	return *this;
}
   e4f16:	4628      	mov	r0, r5
   e4f18:	bd38      	pop	{r3, r4, r5, pc}

000e4f1a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   e4f1a:	b510      	push	{r4, lr}
   e4f1c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e4f1e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   e4f20:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e4f22:	6023      	str	r3, [r4, #0]
	capacity = 0;
   e4f24:	6063      	str	r3, [r4, #4]
	len = 0;
   e4f26:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e4f28:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   e4f2a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   e4f2c:	a901      	add	r1, sp, #4
   e4f2e:	f000 fcf8 	bl	e5922 <itoa>
	*this = buf;
   e4f32:	a901      	add	r1, sp, #4
   e4f34:	4620      	mov	r0, r4
   e4f36:	f7ff ffdf 	bl	e4ef8 <_ZN6StringaSEPKc>
}
   e4f3a:	4620      	mov	r0, r4
   e4f3c:	b00a      	add	sp, #40	; 0x28
   e4f3e:	bd10      	pop	{r4, pc}

000e4f40 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   e4f40:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e4f42:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   e4f44:	b08a      	sub	sp, #40	; 0x28
   e4f46:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e4f48:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e4f4a:	6043      	str	r3, [r0, #4]
	len = 0;
   e4f4c:	6083      	str	r3, [r0, #8]
	flags = 0;
   e4f4e:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   e4f50:	b2c8      	uxtb	r0, r1
   e4f52:	a901      	add	r1, sp, #4
   e4f54:	f7ff fef8 	bl	e4d48 <_Z4dtoadhPc>
        *this = buf;
   e4f58:	a901      	add	r1, sp, #4
   e4f5a:	4620      	mov	r0, r4
   e4f5c:	f7ff ffcc 	bl	e4ef8 <_ZN6StringaSEPKc>
}
   e4f60:	4620      	mov	r0, r4
   e4f62:	b00a      	add	sp, #40	; 0x28
   e4f64:	bd10      	pop	{r4, pc}

000e4f66 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   e4f66:	b570      	push	{r4, r5, r6, lr}
   e4f68:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   e4f6a:	460e      	mov	r6, r1
   e4f6c:	b909      	cbnz	r1, e4f72 <_ZN6String6concatEPKcj+0xc>
   e4f6e:	2000      	movs	r0, #0
   e4f70:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   e4f72:	b16a      	cbz	r2, e4f90 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   e4f74:	6883      	ldr	r3, [r0, #8]
   e4f76:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   e4f78:	4629      	mov	r1, r5
   e4f7a:	f7ff ff67 	bl	e4e4c <_ZN6String7reserveEj>
   e4f7e:	2800      	cmp	r0, #0
   e4f80:	d0f5      	beq.n	e4f6e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   e4f82:	6820      	ldr	r0, [r4, #0]
   e4f84:	68a3      	ldr	r3, [r4, #8]
   e4f86:	4631      	mov	r1, r6
   e4f88:	4418      	add	r0, r3
   e4f8a:	f001 fe4b 	bl	e6c24 <strcpy>
	len = newlen;
   e4f8e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   e4f90:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   e4f92:	bd70      	pop	{r4, r5, r6, pc}

000e4f94 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   e4f94:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   e4f96:	688a      	ldr	r2, [r1, #8]
   e4f98:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   e4f9a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   e4f9c:	f7ff ffe3 	bl	e4f66 <_ZN6String6concatEPKcj>
   e4fa0:	b910      	cbnz	r0, e4fa8 <_ZplRK15StringSumHelperRK6String+0x14>
   e4fa2:	4620      	mov	r0, r4
   e4fa4:	f7ff ff3b 	bl	e4e1e <_ZN6String10invalidateEv>
	return a;
}
   e4fa8:	4620      	mov	r0, r4
   e4faa:	bd10      	pop	{r4, pc}

000e4fac <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   e4fac:	b538      	push	{r3, r4, r5, lr}
   e4fae:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   e4fb0:	460d      	mov	r5, r1
   e4fb2:	b141      	cbz	r1, e4fc6 <_ZplRK15StringSumHelperPKc+0x1a>
   e4fb4:	4608      	mov	r0, r1
   e4fb6:	f001 fe58 	bl	e6c6a <strlen>
   e4fba:	4629      	mov	r1, r5
   e4fbc:	4602      	mov	r2, r0
   e4fbe:	4620      	mov	r0, r4
   e4fc0:	f7ff ffd1 	bl	e4f66 <_ZN6String6concatEPKcj>
   e4fc4:	b910      	cbnz	r0, e4fcc <_ZplRK15StringSumHelperPKc+0x20>
   e4fc6:	4620      	mov	r0, r4
   e4fc8:	f7ff ff29 	bl	e4e1e <_ZN6String10invalidateEv>
	return a;
}
   e4fcc:	4620      	mov	r0, r4
   e4fce:	bd38      	pop	{r3, r4, r5, pc}

000e4fd0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   e4fd0:	4b04      	ldr	r3, [pc, #16]	; (e4fe4 <_GLOBAL__sub_I_System+0x14>)
   e4fd2:	2000      	movs	r0, #0
   e4fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   e4fd8:	7018      	strb	r0, [r3, #0]
   e4fda:	8058      	strh	r0, [r3, #2]
   e4fdc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   e4fde:	f7fe bf17 	b.w	e3e10 <set_system_mode>
   e4fe2:	bf00      	nop
   e4fe4:	2003e6c0 	.word	0x2003e6c0

000e4fe8 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   e4fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e4fea:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e4fec:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   e4fee:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e4ff2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   e4ff4:	2201      	movs	r2, #1
   e4ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e4ffa:	4621      	mov	r1, r4
   e4ffc:	47a8      	blx	r5
}
   e4ffe:	b003      	add	sp, #12
   e5000:	bd30      	pop	{r4, r5, pc}

000e5002 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   e5002:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e5004:	6803      	ldr	r3, [r0, #0]
   e5006:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   e5008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e500c:	46a4      	mov	ip, r4
}
   e500e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e5012:	4760      	bx	ip

000e5014 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e5014:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e5016:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   e5018:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e501a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   e501e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   e5020:	4621      	mov	r1, r4
   e5022:	4613      	mov	r3, r2
   e5024:	2201      	movs	r2, #1
   e5026:	47a8      	blx	r5
}
   e5028:	b003      	add	sp, #12
   e502a:	bd30      	pop	{r4, r5, pc}

000e502c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   e502c:	4770      	bx	lr

000e502e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e502e:	b538      	push	{r3, r4, r5, lr}
   e5030:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   e5032:	681a      	ldr	r2, [r3, #0]
   e5034:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e5036:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   e5038:	da05      	bge.n	e5046 <_ZN9TCPClient9connectedEv+0x18>
   e503a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e503e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e5042:	429a      	cmp	r2, r3
   e5044:	d001      	beq.n	e504a <_ZN9TCPClient9connectedEv+0x1c>
   e5046:	2501      	movs	r5, #1
   e5048:	e00b      	b.n	e5062 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   e504a:	6803      	ldr	r3, [r0, #0]
   e504c:	691b      	ldr	r3, [r3, #16]
   e504e:	4798      	blx	r3
   e5050:	2800      	cmp	r0, #0
   e5052:	bf14      	ite	ne
   e5054:	2501      	movne	r5, #1
   e5056:	2500      	moveq	r5, #0
        if (!rv) {
   e5058:	d103      	bne.n	e5062 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   e505a:	6823      	ldr	r3, [r4, #0]
   e505c:	4620      	mov	r0, r4
   e505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e5060:	4798      	blx	r3
        }
    }
    return rv;
}
   e5062:	4628      	mov	r0, r5
   e5064:	bd38      	pop	{r3, r4, r5, pc}

000e5066 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   e5066:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   e5068:	6818      	ldr	r0, [r3, #0]
}
   e506a:	43c0      	mvns	r0, r0
   e506c:	0fc0      	lsrs	r0, r0, #31
   e506e:	4770      	bx	lr

000e5070 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   e5070:	4770      	bx	lr

000e5072 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   e5072:	2000      	movs	r0, #0
   e5074:	4770      	bx	lr

000e5076 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   e5076:	b510      	push	{r4, lr}
   e5078:	2114      	movs	r1, #20
   e507a:	4604      	mov	r4, r0
   e507c:	f000 fd7f 	bl	e5b7e <_ZdlPvj>
   e5080:	4620      	mov	r0, r4
   e5082:	bd10      	pop	{r4, pc}

000e5084 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   e5084:	f7ef b80b 	b.w	d409e <_ZdlPv>

000e5088 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e5088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e508c:	4698      	mov	r8, r3
    stop();
   e508e:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e5090:	b093      	sub	sp, #76	; 0x4c
    stop();
   e5092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e5094:	460c      	mov	r4, r1
   e5096:	4606      	mov	r6, r0
   e5098:	4617      	mov	r7, r2
    stop();
   e509a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   e509c:	ab12      	add	r3, sp, #72	; 0x48
   e509e:	2500      	movs	r5, #0
   e50a0:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   e50a4:	462a      	mov	r2, r5
   e50a6:	4629      	mov	r1, r5
   e50a8:	4620      	mov	r0, r4
   e50aa:	f7fe fdd9 	bl	e3c60 <netdb_getaddrinfo>
   e50ae:	2800      	cmp	r0, #0
   e50b0:	db3a      	blt.n	e5128 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   e50b2:	9b00      	ldr	r3, [sp, #0]
   e50b4:	2b00      	cmp	r3, #0
   e50b6:	d039      	beq.n	e512c <_ZN9TCPClient7connectEPKctm+0xa4>
   e50b8:	695b      	ldr	r3, [r3, #20]
   e50ba:	2b00      	cmp	r3, #0
   e50bc:	d036      	beq.n	e512c <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   e50be:	a806      	add	r0, sp, #24
   e50c0:	f7ff fbb8 	bl	e4834 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   e50c4:	9b00      	ldr	r3, [sp, #0]
   e50c6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   e50c8:	7863      	ldrb	r3, [r4, #1]
   e50ca:	2b02      	cmp	r3, #2
   e50cc:	d101      	bne.n	e50d2 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e50ce:	1d21      	adds	r1, r4, #4
   e50d0:	e013      	b.n	e50fa <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   e50d2:	2b0a      	cmp	r3, #10
   e50d4:	d114      	bne.n	e5100 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   e50d6:	2211      	movs	r2, #17
   e50d8:	4629      	mov	r1, r5
   e50da:	a801      	add	r0, sp, #4
   e50dc:	f001 fd59 	bl	e6b92 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e50e0:	68a3      	ldr	r3, [r4, #8]
   e50e2:	bb33      	cbnz	r3, e5132 <_ZN9TCPClient7connectEPKctm+0xaa>
   e50e4:	68e3      	ldr	r3, [r4, #12]
   e50e6:	bb23      	cbnz	r3, e5132 <_ZN9TCPClient7connectEPKctm+0xaa>
   e50e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e50ec:	6925      	ldr	r5, [r4, #16]
   e50ee:	f7fe fd9f 	bl	e3c30 <inet_htonl>
   e50f2:	4285      	cmp	r5, r0
   e50f4:	d11d      	bne.n	e5132 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   e50f6:	f104 0114 	add.w	r1, r4, #20
   e50fa:	a806      	add	r0, sp, #24
   e50fc:	f7ff fbdd 	bl	e48ba <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   e5100:	a806      	add	r0, sp, #24
   e5102:	f7ff fbb7 	bl	e4874 <_ZNK9IPAddresscvbEv>
        if (addr) {
   e5106:	b188      	cbz	r0, e512c <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   e5108:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e510a:	ad07      	add	r5, sp, #28
   e510c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   e5110:	4b18      	ldr	r3, [pc, #96]	; (e5174 <_ZN9TCPClient7connectEPKctm+0xec>)
   e5112:	930c      	str	r3, [sp, #48]	; 0x30
   e5114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e5116:	ac0d      	add	r4, sp, #52	; 0x34
   e5118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e511a:	682b      	ldr	r3, [r5, #0]
   e511c:	7023      	strb	r3, [r4, #0]
   e511e:	463a      	mov	r2, r7
   e5120:	4643      	mov	r3, r8
   e5122:	a90c      	add	r1, sp, #48	; 0x30
   e5124:	4630      	mov	r0, r6
   e5126:	47c8      	blx	r9
   e5128:	4604      	mov	r4, r0
   e512a:	e01c      	b.n	e5166 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   e512c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   e5130:	e019      	b.n	e5166 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e5132:	f104 0308 	add.w	r3, r4, #8
   e5136:	ad01      	add	r5, sp, #4
   e5138:	3418      	adds	r4, #24
   e513a:	6818      	ldr	r0, [r3, #0]
   e513c:	6859      	ldr	r1, [r3, #4]
   e513e:	462a      	mov	r2, r5
   e5140:	c203      	stmia	r2!, {r0, r1}
   e5142:	3308      	adds	r3, #8
   e5144:	42a3      	cmp	r3, r4
   e5146:	4615      	mov	r5, r2
   e5148:	d1f7      	bne.n	e513a <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   e514a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e514c:	a901      	add	r1, sp, #4
   e514e:	a80c      	add	r0, sp, #48	; 0x30
   e5150:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   e5152:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   e5156:	f7ff fb7b 	bl	e4850 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e515a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e515c:	ac07      	add	r4, sp, #28
   e515e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e5160:	682b      	ldr	r3, [r5, #0]
   e5162:	7023      	strb	r3, [r4, #0]
   e5164:	e7cc      	b.n	e5100 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   e5166:	9800      	ldr	r0, [sp, #0]
   e5168:	f7fe fd72 	bl	e3c50 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   e516c:	4620      	mov	r0, r4
   e516e:	b013      	add	sp, #76	; 0x4c
   e5170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e5174:	000e9774 	.word	0x000e9774

000e5178 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e5178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   e517a:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   e517c:	2200      	movs	r2, #0
   e517e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   e5180:	9202      	str	r2, [sp, #8]
   e5182:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   e5184:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e5186:	4604      	mov	r4, r0
   e5188:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   e518a:	d008      	beq.n	e519e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   e518c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e5190:	fbb3 f1f2 	udiv	r1, r3, r2
   e5194:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   e5196:	fb02 3111 	mls	r1, r2, r1, r3
   e519a:	434a      	muls	r2, r1
   e519c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   e519e:	6960      	ldr	r0, [r4, #20]
   e51a0:	2308      	movs	r3, #8
   e51a2:	9300      	str	r3, [sp, #0]
   e51a4:	f241 0205 	movw	r2, #4101	; 0x1005
   e51a8:	446b      	add	r3, sp
   e51aa:	f640 71ff 	movw	r1, #4095	; 0xfff
   e51ae:	6800      	ldr	r0, [r0, #0]
   e51b0:	f7fe fd5e 	bl	e3c70 <sock_setsockopt>
    if (ret < 0) {
   e51b4:	2800      	cmp	r0, #0
   e51b6:	db08      	blt.n	e51ca <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   e51b8:	6960      	ldr	r0, [r4, #20]
   e51ba:	2300      	movs	r3, #0
   e51bc:	4632      	mov	r2, r6
   e51be:	4629      	mov	r1, r5
   e51c0:	6800      	ldr	r0, [r0, #0]
   e51c2:	f7fe fd75 	bl	e3cb0 <sock_send>
    if (ret < 0) {
   e51c6:	2800      	cmp	r0, #0
   e51c8:	da04      	bge.n	e51d4 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   e51ca:	f7fe ff2d 	bl	e4028 <__errno>
   e51ce:	6803      	ldr	r3, [r0, #0]
   e51d0:	6063      	str	r3, [r4, #4]
   e51d2:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   e51d4:	b004      	add	sp, #16
   e51d6:	bd70      	pop	{r4, r5, r6, pc}

000e51d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e51d8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e51da:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e51dc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e51de:	689b      	ldr	r3, [r3, #8]
   e51e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e51e2:	68a3      	ldr	r3, [r4, #8]
   e51e4:	3b01      	subs	r3, #1
   e51e6:	60a3      	str	r3, [r4, #8]
   e51e8:	b92b      	cbnz	r3, e51f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   e51ea:	6823      	ldr	r3, [r4, #0]
   e51ec:	4620      	mov	r0, r4
   e51ee:	68db      	ldr	r3, [r3, #12]
        }
    }
   e51f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   e51f4:	4718      	bx	r3
   e51f6:	bd10      	pop	{r4, pc}

000e51f8 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   e51f8:	b570      	push	{r4, r5, r6, lr}
   e51fa:	4604      	mov	r4, r0
   e51fc:	694d      	ldr	r5, [r1, #20]
   e51fe:	4b05      	ldr	r3, [pc, #20]	; (e5214 <_ZN9TCPClient8remoteIPEv+0x1c>)
   e5200:	f844 3b04 	str.w	r3, [r4], #4
   e5204:	358c      	adds	r5, #140	; 0x8c
   e5206:	4606      	mov	r6, r0
   e5208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e520a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e520c:	682b      	ldr	r3, [r5, #0]
   e520e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   e5210:	4630      	mov	r0, r6
   e5212:	bd70      	pop	{r4, r5, r6, pc}
   e5214:	000e9774 	.word	0x000e9774

000e5218 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   e5218:	b510      	push	{r4, lr}
   e521a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e521c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e5220:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e5224:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   e5226:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e5228:	d005      	beq.n	e5236 <_ZN9TCPClient4peekEv+0x1e>
   e522a:	6962      	ldr	r2, [r4, #20]
   e522c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e5230:	4413      	add	r3, r2
   e5232:	7918      	ldrb	r0, [r3, #4]
   e5234:	bd10      	pop	{r4, pc}
   e5236:	6803      	ldr	r3, [r0, #0]
   e5238:	691b      	ldr	r3, [r3, #16]
   e523a:	4798      	blx	r3
   e523c:	2800      	cmp	r0, #0
   e523e:	d1f4      	bne.n	e522a <_ZN9TCPClient4peekEv+0x12>
   e5240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e5244:	bd10      	pop	{r4, pc}

000e5246 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   e5246:	b510      	push	{r4, lr}
   e5248:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e524a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e524e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e5252:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   e5254:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e5256:	d008      	beq.n	e526a <_ZN9TCPClient4readEv+0x24>
   e5258:	6962      	ldr	r2, [r4, #20]
   e525a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e525e:	1c59      	adds	r1, r3, #1
   e5260:	4413      	add	r3, r2
   e5262:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   e5266:	7918      	ldrb	r0, [r3, #4]
   e5268:	bd10      	pop	{r4, pc}
   e526a:	6803      	ldr	r3, [r0, #0]
   e526c:	691b      	ldr	r3, [r3, #16]
   e526e:	4798      	blx	r3
   e5270:	2800      	cmp	r0, #0
   e5272:	d1f1      	bne.n	e5258 <_ZN9TCPClient4readEv+0x12>
   e5274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   e5278:	bd10      	pop	{r4, pc}

000e527a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   e527a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e527c:	6943      	ldr	r3, [r0, #20]
   e527e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   e5280:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e5284:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e5288:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   e528a:	4605      	mov	r5, r0
   e528c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   e528e:	d106      	bne.n	e529e <_ZN9TCPClient4readEPhj+0x24>
   e5290:	6803      	ldr	r3, [r0, #0]
   e5292:	691b      	ldr	r3, [r3, #16]
   e5294:	4798      	blx	r3
   e5296:	b910      	cbnz	r0, e529e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   e5298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   e529c:	e014      	b.n	e52c8 <_ZN9TCPClient4readEPhj+0x4e>
   e529e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   e52a0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   e52a4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   e52a8:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   e52aa:	42bc      	cmp	r4, r7
   e52ac:	bf28      	it	cs
   e52ae:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   e52b0:	4419      	add	r1, r3
   e52b2:	4622      	mov	r2, r4
   e52b4:	3104      	adds	r1, #4
   e52b6:	4630      	mov	r0, r6
   e52b8:	f001 fc45 	bl	e6b46 <memcpy>
   e52bc:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   e52be:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e52c2:	4423      	add	r3, r4
   e52c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   e52c8:	4620      	mov	r0, r4
   e52ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e52cc <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   e52cc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   e52ce:	2300      	movs	r3, #0
   e52d0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   e52d4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   e52d6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   e52da:	4770      	bx	lr

000e52dc <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e52dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e52e0:	4698      	mov	r8, r3
    stop();
   e52e2:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e52e4:	460d      	mov	r5, r1
   e52e6:	b08a      	sub	sp, #40	; 0x28
    stop();
   e52e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e52ea:	4606      	mov	r6, r0
   e52ec:	4617      	mov	r7, r2
    stop();
   e52ee:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   e52f0:	7d2b      	ldrb	r3, [r5, #20]
   e52f2:	6974      	ldr	r4, [r6, #20]
   e52f4:	2b04      	cmp	r3, #4
   e52f6:	bf0c      	ite	eq
   e52f8:	2002      	moveq	r0, #2
   e52fa:	200a      	movne	r0, #10
   e52fc:	2206      	movs	r2, #6
   e52fe:	2101      	movs	r1, #1
   e5300:	f7fe fcde 	bl	e3cc0 <sock_socket>
   e5304:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   e5306:	6973      	ldr	r3, [r6, #20]
   e5308:	681c      	ldr	r4, [r3, #0]
   e530a:	2c00      	cmp	r4, #0
   e530c:	db5b      	blt.n	e53c6 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   e530e:	4630      	mov	r0, r6
   e5310:	f7ff ffdc 	bl	e52cc <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   e5314:	f1b8 0f00 	cmp.w	r8, #0
   e5318:	d017      	beq.n	e534a <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   e531a:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   e531c:	a903      	add	r1, sp, #12
   e531e:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   e5322:	9303      	str	r3, [sp, #12]
   e5324:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   e5328:	f7fe fc72 	bl	e3c10 <if_index_to_name>
   e532c:	2800      	cmp	r0, #0
   e532e:	db49      	blt.n	e53c4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   e5330:	6970      	ldr	r0, [r6, #20]
   e5332:	2306      	movs	r3, #6
   e5334:	9300      	str	r3, [sp, #0]
   e5336:	f241 020b 	movw	r2, #4107	; 0x100b
   e533a:	ab03      	add	r3, sp, #12
   e533c:	f640 71ff 	movw	r1, #4095	; 0xfff
   e5340:	6800      	ldr	r0, [r0, #0]
   e5342:	f7fe fc95 	bl	e3c70 <sock_setsockopt>
   e5346:	2800      	cmp	r0, #0
   e5348:	db3c      	blt.n	e53c4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   e534a:	241c      	movs	r4, #28
   e534c:	4622      	mov	r2, r4
   e534e:	2100      	movs	r1, #0
   e5350:	a803      	add	r0, sp, #12
   e5352:	f001 fc1e 	bl	e6b92 <memset>
    if (ip.version() == 4) {
   e5356:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   e5358:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   e535c:	2b04      	cmp	r3, #4
   e535e:	d10c      	bne.n	e537a <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   e5360:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   e5362:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   e5364:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   e5368:	f7fe fc6a 	bl	e3c40 <inet_htons>
   e536c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   e5370:	6868      	ldr	r0, [r5, #4]
   e5372:	f7fe fc5d 	bl	e3c30 <inet_htonl>
   e5376:	9004      	str	r0, [sp, #16]
   e5378:	e013      	b.n	e53a2 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   e537a:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   e537c:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   e537e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   e5382:	f7fe fc5d 	bl	e3c40 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e5386:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   e5388:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e538c:	1d2b      	adds	r3, r5, #4
   e538e:	f105 0714 	add.w	r7, r5, #20
   e5392:	6818      	ldr	r0, [r3, #0]
   e5394:	6859      	ldr	r1, [r3, #4]
   e5396:	4622      	mov	r2, r4
   e5398:	c203      	stmia	r2!, {r0, r1}
   e539a:	3308      	adds	r3, #8
   e539c:	42bb      	cmp	r3, r7
   e539e:	4614      	mov	r4, r2
   e53a0:	d1f7      	bne.n	e5392 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   e53a2:	6973      	ldr	r3, [r6, #20]
   e53a4:	221c      	movs	r2, #28
   e53a6:	a903      	add	r1, sp, #12
   e53a8:	6818      	ldr	r0, [r3, #0]
   e53aa:	f7fe fc71 	bl	e3c90 <sock_connect>
   e53ae:	2800      	cmp	r0, #0
   e53b0:	db08      	blt.n	e53c4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   e53b2:	1d2c      	adds	r4, r5, #4
   e53b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   e53b6:	6976      	ldr	r6, [r6, #20]
   e53b8:	368c      	adds	r6, #140	; 0x8c
   e53ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   e53bc:	6823      	ldr	r3, [r4, #0]
   e53be:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   e53c0:	2401      	movs	r4, #1
   e53c2:	e004      	b.n	e53ce <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   e53c4:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   e53c6:	6833      	ldr	r3, [r6, #0]
   e53c8:	4630      	mov	r0, r6
   e53ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e53cc:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   e53ce:	4620      	mov	r0, r4
   e53d0:	b00a      	add	sp, #40	; 0x28
   e53d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e53d6 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   e53d6:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   e53d8:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   e53da:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   e53dc:	6818      	ldr	r0, [r3, #0]
   e53de:	2800      	cmp	r0, #0
   e53e0:	db01      	blt.n	e53e6 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   e53e2:	f7fe fc4d 	bl	e3c80 <sock_close>
   e53e6:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   e53e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e53ec:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e53ee:	6960      	ldr	r0, [r4, #20]
   e53f0:	2211      	movs	r2, #17
   e53f2:	2100      	movs	r1, #0
   e53f4:	308c      	adds	r0, #140	; 0x8c
   e53f6:	f001 fbcc 	bl	e6b92 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   e53fa:	4620      	mov	r0, r4
}
   e53fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   e5400:	f7ff bf64 	b.w	e52cc <_ZN9TCPClient12flush_bufferEv>

000e5404 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   e5404:	b530      	push	{r4, r5, lr}
   e5406:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   e5408:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   e540c:	b08b      	sub	sp, #44	; 0x2c
   e540e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   e5410:	b11b      	cbz	r3, e541a <_ZN9TCPClient9availableEv+0x16>
   e5412:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   e5416:	429a      	cmp	r2, r3
   e5418:	d040      	beq.n	e549c <_ZN9TCPClient9availableEv+0x98>
   e541a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   e541c:	6818      	ldr	r0, [r3, #0]
   e541e:	2800      	cmp	r0, #0
   e5420:	db3f      	blt.n	e54a2 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   e5422:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   e5426:	2d7f      	cmp	r5, #127	; 0x7f
   e5428:	d83b      	bhi.n	e54a2 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   e542a:	1d19      	adds	r1, r3, #4
   e542c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   e5430:	2308      	movs	r3, #8
   e5432:	4429      	add	r1, r5
   e5434:	f7fe fc34 	bl	e3ca0 <sock_recv>
            if (ret > 0) {
   e5438:	2800      	cmp	r0, #0
   e543a:	dd0c      	ble.n	e5456 <_ZN9TCPClient9availableEv+0x52>
   e543c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   e543e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e5442:	b90a      	cbnz	r2, e5448 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   e5444:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   e5448:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   e544a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   e544e:	4418      	add	r0, r3
   e5450:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   e5454:	e025      	b.n	e54a2 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e5456:	f7fe fde7 	bl	e4028 <__errno>
   e545a:	6803      	ldr	r3, [r0, #0]
   e545c:	2b0b      	cmp	r3, #11
   e545e:	d020      	beq.n	e54a2 <_ZN9TCPClient9availableEv+0x9e>
   e5460:	f7fe fde2 	bl	e4028 <__errno>
   e5464:	6803      	ldr	r3, [r0, #0]
   e5466:	2b0b      	cmp	r3, #11
   e5468:	d01b      	beq.n	e54a2 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   e546a:	2320      	movs	r3, #32
   e546c:	2500      	movs	r5, #0
   e546e:	9302      	str	r3, [sp, #8]
   e5470:	9503      	str	r5, [sp, #12]
   e5472:	f7fe fdd9 	bl	e4028 <__errno>
   e5476:	6803      	ldr	r3, [r0, #0]
   e5478:	9301      	str	r3, [sp, #4]
   e547a:	4b0e      	ldr	r3, [pc, #56]	; (e54b4 <_ZN9TCPClient9availableEv+0xb0>)
   e547c:	9300      	str	r3, [sp, #0]
   e547e:	aa02      	add	r2, sp, #8
   e5480:	462b      	mov	r3, r5
   e5482:	490d      	ldr	r1, [pc, #52]	; (e54b8 <_ZN9TCPClient9availableEv+0xb4>)
   e5484:	2032      	movs	r0, #50	; 0x32
   e5486:	f7fe fcb3 	bl	e3df0 <log_message>
                    sock_close(d_->sock);
   e548a:	6963      	ldr	r3, [r4, #20]
   e548c:	6818      	ldr	r0, [r3, #0]
   e548e:	f7fe fbf7 	bl	e3c80 <sock_close>
   e5492:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   e5494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e5498:	601a      	str	r2, [r3, #0]
   e549a:	e002      	b.n	e54a2 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   e549c:	f7ff ff16 	bl	e52cc <_ZN9TCPClient12flush_bufferEv>
   e54a0:	e7bb      	b.n	e541a <_ZN9TCPClient9availableEv+0x16>
   e54a2:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   e54a4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   e54a8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   e54ac:	1a18      	subs	r0, r3, r0
}
   e54ae:	b00b      	add	sp, #44	; 0x2c
   e54b0:	bd30      	pop	{r4, r5, pc}
   e54b2:	bf00      	nop
   e54b4:	000e9933 	.word	0x000e9933
   e54b8:	000e992c 	.word	0x000e992c

000e54bc <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   e54bc:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   e54be:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   e54c0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   e54c2:	6001      	str	r1, [r0, #0]
   e54c4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   e54c8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   e54cc:	3088      	adds	r0, #136	; 0x88
   e54ce:	f7ff f9b1 	bl	e4834 <_ZN9IPAddressC1Ev>
}
   e54d2:	4620      	mov	r0, r4
   e54d4:	bd10      	pop	{r4, pc}
	...

000e54d8 <_ZN9TCPClientC1Ei>:
   e54d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   e54dc:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e54de:	2300      	movs	r3, #0
   e54e0:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   e54e2:	4a14      	ldr	r2, [pc, #80]	; (e5534 <_ZN9TCPClientC1Ei+0x5c>)
   e54e4:	6043      	str	r3, [r0, #4]
   e54e6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   e54e8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e54ea:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   e54ec:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e54ee:	20a0      	movs	r0, #160	; 0xa0
   e54f0:	460e      	mov	r6, r1
   e54f2:	f7ee fdd0 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   e54f6:	4605      	mov	r5, r0
   e54f8:	b110      	cbz	r0, e5500 <_ZN9TCPClientC1Ei+0x28>
   e54fa:	4631      	mov	r1, r6
   e54fc:	f7ff ffde 	bl	e54bc <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e5500:	2014      	movs	r0, #20
   e5502:	f7ee fdc8 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   e5506:	4603      	mov	r3, r0
   e5508:	b128      	cbz	r0, e5516 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   e550a:	2201      	movs	r2, #1
   e550c:	6042      	str	r2, [r0, #4]
   e550e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   e5510:	4a09      	ldr	r2, [pc, #36]	; (e5538 <_ZN9TCPClientC1Ei+0x60>)
   e5512:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   e5514:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   e5516:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   e5518:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   e551a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   e551c:	b128      	cbz	r0, e552a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   e551e:	6843      	ldr	r3, [r0, #4]
   e5520:	3b01      	subs	r3, #1
   e5522:	6043      	str	r3, [r0, #4]
   e5524:	b90b      	cbnz	r3, e552a <_ZN9TCPClientC1Ei+0x52>
   e5526:	f7ff fe57 	bl	e51d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   e552a:	4620      	mov	r0, r4
   e552c:	f7ff fece 	bl	e52cc <_ZN9TCPClient12flush_bufferEv>
}
   e5530:	4620      	mov	r0, r4
   e5532:	bd70      	pop	{r4, r5, r6, pc}
   e5534:	000e98e8 	.word	0x000e98e8
   e5538:	000e98cc 	.word	0x000e98cc

000e553c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   e553c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   e553e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   e5542:	4604      	mov	r4, r0
        : TCPClient(-1) {
   e5544:	f7ff ffc8 	bl	e54d8 <_ZN9TCPClientC1Ei>
}
   e5548:	4620      	mov	r0, r4
   e554a:	bd10      	pop	{r4, pc}

000e554c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   e554c:	b510      	push	{r4, lr}
   e554e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   e5550:	6800      	ldr	r0, [r0, #0]
   e5552:	2800      	cmp	r0, #0
   e5554:	db01      	blt.n	e555a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   e5556:	f7fe fb93 	bl	e3c80 <sock_close>
    }
}
   e555a:	4620      	mov	r0, r4
   e555c:	bd10      	pop	{r4, pc}

000e555e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   e555e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   e5560:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   e5562:	4620      	mov	r0, r4
   e5564:	f7ff fff2 	bl	e554c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   e5568:	b124      	cbz	r4, e5574 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   e556a:	4620      	mov	r0, r4
   e556c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   e5570:	f7ee bd95 	b.w	d409e <_ZdlPv>
   e5574:	bd10      	pop	{r4, pc}

000e5576 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   e5576:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   e5578:	2000      	movs	r0, #0
   e557a:	f7fe fcb5 	bl	e3ee8 <spark_sync_time_pending>
   e557e:	b128      	cbz	r0, e558c <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   e5580:	f7fe fc9a 	bl	e3eb8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   e5584:	f080 0001 	eor.w	r0, r0, #1
   e5588:	b2c0      	uxtb	r0, r0
   e558a:	bd08      	pop	{r3, pc}
   e558c:	2001      	movs	r0, #1
    }
   e558e:	bd08      	pop	{r3, pc}

000e5590 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   e5590:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   e5592:	2000      	movs	r0, #0
   e5594:	f7fe fab4 	bl	e3b00 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   e5598:	4604      	mov	r4, r0
   e559a:	b968      	cbnz	r0, e55b8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   e559c:	f7fe fc30 	bl	e3e00 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   e55a0:	2801      	cmp	r0, #1
   e55a2:	d10b      	bne.n	e55bc <_ZN9TimeClass7isValidEv+0x2c>
   e55a4:	4620      	mov	r0, r4
   e55a6:	f7fe fc53 	bl	e3e50 <system_thread_get_state>
   e55aa:	b938      	cbnz	r0, e55bc <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   e55ac:	f7ff ffe3 	bl	e5576 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   e55b0:	b930      	cbnz	r0, e55c0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   e55b2:	f7fe fc79 	bl	e3ea8 <spark_process>
   e55b6:	e7f9      	b.n	e55ac <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   e55b8:	2001      	movs	r0, #1
   e55ba:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   e55bc:	2000      	movs	r0, #0
   e55be:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   e55c0:	f7ff ffd9 	bl	e5576 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   e55c4:	2000      	movs	r0, #0
   e55c6:	f7fe fa9b 	bl	e3b00 <HAL_RTC_Time_Is_Valid>
   e55ca:	3000      	adds	r0, #0
   e55cc:	bf18      	it	ne
   e55ce:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   e55d0:	bd10      	pop	{r4, pc}

000e55d2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   e55d2:	b508      	push	{r3, lr}
    (void)isValid();
   e55d4:	f7ff ffdc 	bl	e5590 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   e55d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   e55dc:	f7fe ba88 	b.w	e3af0 <HAL_RTC_Get_UnixTime>

000e55e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e55e0:	4b02      	ldr	r3, [pc, #8]	; (e55ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e55e2:	681a      	ldr	r2, [r3, #0]
   e55e4:	4b02      	ldr	r3, [pc, #8]	; (e55f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e55e6:	601a      	str	r2, [r3, #0]
   e55e8:	4770      	bx	lr
   e55ea:	bf00      	nop
   e55ec:	2003bec8 	.word	0x2003bec8
   e55f0:	2003e6c8 	.word	0x2003e6c8

000e55f4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   e55f4:	4770      	bx	lr

000e55f6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e55f6:	7441      	strb	r1, [r0, #17]
   e55f8:	4770      	bx	lr

000e55fa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   e55fa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   e55fc:	7c00      	ldrb	r0, [r0, #16]
   e55fe:	f7fe fbaf 	bl	e3d60 <HAL_USART_Available_Data_For_Write>
}
   e5602:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e5606:	bd08      	pop	{r3, pc}

000e5608 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e5608:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   e560a:	7c00      	ldrb	r0, [r0, #16]
   e560c:	f7fe fb80 	bl	e3d10 <HAL_USART_Available_Data>
}
   e5610:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e5614:	bd08      	pop	{r3, pc}

000e5616 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e5616:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   e5618:	7c00      	ldrb	r0, [r0, #16]
   e561a:	f7fe fb89 	bl	e3d30 <HAL_USART_Peek_Data>
}
   e561e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e5622:	bf28      	it	cs
   e5624:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   e5628:	bd08      	pop	{r3, pc}

000e562a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e562a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   e562c:	7c00      	ldrb	r0, [r0, #16]
   e562e:	f7fe fb77 	bl	e3d20 <HAL_USART_Read_Data>
}
   e5632:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e5636:	bf28      	it	cs
   e5638:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   e563c:	bd08      	pop	{r3, pc}

000e563e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   e563e:	7c00      	ldrb	r0, [r0, #16]
   e5640:	f7fe bb7e 	b.w	e3d40 <HAL_USART_Flush_Data>

000e5644 <_ZN11USARTSerialD0Ev>:
   e5644:	b510      	push	{r4, lr}
   e5646:	2114      	movs	r1, #20
   e5648:	4604      	mov	r4, r0
   e564a:	f000 fa98 	bl	e5b7e <_ZdlPvj>
   e564e:	4620      	mov	r0, r4
   e5650:	bd10      	pop	{r4, pc}

000e5652 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e5652:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e5654:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   e5656:	4604      	mov	r4, r0
   e5658:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e565a:	b925      	cbnz	r5, e5666 <_ZN11USARTSerial5writeEh+0x14>
   e565c:	7c00      	ldrb	r0, [r0, #16]
   e565e:	f7fe fb7f 	bl	e3d60 <HAL_USART_Available_Data_For_Write>
   e5662:	2800      	cmp	r0, #0
   e5664:	dd05      	ble.n	e5672 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e5666:	4631      	mov	r1, r6
   e5668:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e566a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e566e:	f7fe bb47 	b.w	e3d00 <HAL_USART_Write_Data>
  }
  return 0;
}
   e5672:	4628      	mov	r0, r5
   e5674:	bd70      	pop	{r4, r5, r6, pc}
	...

000e5678 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   e5678:	b510      	push	{r4, lr}
   e567a:	4604      	mov	r4, r0
   e567c:	4608      	mov	r0, r1
   e567e:	4611      	mov	r1, r2
   e5680:	2200      	movs	r2, #0
   e5682:	6062      	str	r2, [r4, #4]
   e5684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e5688:	60a2      	str	r2, [r4, #8]
   e568a:	4a05      	ldr	r2, [pc, #20]	; (e56a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   e568c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   e568e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   e5690:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   e5692:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   e5694:	461a      	mov	r2, r3
   e5696:	f7fe fb2b 	bl	e3cf0 <HAL_USART_Init>
}
   e569a:	4620      	mov	r0, r4
   e569c:	bd10      	pop	{r4, pc}
   e569e:	bf00      	nop
   e56a0:	000e9974 	.word	0x000e9974

000e56a4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   e56a4:	7c00      	ldrb	r0, [r0, #16]
   e56a6:	f7fe bb53 	b.w	e3d50 <HAL_USART_Is_Enabled>
	...

000e56ac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e56ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   e56ae:	4c19      	ldr	r4, [pc, #100]	; (e5714 <_Z22__fetch_global_Serial1v+0x68>)
   e56b0:	6825      	ldr	r5, [r4, #0]
   e56b2:	b94d      	cbnz	r5, e56c8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   e56b4:	2084      	movs	r0, #132	; 0x84
   e56b6:	f7ee fcee 	bl	d4096 <_Znwj>
   e56ba:	4606      	mov	r6, r0
   e56bc:	b118      	cbz	r0, e56c6 <_Z22__fetch_global_Serial1v+0x1a>
   e56be:	2284      	movs	r2, #132	; 0x84
   e56c0:	4629      	mov	r1, r5
   e56c2:	f001 fa66 	bl	e6b92 <memset>
   e56c6:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   e56c8:	4d13      	ldr	r5, [pc, #76]	; (e5718 <_Z22__fetch_global_Serial1v+0x6c>)
   e56ca:	682e      	ldr	r6, [r5, #0]
   e56cc:	b94e      	cbnz	r6, e56e2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   e56ce:	2084      	movs	r0, #132	; 0x84
   e56d0:	f7ee fce1 	bl	d4096 <_Znwj>
   e56d4:	4607      	mov	r7, r0
   e56d6:	b118      	cbz	r0, e56e0 <_Z22__fetch_global_Serial1v+0x34>
   e56d8:	2284      	movs	r2, #132	; 0x84
   e56da:	4631      	mov	r1, r6
   e56dc:	f001 fa59 	bl	e6b92 <memset>
   e56e0:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   e56e2:	4f0e      	ldr	r7, [pc, #56]	; (e571c <_Z22__fetch_global_Serial1v+0x70>)
   e56e4:	6839      	ldr	r1, [r7, #0]
   e56e6:	f011 0601 	ands.w	r6, r1, #1
   e56ea:	d111      	bne.n	e5710 <_Z22__fetch_global_Serial1v+0x64>
   e56ec:	4638      	mov	r0, r7
   e56ee:	f7ee fcda 	bl	d40a6 <__cxa_guard_acquire>
   e56f2:	b168      	cbz	r0, e5710 <_Z22__fetch_global_Serial1v+0x64>
   e56f4:	6822      	ldr	r2, [r4, #0]
   e56f6:	682b      	ldr	r3, [r5, #0]
   e56f8:	4809      	ldr	r0, [pc, #36]	; (e5720 <_Z22__fetch_global_Serial1v+0x74>)
   e56fa:	4631      	mov	r1, r6
   e56fc:	f7ff ffbc 	bl	e5678 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   e5700:	4638      	mov	r0, r7
   e5702:	f7ee fcd5 	bl	d40b0 <__cxa_guard_release>
   e5706:	4a07      	ldr	r2, [pc, #28]	; (e5724 <_Z22__fetch_global_Serial1v+0x78>)
   e5708:	4907      	ldr	r1, [pc, #28]	; (e5728 <_Z22__fetch_global_Serial1v+0x7c>)
   e570a:	4805      	ldr	r0, [pc, #20]	; (e5720 <_Z22__fetch_global_Serial1v+0x74>)
   e570c:	f000 fa32 	bl	e5b74 <__aeabi_atexit>
#endif
	return serial1;
}
   e5710:	4803      	ldr	r0, [pc, #12]	; (e5720 <_Z22__fetch_global_Serial1v+0x74>)
   e5712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e5714:	2003e6e8 	.word	0x2003e6e8
   e5718:	2003e6e0 	.word	0x2003e6e0
   e571c:	2003e6e4 	.word	0x2003e6e4
   e5720:	2003e6cc 	.word	0x2003e6cc
   e5724:	2003bf30 	.word	0x2003bf30
   e5728:	000e55f5 	.word	0x000e55f5

000e572c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e572c:	7441      	strb	r1, [r0, #17]
   e572e:	4770      	bx	lr

000e5730 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e5730:	4770      	bx	lr

000e5732 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   e5732:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e5734:	2100      	movs	r1, #0
   e5736:	7c00      	ldrb	r0, [r0, #16]
   e5738:	f7fe fb3a 	bl	e3db0 <HAL_USB_USART_Receive_Data>
}
   e573c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e5740:	bf28      	it	cs
   e5742:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   e5746:	bd08      	pop	{r3, pc}

000e5748 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   e5748:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e574a:	2101      	movs	r1, #1
   e574c:	7c00      	ldrb	r0, [r0, #16]
   e574e:	f7fe fb2f 	bl	e3db0 <HAL_USB_USART_Receive_Data>
}
   e5752:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e5756:	bf28      	it	cs
   e5758:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   e575c:	bd08      	pop	{r3, pc}

000e575e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   e575e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e5760:	7c00      	ldrb	r0, [r0, #16]
   e5762:	f7fe fb1d 	bl	e3da0 <HAL_USB_USART_Available_Data_For_Write>
}
   e5766:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e576a:	bd08      	pop	{r3, pc}

000e576c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   e576c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e576e:	7c00      	ldrb	r0, [r0, #16]
   e5770:	f7fe fb0e 	bl	e3d90 <HAL_USB_USART_Available_Data>
}
   e5774:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e5778:	bd08      	pop	{r3, pc}

000e577a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   e577a:	7c00      	ldrb	r0, [r0, #16]
   e577c:	f7fe bb28 	b.w	e3dd0 <HAL_USB_USART_Flush_Data>

000e5780 <_ZN9USBSerialD0Ev>:
   e5780:	b510      	push	{r4, lr}
   e5782:	2114      	movs	r1, #20
   e5784:	4604      	mov	r4, r0
   e5786:	f000 f9fa 	bl	e5b7e <_ZdlPvj>
   e578a:	4620      	mov	r0, r4
   e578c:	bd10      	pop	{r4, pc}

000e578e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e578e:	b538      	push	{r3, r4, r5, lr}
   e5790:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e5792:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e5794:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e5796:	f7fe fb03 	bl	e3da0 <HAL_USB_USART_Available_Data_For_Write>
   e579a:	2800      	cmp	r0, #0
   e579c:	dc01      	bgt.n	e57a2 <_ZN9USBSerial5writeEh+0x14>
   e579e:	7c60      	ldrb	r0, [r4, #17]
   e57a0:	b128      	cbz	r0, e57ae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e57a2:	4629      	mov	r1, r5
   e57a4:	7c20      	ldrb	r0, [r4, #16]
   e57a6:	f7fe fb0b 	bl	e3dc0 <HAL_USB_USART_Send_Data>
   e57aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   e57ae:	bd38      	pop	{r3, r4, r5, pc}

000e57b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e57b0:	b510      	push	{r4, lr}
   e57b2:	4604      	mov	r4, r0
   e57b4:	2300      	movs	r3, #0
   e57b6:	6063      	str	r3, [r4, #4]
   e57b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e57bc:	60a3      	str	r3, [r4, #8]
   e57be:	4b05      	ldr	r3, [pc, #20]	; (e57d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e57c0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   e57c2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e57c4:	4608      	mov	r0, r1
{
  _serial = serial;
   e57c6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   e57c8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   e57ca:	4611      	mov	r1, r2
   e57cc:	f7fe fad0 	bl	e3d70 <HAL_USB_USART_Init>
}
   e57d0:	4620      	mov	r0, r4
   e57d2:	bd10      	pop	{r4, pc}
   e57d4:	000e99a4 	.word	0x000e99a4

000e57d8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   e57d8:	2200      	movs	r2, #0
   e57da:	7c00      	ldrb	r0, [r0, #16]
   e57dc:	f7fe bad0 	b.w	e3d80 <HAL_USB_USART_Begin>

000e57e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e57e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e57e2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e57e4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e57e6:	2100      	movs	r1, #0
   e57e8:	f001 f9d3 	bl	e6b92 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e57ec:	4620      	mov	r0, r4
   e57ee:	bd10      	pop	{r4, pc}

000e57f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e57f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e57f2:	4d0e      	ldr	r5, [pc, #56]	; (e582c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   e57f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e57f6:	a801      	add	r0, sp, #4
   e57f8:	f7ff fff2 	bl	e57e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e57fc:	6829      	ldr	r1, [r5, #0]
   e57fe:	f011 0401 	ands.w	r4, r1, #1
   e5802:	d110      	bne.n	e5826 <_Z16_fetch_usbserialv+0x36>
   e5804:	4628      	mov	r0, r5
   e5806:	f7ee fc4e 	bl	d40a6 <__cxa_guard_acquire>
   e580a:	b160      	cbz	r0, e5826 <_Z16_fetch_usbserialv+0x36>
   e580c:	aa01      	add	r2, sp, #4
   e580e:	4621      	mov	r1, r4
   e5810:	4807      	ldr	r0, [pc, #28]	; (e5830 <_Z16_fetch_usbserialv+0x40>)
   e5812:	f7ff ffcd 	bl	e57b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e5816:	4628      	mov	r0, r5
   e5818:	f7ee fc4a 	bl	d40b0 <__cxa_guard_release>
   e581c:	4a05      	ldr	r2, [pc, #20]	; (e5834 <_Z16_fetch_usbserialv+0x44>)
   e581e:	4906      	ldr	r1, [pc, #24]	; (e5838 <_Z16_fetch_usbserialv+0x48>)
   e5820:	4803      	ldr	r0, [pc, #12]	; (e5830 <_Z16_fetch_usbserialv+0x40>)
   e5822:	f000 f9a7 	bl	e5b74 <__aeabi_atexit>
	return _usbserial;
}
   e5826:	4802      	ldr	r0, [pc, #8]	; (e5830 <_Z16_fetch_usbserialv+0x40>)
   e5828:	b007      	add	sp, #28
   e582a:	bd30      	pop	{r4, r5, pc}
   e582c:	2003e6ec 	.word	0x2003e6ec
   e5830:	2003e6f0 	.word	0x2003e6f0
   e5834:	2003bf30 	.word	0x2003bf30
   e5838:	000e5731 	.word	0x000e5731

000e583c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e583c:	2200      	movs	r2, #0
   e583e:	4611      	mov	r1, r2
   e5840:	6840      	ldr	r0, [r0, #4]
   e5842:	f7fe bb99 	b.w	e3f78 <network_listening>

000e5846 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e5846:	2200      	movs	r2, #0
   e5848:	4611      	mov	r1, r2
   e584a:	6840      	ldr	r0, [r0, #4]
   e584c:	f7fe bba4 	b.w	e3f98 <network_get_listen_timeout>

000e5850 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e5850:	2200      	movs	r2, #0
   e5852:	6840      	ldr	r0, [r0, #4]
   e5854:	f7fe bb98 	b.w	e3f88 <network_set_listen_timeout>

000e5858 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e5858:	2200      	movs	r2, #0
   e585a:	f081 0101 	eor.w	r1, r1, #1
   e585e:	6840      	ldr	r0, [r0, #4]
   e5860:	f7fe bb82 	b.w	e3f68 <network_listen>

000e5864 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   e5864:	2300      	movs	r3, #0
   e5866:	461a      	mov	r2, r3
   e5868:	4619      	mov	r1, r3
   e586a:	6840      	ldr	r0, [r0, #4]
   e586c:	f7fe bb74 	b.w	e3f58 <network_off>

000e5870 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   e5870:	2300      	movs	r3, #0
   e5872:	461a      	mov	r2, r3
   e5874:	4619      	mov	r1, r3
   e5876:	6840      	ldr	r0, [r0, #4]
   e5878:	f7fe bb66 	b.w	e3f48 <network_on>

000e587c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e587c:	2200      	movs	r2, #0
   e587e:	4611      	mov	r1, r2
   e5880:	6840      	ldr	r0, [r0, #4]
   e5882:	f7fe bb49 	b.w	e3f18 <network_connecting>

000e5886 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e5886:	2200      	movs	r2, #0
   e5888:	2102      	movs	r1, #2
   e588a:	6840      	ldr	r0, [r0, #4]
   e588c:	f7fe bb4c 	b.w	e3f28 <network_disconnect>

000e5890 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e5890:	2300      	movs	r3, #0
   e5892:	461a      	mov	r2, r3
   e5894:	6840      	ldr	r0, [r0, #4]
   e5896:	f7fe bb37 	b.w	e3f08 <network_connect>
	...

000e589c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e589c:	4b02      	ldr	r3, [pc, #8]	; (e58a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e589e:	2204      	movs	r2, #4
   e58a0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e58a2:	4a02      	ldr	r2, [pc, #8]	; (e58ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e58a4:	601a      	str	r2, [r3, #0]
   e58a6:	4770      	bx	lr
   e58a8:	2003e704 	.word	0x2003e704
   e58ac:	000e99d4 	.word	0x000e99d4

000e58b0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   e58b0:	b510      	push	{r4, lr}
   e58b2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   e58b4:	f001 f9d9 	bl	e6c6a <strlen>
   e58b8:	3801      	subs	r0, #1
   e58ba:	1823      	adds	r3, r4, r0
   e58bc:	4620      	mov	r0, r4
	while(i<j){
   e58be:	4298      	cmp	r0, r3
   e58c0:	d206      	bcs.n	e58d0 <_Z11str_reversePc+0x20>
		c = *i;
   e58c2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   e58c4:	7819      	ldrb	r1, [r3, #0]
   e58c6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   e58ca:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   e58ce:	e7f6      	b.n	e58be <_Z11str_reversePc+0xe>
   e58d0:	bd10      	pop	{r4, pc}

000e58d2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e58d2:	b570      	push	{r4, r5, r6, lr}
   e58d4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   e58d6:	1e91      	subs	r1, r2, #2
   e58d8:	2922      	cmp	r1, #34	; 0x22
   e58da:	d820      	bhi.n	e591e <ultoa+0x4c>
   e58dc:	4625      	mov	r5, r4
   e58de:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   e58e0:	b910      	cbnz	r0, e58e8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e58e2:	4423      	add	r3, r4
            *ptr++ = '0';
   e58e4:	2230      	movs	r2, #48	; 0x30
   e58e6:	e00e      	b.n	e5906 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   e58e8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   e58ec:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   e58f0:	b2c1      	uxtb	r1, r0
   e58f2:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   e58f6:	2809      	cmp	r0, #9
                *ptr += '0';
   e58f8:	bf94      	ite	ls
   e58fa:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   e58fc:	3157      	addhi	r1, #87	; 0x57
   e58fe:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   e5902:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   e5904:	e7eb      	b.n	e58de <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e5906:	4299      	cmp	r1, r3
   e5908:	d202      	bcs.n	e5910 <ultoa+0x3e>
            *ptr++ = '0';
   e590a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e590e:	e7fa      	b.n	e5906 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   e5910:	2300      	movs	r3, #0
	str_reverse(buffer);
   e5912:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   e5914:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   e5916:	f7ff ffcb 	bl	e58b0 <_Z11str_reversePc>
	return buffer;
   e591a:	4620      	mov	r0, r4
   e591c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   e591e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   e5920:	bd70      	pop	{r4, r5, r6, pc}

000e5922 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   e5922:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   e5924:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   e5926:	460c      	mov	r4, r1
   e5928:	4615      	mov	r5, r2
	if(a<0){
   e592a:	da0b      	bge.n	e5944 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   e592c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   e5930:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   e5934:	bf14      	ite	ne
   e5936:	4258      	negne	r0, r3
   e5938:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   e593a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   e593c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   e593e:	462a      	mov	r2, r5
   e5940:	4419      	add	r1, r3
   e5942:	e000      	b.n	e5946 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   e5944:	2301      	movs	r3, #1
   e5946:	f7ff ffc4 	bl	e58d2 <ultoa>
	}
	return buffer;
}
   e594a:	4620      	mov	r0, r4
   e594c:	bd38      	pop	{r3, r4, r5, pc}
	...

000e5950 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   e5950:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e5952:	4b0c      	ldr	r3, [pc, #48]	; (e5984 <serialEventRun+0x34>)
   e5954:	b133      	cbz	r3, e5964 <serialEventRun+0x14>
   e5956:	f7ff ff4b 	bl	e57f0 <_Z16_fetch_usbserialv>
   e595a:	6803      	ldr	r3, [r0, #0]
   e595c:	691b      	ldr	r3, [r3, #16]
   e595e:	4798      	blx	r3
   e5960:	2800      	cmp	r0, #0
   e5962:	dc09      	bgt.n	e5978 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   e5964:	4b08      	ldr	r3, [pc, #32]	; (e5988 <serialEventRun+0x38>)
   e5966:	b163      	cbz	r3, e5982 <serialEventRun+0x32>
   e5968:	f7ff fea0 	bl	e56ac <_Z22__fetch_global_Serial1v>
   e596c:	6803      	ldr	r3, [r0, #0]
   e596e:	691b      	ldr	r3, [r3, #16]
   e5970:	4798      	blx	r3
   e5972:	2800      	cmp	r0, #0
   e5974:	dc03      	bgt.n	e597e <serialEventRun+0x2e>
   e5976:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   e5978:	f3af 8000 	nop.w
   e597c:	e7f2      	b.n	e5964 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   e597e:	f3af 8000 	nop.w
   e5982:	bd08      	pop	{r3, pc}
	...

000e598c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   e598c:	b508      	push	{r3, lr}
	serialEventRun();
   e598e:	f7ff ffdf 	bl	e5950 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e5992:	f7fe f8a5 	bl	e3ae0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e5996:	4b01      	ldr	r3, [pc, #4]	; (e599c <_post_loop+0x10>)
   e5998:	6018      	str	r0, [r3, #0]
   e599a:	bd08      	pop	{r3, pc}
   e599c:	2003e710 	.word	0x2003e710

000e59a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e59a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e59a2:	2300      	movs	r3, #0
   e59a4:	9300      	str	r3, [sp, #0]
   e59a6:	461a      	mov	r2, r3
   e59a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e59ac:	f7fe fa62 	bl	e3e74 <system_ctrl_set_result>
}
   e59b0:	b003      	add	sp, #12
   e59b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e59b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   e59b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e59ba:	8843      	ldrh	r3, [r0, #2]
   e59bc:	2b0a      	cmp	r3, #10
   e59be:	d008      	beq.n	e59d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e59c0:	2b50      	cmp	r3, #80	; 0x50
   e59c2:	d109      	bne.n	e59d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   e59c4:	4b09      	ldr	r3, [pc, #36]	; (e59ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e59c6:	681b      	ldr	r3, [r3, #0]
   e59c8:	b13b      	cbz	r3, e59da <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   e59ca:	b003      	add	sp, #12
   e59cc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   e59d0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   e59d2:	f7ff ffe5 	bl	e59a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   e59d6:	e006      	b.n	e59e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e59d8:	2300      	movs	r3, #0
   e59da:	9300      	str	r3, [sp, #0]
   e59dc:	461a      	mov	r2, r3
   e59de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e59e2:	f7fe fa47 	bl	e3e74 <system_ctrl_set_result>
        break;
    }
}
   e59e6:	b003      	add	sp, #12
   e59e8:	f85d fb04 	ldr.w	pc, [sp], #4
   e59ec:	2003e70c 	.word	0x2003e70c

000e59f0 <module_user_init_hook>:

void module_user_init_hook()
{
   e59f0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e59f2:	f7fe f865 	bl	e3ac0 <HAL_RNG_GetRandomNumber>
   e59f6:	4604      	mov	r4, r0
    srand(seed);
   e59f8:	f001 f8e2 	bl	e6bc0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e59fc:	4b07      	ldr	r3, [pc, #28]	; (e5a1c <module_user_init_hook+0x2c>)
   e59fe:	b113      	cbz	r3, e5a06 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   e5a00:	4620      	mov	r0, r4
   e5a02:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e5a06:	2100      	movs	r1, #0
   e5a08:	4804      	ldr	r0, [pc, #16]	; (e5a1c <module_user_init_hook+0x2c>)
   e5a0a:	f7fe fa75 	bl	e3ef8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e5a0e:	2100      	movs	r1, #0
   e5a10:	4803      	ldr	r0, [pc, #12]	; (e5a20 <module_user_init_hook+0x30>)
}
   e5a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e5a16:	f7fe ba23 	b.w	e3e60 <system_ctrl_set_app_request_handler>
   e5a1a:	bf00      	nop
   e5a1c:	00000000 	.word	0x00000000
   e5a20:	000e59b9 	.word	0x000e59b9

000e5a24 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   e5a24:	b510      	push	{r4, lr}
   e5a26:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   e5a28:	480f      	ldr	r0, [pc, #60]	; (e5a68 <pinAvailable+0x44>)
   e5a2a:	f7ff f989 	bl	e4d40 <_ZN8SPIClass9isEnabledEv>
   e5a2e:	b128      	cbz	r0, e5a3c <pinAvailable+0x18>
   e5a30:	f1a4 030b 	sub.w	r3, r4, #11
   e5a34:	2b02      	cmp	r3, #2
   e5a36:	d801      	bhi.n	e5a3c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   e5a38:	2000      	movs	r0, #0
   e5a3a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   e5a3c:	f000 f858 	bl	e5af0 <_Z19__fetch_global_Wirev>
   e5a40:	f7fe feb6 	bl	e47b0 <_ZN7TwoWire9isEnabledEv>
   e5a44:	b108      	cbz	r0, e5a4a <pinAvailable+0x26>
   e5a46:	2c01      	cmp	r4, #1
   e5a48:	d9f6      	bls.n	e5a38 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   e5a4a:	f7ff fe2f 	bl	e56ac <_Z22__fetch_global_Serial1v>
   e5a4e:	f7ff fe29 	bl	e56a4 <_ZN11USARTSerial9isEnabledEv>
   e5a52:	b118      	cbz	r0, e5a5c <pinAvailable+0x38>
   e5a54:	f1a4 0309 	sub.w	r3, r4, #9
   e5a58:	2b01      	cmp	r3, #1
   e5a5a:	d9ed      	bls.n	e5a38 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   e5a5c:	2c23      	cmp	r4, #35	; 0x23
   e5a5e:	bf8c      	ite	hi
   e5a60:	2000      	movhi	r0, #0
   e5a62:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   e5a64:	bd10      	pop	{r4, pc}
   e5a66:	bf00      	nop
   e5a68:	2003e72c 	.word	0x2003e72c

000e5a6c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e5a6c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   e5a6e:	b538      	push	{r3, r4, r5, lr}
   e5a70:	4604      	mov	r4, r0
   e5a72:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e5a74:	d80a      	bhi.n	e5a8c <pinMode+0x20>
   e5a76:	29ff      	cmp	r1, #255	; 0xff
   e5a78:	d008      	beq.n	e5a8c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e5a7a:	f7ff ffd3 	bl	e5a24 <pinAvailable>
   e5a7e:	b128      	cbz	r0, e5a8c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e5a80:	4629      	mov	r1, r5
   e5a82:	4620      	mov	r0, r4
}
   e5a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e5a88:	f7fe b85a 	b.w	e3b40 <HAL_Pin_Mode>
   e5a8c:	bd38      	pop	{r3, r4, r5, pc}

000e5a8e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   e5a8e:	b538      	push	{r3, r4, r5, lr}
   e5a90:	4604      	mov	r4, r0
   e5a92:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e5a94:	f7fe f85c 	bl	e3b50 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   e5a98:	28ff      	cmp	r0, #255	; 0xff
   e5a9a:	d010      	beq.n	e5abe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   e5a9c:	2806      	cmp	r0, #6
   e5a9e:	d804      	bhi.n	e5aaa <digitalWrite+0x1c>
   e5aa0:	234d      	movs	r3, #77	; 0x4d
   e5aa2:	fa23 f000 	lsr.w	r0, r3, r0
   e5aa6:	07c3      	lsls	r3, r0, #31
   e5aa8:	d409      	bmi.n	e5abe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   e5aaa:	4620      	mov	r0, r4
   e5aac:	f7ff ffba 	bl	e5a24 <pinAvailable>
   e5ab0:	b128      	cbz	r0, e5abe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   e5ab2:	4629      	mov	r1, r5
   e5ab4:	4620      	mov	r0, r4
}
   e5ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   e5aba:	f7fe b851 	b.w	e3b60 <HAL_GPIO_Write>
   e5abe:	bd38      	pop	{r3, r4, r5, pc}

000e5ac0 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   e5ac0:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   e5ac2:	b510      	push	{r4, lr}
   e5ac4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   e5ac6:	bf9c      	itt	ls
   e5ac8:	340e      	addls	r4, #14
   e5aca:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e5acc:	4620      	mov	r0, r4
   e5ace:	f7ff ffa9 	bl	e5a24 <pinAvailable>
   e5ad2:	b150      	cbz	r0, e5aea <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   e5ad4:	2103      	movs	r1, #3
   e5ad6:	4620      	mov	r0, r4
   e5ad8:	f7fe f82a 	bl	e3b30 <HAL_Validate_Pin_Function>
   e5adc:	2803      	cmp	r0, #3
   e5ade:	d104      	bne.n	e5aea <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   e5ae0:	4620      	mov	r0, r4
}
   e5ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   e5ae6:	f7fe b853 	b.w	e3b90 <HAL_ADC_Read>
}
   e5aea:	2000      	movs	r0, #0
   e5aec:	bd10      	pop	{r4, pc}
	...

000e5af0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   e5af0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   e5af2:	4d0b      	ldr	r5, [pc, #44]	; (e5b20 <_Z19__fetch_global_Wirev+0x30>)
   e5af4:	6829      	ldr	r1, [r5, #0]
   e5af6:	f011 0401 	ands.w	r4, r1, #1
   e5afa:	d10f      	bne.n	e5b1c <_Z19__fetch_global_Wirev+0x2c>
   e5afc:	4628      	mov	r0, r5
   e5afe:	f7ee fad2 	bl	d40a6 <__cxa_guard_acquire>
   e5b02:	b158      	cbz	r0, e5b1c <_Z19__fetch_global_Wirev+0x2c>
   e5b04:	4621      	mov	r1, r4
   e5b06:	4807      	ldr	r0, [pc, #28]	; (e5b24 <_Z19__fetch_global_Wirev+0x34>)
   e5b08:	f7fe fe40 	bl	e478c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   e5b0c:	4628      	mov	r0, r5
   e5b0e:	f7ee facf 	bl	d40b0 <__cxa_guard_release>
   e5b12:	4a05      	ldr	r2, [pc, #20]	; (e5b28 <_Z19__fetch_global_Wirev+0x38>)
   e5b14:	4905      	ldr	r1, [pc, #20]	; (e5b2c <_Z19__fetch_global_Wirev+0x3c>)
   e5b16:	4803      	ldr	r0, [pc, #12]	; (e5b24 <_Z19__fetch_global_Wirev+0x34>)
   e5b18:	f000 f82c 	bl	e5b74 <__aeabi_atexit>
	return wire;
}
   e5b1c:	4801      	ldr	r0, [pc, #4]	; (e5b24 <_Z19__fetch_global_Wirev+0x34>)
   e5b1e:	bd38      	pop	{r3, r4, r5, pc}
   e5b20:	2003e714 	.word	0x2003e714
   e5b24:	2003e718 	.word	0x2003e718
   e5b28:	2003bf30 	.word	0x2003bf30
   e5b2c:	000e4735 	.word	0x000e4735

000e5b30 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   e5b30:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   e5b32:	4c0c      	ldr	r4, [pc, #48]	; (e5b64 <_GLOBAL__sub_I_SPI+0x34>)
   e5b34:	4e0c      	ldr	r6, [pc, #48]	; (e5b68 <_GLOBAL__sub_I_SPI+0x38>)
   e5b36:	4d0d      	ldr	r5, [pc, #52]	; (e5b6c <_GLOBAL__sub_I_SPI+0x3c>)
   e5b38:	2100      	movs	r1, #0
   e5b3a:	4620      	mov	r0, r4
   e5b3c:	f7ff f8ec 	bl	e4d18 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   e5b40:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   e5b42:	4c0b      	ldr	r4, [pc, #44]	; (e5b70 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   e5b44:	4632      	mov	r2, r6
   e5b46:	4629      	mov	r1, r5
   e5b48:	f000 f814 	bl	e5b74 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   e5b4c:	2101      	movs	r1, #1
   e5b4e:	4620      	mov	r0, r4
   e5b50:	f7ff f8e2 	bl	e4d18 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   e5b54:	4632      	mov	r2, r6
   e5b56:	4629      	mov	r1, r5
   e5b58:	4620      	mov	r0, r4
   e5b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e5b5e:	f000 b809 	b.w	e5b74 <__aeabi_atexit>
   e5b62:	bf00      	nop
   e5b64:	2003e72c 	.word	0x2003e72c
   e5b68:	2003bf30 	.word	0x2003bf30
   e5b6c:	000e4d09 	.word	0x000e4d09
   e5b70:	2003e73c 	.word	0x2003e73c

000e5b74 <__aeabi_atexit>:
   e5b74:	460b      	mov	r3, r1
   e5b76:	4601      	mov	r1, r0
   e5b78:	4618      	mov	r0, r3
   e5b7a:	f000 bfc7 	b.w	e6b0c <__cxa_atexit>

000e5b7e <_ZdlPvj>:
   e5b7e:	f7ee ba8e 	b.w	d409e <_ZdlPv>

000e5b82 <_ZSt25__throw_bad_function_callv>:
   e5b82:	b508      	push	{r3, lr}
   e5b84:	f7fe fa40 	bl	e4008 <abort>

000e5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   e5b88:	4b24      	ldr	r3, [pc, #144]	; (e5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   e5b8a:	681a      	ldr	r2, [r3, #0]
   e5b8c:	07d0      	lsls	r0, r2, #31
   e5b8e:	bf5c      	itt	pl
   e5b90:	2201      	movpl	r2, #1
   e5b92:	601a      	strpl	r2, [r3, #0]
   e5b94:	4b22      	ldr	r3, [pc, #136]	; (e5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   e5b96:	681a      	ldr	r2, [r3, #0]
   e5b98:	07d1      	lsls	r1, r2, #31
   e5b9a:	bf5c      	itt	pl
   e5b9c:	2201      	movpl	r2, #1
   e5b9e:	601a      	strpl	r2, [r3, #0]
   e5ba0:	4b20      	ldr	r3, [pc, #128]	; (e5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   e5ba2:	681a      	ldr	r2, [r3, #0]
   e5ba4:	07d2      	lsls	r2, r2, #31
   e5ba6:	bf5c      	itt	pl
   e5ba8:	2201      	movpl	r2, #1
   e5baa:	601a      	strpl	r2, [r3, #0]
   e5bac:	4b1e      	ldr	r3, [pc, #120]	; (e5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   e5bae:	681a      	ldr	r2, [r3, #0]
   e5bb0:	07d0      	lsls	r0, r2, #31
   e5bb2:	bf5c      	itt	pl
   e5bb4:	2201      	movpl	r2, #1
   e5bb6:	601a      	strpl	r2, [r3, #0]
   e5bb8:	4b1c      	ldr	r3, [pc, #112]	; (e5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   e5bba:	681a      	ldr	r2, [r3, #0]
   e5bbc:	07d1      	lsls	r1, r2, #31
   e5bbe:	bf5c      	itt	pl
   e5bc0:	2201      	movpl	r2, #1
   e5bc2:	601a      	strpl	r2, [r3, #0]
   e5bc4:	4b1a      	ldr	r3, [pc, #104]	; (e5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   e5bc6:	681a      	ldr	r2, [r3, #0]
   e5bc8:	07d2      	lsls	r2, r2, #31
   e5bca:	bf5c      	itt	pl
   e5bcc:	2201      	movpl	r2, #1
   e5bce:	601a      	strpl	r2, [r3, #0]
   e5bd0:	4b18      	ldr	r3, [pc, #96]	; (e5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   e5bd2:	681a      	ldr	r2, [r3, #0]
   e5bd4:	07d0      	lsls	r0, r2, #31
   e5bd6:	bf5c      	itt	pl
   e5bd8:	2201      	movpl	r2, #1
   e5bda:	601a      	strpl	r2, [r3, #0]
   e5bdc:	4b16      	ldr	r3, [pc, #88]	; (e5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   e5bde:	681a      	ldr	r2, [r3, #0]
   e5be0:	07d1      	lsls	r1, r2, #31
   e5be2:	bf5c      	itt	pl
   e5be4:	2201      	movpl	r2, #1
   e5be6:	601a      	strpl	r2, [r3, #0]
   e5be8:	4b14      	ldr	r3, [pc, #80]	; (e5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   e5bea:	681a      	ldr	r2, [r3, #0]
   e5bec:	07d2      	lsls	r2, r2, #31
   e5bee:	bf5c      	itt	pl
   e5bf0:	2201      	movpl	r2, #1
   e5bf2:	601a      	strpl	r2, [r3, #0]
   e5bf4:	4b12      	ldr	r3, [pc, #72]	; (e5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   e5bf6:	681a      	ldr	r2, [r3, #0]
   e5bf8:	07d0      	lsls	r0, r2, #31
   e5bfa:	bf5c      	itt	pl
   e5bfc:	2201      	movpl	r2, #1
   e5bfe:	601a      	strpl	r2, [r3, #0]
   e5c00:	4b10      	ldr	r3, [pc, #64]	; (e5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   e5c02:	681a      	ldr	r2, [r3, #0]
   e5c04:	07d1      	lsls	r1, r2, #31
   e5c06:	bf5c      	itt	pl
   e5c08:	2201      	movpl	r2, #1
   e5c0a:	601a      	strpl	r2, [r3, #0]
   e5c0c:	4b0e      	ldr	r3, [pc, #56]	; (e5c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   e5c0e:	681a      	ldr	r2, [r3, #0]
   e5c10:	07d2      	lsls	r2, r2, #31
   e5c12:	bf5c      	itt	pl
   e5c14:	2201      	movpl	r2, #1
   e5c16:	601a      	strpl	r2, [r3, #0]
   e5c18:	4770      	bx	lr
   e5c1a:	bf00      	nop
   e5c1c:	2003e778 	.word	0x2003e778
   e5c20:	2003e774 	.word	0x2003e774
   e5c24:	2003e770 	.word	0x2003e770
   e5c28:	2003e76c 	.word	0x2003e76c
   e5c2c:	2003e768 	.word	0x2003e768
   e5c30:	2003e764 	.word	0x2003e764
   e5c34:	2003e760 	.word	0x2003e760
   e5c38:	2003e75c 	.word	0x2003e75c
   e5c3c:	2003e758 	.word	0x2003e758
   e5c40:	2003e754 	.word	0x2003e754
   e5c44:	2003e750 	.word	0x2003e750
   e5c48:	2003e74c 	.word	0x2003e74c

000e5c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e5c4c:	4b18      	ldr	r3, [pc, #96]	; (e5cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e5c4e:	681a      	ldr	r2, [r3, #0]
   e5c50:	07d1      	lsls	r1, r2, #31
   e5c52:	bf5c      	itt	pl
   e5c54:	2201      	movpl	r2, #1
   e5c56:	601a      	strpl	r2, [r3, #0]
   e5c58:	4b16      	ldr	r3, [pc, #88]	; (e5cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e5c5a:	681a      	ldr	r2, [r3, #0]
   e5c5c:	07d2      	lsls	r2, r2, #31
   e5c5e:	bf5c      	itt	pl
   e5c60:	2201      	movpl	r2, #1
   e5c62:	601a      	strpl	r2, [r3, #0]
   e5c64:	4b14      	ldr	r3, [pc, #80]	; (e5cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e5c66:	681a      	ldr	r2, [r3, #0]
   e5c68:	07d0      	lsls	r0, r2, #31
   e5c6a:	bf5c      	itt	pl
   e5c6c:	2201      	movpl	r2, #1
   e5c6e:	601a      	strpl	r2, [r3, #0]
   e5c70:	4b12      	ldr	r3, [pc, #72]	; (e5cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e5c72:	681a      	ldr	r2, [r3, #0]
   e5c74:	07d1      	lsls	r1, r2, #31
   e5c76:	bf5c      	itt	pl
   e5c78:	2201      	movpl	r2, #1
   e5c7a:	601a      	strpl	r2, [r3, #0]
   e5c7c:	4b10      	ldr	r3, [pc, #64]	; (e5cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e5c7e:	681a      	ldr	r2, [r3, #0]
   e5c80:	07d2      	lsls	r2, r2, #31
   e5c82:	bf5c      	itt	pl
   e5c84:	2201      	movpl	r2, #1
   e5c86:	601a      	strpl	r2, [r3, #0]
   e5c88:	4b0e      	ldr	r3, [pc, #56]	; (e5cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e5c8a:	681a      	ldr	r2, [r3, #0]
   e5c8c:	07d0      	lsls	r0, r2, #31
   e5c8e:	bf5c      	itt	pl
   e5c90:	2201      	movpl	r2, #1
   e5c92:	601a      	strpl	r2, [r3, #0]
   e5c94:	4b0c      	ldr	r3, [pc, #48]	; (e5cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e5c96:	681a      	ldr	r2, [r3, #0]
   e5c98:	07d1      	lsls	r1, r2, #31
   e5c9a:	bf5c      	itt	pl
   e5c9c:	2201      	movpl	r2, #1
   e5c9e:	601a      	strpl	r2, [r3, #0]
   e5ca0:	4b0a      	ldr	r3, [pc, #40]	; (e5ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e5ca2:	681a      	ldr	r2, [r3, #0]
   e5ca4:	07d2      	lsls	r2, r2, #31
   e5ca6:	bf5c      	itt	pl
   e5ca8:	2201      	movpl	r2, #1
   e5caa:	601a      	strpl	r2, [r3, #0]
   e5cac:	4770      	bx	lr
   e5cae:	bf00      	nop
   e5cb0:	2003e798 	.word	0x2003e798
   e5cb4:	2003e794 	.word	0x2003e794
   e5cb8:	2003e790 	.word	0x2003e790
   e5cbc:	2003e78c 	.word	0x2003e78c
   e5cc0:	2003e788 	.word	0x2003e788
   e5cc4:	2003e784 	.word	0x2003e784
   e5cc8:	2003e780 	.word	0x2003e780
   e5ccc:	2003e77c 	.word	0x2003e77c

000e5cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e5cd0:	4b18      	ldr	r3, [pc, #96]	; (e5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e5cd2:	681a      	ldr	r2, [r3, #0]
   e5cd4:	07d1      	lsls	r1, r2, #31
   e5cd6:	bf5c      	itt	pl
   e5cd8:	2201      	movpl	r2, #1
   e5cda:	601a      	strpl	r2, [r3, #0]
   e5cdc:	4b16      	ldr	r3, [pc, #88]	; (e5d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e5cde:	681a      	ldr	r2, [r3, #0]
   e5ce0:	07d2      	lsls	r2, r2, #31
   e5ce2:	bf5c      	itt	pl
   e5ce4:	2201      	movpl	r2, #1
   e5ce6:	601a      	strpl	r2, [r3, #0]
   e5ce8:	4b14      	ldr	r3, [pc, #80]	; (e5d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e5cea:	681a      	ldr	r2, [r3, #0]
   e5cec:	07d0      	lsls	r0, r2, #31
   e5cee:	bf5c      	itt	pl
   e5cf0:	2201      	movpl	r2, #1
   e5cf2:	601a      	strpl	r2, [r3, #0]
   e5cf4:	4b12      	ldr	r3, [pc, #72]	; (e5d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e5cf6:	681a      	ldr	r2, [r3, #0]
   e5cf8:	07d1      	lsls	r1, r2, #31
   e5cfa:	bf5c      	itt	pl
   e5cfc:	2201      	movpl	r2, #1
   e5cfe:	601a      	strpl	r2, [r3, #0]
   e5d00:	4b10      	ldr	r3, [pc, #64]	; (e5d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e5d02:	681a      	ldr	r2, [r3, #0]
   e5d04:	07d2      	lsls	r2, r2, #31
   e5d06:	bf5c      	itt	pl
   e5d08:	2201      	movpl	r2, #1
   e5d0a:	601a      	strpl	r2, [r3, #0]
   e5d0c:	4b0e      	ldr	r3, [pc, #56]	; (e5d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e5d0e:	681a      	ldr	r2, [r3, #0]
   e5d10:	07d0      	lsls	r0, r2, #31
   e5d12:	bf5c      	itt	pl
   e5d14:	2201      	movpl	r2, #1
   e5d16:	601a      	strpl	r2, [r3, #0]
   e5d18:	4b0c      	ldr	r3, [pc, #48]	; (e5d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e5d1a:	681a      	ldr	r2, [r3, #0]
   e5d1c:	07d1      	lsls	r1, r2, #31
   e5d1e:	bf5c      	itt	pl
   e5d20:	2201      	movpl	r2, #1
   e5d22:	601a      	strpl	r2, [r3, #0]
   e5d24:	4b0a      	ldr	r3, [pc, #40]	; (e5d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e5d26:	681a      	ldr	r2, [r3, #0]
   e5d28:	07d2      	lsls	r2, r2, #31
   e5d2a:	bf5c      	itt	pl
   e5d2c:	2201      	movpl	r2, #1
   e5d2e:	601a      	strpl	r2, [r3, #0]
   e5d30:	4770      	bx	lr
   e5d32:	bf00      	nop
   e5d34:	2003e7b8 	.word	0x2003e7b8
   e5d38:	2003e7b4 	.word	0x2003e7b4
   e5d3c:	2003e7b0 	.word	0x2003e7b0
   e5d40:	2003e7ac 	.word	0x2003e7ac
   e5d44:	2003e7a8 	.word	0x2003e7a8
   e5d48:	2003e7a4 	.word	0x2003e7a4
   e5d4c:	2003e7a0 	.word	0x2003e7a0
   e5d50:	2003e79c 	.word	0x2003e79c

000e5d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   e5d54:	4b24      	ldr	r3, [pc, #144]	; (e5de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   e5d56:	681a      	ldr	r2, [r3, #0]
   e5d58:	07d0      	lsls	r0, r2, #31
   e5d5a:	bf5c      	itt	pl
   e5d5c:	2201      	movpl	r2, #1
   e5d5e:	601a      	strpl	r2, [r3, #0]
   e5d60:	4b22      	ldr	r3, [pc, #136]	; (e5dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   e5d62:	681a      	ldr	r2, [r3, #0]
   e5d64:	07d1      	lsls	r1, r2, #31
   e5d66:	bf5c      	itt	pl
   e5d68:	2201      	movpl	r2, #1
   e5d6a:	601a      	strpl	r2, [r3, #0]
   e5d6c:	4b20      	ldr	r3, [pc, #128]	; (e5df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   e5d6e:	681a      	ldr	r2, [r3, #0]
   e5d70:	07d2      	lsls	r2, r2, #31
   e5d72:	bf5c      	itt	pl
   e5d74:	2201      	movpl	r2, #1
   e5d76:	601a      	strpl	r2, [r3, #0]
   e5d78:	4b1e      	ldr	r3, [pc, #120]	; (e5df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   e5d7a:	681a      	ldr	r2, [r3, #0]
   e5d7c:	07d0      	lsls	r0, r2, #31
   e5d7e:	bf5c      	itt	pl
   e5d80:	2201      	movpl	r2, #1
   e5d82:	601a      	strpl	r2, [r3, #0]
   e5d84:	4b1c      	ldr	r3, [pc, #112]	; (e5df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   e5d86:	681a      	ldr	r2, [r3, #0]
   e5d88:	07d1      	lsls	r1, r2, #31
   e5d8a:	bf5c      	itt	pl
   e5d8c:	2201      	movpl	r2, #1
   e5d8e:	601a      	strpl	r2, [r3, #0]
   e5d90:	4b1a      	ldr	r3, [pc, #104]	; (e5dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   e5d92:	681a      	ldr	r2, [r3, #0]
   e5d94:	07d2      	lsls	r2, r2, #31
   e5d96:	bf5c      	itt	pl
   e5d98:	2201      	movpl	r2, #1
   e5d9a:	601a      	strpl	r2, [r3, #0]
   e5d9c:	4b18      	ldr	r3, [pc, #96]	; (e5e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   e5d9e:	681a      	ldr	r2, [r3, #0]
   e5da0:	07d0      	lsls	r0, r2, #31
   e5da2:	bf5c      	itt	pl
   e5da4:	2201      	movpl	r2, #1
   e5da6:	601a      	strpl	r2, [r3, #0]
   e5da8:	4b16      	ldr	r3, [pc, #88]	; (e5e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   e5daa:	681a      	ldr	r2, [r3, #0]
   e5dac:	07d1      	lsls	r1, r2, #31
   e5dae:	bf5c      	itt	pl
   e5db0:	2201      	movpl	r2, #1
   e5db2:	601a      	strpl	r2, [r3, #0]
   e5db4:	4b14      	ldr	r3, [pc, #80]	; (e5e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   e5db6:	681a      	ldr	r2, [r3, #0]
   e5db8:	07d2      	lsls	r2, r2, #31
   e5dba:	bf5c      	itt	pl
   e5dbc:	2201      	movpl	r2, #1
   e5dbe:	601a      	strpl	r2, [r3, #0]
   e5dc0:	4b12      	ldr	r3, [pc, #72]	; (e5e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   e5dc2:	681a      	ldr	r2, [r3, #0]
   e5dc4:	07d0      	lsls	r0, r2, #31
   e5dc6:	bf5c      	itt	pl
   e5dc8:	2201      	movpl	r2, #1
   e5dca:	601a      	strpl	r2, [r3, #0]
   e5dcc:	4b10      	ldr	r3, [pc, #64]	; (e5e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   e5dce:	681a      	ldr	r2, [r3, #0]
   e5dd0:	07d1      	lsls	r1, r2, #31
   e5dd2:	bf5c      	itt	pl
   e5dd4:	2201      	movpl	r2, #1
   e5dd6:	601a      	strpl	r2, [r3, #0]
   e5dd8:	4b0e      	ldr	r3, [pc, #56]	; (e5e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   e5dda:	681a      	ldr	r2, [r3, #0]
   e5ddc:	07d2      	lsls	r2, r2, #31
   e5dde:	bf5c      	itt	pl
   e5de0:	2201      	movpl	r2, #1
   e5de2:	601a      	strpl	r2, [r3, #0]
   e5de4:	4770      	bx	lr
   e5de6:	bf00      	nop
   e5de8:	2003e7e8 	.word	0x2003e7e8
   e5dec:	2003e7e4 	.word	0x2003e7e4
   e5df0:	2003e7e0 	.word	0x2003e7e0
   e5df4:	2003e7dc 	.word	0x2003e7dc
   e5df8:	2003e7d8 	.word	0x2003e7d8
   e5dfc:	2003e7d4 	.word	0x2003e7d4
   e5e00:	2003e7d0 	.word	0x2003e7d0
   e5e04:	2003e7cc 	.word	0x2003e7cc
   e5e08:	2003e7c8 	.word	0x2003e7c8
   e5e0c:	2003e7c4 	.word	0x2003e7c4
   e5e10:	2003e7c0 	.word	0x2003e7c0
   e5e14:	2003e7bc 	.word	0x2003e7bc

000e5e18 <__aeabi_drsub>:
   e5e18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e5e1c:	e002      	b.n	e5e24 <__adddf3>
   e5e1e:	bf00      	nop

000e5e20 <__aeabi_dsub>:
   e5e20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e5e24 <__adddf3>:
   e5e24:	b530      	push	{r4, r5, lr}
   e5e26:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e5e2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e5e2e:	ea94 0f05 	teq	r4, r5
   e5e32:	bf08      	it	eq
   e5e34:	ea90 0f02 	teqeq	r0, r2
   e5e38:	bf1f      	itttt	ne
   e5e3a:	ea54 0c00 	orrsne.w	ip, r4, r0
   e5e3e:	ea55 0c02 	orrsne.w	ip, r5, r2
   e5e42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e5e46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e5e4a:	f000 80e2 	beq.w	e6012 <__adddf3+0x1ee>
   e5e4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e5e52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e5e56:	bfb8      	it	lt
   e5e58:	426d      	neglt	r5, r5
   e5e5a:	dd0c      	ble.n	e5e76 <__adddf3+0x52>
   e5e5c:	442c      	add	r4, r5
   e5e5e:	ea80 0202 	eor.w	r2, r0, r2
   e5e62:	ea81 0303 	eor.w	r3, r1, r3
   e5e66:	ea82 0000 	eor.w	r0, r2, r0
   e5e6a:	ea83 0101 	eor.w	r1, r3, r1
   e5e6e:	ea80 0202 	eor.w	r2, r0, r2
   e5e72:	ea81 0303 	eor.w	r3, r1, r3
   e5e76:	2d36      	cmp	r5, #54	; 0x36
   e5e78:	bf88      	it	hi
   e5e7a:	bd30      	pophi	{r4, r5, pc}
   e5e7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e5e80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e5e84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e5e88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e5e8c:	d002      	beq.n	e5e94 <__adddf3+0x70>
   e5e8e:	4240      	negs	r0, r0
   e5e90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e5e94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e5e98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e5e9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e5ea0:	d002      	beq.n	e5ea8 <__adddf3+0x84>
   e5ea2:	4252      	negs	r2, r2
   e5ea4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e5ea8:	ea94 0f05 	teq	r4, r5
   e5eac:	f000 80a7 	beq.w	e5ffe <__adddf3+0x1da>
   e5eb0:	f1a4 0401 	sub.w	r4, r4, #1
   e5eb4:	f1d5 0e20 	rsbs	lr, r5, #32
   e5eb8:	db0d      	blt.n	e5ed6 <__adddf3+0xb2>
   e5eba:	fa02 fc0e 	lsl.w	ip, r2, lr
   e5ebe:	fa22 f205 	lsr.w	r2, r2, r5
   e5ec2:	1880      	adds	r0, r0, r2
   e5ec4:	f141 0100 	adc.w	r1, r1, #0
   e5ec8:	fa03 f20e 	lsl.w	r2, r3, lr
   e5ecc:	1880      	adds	r0, r0, r2
   e5ece:	fa43 f305 	asr.w	r3, r3, r5
   e5ed2:	4159      	adcs	r1, r3
   e5ed4:	e00e      	b.n	e5ef4 <__adddf3+0xd0>
   e5ed6:	f1a5 0520 	sub.w	r5, r5, #32
   e5eda:	f10e 0e20 	add.w	lr, lr, #32
   e5ede:	2a01      	cmp	r2, #1
   e5ee0:	fa03 fc0e 	lsl.w	ip, r3, lr
   e5ee4:	bf28      	it	cs
   e5ee6:	f04c 0c02 	orrcs.w	ip, ip, #2
   e5eea:	fa43 f305 	asr.w	r3, r3, r5
   e5eee:	18c0      	adds	r0, r0, r3
   e5ef0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e5ef4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e5ef8:	d507      	bpl.n	e5f0a <__adddf3+0xe6>
   e5efa:	f04f 0e00 	mov.w	lr, #0
   e5efe:	f1dc 0c00 	rsbs	ip, ip, #0
   e5f02:	eb7e 0000 	sbcs.w	r0, lr, r0
   e5f06:	eb6e 0101 	sbc.w	r1, lr, r1
   e5f0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e5f0e:	d31b      	bcc.n	e5f48 <__adddf3+0x124>
   e5f10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e5f14:	d30c      	bcc.n	e5f30 <__adddf3+0x10c>
   e5f16:	0849      	lsrs	r1, r1, #1
   e5f18:	ea5f 0030 	movs.w	r0, r0, rrx
   e5f1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e5f20:	f104 0401 	add.w	r4, r4, #1
   e5f24:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e5f28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e5f2c:	f080 809a 	bcs.w	e6064 <__adddf3+0x240>
   e5f30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e5f34:	bf08      	it	eq
   e5f36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e5f3a:	f150 0000 	adcs.w	r0, r0, #0
   e5f3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e5f42:	ea41 0105 	orr.w	r1, r1, r5
   e5f46:	bd30      	pop	{r4, r5, pc}
   e5f48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e5f4c:	4140      	adcs	r0, r0
   e5f4e:	eb41 0101 	adc.w	r1, r1, r1
   e5f52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e5f56:	f1a4 0401 	sub.w	r4, r4, #1
   e5f5a:	d1e9      	bne.n	e5f30 <__adddf3+0x10c>
   e5f5c:	f091 0f00 	teq	r1, #0
   e5f60:	bf04      	itt	eq
   e5f62:	4601      	moveq	r1, r0
   e5f64:	2000      	moveq	r0, #0
   e5f66:	fab1 f381 	clz	r3, r1
   e5f6a:	bf08      	it	eq
   e5f6c:	3320      	addeq	r3, #32
   e5f6e:	f1a3 030b 	sub.w	r3, r3, #11
   e5f72:	f1b3 0220 	subs.w	r2, r3, #32
   e5f76:	da0c      	bge.n	e5f92 <__adddf3+0x16e>
   e5f78:	320c      	adds	r2, #12
   e5f7a:	dd08      	ble.n	e5f8e <__adddf3+0x16a>
   e5f7c:	f102 0c14 	add.w	ip, r2, #20
   e5f80:	f1c2 020c 	rsb	r2, r2, #12
   e5f84:	fa01 f00c 	lsl.w	r0, r1, ip
   e5f88:	fa21 f102 	lsr.w	r1, r1, r2
   e5f8c:	e00c      	b.n	e5fa8 <__adddf3+0x184>
   e5f8e:	f102 0214 	add.w	r2, r2, #20
   e5f92:	bfd8      	it	le
   e5f94:	f1c2 0c20 	rsble	ip, r2, #32
   e5f98:	fa01 f102 	lsl.w	r1, r1, r2
   e5f9c:	fa20 fc0c 	lsr.w	ip, r0, ip
   e5fa0:	bfdc      	itt	le
   e5fa2:	ea41 010c 	orrle.w	r1, r1, ip
   e5fa6:	4090      	lslle	r0, r2
   e5fa8:	1ae4      	subs	r4, r4, r3
   e5faa:	bfa2      	ittt	ge
   e5fac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e5fb0:	4329      	orrge	r1, r5
   e5fb2:	bd30      	popge	{r4, r5, pc}
   e5fb4:	ea6f 0404 	mvn.w	r4, r4
   e5fb8:	3c1f      	subs	r4, #31
   e5fba:	da1c      	bge.n	e5ff6 <__adddf3+0x1d2>
   e5fbc:	340c      	adds	r4, #12
   e5fbe:	dc0e      	bgt.n	e5fde <__adddf3+0x1ba>
   e5fc0:	f104 0414 	add.w	r4, r4, #20
   e5fc4:	f1c4 0220 	rsb	r2, r4, #32
   e5fc8:	fa20 f004 	lsr.w	r0, r0, r4
   e5fcc:	fa01 f302 	lsl.w	r3, r1, r2
   e5fd0:	ea40 0003 	orr.w	r0, r0, r3
   e5fd4:	fa21 f304 	lsr.w	r3, r1, r4
   e5fd8:	ea45 0103 	orr.w	r1, r5, r3
   e5fdc:	bd30      	pop	{r4, r5, pc}
   e5fde:	f1c4 040c 	rsb	r4, r4, #12
   e5fe2:	f1c4 0220 	rsb	r2, r4, #32
   e5fe6:	fa20 f002 	lsr.w	r0, r0, r2
   e5fea:	fa01 f304 	lsl.w	r3, r1, r4
   e5fee:	ea40 0003 	orr.w	r0, r0, r3
   e5ff2:	4629      	mov	r1, r5
   e5ff4:	bd30      	pop	{r4, r5, pc}
   e5ff6:	fa21 f004 	lsr.w	r0, r1, r4
   e5ffa:	4629      	mov	r1, r5
   e5ffc:	bd30      	pop	{r4, r5, pc}
   e5ffe:	f094 0f00 	teq	r4, #0
   e6002:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e6006:	bf06      	itte	eq
   e6008:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e600c:	3401      	addeq	r4, #1
   e600e:	3d01      	subne	r5, #1
   e6010:	e74e      	b.n	e5eb0 <__adddf3+0x8c>
   e6012:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e6016:	bf18      	it	ne
   e6018:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e601c:	d029      	beq.n	e6072 <__adddf3+0x24e>
   e601e:	ea94 0f05 	teq	r4, r5
   e6022:	bf08      	it	eq
   e6024:	ea90 0f02 	teqeq	r0, r2
   e6028:	d005      	beq.n	e6036 <__adddf3+0x212>
   e602a:	ea54 0c00 	orrs.w	ip, r4, r0
   e602e:	bf04      	itt	eq
   e6030:	4619      	moveq	r1, r3
   e6032:	4610      	moveq	r0, r2
   e6034:	bd30      	pop	{r4, r5, pc}
   e6036:	ea91 0f03 	teq	r1, r3
   e603a:	bf1e      	ittt	ne
   e603c:	2100      	movne	r1, #0
   e603e:	2000      	movne	r0, #0
   e6040:	bd30      	popne	{r4, r5, pc}
   e6042:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e6046:	d105      	bne.n	e6054 <__adddf3+0x230>
   e6048:	0040      	lsls	r0, r0, #1
   e604a:	4149      	adcs	r1, r1
   e604c:	bf28      	it	cs
   e604e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e6052:	bd30      	pop	{r4, r5, pc}
   e6054:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e6058:	bf3c      	itt	cc
   e605a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e605e:	bd30      	popcc	{r4, r5, pc}
   e6060:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e6064:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e6068:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e606c:	f04f 0000 	mov.w	r0, #0
   e6070:	bd30      	pop	{r4, r5, pc}
   e6072:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e6076:	bf1a      	itte	ne
   e6078:	4619      	movne	r1, r3
   e607a:	4610      	movne	r0, r2
   e607c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e6080:	bf1c      	itt	ne
   e6082:	460b      	movne	r3, r1
   e6084:	4602      	movne	r2, r0
   e6086:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e608a:	bf06      	itte	eq
   e608c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e6090:	ea91 0f03 	teqeq	r1, r3
   e6094:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e6098:	bd30      	pop	{r4, r5, pc}
   e609a:	bf00      	nop

000e609c <__aeabi_ui2d>:
   e609c:	f090 0f00 	teq	r0, #0
   e60a0:	bf04      	itt	eq
   e60a2:	2100      	moveq	r1, #0
   e60a4:	4770      	bxeq	lr
   e60a6:	b530      	push	{r4, r5, lr}
   e60a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e60ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e60b0:	f04f 0500 	mov.w	r5, #0
   e60b4:	f04f 0100 	mov.w	r1, #0
   e60b8:	e750      	b.n	e5f5c <__adddf3+0x138>
   e60ba:	bf00      	nop

000e60bc <__aeabi_i2d>:
   e60bc:	f090 0f00 	teq	r0, #0
   e60c0:	bf04      	itt	eq
   e60c2:	2100      	moveq	r1, #0
   e60c4:	4770      	bxeq	lr
   e60c6:	b530      	push	{r4, r5, lr}
   e60c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e60cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e60d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e60d4:	bf48      	it	mi
   e60d6:	4240      	negmi	r0, r0
   e60d8:	f04f 0100 	mov.w	r1, #0
   e60dc:	e73e      	b.n	e5f5c <__adddf3+0x138>
   e60de:	bf00      	nop

000e60e0 <__aeabi_f2d>:
   e60e0:	0042      	lsls	r2, r0, #1
   e60e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e60e6:	ea4f 0131 	mov.w	r1, r1, rrx
   e60ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e60ee:	bf1f      	itttt	ne
   e60f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e60f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e60f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e60fc:	4770      	bxne	lr
   e60fe:	f092 0f00 	teq	r2, #0
   e6102:	bf14      	ite	ne
   e6104:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e6108:	4770      	bxeq	lr
   e610a:	b530      	push	{r4, r5, lr}
   e610c:	f44f 7460 	mov.w	r4, #896	; 0x380
   e6110:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e6114:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e6118:	e720      	b.n	e5f5c <__adddf3+0x138>
   e611a:	bf00      	nop

000e611c <__aeabi_ul2d>:
   e611c:	ea50 0201 	orrs.w	r2, r0, r1
   e6120:	bf08      	it	eq
   e6122:	4770      	bxeq	lr
   e6124:	b530      	push	{r4, r5, lr}
   e6126:	f04f 0500 	mov.w	r5, #0
   e612a:	e00a      	b.n	e6142 <__aeabi_l2d+0x16>

000e612c <__aeabi_l2d>:
   e612c:	ea50 0201 	orrs.w	r2, r0, r1
   e6130:	bf08      	it	eq
   e6132:	4770      	bxeq	lr
   e6134:	b530      	push	{r4, r5, lr}
   e6136:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e613a:	d502      	bpl.n	e6142 <__aeabi_l2d+0x16>
   e613c:	4240      	negs	r0, r0
   e613e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e6142:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e6146:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e614a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e614e:	f43f aedc 	beq.w	e5f0a <__adddf3+0xe6>
   e6152:	f04f 0203 	mov.w	r2, #3
   e6156:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e615a:	bf18      	it	ne
   e615c:	3203      	addne	r2, #3
   e615e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e6162:	bf18      	it	ne
   e6164:	3203      	addne	r2, #3
   e6166:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e616a:	f1c2 0320 	rsb	r3, r2, #32
   e616e:	fa00 fc03 	lsl.w	ip, r0, r3
   e6172:	fa20 f002 	lsr.w	r0, r0, r2
   e6176:	fa01 fe03 	lsl.w	lr, r1, r3
   e617a:	ea40 000e 	orr.w	r0, r0, lr
   e617e:	fa21 f102 	lsr.w	r1, r1, r2
   e6182:	4414      	add	r4, r2
   e6184:	e6c1      	b.n	e5f0a <__adddf3+0xe6>
   e6186:	bf00      	nop

000e6188 <__aeabi_dmul>:
   e6188:	b570      	push	{r4, r5, r6, lr}
   e618a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e618e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e6192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e6196:	bf1d      	ittte	ne
   e6198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e619c:	ea94 0f0c 	teqne	r4, ip
   e61a0:	ea95 0f0c 	teqne	r5, ip
   e61a4:	f000 f8de 	bleq	e6364 <__aeabi_dmul+0x1dc>
   e61a8:	442c      	add	r4, r5
   e61aa:	ea81 0603 	eor.w	r6, r1, r3
   e61ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e61b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e61b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e61ba:	bf18      	it	ne
   e61bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e61c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e61c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e61c8:	d038      	beq.n	e623c <__aeabi_dmul+0xb4>
   e61ca:	fba0 ce02 	umull	ip, lr, r0, r2
   e61ce:	f04f 0500 	mov.w	r5, #0
   e61d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   e61d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e61da:	fbe0 e503 	umlal	lr, r5, r0, r3
   e61de:	f04f 0600 	mov.w	r6, #0
   e61e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   e61e6:	f09c 0f00 	teq	ip, #0
   e61ea:	bf18      	it	ne
   e61ec:	f04e 0e01 	orrne.w	lr, lr, #1
   e61f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e61f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e61f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e61fc:	d204      	bcs.n	e6208 <__aeabi_dmul+0x80>
   e61fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e6202:	416d      	adcs	r5, r5
   e6204:	eb46 0606 	adc.w	r6, r6, r6
   e6208:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e620c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e6210:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e6214:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e6218:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e621c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e6220:	bf88      	it	hi
   e6222:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e6226:	d81e      	bhi.n	e6266 <__aeabi_dmul+0xde>
   e6228:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e622c:	bf08      	it	eq
   e622e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e6232:	f150 0000 	adcs.w	r0, r0, #0
   e6236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e623a:	bd70      	pop	{r4, r5, r6, pc}
   e623c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e6240:	ea46 0101 	orr.w	r1, r6, r1
   e6244:	ea40 0002 	orr.w	r0, r0, r2
   e6248:	ea81 0103 	eor.w	r1, r1, r3
   e624c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e6250:	bfc2      	ittt	gt
   e6252:	ebd4 050c 	rsbsgt	r5, r4, ip
   e6256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e625a:	bd70      	popgt	{r4, r5, r6, pc}
   e625c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e6260:	f04f 0e00 	mov.w	lr, #0
   e6264:	3c01      	subs	r4, #1
   e6266:	f300 80ab 	bgt.w	e63c0 <__aeabi_dmul+0x238>
   e626a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e626e:	bfde      	ittt	le
   e6270:	2000      	movle	r0, #0
   e6272:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e6276:	bd70      	pople	{r4, r5, r6, pc}
   e6278:	f1c4 0400 	rsb	r4, r4, #0
   e627c:	3c20      	subs	r4, #32
   e627e:	da35      	bge.n	e62ec <__aeabi_dmul+0x164>
   e6280:	340c      	adds	r4, #12
   e6282:	dc1b      	bgt.n	e62bc <__aeabi_dmul+0x134>
   e6284:	f104 0414 	add.w	r4, r4, #20
   e6288:	f1c4 0520 	rsb	r5, r4, #32
   e628c:	fa00 f305 	lsl.w	r3, r0, r5
   e6290:	fa20 f004 	lsr.w	r0, r0, r4
   e6294:	fa01 f205 	lsl.w	r2, r1, r5
   e6298:	ea40 0002 	orr.w	r0, r0, r2
   e629c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e62a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e62a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e62a8:	fa21 f604 	lsr.w	r6, r1, r4
   e62ac:	eb42 0106 	adc.w	r1, r2, r6
   e62b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e62b4:	bf08      	it	eq
   e62b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e62ba:	bd70      	pop	{r4, r5, r6, pc}
   e62bc:	f1c4 040c 	rsb	r4, r4, #12
   e62c0:	f1c4 0520 	rsb	r5, r4, #32
   e62c4:	fa00 f304 	lsl.w	r3, r0, r4
   e62c8:	fa20 f005 	lsr.w	r0, r0, r5
   e62cc:	fa01 f204 	lsl.w	r2, r1, r4
   e62d0:	ea40 0002 	orr.w	r0, r0, r2
   e62d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e62d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e62dc:	f141 0100 	adc.w	r1, r1, #0
   e62e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e62e4:	bf08      	it	eq
   e62e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e62ea:	bd70      	pop	{r4, r5, r6, pc}
   e62ec:	f1c4 0520 	rsb	r5, r4, #32
   e62f0:	fa00 f205 	lsl.w	r2, r0, r5
   e62f4:	ea4e 0e02 	orr.w	lr, lr, r2
   e62f8:	fa20 f304 	lsr.w	r3, r0, r4
   e62fc:	fa01 f205 	lsl.w	r2, r1, r5
   e6300:	ea43 0302 	orr.w	r3, r3, r2
   e6304:	fa21 f004 	lsr.w	r0, r1, r4
   e6308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e630c:	fa21 f204 	lsr.w	r2, r1, r4
   e6310:	ea20 0002 	bic.w	r0, r0, r2
   e6314:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e6318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e631c:	bf08      	it	eq
   e631e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e6322:	bd70      	pop	{r4, r5, r6, pc}
   e6324:	f094 0f00 	teq	r4, #0
   e6328:	d10f      	bne.n	e634a <__aeabi_dmul+0x1c2>
   e632a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e632e:	0040      	lsls	r0, r0, #1
   e6330:	eb41 0101 	adc.w	r1, r1, r1
   e6334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e6338:	bf08      	it	eq
   e633a:	3c01      	subeq	r4, #1
   e633c:	d0f7      	beq.n	e632e <__aeabi_dmul+0x1a6>
   e633e:	ea41 0106 	orr.w	r1, r1, r6
   e6342:	f095 0f00 	teq	r5, #0
   e6346:	bf18      	it	ne
   e6348:	4770      	bxne	lr
   e634a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e634e:	0052      	lsls	r2, r2, #1
   e6350:	eb43 0303 	adc.w	r3, r3, r3
   e6354:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e6358:	bf08      	it	eq
   e635a:	3d01      	subeq	r5, #1
   e635c:	d0f7      	beq.n	e634e <__aeabi_dmul+0x1c6>
   e635e:	ea43 0306 	orr.w	r3, r3, r6
   e6362:	4770      	bx	lr
   e6364:	ea94 0f0c 	teq	r4, ip
   e6368:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e636c:	bf18      	it	ne
   e636e:	ea95 0f0c 	teqne	r5, ip
   e6372:	d00c      	beq.n	e638e <__aeabi_dmul+0x206>
   e6374:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e6378:	bf18      	it	ne
   e637a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e637e:	d1d1      	bne.n	e6324 <__aeabi_dmul+0x19c>
   e6380:	ea81 0103 	eor.w	r1, r1, r3
   e6384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e6388:	f04f 0000 	mov.w	r0, #0
   e638c:	bd70      	pop	{r4, r5, r6, pc}
   e638e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e6392:	bf06      	itte	eq
   e6394:	4610      	moveq	r0, r2
   e6396:	4619      	moveq	r1, r3
   e6398:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e639c:	d019      	beq.n	e63d2 <__aeabi_dmul+0x24a>
   e639e:	ea94 0f0c 	teq	r4, ip
   e63a2:	d102      	bne.n	e63aa <__aeabi_dmul+0x222>
   e63a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e63a8:	d113      	bne.n	e63d2 <__aeabi_dmul+0x24a>
   e63aa:	ea95 0f0c 	teq	r5, ip
   e63ae:	d105      	bne.n	e63bc <__aeabi_dmul+0x234>
   e63b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e63b4:	bf1c      	itt	ne
   e63b6:	4610      	movne	r0, r2
   e63b8:	4619      	movne	r1, r3
   e63ba:	d10a      	bne.n	e63d2 <__aeabi_dmul+0x24a>
   e63bc:	ea81 0103 	eor.w	r1, r1, r3
   e63c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e63c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e63c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e63cc:	f04f 0000 	mov.w	r0, #0
   e63d0:	bd70      	pop	{r4, r5, r6, pc}
   e63d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e63d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e63da:	bd70      	pop	{r4, r5, r6, pc}

000e63dc <__aeabi_ddiv>:
   e63dc:	b570      	push	{r4, r5, r6, lr}
   e63de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e63e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e63e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e63ea:	bf1d      	ittte	ne
   e63ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e63f0:	ea94 0f0c 	teqne	r4, ip
   e63f4:	ea95 0f0c 	teqne	r5, ip
   e63f8:	f000 f8a7 	bleq	e654a <__aeabi_ddiv+0x16e>
   e63fc:	eba4 0405 	sub.w	r4, r4, r5
   e6400:	ea81 0e03 	eor.w	lr, r1, r3
   e6404:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e6408:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e640c:	f000 8088 	beq.w	e6520 <__aeabi_ddiv+0x144>
   e6410:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e6414:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e6418:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e641c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e6420:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e6424:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e6428:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e642c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e6430:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e6434:	429d      	cmp	r5, r3
   e6436:	bf08      	it	eq
   e6438:	4296      	cmpeq	r6, r2
   e643a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e643e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e6442:	d202      	bcs.n	e644a <__aeabi_ddiv+0x6e>
   e6444:	085b      	lsrs	r3, r3, #1
   e6446:	ea4f 0232 	mov.w	r2, r2, rrx
   e644a:	1ab6      	subs	r6, r6, r2
   e644c:	eb65 0503 	sbc.w	r5, r5, r3
   e6450:	085b      	lsrs	r3, r3, #1
   e6452:	ea4f 0232 	mov.w	r2, r2, rrx
   e6456:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e645a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e645e:	ebb6 0e02 	subs.w	lr, r6, r2
   e6462:	eb75 0e03 	sbcs.w	lr, r5, r3
   e6466:	bf22      	ittt	cs
   e6468:	1ab6      	subcs	r6, r6, r2
   e646a:	4675      	movcs	r5, lr
   e646c:	ea40 000c 	orrcs.w	r0, r0, ip
   e6470:	085b      	lsrs	r3, r3, #1
   e6472:	ea4f 0232 	mov.w	r2, r2, rrx
   e6476:	ebb6 0e02 	subs.w	lr, r6, r2
   e647a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e647e:	bf22      	ittt	cs
   e6480:	1ab6      	subcs	r6, r6, r2
   e6482:	4675      	movcs	r5, lr
   e6484:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e6488:	085b      	lsrs	r3, r3, #1
   e648a:	ea4f 0232 	mov.w	r2, r2, rrx
   e648e:	ebb6 0e02 	subs.w	lr, r6, r2
   e6492:	eb75 0e03 	sbcs.w	lr, r5, r3
   e6496:	bf22      	ittt	cs
   e6498:	1ab6      	subcs	r6, r6, r2
   e649a:	4675      	movcs	r5, lr
   e649c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e64a0:	085b      	lsrs	r3, r3, #1
   e64a2:	ea4f 0232 	mov.w	r2, r2, rrx
   e64a6:	ebb6 0e02 	subs.w	lr, r6, r2
   e64aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   e64ae:	bf22      	ittt	cs
   e64b0:	1ab6      	subcs	r6, r6, r2
   e64b2:	4675      	movcs	r5, lr
   e64b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e64b8:	ea55 0e06 	orrs.w	lr, r5, r6
   e64bc:	d018      	beq.n	e64f0 <__aeabi_ddiv+0x114>
   e64be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e64c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e64c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e64ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e64ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e64d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e64d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e64da:	d1c0      	bne.n	e645e <__aeabi_ddiv+0x82>
   e64dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e64e0:	d10b      	bne.n	e64fa <__aeabi_ddiv+0x11e>
   e64e2:	ea41 0100 	orr.w	r1, r1, r0
   e64e6:	f04f 0000 	mov.w	r0, #0
   e64ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e64ee:	e7b6      	b.n	e645e <__aeabi_ddiv+0x82>
   e64f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e64f4:	bf04      	itt	eq
   e64f6:	4301      	orreq	r1, r0
   e64f8:	2000      	moveq	r0, #0
   e64fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e64fe:	bf88      	it	hi
   e6500:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e6504:	f63f aeaf 	bhi.w	e6266 <__aeabi_dmul+0xde>
   e6508:	ebb5 0c03 	subs.w	ip, r5, r3
   e650c:	bf04      	itt	eq
   e650e:	ebb6 0c02 	subseq.w	ip, r6, r2
   e6512:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e6516:	f150 0000 	adcs.w	r0, r0, #0
   e651a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e651e:	bd70      	pop	{r4, r5, r6, pc}
   e6520:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e6524:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e6528:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e652c:	bfc2      	ittt	gt
   e652e:	ebd4 050c 	rsbsgt	r5, r4, ip
   e6532:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e6536:	bd70      	popgt	{r4, r5, r6, pc}
   e6538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e653c:	f04f 0e00 	mov.w	lr, #0
   e6540:	3c01      	subs	r4, #1
   e6542:	e690      	b.n	e6266 <__aeabi_dmul+0xde>
   e6544:	ea45 0e06 	orr.w	lr, r5, r6
   e6548:	e68d      	b.n	e6266 <__aeabi_dmul+0xde>
   e654a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e654e:	ea94 0f0c 	teq	r4, ip
   e6552:	bf08      	it	eq
   e6554:	ea95 0f0c 	teqeq	r5, ip
   e6558:	f43f af3b 	beq.w	e63d2 <__aeabi_dmul+0x24a>
   e655c:	ea94 0f0c 	teq	r4, ip
   e6560:	d10a      	bne.n	e6578 <__aeabi_ddiv+0x19c>
   e6562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e6566:	f47f af34 	bne.w	e63d2 <__aeabi_dmul+0x24a>
   e656a:	ea95 0f0c 	teq	r5, ip
   e656e:	f47f af25 	bne.w	e63bc <__aeabi_dmul+0x234>
   e6572:	4610      	mov	r0, r2
   e6574:	4619      	mov	r1, r3
   e6576:	e72c      	b.n	e63d2 <__aeabi_dmul+0x24a>
   e6578:	ea95 0f0c 	teq	r5, ip
   e657c:	d106      	bne.n	e658c <__aeabi_ddiv+0x1b0>
   e657e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e6582:	f43f aefd 	beq.w	e6380 <__aeabi_dmul+0x1f8>
   e6586:	4610      	mov	r0, r2
   e6588:	4619      	mov	r1, r3
   e658a:	e722      	b.n	e63d2 <__aeabi_dmul+0x24a>
   e658c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e6590:	bf18      	it	ne
   e6592:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e6596:	f47f aec5 	bne.w	e6324 <__aeabi_dmul+0x19c>
   e659a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e659e:	f47f af0d 	bne.w	e63bc <__aeabi_dmul+0x234>
   e65a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e65a6:	f47f aeeb 	bne.w	e6380 <__aeabi_dmul+0x1f8>
   e65aa:	e712      	b.n	e63d2 <__aeabi_dmul+0x24a>

000e65ac <__gedf2>:
   e65ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   e65b0:	e006      	b.n	e65c0 <__cmpdf2+0x4>
   e65b2:	bf00      	nop

000e65b4 <__ledf2>:
   e65b4:	f04f 0c01 	mov.w	ip, #1
   e65b8:	e002      	b.n	e65c0 <__cmpdf2+0x4>
   e65ba:	bf00      	nop

000e65bc <__cmpdf2>:
   e65bc:	f04f 0c01 	mov.w	ip, #1
   e65c0:	f84d cd04 	str.w	ip, [sp, #-4]!
   e65c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e65c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e65cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e65d0:	bf18      	it	ne
   e65d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e65d6:	d01b      	beq.n	e6610 <__cmpdf2+0x54>
   e65d8:	b001      	add	sp, #4
   e65da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e65de:	bf0c      	ite	eq
   e65e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e65e4:	ea91 0f03 	teqne	r1, r3
   e65e8:	bf02      	ittt	eq
   e65ea:	ea90 0f02 	teqeq	r0, r2
   e65ee:	2000      	moveq	r0, #0
   e65f0:	4770      	bxeq	lr
   e65f2:	f110 0f00 	cmn.w	r0, #0
   e65f6:	ea91 0f03 	teq	r1, r3
   e65fa:	bf58      	it	pl
   e65fc:	4299      	cmppl	r1, r3
   e65fe:	bf08      	it	eq
   e6600:	4290      	cmpeq	r0, r2
   e6602:	bf2c      	ite	cs
   e6604:	17d8      	asrcs	r0, r3, #31
   e6606:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e660a:	f040 0001 	orr.w	r0, r0, #1
   e660e:	4770      	bx	lr
   e6610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e6614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e6618:	d102      	bne.n	e6620 <__cmpdf2+0x64>
   e661a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e661e:	d107      	bne.n	e6630 <__cmpdf2+0x74>
   e6620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e6624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e6628:	d1d6      	bne.n	e65d8 <__cmpdf2+0x1c>
   e662a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e662e:	d0d3      	beq.n	e65d8 <__cmpdf2+0x1c>
   e6630:	f85d 0b04 	ldr.w	r0, [sp], #4
   e6634:	4770      	bx	lr
   e6636:	bf00      	nop

000e6638 <__aeabi_cdrcmple>:
   e6638:	4684      	mov	ip, r0
   e663a:	4610      	mov	r0, r2
   e663c:	4662      	mov	r2, ip
   e663e:	468c      	mov	ip, r1
   e6640:	4619      	mov	r1, r3
   e6642:	4663      	mov	r3, ip
   e6644:	e000      	b.n	e6648 <__aeabi_cdcmpeq>
   e6646:	bf00      	nop

000e6648 <__aeabi_cdcmpeq>:
   e6648:	b501      	push	{r0, lr}
   e664a:	f7ff ffb7 	bl	e65bc <__cmpdf2>
   e664e:	2800      	cmp	r0, #0
   e6650:	bf48      	it	mi
   e6652:	f110 0f00 	cmnmi.w	r0, #0
   e6656:	bd01      	pop	{r0, pc}

000e6658 <__aeabi_dcmpeq>:
   e6658:	f84d ed08 	str.w	lr, [sp, #-8]!
   e665c:	f7ff fff4 	bl	e6648 <__aeabi_cdcmpeq>
   e6660:	bf0c      	ite	eq
   e6662:	2001      	moveq	r0, #1
   e6664:	2000      	movne	r0, #0
   e6666:	f85d fb08 	ldr.w	pc, [sp], #8
   e666a:	bf00      	nop

000e666c <__aeabi_dcmplt>:
   e666c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e6670:	f7ff ffea 	bl	e6648 <__aeabi_cdcmpeq>
   e6674:	bf34      	ite	cc
   e6676:	2001      	movcc	r0, #1
   e6678:	2000      	movcs	r0, #0
   e667a:	f85d fb08 	ldr.w	pc, [sp], #8
   e667e:	bf00      	nop

000e6680 <__aeabi_dcmple>:
   e6680:	f84d ed08 	str.w	lr, [sp, #-8]!
   e6684:	f7ff ffe0 	bl	e6648 <__aeabi_cdcmpeq>
   e6688:	bf94      	ite	ls
   e668a:	2001      	movls	r0, #1
   e668c:	2000      	movhi	r0, #0
   e668e:	f85d fb08 	ldr.w	pc, [sp], #8
   e6692:	bf00      	nop

000e6694 <__aeabi_dcmpge>:
   e6694:	f84d ed08 	str.w	lr, [sp, #-8]!
   e6698:	f7ff ffce 	bl	e6638 <__aeabi_cdrcmple>
   e669c:	bf94      	ite	ls
   e669e:	2001      	movls	r0, #1
   e66a0:	2000      	movhi	r0, #0
   e66a2:	f85d fb08 	ldr.w	pc, [sp], #8
   e66a6:	bf00      	nop

000e66a8 <__aeabi_dcmpgt>:
   e66a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e66ac:	f7ff ffc4 	bl	e6638 <__aeabi_cdrcmple>
   e66b0:	bf34      	ite	cc
   e66b2:	2001      	movcc	r0, #1
   e66b4:	2000      	movcs	r0, #0
   e66b6:	f85d fb08 	ldr.w	pc, [sp], #8
   e66ba:	bf00      	nop

000e66bc <__aeabi_d2uiz>:
   e66bc:	004a      	lsls	r2, r1, #1
   e66be:	d211      	bcs.n	e66e4 <__aeabi_d2uiz+0x28>
   e66c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e66c4:	d211      	bcs.n	e66ea <__aeabi_d2uiz+0x2e>
   e66c6:	d50d      	bpl.n	e66e4 <__aeabi_d2uiz+0x28>
   e66c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e66cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e66d0:	d40e      	bmi.n	e66f0 <__aeabi_d2uiz+0x34>
   e66d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e66d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e66da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e66de:	fa23 f002 	lsr.w	r0, r3, r2
   e66e2:	4770      	bx	lr
   e66e4:	f04f 0000 	mov.w	r0, #0
   e66e8:	4770      	bx	lr
   e66ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e66ee:	d102      	bne.n	e66f6 <__aeabi_d2uiz+0x3a>
   e66f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e66f4:	4770      	bx	lr
   e66f6:	f04f 0000 	mov.w	r0, #0
   e66fa:	4770      	bx	lr

000e66fc <__aeabi_d2f>:
   e66fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e6700:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e6704:	bf24      	itt	cs
   e6706:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e670a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e670e:	d90d      	bls.n	e672c <__aeabi_d2f+0x30>
   e6710:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e6714:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e6718:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e671c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e6720:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e6724:	bf08      	it	eq
   e6726:	f020 0001 	biceq.w	r0, r0, #1
   e672a:	4770      	bx	lr
   e672c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e6730:	d121      	bne.n	e6776 <__aeabi_d2f+0x7a>
   e6732:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e6736:	bfbc      	itt	lt
   e6738:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e673c:	4770      	bxlt	lr
   e673e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e6742:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e6746:	f1c2 0218 	rsb	r2, r2, #24
   e674a:	f1c2 0c20 	rsb	ip, r2, #32
   e674e:	fa10 f30c 	lsls.w	r3, r0, ip
   e6752:	fa20 f002 	lsr.w	r0, r0, r2
   e6756:	bf18      	it	ne
   e6758:	f040 0001 	orrne.w	r0, r0, #1
   e675c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e6760:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e6764:	fa03 fc0c 	lsl.w	ip, r3, ip
   e6768:	ea40 000c 	orr.w	r0, r0, ip
   e676c:	fa23 f302 	lsr.w	r3, r3, r2
   e6770:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e6774:	e7cc      	b.n	e6710 <__aeabi_d2f+0x14>
   e6776:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e677a:	d107      	bne.n	e678c <__aeabi_d2f+0x90>
   e677c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e6780:	bf1e      	ittt	ne
   e6782:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e6786:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e678a:	4770      	bxne	lr
   e678c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e6790:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e6794:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e6798:	4770      	bx	lr
   e679a:	bf00      	nop

000e679c <__aeabi_uldivmod>:
   e679c:	b953      	cbnz	r3, e67b4 <__aeabi_uldivmod+0x18>
   e679e:	b94a      	cbnz	r2, e67b4 <__aeabi_uldivmod+0x18>
   e67a0:	2900      	cmp	r1, #0
   e67a2:	bf08      	it	eq
   e67a4:	2800      	cmpeq	r0, #0
   e67a6:	bf1c      	itt	ne
   e67a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   e67ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   e67b0:	f000 b9a2 	b.w	e6af8 <__aeabi_idiv0>
   e67b4:	f1ad 0c08 	sub.w	ip, sp, #8
   e67b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e67bc:	f000 f82a 	bl	e6814 <__udivmoddi4>
   e67c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   e67c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e67c8:	b004      	add	sp, #16
   e67ca:	4770      	bx	lr

000e67cc <__aeabi_d2ulz>:
   e67cc:	b5d0      	push	{r4, r6, r7, lr}
   e67ce:	2200      	movs	r2, #0
   e67d0:	4b0e      	ldr	r3, [pc, #56]	; (e680c <__aeabi_d2ulz+0x40>)
   e67d2:	4606      	mov	r6, r0
   e67d4:	460f      	mov	r7, r1
   e67d6:	f7ff fcd7 	bl	e6188 <__aeabi_dmul>
   e67da:	f7ff ff6f 	bl	e66bc <__aeabi_d2uiz>
   e67de:	4604      	mov	r4, r0
   e67e0:	f7ff fc5c 	bl	e609c <__aeabi_ui2d>
   e67e4:	2200      	movs	r2, #0
   e67e6:	4b0a      	ldr	r3, [pc, #40]	; (e6810 <__aeabi_d2ulz+0x44>)
   e67e8:	f7ff fcce 	bl	e6188 <__aeabi_dmul>
   e67ec:	4602      	mov	r2, r0
   e67ee:	460b      	mov	r3, r1
   e67f0:	4630      	mov	r0, r6
   e67f2:	4639      	mov	r1, r7
   e67f4:	f7ff fb14 	bl	e5e20 <__aeabi_dsub>
   e67f8:	f7ff ff60 	bl	e66bc <__aeabi_d2uiz>
   e67fc:	4623      	mov	r3, r4
   e67fe:	2200      	movs	r2, #0
   e6800:	ea42 0200 	orr.w	r2, r2, r0
   e6804:	4610      	mov	r0, r2
   e6806:	4619      	mov	r1, r3
   e6808:	bdd0      	pop	{r4, r6, r7, pc}
   e680a:	bf00      	nop
   e680c:	3df00000 	.word	0x3df00000
   e6810:	41f00000 	.word	0x41f00000

000e6814 <__udivmoddi4>:
   e6814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e6818:	468c      	mov	ip, r1
   e681a:	460e      	mov	r6, r1
   e681c:	4604      	mov	r4, r0
   e681e:	9d08      	ldr	r5, [sp, #32]
   e6820:	2b00      	cmp	r3, #0
   e6822:	d150      	bne.n	e68c6 <__udivmoddi4+0xb2>
   e6824:	428a      	cmp	r2, r1
   e6826:	4617      	mov	r7, r2
   e6828:	d96c      	bls.n	e6904 <__udivmoddi4+0xf0>
   e682a:	fab2 fe82 	clz	lr, r2
   e682e:	f1be 0f00 	cmp.w	lr, #0
   e6832:	d00b      	beq.n	e684c <__udivmoddi4+0x38>
   e6834:	f1ce 0420 	rsb	r4, lr, #32
   e6838:	fa20 f404 	lsr.w	r4, r0, r4
   e683c:	fa01 f60e 	lsl.w	r6, r1, lr
   e6840:	ea44 0c06 	orr.w	ip, r4, r6
   e6844:	fa02 f70e 	lsl.w	r7, r2, lr
   e6848:	fa00 f40e 	lsl.w	r4, r0, lr
   e684c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   e6850:	0c22      	lsrs	r2, r4, #16
   e6852:	fbbc f0f9 	udiv	r0, ip, r9
   e6856:	fa1f f887 	uxth.w	r8, r7
   e685a:	fb09 c610 	mls	r6, r9, r0, ip
   e685e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e6862:	fb00 f308 	mul.w	r3, r0, r8
   e6866:	42b3      	cmp	r3, r6
   e6868:	d909      	bls.n	e687e <__udivmoddi4+0x6a>
   e686a:	19f6      	adds	r6, r6, r7
   e686c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   e6870:	f080 8122 	bcs.w	e6ab8 <__udivmoddi4+0x2a4>
   e6874:	42b3      	cmp	r3, r6
   e6876:	f240 811f 	bls.w	e6ab8 <__udivmoddi4+0x2a4>
   e687a:	3802      	subs	r0, #2
   e687c:	443e      	add	r6, r7
   e687e:	1af6      	subs	r6, r6, r3
   e6880:	b2a2      	uxth	r2, r4
   e6882:	fbb6 f3f9 	udiv	r3, r6, r9
   e6886:	fb09 6613 	mls	r6, r9, r3, r6
   e688a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e688e:	fb03 f808 	mul.w	r8, r3, r8
   e6892:	45a0      	cmp	r8, r4
   e6894:	d909      	bls.n	e68aa <__udivmoddi4+0x96>
   e6896:	19e4      	adds	r4, r4, r7
   e6898:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   e689c:	f080 810a 	bcs.w	e6ab4 <__udivmoddi4+0x2a0>
   e68a0:	45a0      	cmp	r8, r4
   e68a2:	f240 8107 	bls.w	e6ab4 <__udivmoddi4+0x2a0>
   e68a6:	3b02      	subs	r3, #2
   e68a8:	443c      	add	r4, r7
   e68aa:	ebc8 0404 	rsb	r4, r8, r4
   e68ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e68b2:	2100      	movs	r1, #0
   e68b4:	2d00      	cmp	r5, #0
   e68b6:	d062      	beq.n	e697e <__udivmoddi4+0x16a>
   e68b8:	fa24 f40e 	lsr.w	r4, r4, lr
   e68bc:	2300      	movs	r3, #0
   e68be:	602c      	str	r4, [r5, #0]
   e68c0:	606b      	str	r3, [r5, #4]
   e68c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e68c6:	428b      	cmp	r3, r1
   e68c8:	d907      	bls.n	e68da <__udivmoddi4+0xc6>
   e68ca:	2d00      	cmp	r5, #0
   e68cc:	d055      	beq.n	e697a <__udivmoddi4+0x166>
   e68ce:	2100      	movs	r1, #0
   e68d0:	e885 0041 	stmia.w	r5, {r0, r6}
   e68d4:	4608      	mov	r0, r1
   e68d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e68da:	fab3 f183 	clz	r1, r3
   e68de:	2900      	cmp	r1, #0
   e68e0:	f040 8090 	bne.w	e6a04 <__udivmoddi4+0x1f0>
   e68e4:	42b3      	cmp	r3, r6
   e68e6:	d302      	bcc.n	e68ee <__udivmoddi4+0xda>
   e68e8:	4282      	cmp	r2, r0
   e68ea:	f200 80f8 	bhi.w	e6ade <__udivmoddi4+0x2ca>
   e68ee:	1a84      	subs	r4, r0, r2
   e68f0:	eb66 0603 	sbc.w	r6, r6, r3
   e68f4:	2001      	movs	r0, #1
   e68f6:	46b4      	mov	ip, r6
   e68f8:	2d00      	cmp	r5, #0
   e68fa:	d040      	beq.n	e697e <__udivmoddi4+0x16a>
   e68fc:	e885 1010 	stmia.w	r5, {r4, ip}
   e6900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6904:	b912      	cbnz	r2, e690c <__udivmoddi4+0xf8>
   e6906:	2701      	movs	r7, #1
   e6908:	fbb7 f7f2 	udiv	r7, r7, r2
   e690c:	fab7 fe87 	clz	lr, r7
   e6910:	f1be 0f00 	cmp.w	lr, #0
   e6914:	d135      	bne.n	e6982 <__udivmoddi4+0x16e>
   e6916:	1bf3      	subs	r3, r6, r7
   e6918:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e691c:	fa1f fc87 	uxth.w	ip, r7
   e6920:	2101      	movs	r1, #1
   e6922:	fbb3 f0f8 	udiv	r0, r3, r8
   e6926:	0c22      	lsrs	r2, r4, #16
   e6928:	fb08 3610 	mls	r6, r8, r0, r3
   e692c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e6930:	fb0c f300 	mul.w	r3, ip, r0
   e6934:	42b3      	cmp	r3, r6
   e6936:	d907      	bls.n	e6948 <__udivmoddi4+0x134>
   e6938:	19f6      	adds	r6, r6, r7
   e693a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   e693e:	d202      	bcs.n	e6946 <__udivmoddi4+0x132>
   e6940:	42b3      	cmp	r3, r6
   e6942:	f200 80ce 	bhi.w	e6ae2 <__udivmoddi4+0x2ce>
   e6946:	4610      	mov	r0, r2
   e6948:	1af6      	subs	r6, r6, r3
   e694a:	b2a2      	uxth	r2, r4
   e694c:	fbb6 f3f8 	udiv	r3, r6, r8
   e6950:	fb08 6613 	mls	r6, r8, r3, r6
   e6954:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e6958:	fb0c fc03 	mul.w	ip, ip, r3
   e695c:	45a4      	cmp	ip, r4
   e695e:	d907      	bls.n	e6970 <__udivmoddi4+0x15c>
   e6960:	19e4      	adds	r4, r4, r7
   e6962:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   e6966:	d202      	bcs.n	e696e <__udivmoddi4+0x15a>
   e6968:	45a4      	cmp	ip, r4
   e696a:	f200 80b5 	bhi.w	e6ad8 <__udivmoddi4+0x2c4>
   e696e:	4613      	mov	r3, r2
   e6970:	ebcc 0404 	rsb	r4, ip, r4
   e6974:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e6978:	e79c      	b.n	e68b4 <__udivmoddi4+0xa0>
   e697a:	4629      	mov	r1, r5
   e697c:	4628      	mov	r0, r5
   e697e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6982:	f1ce 0120 	rsb	r1, lr, #32
   e6986:	fa06 f30e 	lsl.w	r3, r6, lr
   e698a:	fa07 f70e 	lsl.w	r7, r7, lr
   e698e:	fa20 f901 	lsr.w	r9, r0, r1
   e6992:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e6996:	40ce      	lsrs	r6, r1
   e6998:	ea49 0903 	orr.w	r9, r9, r3
   e699c:	fbb6 faf8 	udiv	sl, r6, r8
   e69a0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   e69a4:	fb08 661a 	mls	r6, r8, sl, r6
   e69a8:	fa1f fc87 	uxth.w	ip, r7
   e69ac:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   e69b0:	fb0a f20c 	mul.w	r2, sl, ip
   e69b4:	429a      	cmp	r2, r3
   e69b6:	fa00 f40e 	lsl.w	r4, r0, lr
   e69ba:	d90a      	bls.n	e69d2 <__udivmoddi4+0x1be>
   e69bc:	19db      	adds	r3, r3, r7
   e69be:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   e69c2:	f080 8087 	bcs.w	e6ad4 <__udivmoddi4+0x2c0>
   e69c6:	429a      	cmp	r2, r3
   e69c8:	f240 8084 	bls.w	e6ad4 <__udivmoddi4+0x2c0>
   e69cc:	f1aa 0a02 	sub.w	sl, sl, #2
   e69d0:	443b      	add	r3, r7
   e69d2:	1a9b      	subs	r3, r3, r2
   e69d4:	fa1f f989 	uxth.w	r9, r9
   e69d8:	fbb3 f1f8 	udiv	r1, r3, r8
   e69dc:	fb08 3311 	mls	r3, r8, r1, r3
   e69e0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   e69e4:	fb01 f60c 	mul.w	r6, r1, ip
   e69e8:	429e      	cmp	r6, r3
   e69ea:	d907      	bls.n	e69fc <__udivmoddi4+0x1e8>
   e69ec:	19db      	adds	r3, r3, r7
   e69ee:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   e69f2:	d26b      	bcs.n	e6acc <__udivmoddi4+0x2b8>
   e69f4:	429e      	cmp	r6, r3
   e69f6:	d969      	bls.n	e6acc <__udivmoddi4+0x2b8>
   e69f8:	3902      	subs	r1, #2
   e69fa:	443b      	add	r3, r7
   e69fc:	1b9b      	subs	r3, r3, r6
   e69fe:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   e6a02:	e78e      	b.n	e6922 <__udivmoddi4+0x10e>
   e6a04:	f1c1 0e20 	rsb	lr, r1, #32
   e6a08:	fa22 f40e 	lsr.w	r4, r2, lr
   e6a0c:	408b      	lsls	r3, r1
   e6a0e:	4323      	orrs	r3, r4
   e6a10:	fa20 f70e 	lsr.w	r7, r0, lr
   e6a14:	fa06 f401 	lsl.w	r4, r6, r1
   e6a18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   e6a1c:	fa26 f60e 	lsr.w	r6, r6, lr
   e6a20:	433c      	orrs	r4, r7
   e6a22:	fbb6 f9fc 	udiv	r9, r6, ip
   e6a26:	0c27      	lsrs	r7, r4, #16
   e6a28:	fb0c 6619 	mls	r6, ip, r9, r6
   e6a2c:	fa1f f883 	uxth.w	r8, r3
   e6a30:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   e6a34:	fb09 f708 	mul.w	r7, r9, r8
   e6a38:	42b7      	cmp	r7, r6
   e6a3a:	fa02 f201 	lsl.w	r2, r2, r1
   e6a3e:	fa00 fa01 	lsl.w	sl, r0, r1
   e6a42:	d908      	bls.n	e6a56 <__udivmoddi4+0x242>
   e6a44:	18f6      	adds	r6, r6, r3
   e6a46:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   e6a4a:	d241      	bcs.n	e6ad0 <__udivmoddi4+0x2bc>
   e6a4c:	42b7      	cmp	r7, r6
   e6a4e:	d93f      	bls.n	e6ad0 <__udivmoddi4+0x2bc>
   e6a50:	f1a9 0902 	sub.w	r9, r9, #2
   e6a54:	441e      	add	r6, r3
   e6a56:	1bf6      	subs	r6, r6, r7
   e6a58:	b2a0      	uxth	r0, r4
   e6a5a:	fbb6 f4fc 	udiv	r4, r6, ip
   e6a5e:	fb0c 6614 	mls	r6, ip, r4, r6
   e6a62:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   e6a66:	fb04 f808 	mul.w	r8, r4, r8
   e6a6a:	45b8      	cmp	r8, r7
   e6a6c:	d907      	bls.n	e6a7e <__udivmoddi4+0x26a>
   e6a6e:	18ff      	adds	r7, r7, r3
   e6a70:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   e6a74:	d228      	bcs.n	e6ac8 <__udivmoddi4+0x2b4>
   e6a76:	45b8      	cmp	r8, r7
   e6a78:	d926      	bls.n	e6ac8 <__udivmoddi4+0x2b4>
   e6a7a:	3c02      	subs	r4, #2
   e6a7c:	441f      	add	r7, r3
   e6a7e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   e6a82:	ebc8 0707 	rsb	r7, r8, r7
   e6a86:	fba0 8902 	umull	r8, r9, r0, r2
   e6a8a:	454f      	cmp	r7, r9
   e6a8c:	4644      	mov	r4, r8
   e6a8e:	464e      	mov	r6, r9
   e6a90:	d314      	bcc.n	e6abc <__udivmoddi4+0x2a8>
   e6a92:	d029      	beq.n	e6ae8 <__udivmoddi4+0x2d4>
   e6a94:	b365      	cbz	r5, e6af0 <__udivmoddi4+0x2dc>
   e6a96:	ebba 0304 	subs.w	r3, sl, r4
   e6a9a:	eb67 0706 	sbc.w	r7, r7, r6
   e6a9e:	fa07 fe0e 	lsl.w	lr, r7, lr
   e6aa2:	40cb      	lsrs	r3, r1
   e6aa4:	40cf      	lsrs	r7, r1
   e6aa6:	ea4e 0303 	orr.w	r3, lr, r3
   e6aaa:	e885 0088 	stmia.w	r5, {r3, r7}
   e6aae:	2100      	movs	r1, #0
   e6ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6ab4:	4613      	mov	r3, r2
   e6ab6:	e6f8      	b.n	e68aa <__udivmoddi4+0x96>
   e6ab8:	4610      	mov	r0, r2
   e6aba:	e6e0      	b.n	e687e <__udivmoddi4+0x6a>
   e6abc:	ebb8 0402 	subs.w	r4, r8, r2
   e6ac0:	eb69 0603 	sbc.w	r6, r9, r3
   e6ac4:	3801      	subs	r0, #1
   e6ac6:	e7e5      	b.n	e6a94 <__udivmoddi4+0x280>
   e6ac8:	4604      	mov	r4, r0
   e6aca:	e7d8      	b.n	e6a7e <__udivmoddi4+0x26a>
   e6acc:	4611      	mov	r1, r2
   e6ace:	e795      	b.n	e69fc <__udivmoddi4+0x1e8>
   e6ad0:	4681      	mov	r9, r0
   e6ad2:	e7c0      	b.n	e6a56 <__udivmoddi4+0x242>
   e6ad4:	468a      	mov	sl, r1
   e6ad6:	e77c      	b.n	e69d2 <__udivmoddi4+0x1be>
   e6ad8:	3b02      	subs	r3, #2
   e6ada:	443c      	add	r4, r7
   e6adc:	e748      	b.n	e6970 <__udivmoddi4+0x15c>
   e6ade:	4608      	mov	r0, r1
   e6ae0:	e70a      	b.n	e68f8 <__udivmoddi4+0xe4>
   e6ae2:	3802      	subs	r0, #2
   e6ae4:	443e      	add	r6, r7
   e6ae6:	e72f      	b.n	e6948 <__udivmoddi4+0x134>
   e6ae8:	45c2      	cmp	sl, r8
   e6aea:	d3e7      	bcc.n	e6abc <__udivmoddi4+0x2a8>
   e6aec:	463e      	mov	r6, r7
   e6aee:	e7d1      	b.n	e6a94 <__udivmoddi4+0x280>
   e6af0:	4629      	mov	r1, r5
   e6af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6af6:	bf00      	nop

000e6af8 <__aeabi_idiv0>:
   e6af8:	4770      	bx	lr
   e6afa:	bf00      	nop

000e6afc <calloc>:
   e6afc:	4b02      	ldr	r3, [pc, #8]	; (e6b08 <calloc+0xc>)
   e6afe:	460a      	mov	r2, r1
   e6b00:	4601      	mov	r1, r0
   e6b02:	6818      	ldr	r0, [r3, #0]
   e6b04:	f000 b84d 	b.w	e6ba2 <_calloc_r>
   e6b08:	2003bf2c 	.word	0x2003bf2c

000e6b0c <__cxa_atexit>:
   e6b0c:	b510      	push	{r4, lr}
   e6b0e:	4c05      	ldr	r4, [pc, #20]	; (e6b24 <__cxa_atexit+0x18>)
   e6b10:	4613      	mov	r3, r2
   e6b12:	b12c      	cbz	r4, e6b20 <__cxa_atexit+0x14>
   e6b14:	460a      	mov	r2, r1
   e6b16:	4601      	mov	r1, r0
   e6b18:	2002      	movs	r0, #2
   e6b1a:	f3af 8000 	nop.w
   e6b1e:	bd10      	pop	{r4, pc}
   e6b20:	4620      	mov	r0, r4
   e6b22:	bd10      	pop	{r4, pc}
   e6b24:	00000000 	.word	0x00000000

000e6b28 <memcmp>:
   e6b28:	b510      	push	{r4, lr}
   e6b2a:	3901      	subs	r1, #1
   e6b2c:	4402      	add	r2, r0
   e6b2e:	4290      	cmp	r0, r2
   e6b30:	d007      	beq.n	e6b42 <memcmp+0x1a>
   e6b32:	f810 3b01 	ldrb.w	r3, [r0], #1
   e6b36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e6b3a:	42a3      	cmp	r3, r4
   e6b3c:	d0f7      	beq.n	e6b2e <memcmp+0x6>
   e6b3e:	1b18      	subs	r0, r3, r4
   e6b40:	bd10      	pop	{r4, pc}
   e6b42:	2000      	movs	r0, #0
   e6b44:	bd10      	pop	{r4, pc}

000e6b46 <memcpy>:
   e6b46:	b510      	push	{r4, lr}
   e6b48:	1e43      	subs	r3, r0, #1
   e6b4a:	440a      	add	r2, r1
   e6b4c:	4291      	cmp	r1, r2
   e6b4e:	d004      	beq.n	e6b5a <memcpy+0x14>
   e6b50:	f811 4b01 	ldrb.w	r4, [r1], #1
   e6b54:	f803 4f01 	strb.w	r4, [r3, #1]!
   e6b58:	e7f8      	b.n	e6b4c <memcpy+0x6>
   e6b5a:	bd10      	pop	{r4, pc}

000e6b5c <memmove>:
   e6b5c:	4288      	cmp	r0, r1
   e6b5e:	b510      	push	{r4, lr}
   e6b60:	eb01 0302 	add.w	r3, r1, r2
   e6b64:	d801      	bhi.n	e6b6a <memmove+0xe>
   e6b66:	1e42      	subs	r2, r0, #1
   e6b68:	e00b      	b.n	e6b82 <memmove+0x26>
   e6b6a:	4298      	cmp	r0, r3
   e6b6c:	d2fb      	bcs.n	e6b66 <memmove+0xa>
   e6b6e:	1881      	adds	r1, r0, r2
   e6b70:	1ad2      	subs	r2, r2, r3
   e6b72:	42d3      	cmn	r3, r2
   e6b74:	d004      	beq.n	e6b80 <memmove+0x24>
   e6b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e6b7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   e6b7e:	e7f8      	b.n	e6b72 <memmove+0x16>
   e6b80:	bd10      	pop	{r4, pc}
   e6b82:	4299      	cmp	r1, r3
   e6b84:	d004      	beq.n	e6b90 <memmove+0x34>
   e6b86:	f811 4b01 	ldrb.w	r4, [r1], #1
   e6b8a:	f802 4f01 	strb.w	r4, [r2, #1]!
   e6b8e:	e7f8      	b.n	e6b82 <memmove+0x26>
   e6b90:	bd10      	pop	{r4, pc}

000e6b92 <memset>:
   e6b92:	4402      	add	r2, r0
   e6b94:	4603      	mov	r3, r0
   e6b96:	4293      	cmp	r3, r2
   e6b98:	d002      	beq.n	e6ba0 <memset+0xe>
   e6b9a:	f803 1b01 	strb.w	r1, [r3], #1
   e6b9e:	e7fa      	b.n	e6b96 <memset+0x4>
   e6ba0:	4770      	bx	lr

000e6ba2 <_calloc_r>:
   e6ba2:	b538      	push	{r3, r4, r5, lr}
   e6ba4:	fb02 f401 	mul.w	r4, r2, r1
   e6ba8:	4621      	mov	r1, r4
   e6baa:	f7fd fa35 	bl	e4018 <_malloc_r>
   e6bae:	4605      	mov	r5, r0
   e6bb0:	b118      	cbz	r0, e6bba <_calloc_r+0x18>
   e6bb2:	4622      	mov	r2, r4
   e6bb4:	2100      	movs	r1, #0
   e6bb6:	f7ff ffec 	bl	e6b92 <memset>
   e6bba:	4628      	mov	r0, r5
   e6bbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000e6bc0 <srand>:
   e6bc0:	b538      	push	{r3, r4, r5, lr}
   e6bc2:	4b12      	ldr	r3, [pc, #72]	; (e6c0c <srand+0x4c>)
   e6bc4:	681c      	ldr	r4, [r3, #0]
   e6bc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e6bc8:	4605      	mov	r5, r0
   e6bca:	b9d3      	cbnz	r3, e6c02 <srand+0x42>
   e6bcc:	2018      	movs	r0, #24
   e6bce:	f7fd f9eb 	bl	e3fa8 <malloc>
   e6bd2:	f243 330e 	movw	r3, #13070	; 0x330e
   e6bd6:	63a0      	str	r0, [r4, #56]	; 0x38
   e6bd8:	8003      	strh	r3, [r0, #0]
   e6bda:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e6bde:	8043      	strh	r3, [r0, #2]
   e6be0:	f241 2334 	movw	r3, #4660	; 0x1234
   e6be4:	8083      	strh	r3, [r0, #4]
   e6be6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e6bea:	80c3      	strh	r3, [r0, #6]
   e6bec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e6bf0:	8103      	strh	r3, [r0, #8]
   e6bf2:	2305      	movs	r3, #5
   e6bf4:	8143      	strh	r3, [r0, #10]
   e6bf6:	230b      	movs	r3, #11
   e6bf8:	8183      	strh	r3, [r0, #12]
   e6bfa:	2201      	movs	r2, #1
   e6bfc:	2300      	movs	r3, #0
   e6bfe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e6c02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e6c04:	2200      	movs	r2, #0
   e6c06:	611d      	str	r5, [r3, #16]
   e6c08:	615a      	str	r2, [r3, #20]
   e6c0a:	bd38      	pop	{r3, r4, r5, pc}
   e6c0c:	2003bf2c 	.word	0x2003bf2c

000e6c10 <strcmp>:
   e6c10:	f810 2b01 	ldrb.w	r2, [r0], #1
   e6c14:	f811 3b01 	ldrb.w	r3, [r1], #1
   e6c18:	2a01      	cmp	r2, #1
   e6c1a:	bf28      	it	cs
   e6c1c:	429a      	cmpcs	r2, r3
   e6c1e:	d0f7      	beq.n	e6c10 <strcmp>
   e6c20:	1ad0      	subs	r0, r2, r3
   e6c22:	4770      	bx	lr

000e6c24 <strcpy>:
   e6c24:	4603      	mov	r3, r0
   e6c26:	f811 2b01 	ldrb.w	r2, [r1], #1
   e6c2a:	f803 2b01 	strb.w	r2, [r3], #1
   e6c2e:	2a00      	cmp	r2, #0
   e6c30:	d1f9      	bne.n	e6c26 <strcpy+0x2>
   e6c32:	4770      	bx	lr

000e6c34 <strdup>:
   e6c34:	4b02      	ldr	r3, [pc, #8]	; (e6c40 <strdup+0xc>)
   e6c36:	4601      	mov	r1, r0
   e6c38:	6818      	ldr	r0, [r3, #0]
   e6c3a:	f000 b803 	b.w	e6c44 <_strdup_r>
   e6c3e:	bf00      	nop
   e6c40:	2003bf2c 	.word	0x2003bf2c

000e6c44 <_strdup_r>:
   e6c44:	b570      	push	{r4, r5, r6, lr}
   e6c46:	4606      	mov	r6, r0
   e6c48:	4608      	mov	r0, r1
   e6c4a:	460c      	mov	r4, r1
   e6c4c:	f000 f80d 	bl	e6c6a <strlen>
   e6c50:	1c45      	adds	r5, r0, #1
   e6c52:	4629      	mov	r1, r5
   e6c54:	4630      	mov	r0, r6
   e6c56:	f7fd f9df 	bl	e4018 <_malloc_r>
   e6c5a:	4606      	mov	r6, r0
   e6c5c:	b118      	cbz	r0, e6c66 <_strdup_r+0x22>
   e6c5e:	462a      	mov	r2, r5
   e6c60:	4621      	mov	r1, r4
   e6c62:	f7ff ff70 	bl	e6b46 <memcpy>
   e6c66:	4630      	mov	r0, r6
   e6c68:	bd70      	pop	{r4, r5, r6, pc}

000e6c6a <strlen>:
   e6c6a:	4603      	mov	r3, r0
   e6c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   e6c70:	2a00      	cmp	r2, #0
   e6c72:	d1fb      	bne.n	e6c6c <strlen+0x2>
   e6c74:	1a18      	subs	r0, r3, r0
   e6c76:	3801      	subs	r0, #1
   e6c78:	4770      	bx	lr

000e6c7a <strstr>:
   e6c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   e6c7c:	7803      	ldrb	r3, [r0, #0]
   e6c7e:	b963      	cbnz	r3, e6c9a <strstr+0x20>
   e6c80:	780b      	ldrb	r3, [r1, #0]
   e6c82:	2b00      	cmp	r3, #0
   e6c84:	bf18      	it	ne
   e6c86:	2000      	movne	r0, #0
   e6c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e6c8a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e6c8e:	b162      	cbz	r2, e6caa <strstr+0x30>
   e6c90:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   e6c94:	4297      	cmp	r7, r2
   e6c96:	4630      	mov	r0, r6
   e6c98:	d0f7      	beq.n	e6c8a <strstr+0x10>
   e6c9a:	4603      	mov	r3, r0
   e6c9c:	1c46      	adds	r6, r0, #1
   e6c9e:	7800      	ldrb	r0, [r0, #0]
   e6ca0:	b110      	cbz	r0, e6ca8 <strstr+0x2e>
   e6ca2:	1e4d      	subs	r5, r1, #1
   e6ca4:	1e5c      	subs	r4, r3, #1
   e6ca6:	e7f0      	b.n	e6c8a <strstr+0x10>
   e6ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e6caa:	4618      	mov	r0, r3
   e6cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000e6cb0 <strtok>:
   e6cb0:	4b17      	ldr	r3, [pc, #92]	; (e6d10 <strtok+0x60>)
   e6cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e6cb6:	681d      	ldr	r5, [r3, #0]
   e6cb8:	6dac      	ldr	r4, [r5, #88]	; 0x58
   e6cba:	4606      	mov	r6, r0
   e6cbc:	460f      	mov	r7, r1
   e6cbe:	b9fc      	cbnz	r4, e6d00 <strtok+0x50>
   e6cc0:	2050      	movs	r0, #80	; 0x50
   e6cc2:	f7fd f971 	bl	e3fa8 <malloc>
   e6cc6:	65a8      	str	r0, [r5, #88]	; 0x58
   e6cc8:	6084      	str	r4, [r0, #8]
   e6cca:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6ccc:	6004      	str	r4, [r0, #0]
   e6cce:	6044      	str	r4, [r0, #4]
   e6cd0:	611c      	str	r4, [r3, #16]
   e6cd2:	60dc      	str	r4, [r3, #12]
   e6cd4:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6cd6:	619c      	str	r4, [r3, #24]
   e6cd8:	615c      	str	r4, [r3, #20]
   e6cda:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6cdc:	62dc      	str	r4, [r3, #44]	; 0x2c
   e6cde:	629c      	str	r4, [r3, #40]	; 0x28
   e6ce0:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6ce2:	635c      	str	r4, [r3, #52]	; 0x34
   e6ce4:	631c      	str	r4, [r3, #48]	; 0x30
   e6ce6:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6ce8:	63dc      	str	r4, [r3, #60]	; 0x3c
   e6cea:	639c      	str	r4, [r3, #56]	; 0x38
   e6cec:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6cee:	645c      	str	r4, [r3, #68]	; 0x44
   e6cf0:	641c      	str	r4, [r3, #64]	; 0x40
   e6cf2:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6cf4:	64dc      	str	r4, [r3, #76]	; 0x4c
   e6cf6:	649c      	str	r4, [r3, #72]	; 0x48
   e6cf8:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6cfa:	771c      	strb	r4, [r3, #28]
   e6cfc:	6dab      	ldr	r3, [r5, #88]	; 0x58
   e6cfe:	625c      	str	r4, [r3, #36]	; 0x24
   e6d00:	6daa      	ldr	r2, [r5, #88]	; 0x58
   e6d02:	4639      	mov	r1, r7
   e6d04:	4630      	mov	r0, r6
   e6d06:	2301      	movs	r3, #1
   e6d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   e6d0c:	f000 b802 	b.w	e6d14 <__strtok_r>
   e6d10:	2003bf2c 	.word	0x2003bf2c

000e6d14 <__strtok_r>:
   e6d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   e6d16:	b948      	cbnz	r0, e6d2c <__strtok_r+0x18>
   e6d18:	6810      	ldr	r0, [r2, #0]
   e6d1a:	b938      	cbnz	r0, e6d2c <__strtok_r+0x18>
   e6d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e6d1e:	f817 6b01 	ldrb.w	r6, [r7], #1
   e6d22:	b15e      	cbz	r6, e6d3c <__strtok_r+0x28>
   e6d24:	42b5      	cmp	r5, r6
   e6d26:	d1fa      	bne.n	e6d1e <__strtok_r+0xa>
   e6d28:	b12b      	cbz	r3, e6d36 <__strtok_r+0x22>
   e6d2a:	4620      	mov	r0, r4
   e6d2c:	4604      	mov	r4, r0
   e6d2e:	460f      	mov	r7, r1
   e6d30:	f814 5b01 	ldrb.w	r5, [r4], #1
   e6d34:	e7f3      	b.n	e6d1e <__strtok_r+0xa>
   e6d36:	6014      	str	r4, [r2, #0]
   e6d38:	7003      	strb	r3, [r0, #0]
   e6d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e6d3c:	b94d      	cbnz	r5, e6d52 <__strtok_r+0x3e>
   e6d3e:	6015      	str	r5, [r2, #0]
   e6d40:	4628      	mov	r0, r5
   e6d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e6d44:	f817 6b01 	ldrb.w	r6, [r7], #1
   e6d48:	42b5      	cmp	r5, r6
   e6d4a:	d007      	beq.n	e6d5c <__strtok_r+0x48>
   e6d4c:	2e00      	cmp	r6, #0
   e6d4e:	d1f9      	bne.n	e6d44 <__strtok_r+0x30>
   e6d50:	461c      	mov	r4, r3
   e6d52:	4623      	mov	r3, r4
   e6d54:	460f      	mov	r7, r1
   e6d56:	f813 5b01 	ldrb.w	r5, [r3], #1
   e6d5a:	e7f3      	b.n	e6d44 <__strtok_r+0x30>
   e6d5c:	b115      	cbz	r5, e6d64 <__strtok_r+0x50>
   e6d5e:	2100      	movs	r1, #0
   e6d60:	7021      	strb	r1, [r4, #0]
   e6d62:	e000      	b.n	e6d66 <__strtok_r+0x52>
   e6d64:	462b      	mov	r3, r5
   e6d66:	6013      	str	r3, [r2, #0]
   e6d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000e6d6c <gettimeofday>:
   e6d6c:	4b02      	ldr	r3, [pc, #8]	; (e6d78 <gettimeofday+0xc>)
   e6d6e:	460a      	mov	r2, r1
   e6d70:	4601      	mov	r1, r0
   e6d72:	6818      	ldr	r0, [r3, #0]
   e6d74:	f000 b802 	b.w	e6d7c <_gettimeofday_r>
   e6d78:	2003bf2c 	.word	0x2003bf2c

000e6d7c <_gettimeofday_r>:
   e6d7c:	b538      	push	{r3, r4, r5, lr}
   e6d7e:	4c07      	ldr	r4, [pc, #28]	; (e6d9c <_gettimeofday_r+0x20>)
   e6d80:	2300      	movs	r3, #0
   e6d82:	4605      	mov	r5, r0
   e6d84:	4608      	mov	r0, r1
   e6d86:	4611      	mov	r1, r2
   e6d88:	6023      	str	r3, [r4, #0]
   e6d8a:	f7fa fe27 	bl	e19dc <_gettimeofday>
   e6d8e:	1c43      	adds	r3, r0, #1
   e6d90:	d102      	bne.n	e6d98 <_gettimeofday_r+0x1c>
   e6d92:	6823      	ldr	r3, [r4, #0]
   e6d94:	b103      	cbz	r3, e6d98 <_gettimeofday_r+0x1c>
   e6d96:	602b      	str	r3, [r5, #0]
   e6d98:	bd38      	pop	{r3, r4, r5, pc}
   e6d9a:	bf00      	nop
   e6d9c:	2003e7ec 	.word	0x2003e7ec

000e6da0 <dynalib_user>:
   e6da0:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   e6db0:	00000000                                ....

000e6db4 <_ZTV16JsonWriterStaticILj256EE>:
	...
   e6dbc:	000d4135 000d4149 2d2d2d2d 4745422d     5A..IA..-----BEG
   e6dcc:	43204e49 49545245 41434946 2d2d4554     IN CERTIFICATE--
   e6ddc:	0d2d2d2d 49494d0a 437a6444 2b6c4143     ---..MIIDdzCCAl+
   e6dec:	49774167 49674142 41674145 41547541     gAwIBAgIEAgAAuTA
   e6dfc:	6b67424e 696b6871 30773947 55514142     NBgkqhkiG9w0BAQU
   e6e0c:	42444146 73514d61 59514377 51515644     FADBaMQswCQYDVQQ
   e6e1c:	4a774547 520a0d4a 4d534554 41474142     GEwJJ..RTESMBAGA
   e6e2c:	43455531 514a4d68 6473466d 62746c47     1UEChMJQmFsdGltb
   e6e3c:	4d6c4a33 45774d52 56445951 454c5151     3JlMRMwEQYDVQQLE
   e6e4c:	65447077 636c4a57 6479526c 4d304e58     wpDeWJlclRydXN0M
   e6e5c:	49774953 0d445941 5151560a 6c784544     SIwIAYD..VQQDExl
   e6e6c:	78575943 31576130 556d6376 6c335167     CYWx0aW1vcmUgQ3l
   e6e7c:	4a585a69 566e6355 4243647a 39326253     iZXJUcnVzdCBSb29
   e6e8c:	34424d30 41544458 55444d77 456a4d78     0MB4XDTAwMDUxMjE
   e6e9c:	59444e34 6f464d77 440a0d58 4d314954     4NDYwMFoX..DTI1M
   e6eac:	4d785544 4e7a496a 4d776b54 57776f46     DUxMjIzNTkwMFowW
   e6ebc:	4d4c456a 41476b41 42455531 53434d68     jELMAkGA1UEBhMCS
   e6ecc:	45785555 4251416a 42564e67 43546f41     UUxEjAQBgNVBAoTC
   e6edc:	62684a55 62705248 0d793957 45545a0a     UJhbHRpbW9y..ZTE
   e6eec:	45424d54 55314147 4d784345 6c33514b     TMBEGA1UECxMKQ3l
   e6efc:	4a585a69 566e6355 4544647a 41434d69     iZXJUcnVzdDEiMCA
   e6f0c:	55314147 4d784145 466d515a 6c476473     GA1UEAxMZQmFsdGl
   e6f1c:	4a336274 4e45496c 566d5935 560a0d79     tb3JlIEN5YmVy..V
   e6f2c:	63314a48 55675133 6476396d 41434344     HJ1c3QgUm9vdDCCA
   e6f3c:	44774953 4b4a5951 68495a6f 414e6376     SIwDQYJKoZIhvcNA
   e6f4c:	42424551 67444151 41504567 41434344     QEBBQADggEPADCCA
   e6f5c:	67436f51 41424567 75454d4b 0d724b79     QoCggEBAKMEuyKr.
   e6f6c:	31446d0a 5a433658 56726d79 6e433135     .mD1X6CZymrV51Cn
   e6f7c:	69653469 474c6756 75313477 6d794b4f     i4eiVgLGw41uOKym
   e6f8c:	2b4e5a61 32655868 56514377 67793274     aZN+hXe2wCQVt2yg
   e6f9c:	4b6d7a75 36765969 6f4e6930 6a7a3653     uzmKiYv60iNoS6zj
   e6fac:	490a0d72 5141335a 55427353 6449756e     r..IZ3AQSsBUnuId
   e6fbc:	6a634d39 75366538 61316959 636e6e67     9Mcj8e6uYi1agnnc
   e6fcc:	5152672b 7a52664b 6a69704d 6a6c3353     +gRQKfRzMpijS3lj
   e6fdc:	556d7577 556f4b4e 366f4d4d 4a725776     wumUNKoUMMo6vWrJ
   e6fec:	0d4b6559 59706d0a 65577163 7a775034     YeK..mpYcqWe4Pwz
   e6ffc:	6c2f3956 2f794553 56394743 43506377     V9/lSEy/CG9VwcPC
   e700c:	4c427750 7573424b 6e643461 70334d4b     PwBLKBsua4dnKM3p
   e701c:	6a763133 46667573 4a45526f 4c394549     31vjsufFoREJIE9L
   e702c:	53717741 580a0d75 742b446d 2f465971     AwqSu..XmD+tqYF/
   e703c:	4264544c 31436b31 6d596b46 70315047     LTdB1kC1FkYmGP1p
   e704c:	6b675057 58397841 65474962 36464f76     WPgkAx9XbIGevOF6
   e705c:	41557675 68653536 2f663544 61745878     uvUA65ehD5f/xXta
   e706c:	4f357a62 0d795a54 3963640a 336b5533     bz5OTZy..dc93Uk3
   e707c:	415a797a 33547573 4e53796c 38785054     zyZAsuT3lySNTPx8
   e708c:	46436d6b 6b354263 59637670 644f3736     kmCFcB5kpvcY67Od
   e709c:	706a6875 52336c72 31374d6a 4844476f     uhjprl3RjM71oGDH
   e70ac:	31496577 792f7632 6a0a0d65 6871306c     weI12v/ye..jl0qh
   e70bc:	6b4e6471 476e774e 41436b6a 41414577     qdNkNwnGjkCAwEAA
   e70cc:	4d464e61 48774d45 56445951 424f3052     aNFMEMwHQYDVR0OB
   e70dc:	46455942 5764574f 52434354 724d6a31     BYEFOWdWTCCR1jMr
   e70ec:	56496f50 65476144 0d31717a 3345420a     PoIVDaGezq1..BE3
   e70fc:	49424d77 55314147 45774564 51772f42     wMBIGA1UdEwEB/wQ
   e710c:	59414d49 38664142 4d514143 59674477     IMAYBAf8CAQMwDgY
   e711c:	30525644 48514150 5141422f 45674144     DVR0PAQH/BAQDAgE
   e712c:	30414d47 71534347 62495347 440a0d33     GMA0GCSqGSIb3..D
   e713c:	42424551 41415551 41424934 44464351     QEBBQUAA4IBAQCFD
   e714c:	354f3246 61523947 6f464945 5437324e     F2O5G9RaEIFoN27T
   e715c:	686c6379 39394f41 4c395432 34776364     yclhAO992T9Ldcw4
   e716c:	46515136 4b61762b 65326d53 0d323954     6QQF+vaKSm2eT92.
   e717c:	6b68390a 67374954 6c764351 524e7059     .9hkTI7gQCvlYpNR
   e718c:	304c6368 6f575945 66686953 33724356     hcL0EYWoSihfVCr3
   e719c:	42447646 6b753138 32594a4d 2f455147     FvDB81ukMJY2GQE/
   e71ac:	4e4b7a73 594d4f2b 2f554533 67573374     szKN+OMY3EU/t3Wg
   e71bc:	6a0a0d78 73537a6b 37304677 58313572     x..jkzSswF07r51X
   e71cc:	47496467 2f77396e 68635a78 6835424d     gdIGn9w/xZchMB5h
   e71dc:	2f466762 5a2b2b58 446a4752 74434138     bgF/X++ZRGjD8ACt
   e71ec:	4e536850 31456b7a 65786b61 6f2f6968     PhSNzkE1akxehi/o
   e71fc:	0d307243 6e70450a 57306f33 787a3443     Cr0..Epn3o0WC4zx
   e720c:	325a3965 69637465 37436665 354a7049     e9Z2etciefC7IpJ5
   e721c:	5242434f 3166624c 73576277 31375961     OCBRLbf1wbWsaY71
   e722c:	2b68356b 44767a33 36796e79 66374737     k5h+3zvDyny67G7f
   e723c:	68495579 6b0a0d7a 34694c73 6d4e6178     yUIhz..ksLi4xaNm
   e724c:	7143496a 33593434 45516b65 4e2b3565     jICq44Y3ekQEe5+N
   e725c:	72517561 6c77347a 4d517248 5a6e327a     auQrz4wlHrQMz2nZ
   e726c:	2f312f51 59653649 52483973 58427743     Q/1/I6eYs9HRCwBX
   e727c:	74647362 0d534c54 4939520a 44744c34     bsdtTLS..R9I4LtD
   e728c:	7764672b 36686179 7a6a3731 654f2f56     +gdwyah617jzV/Oe
   e729c:	6e524842 4c454a44 6d7a5971 2d0a0d70     BHRnDJELqYzmp..-
   e72ac:	2d2d2d2d 20444e45 54524543 43494649     ----END CERTIFIC
   e72bc:	2d455441 2d2d2d2d 64000a0d 63697665     ATE-----...devic
   e72cc:	002f7365 73656d2f 65676173 76652f73     es/./messages/ev
   e72dc:	73746e65 6d2f002f 61737365 2f736567     ents/./messages/
   e72ec:	69766564 6f626563 2f646e75 69240023     devicebound/#.$i
   e72fc:	7568746f 656d2f62 646f6874 4f502f73     othub/methods/PO
   e730c:	232f5453 6f692400 62756874 74656d2f     ST/#.$iothub/met
   e731c:	73646f68 7365722f 612f002f 762d6970     hods/res/./api-v
   e732c:	69737265 323d6e6f 2d363130 312d3131     ersion=2016-11-1
   e733c:	3f2f0034 6f692400 62756874 74656d2f     4./?.$iothub/met
   e734c:	73646f68 534f502f 74002f54 00706d65     hods/POST/.temp.
   e735c:	696d7568 79746964 676f7400 4c656c67     humidity.toggleL
   e736c:	6c006465 74686769 6e655300 676e6964     ed.light.Sending
   e737c:	766e4520 6c615620 6f690073 65632d74      Env Vals.iot-ce
   e738c:	6172746e 65642f6c 00677562 69766564     ntral/debug.devi
   e739c:	64696563 546f4900 62754820 746f4e20     ceid.IoT Hub Not
   e73ac:	6e6f4320 7463656e 00216465 2d766e65      Connected!.env-
   e73bc:	736c6176 6d655400 25203a70 75480066     vals.Temp: %f.Hu
   e73cc:	6964696d 203a7974 6c006625 74686769     midity: %f.light
   e73dc:	74656d2d 6c2f7265 6c657665 61657200     -meter/level.rea
   e73ec:	6e655364 73726f73 61655200 65532064     dSensors.Read Se
   e73fc:	726f736e 72662073 49206d6f 4320546f     nsors from IoT C
   e740c:	72746e65 00216c61 67676f54 4c20656c     entral!.Toggle L
   e741c:	66204445 206d6f72 20546f49 746e6543     ED from IoT Cent
   e742c:	216c6172 736f4800 6d614e74 6f693d65     ral!.HostName=io
   e743c:	612d6374 62643066 2d656564 35646230     tc-af0dbdee-0bd5
   e744c:	3632342d 36612d32 392d6235 65653930     -4262-a65b-909ee
   e745c:	30353733 2e343036 72757a61 65642d65     3750604.azure-de
   e746c:	65636976 656e2e73 65443b74 65636976     vices.net;Device
   e747c:	623d6449 64333164 2d383835 38666233     Id=bd13d588-3bf8
   e748c:	3862342d 31382d33 632d3465 39616430     -4b83-81e4-c0da9
   e749c:	32643436 3b366238 72616853 63416465     64d28b6;SharedAc
   e74ac:	73736563 3d79654b 5139494c 4b464f49     cessKey=LI9QIOFK
   e74bc:	494b6237 644e5a74 634a6d6d 4f58542f     7bKItZNdmmJc/TXO
   e74cc:	766d7954 737a714b 6a577650 3565676c     TymvKqzsPvWjlge5
   e74dc:	3d594b76 00000000                       vKY=....

000e74e4 <_ZTV10JsonBuffer>:
	...
   e74ec:	000d4fc9 000d4fe5                       .O...O..

000e74f4 <_ZTV10JsonWriter>:
	...
   e74fc:	000d4ff9 000d500d 00756c25 78343025     .O...P..%lu.%04x
   e750c:	25755c00 00583430 65757274 6c616600     .\u%04X.true.fal
   e751c:	25006573 00662a2e 6c2a2e25 6c250066     se.%.*f.%.*lf.%l
   e752c:	3f2f0066 64697224 003b003d 74736f48     f./?$rid=.;.Host
   e753c:	656d614e 76654400 49656369 68530064     Name.DeviceId.Sh
   e754c:	64657261 65636341 654b7373 31300079     aredAccessKey.01
   e755c:	35343332 39383736 64636261 25006665     23456789abcdef.%
   e756c:	65642f73 65636976 73252f73 0064250a     s/devices/%s.%d.
   e757c:	72616853 63416465 73736563 6e676953     SharedAccessSign
   e758c:	72757461 72732065 2f73253d 69766564     ature sr=%s/devi
   e759c:	2f736563 73267325 003d6769 3d657326     ces/%s&sig=.&se=
   e75ac:	00006425                                %d..

000e75b0 <_ZTV11Sha256Class>:
	...
   e75b8:	000d56af 000d56b1 000d584f 000e4b9d     .V...V..OX...K..
   e75c8:	514d0600 70647349 4d040003 04545451     ..MQIsdp...MQTT.
   e75d8:	20212020 2e642500 252e6425 64252e64       ! .%d.%d.%d.%d
	...

000e75e9 <_ZL14base64_dec_map>:
   e75e9:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
   e75f9:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
   e7609:	7f7f7f7f 7f7f7f7f 3e7f7f7f 3f7f7f7f     ...........>...?
   e7619:	37363534 3b3a3938 7f7f3d3c 7f7f407f     456789:;<=...@..
   e7629:	0201007f 06050403 0a090807 0e0d0c0b     ................
   e7639:	1211100f 16151413 7f191817 7f7f7f7f     ................
   e7649:	1c1b1a7f 201f1e1d 24232221 28272625     ....... !"#$%&'(
   e7659:	2c2b2a29 302f2e2d 7f333231 7f7f7f7f     )*+,-./0123.....
   e7669:	04000000                                         ...

000e766c <_ZL16aes_256_ecb_info>:
   e766c:	00000104 00000100 000e774c 00000010     ........Lw......
   e767c:	00000000 00000010 000e7710              .........w..

000e7688 <_ZL16aes_128_ecb_info>:
   e7688:	00000102 00000080 000e7764 00000010     ........dw......
   e7698:	00000000 00000010 000e7710              .........w..

000e76a4 <_ZL12gcm_aes_info>:
   e76a4:	00000002 00000000 000d9227 000d9227     ........'...'...
   e76b4:	000d920f 000d91fd                       ........

000e76bc <mbedtls_cipher_definitions>:
   e76bc:	00000002 000e7688 00000003 000e7770     .....v......pw..
   e76cc:	00000004 000e766c 0000000e 000e778c     ....lv.......w..
   e76dc:	0000000f 000e76f4 00000010 000e77a8     .....v.......w..
	...

000e76f4 <_ZL16aes_192_gcm_info>:
   e76f4:	0000060f 000000c0 000e7734 0000000c     ........4w......
   e7704:	00000001 00000010 000e76a4              .........v..

000e7710 <_ZL8aes_info>:
   e7710:	00000002 000d9263 000d925f 000d925b     ....c..._...[...
   e7720:	000d9243 000d9231 2d534541 2d363532     C...1...AES-256-
   e7730:	004d4347 2d534541 2d323931 004d4347     GCM.AES-192-GCM.
   e7740:	2d534541 2d383231 004d4347 2d534541     AES-128-GCM.AES-
   e7750:	2d363532 00424345 2d534541 2d323931     256-ECB.AES-192-
   e7760:	00424345 2d534541 2d383231 00424345     ECB.AES-128-ECB.

000e7770 <_ZL16aes_192_ecb_info>:
   e7770:	00000103 000000c0 000e7758 00000010     ........Xw......
   e7780:	00000000 00000010 000e7710              .........w..

000e778c <_ZL16aes_128_gcm_info>:
   e778c:	0000060e 00000080 000e7740 0000000c     ........@w......
   e779c:	00000001 00000010 000e76a4              .........v..

000e77a8 <_ZL16aes_256_gcm_info>:
   e77a8:	00000610 00000100 000e7728 0000000c     ........(w......
   e77b8:	00000001 00000010 000e76a4 00000000     .........v......

000e77c8 <_ZL5last4>:
	...
   e77d0:	00001c20 00000000 00003840 00000000      .......@8......
   e77e0:	00002460 00000000 00007080 00000000     `$.......p......
   e77f0:	00006ca0 00000000 000048c0 00000000     .l.......H......
   e7800:	000054e0 00000000 0000e100 00000000     .T..............
   e7810:	0000fd20 00000000 0000d940 00000000      .......@.......
   e7820:	0000c560 00000000 00009180 00000000     `...............
   e7830:	00008da0 00000000 0000a9c0 00000000     ................
   e7840:	0000b5e0 00000000                       ........

000e7848 <CSWTCH.39>:
   e7848:	000e785c 000e788c 000e791c 000e78bc     \x...x...y...x..
   e7858:	000e78ec                                .x..

000e785c <mbedtls_sha1_info>:
   e785c:	00000004 000e7e21 00000014 00000040     ....!~......@...
   e786c:	000d9bdf 000d9bdb 000d9bd7 000ddcb9     ................
   e787c:	000d9bc1 000d9baf 000d9bab 000d9ba7     ................

000e788c <mbedtls_sha224_info>:
   e788c:	00000005 000e7c92 0000001c 00000040     .....|......@...
   e789c:	000d9c27 000d9c23 000d9c1f 000d9c13     '...#...........
   e78ac:	000d9bfd 000d9beb 000d9be7 000d9be3     ................

000e78bc <mbedtls_sha384_info>:
   e78bc:	00000007 000e8b39 00000030 00000080     ....9...0.......
   e78cc:	000d9c77 000d9c73 000d9c6f 000d9c63     w...s...o...c...
   e78dc:	000d9c4d 000d9c3b 000d9c37 000d9c33     M...;...7...3...

000e78ec <mbedtls_sha512_info>:
   e78ec:	00000008 000e7cf5 00000040 00000080     .....|..@.......
   e78fc:	000d9c7d 000d9c73 000d9c6f 000d9c69     }...s...o...i...
   e790c:	000d9c4d 000d9c3b 000d9c37 000d9c33     M...;...7...3...

000e791c <mbedtls_sha256_info>:
   e791c:	00000006 000e8b59 00000020 00000040     ....Y... ...@...
   e792c:	000d9c2d 000d9c23 000d9c1f 000d9c19     -...#...........
   e793c:	000d9bfd 000d9beb 000d9be7 000d9be3     ................

000e794c <_ZL18oid_x520_attr_type>:
   e794c:	000e80f4 00000003 000e80f8 000e8109     ................
   e795c:	000e9352 000e8115 00000003 000e8119     R...............
   e796c:	000e812b 000e7d95 000e8133 00000003     +....}..3.......
   e797c:	000e8137 000e8146 000e814f 000e8151     7...F...O...Q...
   e798c:	00000003 000e8155 000e8161 000e8167     ....U...a...g...
   e799c:	000e816a 00000003 000e816e 000e8185     j.......n.......
   e79ac:	000e8192 000e8194 00000003 000e8198     ................
   e79bc:	000e81b5 000e81be 000e81c1 00000009     ................
   e79cc:	000e81cb 000e81d8 000e81cb 000e81e7     ................
   e79dc:	00000003 000e81eb 000e81fe 000e81f1     ................
   e79ec:	000e820c 00000003 000e8210 000e8224     ............$...
   e79fc:	000e8216 000e8233 00000003 000e8237     ....3.......7...
   e7a0c:	000e8248 000e823d 000e8254 00000003     H...=...T.......
   e7a1c:	000e8258 000e8266 000e826e 000e8271     X...f...n...q...
   e7a2c:	00000003 000e8275 000e8285 000e8290     ....u...........
   e7a3c:	000e8293 00000003 000e8297 000e82a6     ................
   e7a4c:	000e829d 000e82af 00000003 000e82b3     ................
   e7a5c:	000e82cd 000e82b9 000e82e2 00000003     ................
   e7a6c:	000e82e6 000e82f2 000e82ec 000e82f8     ................
   e7a7c:	00000003 000e82fc 000e830e 000e8302     ................
   e7a8c:	000e832b 00000003 000e832f 000e833f     +......./...?...
   e7a9c:	000e8335 000e8349 0000000a 000e8354     5...I.......T...
   e7aac:	000e8367 000e8378 000e837b 00000003     g...x...{.......
   e7abc:	000e837f 000e8396 000e8385 00000000     ................
	...

000e7adc <_ZL17oid_ext_key_usage>:
   e7adc:	000e7f0d 00000008 000e7f16 000e7f27     ............'...
   e7aec:	000e7f45 00000008 000e7f4e 000e7f5f     E.......N..._...
   e7afc:	000e7f7d 00000008 000e7f86 000e7f98     }...............
   e7b0c:	000e7fa5 00000008 000e7fae 000e7fc4     ................
   e7b1c:	000e7fd6 00000008 000e7fdf 000e7ff2     ................
   e7b2c:	000e8000 00000008 000e8009 000e801b     ................
	...

000e7b4c <_ZL10oid_pk_alg>:
   e7b4c:	000e7d97 00000009 000e7da1 000e7daf     .}.......}...}..
   e7b5c:	00000001 000e7db3 00000007 000e7dbb     .....}.......}..
   e7b6c:	000e7dca 00000002 000e7dd9 00000005     .}.......}......
   e7b7c:	000e7ddf 000e7de7 00000003 00000000     .}...}..........
	...

000e7b9c <_ZL14oid_cipher_alg>:
   e7b9c:	000e7d67 00000005 000e7d6d 000e7c43     g}......m}..C|..
   e7bac:	00000021 000e7d74 00000008 000e7d7d     !...t}......}}..
   e7bbc:	000e7d8a 00000025 00000000 00000000     .}..%...........
	...
   e7bd8:	8648862a 0c010df7 70000301 69576562     *.H........pbeWi
   e7be8:	48536874 646e4141 654b2d33 69725479     thSHAAnd3-KeyTri
   e7bf8:	44656c70 432d5345 50004342 77204542     pleDES-CBC.PBE w
   e7c08:	20687469 31414853 646e6120 4b2d3320     ith SHA1 and 3-K
   e7c18:	33207965 00534544 8648862a 0c010df7     ey 3DES.*.H.....
   e7c28:	70000401 69576562 48536874 646e4141     ...pbeWithSHAAnd
   e7c38:	654b2d32 69725479 44656c70 432d5345     2-KeyTripleDES-C
   e7c48:	50004342 77204542 20687469 31414853     BC.PBE with SHA1
   e7c58:	646e6120 4b2d3220 33207965 00534544      and 2-Key 3DES.
   e7c68:	8648862a 07020df7 616d6800 41485363     *.H......hmacSHA
   e7c78:	4d480031 532d4341 312d4148 48862a00     1.HMAC-SHA-1.*.H
   e7c88:	020df786 6d680008 48536361 34323241     ......hmacSHA224
   e7c98:	414d4800 48532d43 32322d41 862a0034     .HMAC-SHA-224.*.
   e7ca8:	0df78648 68000902 5363616d 35324148     H......hmacSHA25
   e7cb8:	4d480036 532d4341 322d4148 2a003635     6.HMAC-SHA-256.*
   e7cc8:	f7864886 000a020d 63616d68 33414853     .H......hmacSHA3
   e7cd8:	48003438 2d43414d 2d414853 00343833     84.HMAC-SHA-384.
   e7ce8:	8648862a 0b020df7 616d6800 41485363     *.H......hmacSHA
   e7cf8:	00323135 43414d48 4148532d 3231352d     512.HMAC-SHA-512
   e7d08:	030e2b00 69001a02 68732d64 60003161     .+.....id-sha1.`
   e7d18:	65014886 04020403 2d646900 32616873     .H.e.....id-sha2
   e7d28:	60003432 65014886 01020403 2d646900     24.`.H.e.....id-
   e7d38:	32616873 60003635 65014886 02020403     sha256.`.H.e....
   e7d48:	2d646900 33616873 60003438 65014886     .id-sha384.`.H.e
   e7d58:	03020403 2d646900 35616873 2b003231     .....id-sha512.+
   e7d68:	0702030e 73656400 00434243 8648862a     .....desCBC.*.H.
   e7d78:	07030df7 73656400 6564652d 62632d33     .....des-ede3-cb
   e7d88:	45440063 44452d53 432d3345 2a004342     c.DES-EDE3-CBC.*
   e7d98:	f7864886 0101010d 61737200 72636e45     .H.......rsaEncr
   e7da8:	69747079 52006e6f 2a004153 3dce4886     yption.RSA.*.H.=
   e7db8:	69000102 63652d64 6c627550 654b6369     ...id-ecPublicKe
   e7dc8:	65470079 6972656e 43452063 79656b20     y.Generic EC key
   e7dd8:	04812b00 69000c01 63652d64 45004844     .+.....id-ecDH.E
   e7de8:	656b2043 6f662079 43452072 2a004844     C key for ECDH.*
   e7df8:	f7864886 0501010d 61687300 6957312d     .H.......sha-1Wi
   e7e08:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
   e7e18:	20415352 68746977 41485320 862a0031     RSA with SHA1.*.
   e7e28:	0df78648 000e0101 32616873 69573432     H.......sha224Wi
   e7e38:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
   e7e48:	20415352 68746977 41485320 3432322d     RSA with SHA-224
   e7e58:	48862a00 010df786 73000b01 35326168     .*.H.......sha25
   e7e68:	74695736 41535268 72636e45 69747079     6WithRSAEncrypti
   e7e78:	52006e6f 77204153 20687469 2d414853     on.RSA with SHA-
   e7e88:	00363532 8648862a 01010df7 6873000c     256.*.H.......sh
   e7e98:	34383361 68746957 45415352 7972636e     a384WithRSAEncry
   e7ea8:	6f697470 5352006e 69772041 53206874     ption.RSA with S
   e7eb8:	332d4148 2a003438 f7864886 0d01010d     HA-384.*.H......
   e7ec8:	61687300 57323135 52687469 6e454153     .sha512WithRSAEn
   e7ed8:	70797263 6e6f6974 41535200 74697720     cryption.RSA wit
   e7ee8:	48532068 31352d41 0e2b0032 001d0203     h SHA-512.+.....
   e7ef8:	8648862a 01010df7 5352000a 41535341     *.H.......RSASSA
   e7f08:	5353502d 01062b00 03070505 64690001     -PSS.+........id
   e7f18:	2d706b2d 76726573 75417265 54006874     -kp-serverAuth.T
   e7f28:	5720534c 53206265 65767265 75412072     LS Web Server Au
   e7f38:	6e656874 61636974 6e6f6974 01062b00     thentication.+..
   e7f48:	03070505 64690002 2d706b2d 65696c63     ......id-kp-clie
   e7f58:	7541746e 54006874 5720534c 43206265     ntAuth.TLS Web C
   e7f68:	6e65696c 75412074 6e656874 61636974     lient Authentica
   e7f78:	6e6f6974 01062b00 03070505 64690003     tion.+........id
   e7f88:	2d706b2d 65646f63 6e676953 00676e69     -kp-codeSigning.
   e7f98:	65646f43 67695320 676e696e 01062b00     Code Signing.+..
   e7fa8:	03070505 64690004 2d706b2d 69616d65     ......id-kp-emai
   e7fb8:	6f72506c 74636574 006e6f69 616d2d45     lProtection.E-ma
   e7fc8:	50206c69 65746f72 6f697463 062b006e     il Protection.+.
   e7fd8:	07050501 69000803 706b2d64 6d69742d     .......id-kp-tim
   e7fe8:	61745365 6e69706d 69540067 5320656d     eStamping.Time S
   e7ff8:	706d6174 00676e69 0501062b 09030705     tamping.+.......
   e8008:	2d646900 4f2d706b 53505343 696e6769     .id-kp-OCSPSigni
   e8018:	4f00676e 20505343 6e676953 00676e69     ng.OCSP Signing.
   e8028:	00131d55 632d6469 61622d65 43636973     U...id-ce-basicC
   e8038:	74736e6f 6e696172 42007374 63697361     onstraints.Basic
   e8048:	6e6f4320 61727473 73746e69 0f1d5500      Constraints.U..
   e8058:	2d646900 6b2d6563 73557965 00656761     .id-ce-keyUsage.
   e8068:	00251d55 632d6469 78652d65 79654b74     U.%.id-ce-extKey
   e8078:	67617355 78450065 646e6574 4b206465     Usage.Extended K
   e8088:	55207965 65676173 111d5500 2d646900     ey Usage.U...id-
   e8098:	732d6563 656a6275 6c417463 6d614e74     ce-subjectAltNam
   e80a8:	75530065 63656a62 6c412074 614e2074     e.Subject Alt Na
   e80b8:	6000656d 86014886 010142f8 2d646900     me.`.H...B...id-
   e80c8:	7374656e 65706163 7265632d 70797474     netscape-certtyp
   e80d8:	654e0065 61637374 43206570 69747265     e.Netscape Certi
   e80e8:	61636966 54206574 00657079 00030455     ficate Type.U...
   e80f8:	612d6469 6f632d74 6e6f6d6d 656d614e     id-at-commonName
   e8108:	6d6f4300 206e6f6d 656d614e 06045500     .Common Name.U..
   e8118:	2d646900 632d7461 746e756f 614e7972     .id-at-countryNa
   e8128:	4300656d 746e756f 55007972 69000704     me.Country.U...i
   e8138:	74612d64 636f6c2d 74696c61 6f4c0079     d-at-locality.Lo
   e8148:	696c6163 4c007974 08045500 2d646900     cality.L.U...id-
   e8158:	732d7461 65746174 61745300 53006574     at-state.State.S
   e8168:	04550054 6469000a 2d74612d 6167726f     T.U...id-at-orga
   e8178:	617a696e 6e6f6974 656d614e 67724f00     nizationName.Org
   e8188:	7a696e61 6f697461 004f006e 000b0455     anization.O.U...
   e8198:	612d6469 726f2d74 696e6167 6974617a     id-at-organizati
   e81a8:	6c616e6f 74696e55 656d614e 67724f00     onalUnitName.Org
   e81b8:	696e5520 554f0074 48862a00 010df786      Unit.OU.*.H....
   e81c8:	65000109 6c69616d 72646441 00737365     ...emailAddress.
   e81d8:	616d2d45 61206c69 65726464 55007373     E-mail address.U
   e81e8:	69000504 74612d64 7265732d 4e6c6169     ...id-at-serialN
   e81f8:	65626d75 65530072 6c616972 6d756e20     umber.Serial num
   e8208:	00726562 00100455 612d6469 6f702d74     ber.U...id-at-po
   e8218:	6c617473 72646441 00737365 74736f50     stalAddress.Post
   e8228:	61206c61 65726464 55007373 69001104     al address.U...i
   e8238:	74612d64 736f702d 436c6174 0065646f     d-at-postalCode.
   e8248:	74736f50 63206c61 0065646f 00040455     Postal code.U...
   e8258:	612d6469 75732d74 6d614e72 75530065     id-at-surName.Su
   e8268:	6d616e72 4e530065 2a045500 2d646900     rname.SN.U.*.id-
   e8278:	672d7461 6e657669 656d614e 76694700     at-givenName.Giv
   e8288:	6e206e65 00656d61 55004e47 69002b04     en name.GN.U.+.i
   e8298:	74612d64 696e692d 6c616974 6e490073     d-at-initials.In
   e82a8:	61697469 5500736c 69002c04 74612d64     itials.U.,.id-at
   e82b8:	6e65672d 74617265 516e6f69 696c6175     -generationQuali
   e82c8:	72656966 6e654700 74617265 206e6f69     fier.Generation 
   e82d8:	6c617571 65696669 04550072 6469000c     qualifier.U...id
   e82e8:	2d74612d 6c746974 69540065 00656c74     -at-title.Title.
   e82f8:	002e0455 612d6469 6e642d74 6c617551     U...id-at-dnQual
   e8308:	65696669 69440072 6e697473 73697567     ifier.Distinguis
   e8318:	20646568 656d614e 61757120 6966696c     hed Name qualifi
   e8328:	55007265 69004104 74612d64 6573702d     er.U.A.id-at-pse
   e8338:	6e6f6475 50006d79 64756573 6d796e6f     udonym.Pseudonym
   e8348:	26920900 2cf29389 00190164 642d6469     ...&...,d...id-d
   e8358:	69616d6f 6d6f436e 656e6f70 4400746e     omainComponent.D
   e8368:	69616d6f 6f63206e 6e6f706d 00746e65     omain component.
   e8378:	55004344 69002d04 74612d64 696e752d     DC.U.-.id-at-uni
   e8388:	49657571 746e6564 65696669 6e550072     queIdentifier.Un
   e8398:	65757169 65644920 6669746e 00726569     ique Identifier.

000e83a8 <_ZL18oid_pkcs12_pbe_alg>:
   e83a8:	000e7bd8 0000000a 000e7be3 000e7c03     .{.......{...|..
   e83b8:	00002504 000e7c20 0000000a 000e7c2b     .%.. |......+|..
   e83c8:	000e7c4b 00002304 00000000 00000000     K|...#..........
	...

000e83e4 <_ZL10oid_md_alg>:
   e83e4:	000e7d09 00000005 000e7d0f 000e7c7f     .}.......}...|..
   e83f4:	00000004 000e7d17 00000009 000e7d21     .....}......!}..
   e8404:	000e7e51 00000005 000e7d2b 00000009     Q~......+}......
   e8414:	000e7d35 000e7e84 00000006 000e7d3f     5}...~......?}..
   e8424:	00000009 000e7d49 000e7eb7 00000007     ....I}...~......
   e8434:	000e7d53 00000009 000e7d5d 000e7eea     S}......]}...~..
   e8444:	00000008 00000000 00000000 00000000     ................
	...

000e845c <_ZL11oid_sig_alg>:
   e845c:	000e7df7 00000009 000e7e01 000e7e18     .}.......~...~..
   e846c:	00000104 000e7e26 00000009 000e7e30     ....&~......0~..
   e847c:	000e7e48 00000105 000e7e59 00000009     H~......Y~......
   e848c:	000e7e63 000e7e7b 00000106 000e7e8c     c~..{~.......~..
   e849c:	00000009 000e7e96 000e7eae 00000107     .....~...~......
   e84ac:	000e7ebf 00000009 000e7ec9 000e7ee1     .~.......~...~..
   e84bc:	00000108 000e7ef2 00000005 000e7e01     .....~.......~..
   e84cc:	000e7e18 00000104 000e7ef8 00000009     .~.......~......
   e84dc:	000e7f02 000e7f02 00000600 00000000     ................
	...

000e84fc <_ZL11oid_md_hmac>:
   e84fc:	000e7c68 00000008 000e7c71 000e7c7a     h|......q|..z|..
   e850c:	00000004 000e7c85 00000008 000e7c8e     .....|.......|..
   e851c:	000e7c99 00000005 000e7ca6 00000008     .|.......|......
   e852c:	000e7caf 000e7cba 00000006 000e7cc7     .|...|.......|..
   e853c:	00000008 000e7cd0 000e7cdb 00000007     .....|...|......
   e854c:	000e7ce8 00000008 000e7cf1 000e7cfc     .|.......|...|..
   e855c:	00000008 00000000 00000000 00000000     ................
	...

000e8574 <_ZL12oid_x509_ext>:
   e8574:	000e8028 00000003 000e802c 000e8043     (.......,...C...
   e8584:	00000100 000e8055 00000003 000e8059     ....U.......Y...
   e8594:	000e8087 00000004 000e8068 00000003     ........h.......
   e85a4:	000e806c 000e807e 00000800 000e8091     l...~...........
   e85b4:	00000003 000e8095 000e80aa 00000020     ............ ...
   e85c4:	000e80bb 00000009 000e80c5 000e80da     ................
   e85d4:	00010000 00000000 00000000 00000000     ................
	...
   e85ec:	636f7250 7079542d 34203a65 434e452c     Proc-Type: 4,ENC
   e85fc:	54505952 69004445 6c61766e 50206469     RYPTED.invalid P
   e860c:	7372004b 004e2e61 2e617372 00000045     K.rsa.N.rsa.E...

000e861c <mbedtls_rsa_info>:
   e861c:	00000001 000e7daf 000da291 000da22f     .....}....../...
   e862c:	000da375 000da335 000da2e9 000da29d     u...5...........
   e863c:	000da28d 000da273 000da261 000da23d     ....s...a...=...
   e864c:	8648862a 05010df7 862a000c 0df78648     *.H.......*.H...
   e865c:	01010c01 48862a00 010df786 2d000d05     .....*.H.......-
   e866c:	2d2d2d2d 20444e45 20415352 56495250     ----END RSA PRIV
   e867c:	20455441 2d59454b 2d2d2d2d 2d2d2d00     ATE KEY-----.---
   e868c:	45422d2d 204e4947 20415352 56495250     --BEGIN RSA PRIV
   e869c:	20455441 2d59454b 2d2d2d2d 2d2d2d00     ATE KEY-----.---
   e86ac:	4e452d2d 52502044 54415649 454b2045     --END PRIVATE KE
   e86bc:	2d2d2d59 2d002d2d 2d2d2d2d 49474542     Y-----.-----BEGI
   e86cc:	5250204e 54415649 454b2045 2d2d2d59     N PRIVATE KEY---
   e86dc:	2d002d2d 2d2d2d2d 20444e45 52434e45     --.-----END ENCR
   e86ec:	45545059 52502044 54415649 454b2045     YPTED PRIVATE KE
   e86fc:	2d2d2d59 2d002d2d 2d2d2d2d 49474542     Y-----.-----BEGI
   e870c:	4e45204e 50595243 20444554 56495250     N ENCRYPTED PRIV
   e871c:	20455441 2d59454b 2d2d2d2d 2d2d2d00     ATE KEY-----.---
   e872c:	4e452d2d 55502044 43494c42 59454b20     --END PUBLIC KEY
   e873c:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
   e874c:	42555020 2043494c 2d59454b 2d2d2d2d      PUBLIC KEY-----
   e875c:	05030200 110d0b07 1f1d1713 2f2b2925     ............%)+/
   e876c:	433d3b35 534f4947 67656159 7f716d6b     5;=CGIOSYaegkmq.
   e877c:	958b8983 a7a39d97 bfb5b3ad d3c7c5c1     ................
   e878c:	e9e5e3df 00fbf1ef                       ........

000e8794 <_ZL1K>:
   e8794:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   e87a4:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   e87b4:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   e87c4:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   e87d4:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   e87e4:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   e87f4:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   e8804:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   e8814:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   e8824:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   e8834:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   e8844:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   e8854:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   e8864:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   e8874:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   e8884:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   e8894:	00000000                                ....

000e8898 <_ZL1K>:
   e8898:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
   e88a8:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
   e88b8:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
   e88c8:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
   e88d8:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
   e88e8:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
   e88f8:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
   e8908:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
   e8918:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
   e8928:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
   e8938:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
   e8948:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
   e8958:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
   e8968:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
   e8978:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
   e8988:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
   e8998:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
   e89a8:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
   e89b8:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
   e89c8:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
   e89d8:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
   e89e8:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
   e89f8:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
   e8a08:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
   e8a18:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
   e8a28:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
   e8a38:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
   e8a48:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
   e8a58:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
   e8a68:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
   e8a78:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
   e8a88:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
   e8a98:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
   e8aa8:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
   e8ab8:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
   e8ac8:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
   e8ad8:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
   e8ae8:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
   e8af8:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
   e8b08:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl
   e8b18:	6e6b6e75 006e776f 2d534c54 2d415352     unknown.TLS-RSA-
   e8b28:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
   e8b38:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
   e8b48:	48544957 5345412d 3832312d 4d43472d     WITH-AES-128-GCM
   e8b58:	4148532d 00363532                       -SHA256.

000e8b60 <_ZL23ciphersuite_definitions>:
   e8b60:	0000009d 000e8b20 00010710 00000003     .... ...........
   e8b70:	00000003 00000003 00000003 00000000     ................
   e8b80:	0000009c 000e8b40 0001060e 00000003     ....@...........
   e8b90:	00000003 00000003 00000003 00000000     ................
   e8ba0:	00000000 000e7da0 00000000 00000000     .....}..........
	...

000e8bc0 <_ZL22ciphersuite_preference>:
   e8bc0:	0000c02c 0000c030 0000009f 0000c0ad     ,...0...........
   e8bd0:	0000c09f 0000c024 0000c028 0000006b     ....$...(...k...
   e8be0:	0000c00a 0000c014 00000039 0000c0af     ........9.......
   e8bf0:	0000c0a3 0000c087 0000c08b 0000c07d     ............}...
   e8c00:	0000c073 0000c077 000000c4 00000088     s...w...........
   e8c10:	0000c02b 0000c02f 0000009e 0000c0ac     +.../...........
   e8c20:	0000c09e 0000c023 0000c027 00000067     ....#...'...g...
   e8c30:	0000c009 0000c013 00000033 0000c0ae     ........3.......
   e8c40:	0000c0a2 0000c086 0000c08a 0000c07c     ............|...
   e8c50:	0000c072 0000c076 000000be 00000045     r...v.......E...
   e8c60:	0000c008 0000c012 00000016 000000ab     ................
   e8c70:	0000c0a7 0000c038 000000b3 0000c036     ....8.......6...
   e8c80:	00000091 0000c091 0000c09b 0000c097     ................
   e8c90:	0000c0ab 000000aa 0000c0a6 0000c037     ............7...
   e8ca0:	000000b2 0000c035 00000090 0000c090     ....5...........
   e8cb0:	0000c096 0000c09a 0000c0aa 0000c034     ............4...
   e8cc0:	0000008f 0000c0ff 0000009d 0000c09d     ................
   e8cd0:	0000003d 00000035 0000c032 0000c02a     =...5...2...*...
   e8ce0:	0000c00f 0000c02e 0000c026 0000c005     ........&.......
   e8cf0:	0000c0a1 0000c07b 000000c0 00000084     ....{...........
   e8d00:	0000c08d 0000c079 0000c089 0000c075     ....y.......u...
   e8d10:	0000009c 0000c09c 0000003c 0000002f     ........<.../...
   e8d20:	0000c031 0000c029 0000c00e 0000c02d     1...).......-...
   e8d30:	0000c025 0000c004 0000c0a0 0000c07a     %...........z...
   e8d40:	000000ba 00000041 0000c08c 0000c078     ....A.......x...
   e8d50:	0000c088 0000c074 0000000a 0000c00d     ....t...........
   e8d60:	0000c003 000000ad 000000b7 00000095     ................
   e8d70:	0000c093 0000c099 000000ac 000000b6     ................
   e8d80:	00000094 0000c092 0000c098 00000093     ................
   e8d90:	000000a9 0000c0a5 000000af 0000008d     ................
   e8da0:	0000c08f 0000c095 0000c0a9 000000a8     ................
   e8db0:	0000c0a4 000000ae 0000008c 0000c08e     ................
   e8dc0:	0000c094 0000c0a8 0000008b 0000c007     ................
   e8dd0:	0000c011 0000c033 0000008e 00000005     ....3...........
   e8de0:	00000004 0000c00c 0000c002 00000092     ................
   e8df0:	0000008a 00000015 00000009 0000c006     ................
   e8e00:	0000c010 0000c03b 0000c03a 0000c039     ....;...:...9...
   e8e10:	000000b5 000000b4 0000002d 0000003b     ........-...;...
   e8e20:	00000002 00000001 0000c00b 0000c001     ................
   e8e30:	000000b9 000000b8 0000002e 000000b1     ................
   e8e40:	000000b0 0000002c 00000000              ....,.......

000e8e4c <CSWTCH.282>:
   e8e4c:	05040302 696c6306 20746e65 696e6966     .....client fini
   e8e5c:	64656873 72657300 20726576 696e6966     shed.server fini
   e8e6c:	64656873 73616d00 20726574 72636573     shed.master secr
   e8e7c:	6b007465 65207965 6e617078 6e6f6973     et.key expansion
   e8e8c:	4c535300 302e3376 534c5400 302e3176     .SSLv3.0.TLSv1.0
   e8e9c:	534c5400 312e3176 534c5400 322e3176     .TLSv1.1.TLSv1.2
   e8eac:	00000000                                ....

000e8eb0 <_ZL18mfl_code_to_length>:
   e8eb0:	00002000 00000200 00000400 00000800     . ..............
   e8ec0:	00001000 00202b20 2500202c 3f003d73     .... + ., .%s=.?
   e8ed0:	3a003d3f 32302500 00732558 2e2e2e2e     ?=.:.%02X%s.....
   e8ee0:	3f3f3f00 20732500 2079656b 657a6973     .???.%s key size
   e8ef0:	00000000                                ....

000e8ef4 <_ZL23x509_crt_verify_strings>:
   e8ef4:	00000001 000e92bc 00000002 000e92e1     ................
   e8f04:	00000004 000e9310 00000008 000e9355     ............U...
   e8f14:	00000010 000e938f 00000020 000e93c1     ........ .......
   e8f24:	00000040 000e93d4 00000080 000e93ec     @...............
   e8f34:	00000100 000e9411 00000200 000e943f     ............?...
   e8f44:	00000400 000e946d 00000800 000e9488     ....m...........
   e8f54:	00001000 000e94b4 00002000 000e94e8     ......... ......
   e8f64:	00004000 000e9516 00008000 000e954b     .@..........K...
   e8f74:	00010000 000e9594 00020000 000e95e6     ................
   e8f84:	00040000 000e9613 00080000 000e9654     ............T...
	...

000e8f9c <mbedtls_x509_crt_profile_default>:
   e8f9c:	000000f0 0fffffff 0fffffff 00000800     ................
   e8fac:	7265430a 69666974 65746163 20736920     .Certificate is 
   e8fbc:	6e696e75 61697469 6573696c 000a2164     uninitialised!..
   e8fcc:	65637325 202e7472 73726576 206e6f69     %scert. version 
   e8fdc:	20202020 6425203a 7325000a 69726573         : %d..%sseri
   e8fec:	6e206c61 65626d75 20202072 203a2020     al number     : 
   e8ffc:	73250a00 75737369 6e207265 20656d61     ..%sissuer name 
   e900c:	20202020 203a2020 73250a00 6a627573           : ..%ssubj
   e901c:	20746365 656d616e 20202020 203a2020     ect name      : 
   e902c:	73250a00 75737369 20206465 20206e6f     ..%sissued  on  
   e903c:	20202020 203a2020 64343025 3230252d           : %04d-%02
   e904c:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
   e905c:	3230253a 250a0064 70786573 73657269     :%02d..%sexpires
   e906c:	206e6f20 20202020 3a202020 34302520      on        : %04
   e907c:	30252d64 252d6432 20643230 64323025     d-%02d-%02d %02d
   e908c:	3230253a 30253a64 0a006432 69737325     :%02d:%02d..%ssi
   e909c:	64656e67 69737520 2020676e 20202020     gned using      
   e90ac:	0a00203a 2d257325 3a733831 20642520     : ..%s%-18s: %d 
   e90bc:	73746962 73250a00 69736162 6f632063     bits..%sbasic co
   e90cc:	7274736e 746e6961 203a2073 253d4143     nstraints : CA=%
   e90dc:	202c0073 5f78616d 68746170 3d6e656c     s., max_pathlen=
   e90ec:	0a006425 75737325 63656a62 6c612074     %d..%ssubject al
   e90fc:	616e2074 2020656d 0a00203a 65637325     t name  : ..%sce
   e910c:	202e7472 65707974 20202020 20202020     rt. type        
   e911c:	2500203a 4c535373 696c4320 00746e65     : .%sSSL Client.
   e912c:	53537325 6553204c 72657672 45732500     %sSSL Server.%sE
   e913c:	6c69616d 4f732500 63656a62 69532074     mail.%sObject Si
   e914c:	6e696e67 73250067 65736552 64657672     gning.%sReserved
   e915c:	53732500 43204c53 73250041 69616d45     .%sSSL CA.%sEmai
   e916c:	4143206c 4f732500 63656a62 69532074     l CA.%sObject Si
   e917c:	6e696e67 41432067 73250a00 2079656b     gning CA..%skey 
   e918c:	67617375 20202065 20202020 203a2020     usage         : 
   e919c:	44732500 74696769 53206c61 616e6769     .%sDigital Signa
   e91ac:	65727574 4e732500 52206e6f 64757065     ture.%sNon Repud
   e91bc:	69746169 25006e6f 79654b73 636e4520     iation.%sKey Enc
   e91cc:	65687069 6e656d72 73250074 61746144     ipherment.%sData
   e91dc:	636e4520 65687069 6e656d72 73250074      Encipherment.%s
   e91ec:	2079654b 65726741 6e656d65 73250074     Key Agreement.%s
   e91fc:	2079654b 74726543 67695320 7325006e     Key Cert Sign.%s
   e920c:	204c5243 6e676953 45732500 7069636e     CRL Sign.%sEncip
   e921c:	20726568 796c6e4f 44732500 70696365     her Only.%sDecip
   e922c:	20726568 796c6e4f 73250a00 20747865     her Only..%sext 
   e923c:	2079656b 67617375 20202065 203a2020     key usage     : 
   e924c:	25732500 73250073 000a7325 6e557325     .%s%s.%s%s..%sUn
   e925c:	776f6e6b 6572206e 6e6f7361 68742820     known reason (th
   e926c:	73207369 6c756f68 6f6e2064 61682074     is should not ha
   e927c:	6e657070 2a000a29 2d2d002e 422d2d2d     ppen)..*..-----B
   e928c:	4e494745 52454320 49464954 45544143     EGIN CERTIFICATE
   e929c:	2d2d2d2d 2d2d002d 452d2d2d 4320444e     -----.-----END C
   e92ac:	49545245 41434946 2d2d4554 002d2d2d     ERTIFICATE-----.
   e92bc:	20656854 74726563 63696669 20657461     The certificate 
   e92cc:	696c6176 79746964 73616820 70786520     validity has exp
   e92dc:	64657269 65685400 72656320 69666974     ired.The certifi
   e92ec:	65746163 73616820 65656220 6572206e     cate has been re
   e92fc:	656b6f76 69282064 6e6f2073 43206120     voked (is on a C
   e930c:	00294c52 20656854 74726563 63696669     RL).The certific
   e931c:	20657461 6d6d6f43 4e206e6f 20656d61     ate Common Name 
   e932c:	294e4328 656f6420 6f6e2073 616d2074     (CN) does not ma
   e933c:	20686374 68746977 65687420 70786520     tch with the exp
   e934c:	65746365 4e432064 65685400 72656320     ected CN.The cer
   e935c:	69666974 65746163 20736920 20746f6e     tificate is not 
   e936c:	72726f63 6c746365 69732079 64656e67     correctly signed
   e937c:	20796220 20656874 73757274 20646574      by the trusted 
   e938c:	54004143 43206568 69204c52 6f6e2073     CA.The CRL is no
   e939c:	6f632074 63657272 20796c74 6e676973     t correctly sign
   e93ac:	62206465 68742079 72742065 65747375     ed by the truste
   e93bc:	41432064 65685400 4c524320 20736920     d CA.The CRL is 
   e93cc:	69707865 00646572 74726543 63696669     expired.Certific
   e93dc:	20657461 20736177 7373696d 00676e69     ate was missing.
   e93ec:	74726543 63696669 20657461 69726576     Certificate veri
   e93fc:	61636966 6e6f6974 73617720 696b7320     fication was ski
   e940c:	64657070 68744f00 72207265 6f736165     pped.Other reaso
   e941c:	6328206e 62206e61 73752065 62206465     n (can be used b
   e942c:	65762079 79666972 6c616320 6361626c     y verify callbac
   e943c:	5400296b 63206568 69747265 61636966     k).The certifica
   e944c:	76206574 64696c61 20797469 72617473     te validity star
   e945c:	69207374 6874206e 75662065 65727574     ts in the future
   e946c:	65685400 4c524320 20736920 6d6f7266     .The CRL is from
   e947c:	65687420 74756620 00657275 67617355      the future.Usag
   e948c:	6f642065 6e207365 6d20746f 68637461     e does not match
   e949c:	65687420 79656b20 67617355 78652065      the keyUsage ex
   e94ac:	736e6574 006e6f69 67617355 6f642065     tension.Usage do
   e94bc:	6e207365 6d20746f 68637461 65687420     es not match the
   e94cc:	74786520 65646e65 79654b64 67617355      extendedKeyUsag
   e94dc:	78652065 736e6574 006e6f69 67617355     e extension.Usag
   e94ec:	6f642065 6e207365 6d20746f 68637461     e does not match
   e94fc:	65687420 43736e20 54747265 20657079      the nsCertType 
   e950c:	65747865 6f69736e 6854006e 65632065     extension.The ce
   e951c:	66697472 74616369 73692065 67697320     rtificate is sig
   e952c:	2064656e 68746977 206e6120 63616e75     ned with an unac
   e953c:	74706563 656c6261 73616820 54002e68     ceptable hash..T
   e954c:	63206568 69747265 61636966 69206574     he certificate i
   e955c:	69732073 64656e67 74697720 6e612068     s signed with an
   e956c:	616e7520 70656363 6c626174 4b502065      unacceptable PK
   e957c:	676c6120 67652820 41535220 20737620      alg (eg RSA vs 
   e958c:	53444345 002e2941 20656854 74726563     ECDSA)..The cert
   e959c:	63696669 20657461 73207369 656e6769     ificate is signe
   e95ac:	69772064 61206874 6e75206e 65636361     d with an unacce
   e95bc:	62617470 6b20656c 28207965 62206765     ptable key (eg b
   e95cc:	63206461 65767275 5352202c 6f742041     ad curve, RSA to
   e95dc:	6873206f 2974726f 6854002e 52432065     o short)..The CR
   e95ec:	7369204c 67697320 2064656e 68746977     L is signed with
   e95fc:	206e6120 63616e75 74706563 656c6261      an unacceptable
   e960c:	73616820 54002e68 43206568 69204c52      hash..The CRL i
   e961c:	69732073 64656e67 74697720 6e612068     s signed with an
   e962c:	616e7520 70656363 6c626174 4b502065      unacceptable PK
   e963c:	676c6120 67652820 41535220 20737620      alg (eg RSA vs 
   e964c:	53444345 002e2941 20656854 204c5243     ECDSA)..The CRL 
   e965c:	73207369 656e6769 69772064 61206874     is signed with a
   e966c:	6e75206e 65636361 62617470 6b20656c     n unacceptable k
   e967c:	28207965 62206765 63206461 65767275     ey (eg bad curve
   e968c:	5352202c 6f742041 6873206f 2974726f     , RSA too short)
   e969c:	0000002e                                ....

000e96a0 <mbedtls_x509_crt_profile_suiteb>:
   e96a0:	00000060 0000000a 00000000 00000000     `...............

000e96b0 <b64_alphabet>:
   e96b0:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   e96c0:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   e96d0:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   e96e0:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   e96f0:	00000000                                ....

000e96f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e96fc:	000e4119 000e411f 000e4149 000e412d     .A...A..IA..-A..
   e970c:	000e411b                                .A..

000e9710 <_ZTVN5spark13EthernetClassE>:
	...
   e9718:	000e4717 000e470d 000e4703 000e46f9     .G...G...G...F..
   e9728:	000e46ed 000e46e1 000e46d5 000e46cd     .F...F...F...F..
   e9738:	000e46c3 000e46b9 000e4abd              .F...F...J..

000e9744 <_ZTV7TwoWire>:
	...
   e974c:	000e4735 000e477f 000e4757 000e4737     5G...G..WG..7G..
   e975c:	000e475f 000e4767 000e476f 000e4777     _G..gG..oG..wG..

000e976c <_ZTV9IPAddress>:
	...
   e9774:	000e47d1 000e47c1 000e47c3 66006e6c     .G...G...G..ln.f
   e9784:	6564006e 6c696174 31302500 00207530     n.detail.%010u .
   e9794:	2800205d 00203a29 63005b20 2065646f     ] .(): . [.code 
   e97a4:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
   e97b4:	75616200 65530064 6c616972 72655300     .baud.Serial.Ser
   e97c4:	316c6169 72617000 63006d61 6800646d     ial1.param.cmd.h
   e97d4:	7300646e 006d7274 746c6966 6c766c00     nd.strm.filt.lvl
   e97e4:	64646100 646e6148 0072656c 6f6d6572     .addHandler.remo
   e97f4:	61486576 656c646e 6e650072 61486d75     veHandler.enumHa
   e9804:	656c646e 4a007372 534e4f53 61657274     ndlers.JSONStrea
   e9814:	676f4c6d 646e6148 0072656c 00707061     mLogHandler.app.
   e9824:	656e6f6e 61727400 69006563 006f666e     none.trace.info.
   e9834:	6e726177 72726500 7000726f 63696e61     warn.error.panic
   e9844:	6c6c6100 00000000                       .all....

000e984c <_ZTVN5spark9MeshClassE>:
	...
   e9854:	000e4953 000e4949 000e493f 000e4935     SI..II..?I..5I..
   e9864:	000e4929 000e491d 000e4911 000e4909     )I...I...I...I..
   e9874:	000e48ff 000e48f5 000e4abd              .H...H...J..

000e9880 <_ZTVN5spark12NetworkClassE>:
	...
   e9888:	000e4a55 000e4a5f 000e4a69 000e4a73     UJ.._J..iJ..sJ..
   e9898:	000e4a7d 000e4a89 000e4a95 000e4aa1     }J...J...J...J..
   e98a8:	000e4aa9 000e4ab3 000e4abd              .J...J...J..

000e98b4 <_ZTV8SPIClass>:
	...
   e98bc:	000e4d09 000e4d0b                       .M...M..

000e98c4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e98cc:	000e5071 000e5077 000e555f 000e5085     qP..wP.._U...P..
   e98dc:	000e5073                                sP..

000e98e0 <_ZTV9TCPClient>:
	...
   e98e8:	000d5aad 000d5ae1 000e4fe9 000e5003     .Z...Z...O...P..
   e98f8:	000e5405 000e5247 000e5219 000e502d     .T..GR...R..-P..
   e9908:	000e52dd 000e5089 000e527b 000e53d7     .R...P..{R...S..
   e9918:	000e502f 000e5067 000e5015 000e5179     /P..gP...P..yQ..
   e9928:	000e51f9 69726977 7200676e 20766365     .Q..wiring.recv 
   e9938:	6f727265 203d2072 5a006425 302b2500     error = %d.Z.%+0
   e9948:	253a6433 00753230 252d5925 64252d6d     3d:%02u.%Y-%m-%d
   e9958:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   e9968:	00656d69                                ime.

000e996c <_ZTV11USARTSerial>:
	...
   e9974:	000e55f5 000e5645 000e5653 000e4b9d     .U..EV..SV...K..
   e9984:	000e5609 000e562b 000e5617 000e563f     .V..+V...V..?V..
   e9994:	000e55f7 000e55fb                       .U...U..

000e999c <_ZTV9USBSerial>:
	...
   e99a4:	000e5731 000e5781 000e578f 000e4b9d     1W...W...W...K..
   e99b4:	000e576d 000e5733 000e5749 000e577b     mW..3W..IW..{W..
   e99c4:	000e575f 000e572d                       _W..-W..

000e99cc <_ZTVN5spark9WiFiClassE>:
	...
   e99d4:	000e5891 000e5887 000e587d 000d528f     .X...X..}X...R..
   e99e4:	000e5871 000e5865 000e5859 000e5851     qX..eX..YX..QX..
   e99f4:	000e5847 000e583d 000e4abd              GX..=X...J..

000e9a00 <__sf_fake_stdin>:
	...

000e9a20 <__sf_fake_stdout>:
	...

000e9a40 <__sf_fake_stderr>:
	...

000e9a60 <link_const_variable_data_end>:
   e9a60:	000d4861 	.word	0x000d4861
   e9a64:	000d4d1d 	.word	0x000d4d1d
   e9a68:	000d4fb9 	.word	0x000d4fb9
   e9a6c:	000d5271 	.word	0x000d5271
   e9a70:	000d5509 	.word	0x000d5509
   e9a74:	000d56ab 	.word	0x000d56ab
   e9a78:	000d59c1 	.word	0x000d59c1
   e9a7c:	000d65e7 	.word	0x000d65e7
   e9a80:	000e4109 	.word	0x000e4109
   e9a84:	000e4721 	.word	0x000e4721
   e9a88:	000e48e5 	.word	0x000e48e5
   e9a8c:	000e4a09 	.word	0x000e4a09
   e9a90:	000e4b89 	.word	0x000e4b89
   e9a94:	000e4ced 	.word	0x000e4ced
   e9a98:	000e4fd1 	.word	0x000e4fd1
   e9a9c:	000e55e1 	.word	0x000e55e1
   e9aa0:	000e589d 	.word	0x000e589d
   e9aa4:	000e5b31 	.word	0x000e5b31
   e9aa8:	000e5b89 	.word	0x000e5b89
   e9aac:	000e5c4d 	.word	0x000e5c4d
   e9ab0:	000e5cd1 	.word	0x000e5cd1
   e9ab4:	000e5d55 	.word	0x000e5d55

000e9ab8 <link_constructors_end>:
	...
