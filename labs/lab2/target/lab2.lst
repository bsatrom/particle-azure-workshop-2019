
/Users/bsatrom/Development/particle/workshops/thatconf-workshop-2019/labs/lab2/target/lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d76f0  000d76f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  0001778c  2**0
                  CONTENTS
  4 .data         00000068  2003e428  000d76f8  0000e428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000360  2003e490  2003e490  0001e490  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d7760  000d7760  00017760  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7788  000d7788  00017788  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000edf5a  00000000  00000000  0001778c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001321f  00000000  00000000  001056e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e25b  00000000  00000000  00118905  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002598  00000000  00000000  00136b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004628  00000000  00000000  001390f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039525  00000000  00000000  0013d720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002dc15  00000000  00000000  00176c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a680  00000000  00000000  001a485a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ce94  00000000  00000000  002aeedc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	50 73 0d 00                                         Ps..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f921 	bl	d7274 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f926 	bl	d728a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e428 	.word	0x2003e428
   d4048:	000d76f8 	.word	0x000d76f8
   d404c:	2003e490 	.word	0x2003e490
   d4050:	2003e490 	.word	0x2003e490
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f86f 	bl	d613c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d76f0 	.word	0x000d76f0
   d4080:	000d76ac 	.word	0x000d76ac

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83c 	b.w	d4100 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f87d 	bl	d4188 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b821 	b.w	d60d8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bea3 	b.w	d4de0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bea9 	b.w	d4df0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bea7 	b.w	d4df0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z9toggleLed6String>:

  delay(5000);
}

int toggleLed(String args)
{
   d40b4:	b510      	push	{r4, lr}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40b6:	4c10      	ldr	r4, [pc, #64]	; (d40f8 <_Z9toggleLed6String+0x44>)

  delay(5000);
}

int toggleLed(String args)
{
   d40b8:	ed2d 8b02 	vpush	{d8}
  leds.setColorHSB(0, 0.0, 1.0, 0.5);
   d40bc:	ed9f 8a0f 	vldr	s16, [pc, #60]	; d40fc <_Z9toggleLed6String+0x48>
   d40c0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
   d40c4:	eeb0 0a48 	vmov.f32	s0, s16
   d40c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   d40cc:	2100      	movs	r1, #0
   d40ce:	4620      	mov	r0, r4
   d40d0:	f000 fa6a 	bl	d45a8 <_ZN12ChainableLED11setColorHSBEhfff>

  delay(1000);
   d40d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40d8:	f000 fefb 	bl	d4ed2 <delay>

  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d40dc:	eeb0 1a48 	vmov.f32	s2, s16
   d40e0:	eef0 0a48 	vmov.f32	s1, s16
   d40e4:	eeb0 0a48 	vmov.f32	s0, s16
   d40e8:	4620      	mov	r0, r4
   d40ea:	2100      	movs	r1, #0
   d40ec:	f000 fa5c 	bl	d45a8 <_ZN12ChainableLED11setColorHSBEhfff>

  return 1;
   d40f0:	ecbd 8b02 	vpop	{d8}
   d40f4:	2001      	movs	r0, #1
   d40f6:	bd10      	pop	{r4, pc}
   d40f8:	2003e494 	.word	0x2003e494
   d40fc:	00000000 	.word	0x00000000

000d4100 <setup>:

int temp, humidity;
double currentLightLevel;

void setup()
{
   d4100:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d4102:	f001 ff2d 	bl	d5f60 <_Z16_fetch_usbserialv>

  dht.begin();

  leds.init();
   d4106:	4c16      	ldr	r4, [pc, #88]	; (d4160 <setup+0x60>)
int temp, humidity;
double currentLightLevel;

void setup()
{
  Serial.begin(9600);
   d4108:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d410c:	f001 ff1c 	bl	d5f48 <_ZN9USBSerial5beginEl>

  dht.begin();
   d4110:	4814      	ldr	r0, [pc, #80]	; (d4164 <setup+0x64>)
   d4112:	f000 fb4b 	bl	d47ac <_ZN3DHT5beginEv>

  leds.init();
   d4116:	4620      	mov	r0, r4
   d4118:	f000 f9a6 	bl	d4468 <_ZN12ChainableLED4initEv>
  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d411c:	ed9f 1a12 	vldr	s2, [pc, #72]	; d4168 <setup+0x68>
   d4120:	4620      	mov	r0, r4
   d4122:	eef0 0a41 	vmov.f32	s1, s2
   d4126:	eeb0 0a41 	vmov.f32	s0, s2
   d412a:	2100      	movs	r1, #0
   d412c:	f000 fa3c 	bl	d45a8 <_ZN12ChainableLED11setColorHSBEhfff>

  pinMode(A0, INPUT);
   d4130:	2100      	movs	r1, #0
   d4132:	2013      	movs	r0, #19
   d4134:	f002 f840 	bl	d61b8 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4138:	2300      	movs	r3, #0
   d413a:	2202      	movs	r2, #2
   d413c:	490b      	ldr	r1, [pc, #44]	; (d416c <setup+0x6c>)
   d413e:	480c      	ldr	r0, [pc, #48]	; (d4170 <setup+0x70>)
   d4140:	f000 fdde 	bl	d4d00 <spark_variable>
   d4144:	2202      	movs	r2, #2
   d4146:	490b      	ldr	r1, [pc, #44]	; (d4174 <setup+0x74>)
   d4148:	480b      	ldr	r0, [pc, #44]	; (d4178 <setup+0x78>)
   d414a:	2300      	movs	r3, #0
   d414c:	f000 fdd8 	bl	d4d00 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4150:	4a0a      	ldr	r2, [pc, #40]	; (d417c <setup+0x7c>)
   d4152:	490b      	ldr	r1, [pc, #44]	; (d4180 <setup+0x80>)
   d4154:	480b      	ldr	r0, [pc, #44]	; (d4184 <setup+0x84>)

  Particle.variable("temp", temp);
  Particle.variable("humidity", humidity);

  Particle.function("toggleLed", toggleLed);
}
   d4156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d415a:	f000 bf4d 	b.w	d4ff8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d415e:	bf00      	nop
   d4160:	2003e494 	.word	0x2003e494
   d4164:	2003e4b4 	.word	0x2003e4b4
   d4168:	00000000 	.word	0x00000000
   d416c:	2003e4b0 	.word	0x2003e4b0
   d4170:	000d7364 	.word	0x000d7364
   d4174:	2003e4a0 	.word	0x2003e4a0
   d4178:	000d7369 	.word	0x000d7369
   d417c:	000d7372 	.word	0x000d7372
   d4180:	000d40b5 	.word	0x000d40b5
   d4184:	000d4fcd 	.word	0x000d4fcd

000d4188 <loop>:

void loop()
{
   d4188:	b530      	push	{r4, r5, lr}
   d418a:	ed2d 8b02 	vpush	{d8}
  temp = (int)dht.getTempFarenheit();
   d418e:	483e      	ldr	r0, [pc, #248]	; (d4288 <loop+0x100>)
   d4190:	4d3e      	ldr	r5, [pc, #248]	; (d428c <loop+0x104>)
  humidity = (int)dht.getHumidity();
   d4192:	4c3f      	ldr	r4, [pc, #252]	; (d4290 <loop+0x108>)

  Particle.function("toggleLed", toggleLed);
}

void loop()
{
   d4194:	b089      	sub	sp, #36	; 0x24
  temp = (int)dht.getTempFarenheit();
   d4196:	f000 fbf3 	bl	d4980 <_ZN3DHT16getTempFarenheitEv>
   d419a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  humidity = (int)dht.getHumidity();
   d419e:	483a      	ldr	r0, [pc, #232]	; (d4288 <loop+0x100>)
  Particle.function("toggleLed", toggleLed);
}

void loop()
{
  temp = (int)dht.getTempFarenheit();
   d41a0:	ed85 0a00 	vstr	s0, [r5]
  humidity = (int)dht.getHumidity();
   d41a4:	f000 fc0e 	bl	d49c4 <_ZN3DHT11getHumidityEv>
   d41a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d41ac:	ed84 0a00 	vstr	s0, [r4]

  Serial.printlnf("Temp: %f", temp);
   d41b0:	f001 fed6 	bl	d5f60 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d41b4:	682b      	ldr	r3, [r5, #0]
   d41b6:	4a37      	ldr	r2, [pc, #220]	; (d4294 <loop+0x10c>)
   d41b8:	2101      	movs	r1, #1
   d41ba:	f001 fc53 	bl	d5a64 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Humidity: %f", humidity);
   d41be:	f001 fecf 	bl	d5f60 <_Z16_fetch_usbserialv>
   d41c2:	6823      	ldr	r3, [r4, #0]
   d41c4:	4a34      	ldr	r2, [pc, #208]	; (d4298 <loop+0x110>)
   d41c6:	2101      	movs	r1, #1
   d41c8:	f001 fc4c 	bl	d5a64 <_ZN5Print11printf_implEbPKcz>

  double lightAnalogVal = analogRead(A0);
   d41cc:	2013      	movs	r0, #19
   d41ce:	f002 f81d 	bl	d620c <analogRead>
  currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   d41d2:	f002 fb19 	bl	d6808 <__aeabi_i2d>
   d41d6:	ed9f 3b26 	vldr	d3, [pc, #152]	; d4270 <loop+0xe8>
   d41da:	ec41 0b10 	vmov	d0, r0, r1
   d41de:	eeb0 1a43 	vmov.f32	s2, s6
   d41e2:	eef0 1a63 	vmov.f32	s3, s7
   d41e6:	ed9f 4b24 	vldr	d4, [pc, #144]	; d4278 <loop+0xf0>
   d41ea:	ed9f 2b25 	vldr	d2, [pc, #148]	; d4280 <loop+0xf8>
   d41ee:	f000 fe27 	bl	d4e40 <_Z3mapddddd>
   d41f2:	4b2a      	ldr	r3, [pc, #168]	; (d429c <loop+0x114>)
   d41f4:	eeb0 8a40 	vmov.f32	s16, s0
   d41f8:	eef0 8a60 	vmov.f32	s17, s1
   d41fc:	ed83 0b00 	vstr	d0, [r3]

  if (currentLightLevel > 50)
   d4200:	2200      	movs	r2, #0
   d4202:	4b27      	ldr	r3, [pc, #156]	; (d42a0 <loop+0x118>)
   d4204:	ec51 0b10 	vmov	r0, r1, d0
   d4208:	f002 fdf4 	bl	d6df4 <__aeabi_dcmpgt>
   d420c:	b330      	cbz	r0, d425c <loop+0xd4>
  {
    Particle.publish("light-meter/level", String(currentLightLevel), PRIVATE);
   d420e:	eeb0 0a48 	vmov.f32	s0, s16
   d4212:	eef0 0a68 	vmov.f32	s1, s17
   d4216:	2106      	movs	r1, #6
   d4218:	a804      	add	r0, sp, #16
   d421a:	f001 fd7a 	bl	d5d12 <_ZN6StringC1Edi>
   d421e:	4b21      	ldr	r3, [pc, #132]	; (d42a4 <loop+0x11c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4220:	9a04      	ldr	r2, [sp, #16]
   d4222:	781b      	ldrb	r3, [r3, #0]
   d4224:	f88d 3000 	strb.w	r3, [sp]
   d4228:	491f      	ldr	r1, [pc, #124]	; (d42a8 <loop+0x120>)
   d422a:	233c      	movs	r3, #60	; 0x3c
   d422c:	a802      	add	r0, sp, #8
   d422e:	f000 fffd 	bl	d522c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4232:	9c03      	ldr	r4, [sp, #12]
   d4234:	b17c      	cbz	r4, d4256 <loop+0xce>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4236:	6863      	ldr	r3, [r4, #4]
   d4238:	3b01      	subs	r3, #1
   d423a:	6063      	str	r3, [r4, #4]
   d423c:	b95b      	cbnz	r3, d4256 <loop+0xce>
        {
          _M_dispose();
   d423e:	6823      	ldr	r3, [r4, #0]
   d4240:	4620      	mov	r0, r4
   d4242:	689b      	ldr	r3, [r3, #8]
   d4244:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4246:	68a3      	ldr	r3, [r4, #8]
   d4248:	3b01      	subs	r3, #1
   d424a:	60a3      	str	r3, [r4, #8]
   d424c:	b91b      	cbnz	r3, d4256 <loop+0xce>
            _M_destroy();
   d424e:	6823      	ldr	r3, [r4, #0]
   d4250:	4620      	mov	r0, r4
   d4252:	68db      	ldr	r3, [r3, #12]
   d4254:	4798      	blx	r3
   d4256:	a804      	add	r0, sp, #16
   d4258:	f001 fcd6 	bl	d5c08 <_ZN6StringD1Ev>
  }

  delay(5000);
   d425c:	f241 3088 	movw	r0, #5000	; 0x1388
   d4260:	f000 fe37 	bl	d4ed2 <delay>
}
   d4264:	b009      	add	sp, #36	; 0x24
   d4266:	ecbd 8b02 	vpop	{d8}
   d426a:	bd30      	pop	{r4, r5, pc}
   d426c:	f3af 8000 	nop.w
	...
   d427c:	40590000 	.word	0x40590000
   d4280:	00000000 	.word	0x00000000
   d4284:	40affe00 	.word	0x40affe00
   d4288:	2003e4b4 	.word	0x2003e4b4
   d428c:	2003e4b0 	.word	0x2003e4b0
   d4290:	2003e4a0 	.word	0x2003e4a0
   d4294:	000d737c 	.word	0x000d737c
   d4298:	000d7385 	.word	0x000d7385
   d429c:	2003e4a8 	.word	0x2003e4a8
   d42a0:	40490000 	.word	0x40490000
   d42a4:	2003e49c 	.word	0x2003e49c
   d42a8:	000d7392 	.word	0x000d7392

000d42ac <_GLOBAL__sub_I_dht>:
  delay(1000);

  leds.setColorHSB(0, 0.0, 0.0, 0.0);

  return 1;
   d42ac:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42ae:	4b0c      	ldr	r3, [pc, #48]	; (d42e0 <_GLOBAL__sub_I_dht+0x34>)
#include "Particle.h"
#include "Grove_Temperature_And_Humidity_Sensor.h"
#include "Grove_ChainableLED.h"

DHT dht(D2);
ChainableLED leds(A4, A5, 1);
   d42b0:	4c0c      	ldr	r4, [pc, #48]	; (d42e4 <_GLOBAL__sub_I_dht+0x38>)
   d42b2:	2501      	movs	r5, #1
   d42b4:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42b6:	f000 fbcf 	bl	d4a58 <HAL_Pin_Map>
 */
#include "Particle.h"
#include "Grove_Temperature_And_Humidity_Sensor.h"
#include "Grove_ChainableLED.h"

DHT dht(D2);
   d42ba:	2206      	movs	r2, #6
   d42bc:	2102      	movs	r1, #2
   d42be:	480a      	ldr	r0, [pc, #40]	; (d42e8 <_GLOBAL__sub_I_dht+0x3c>)
   d42c0:	f000 fa6e 	bl	d47a0 <_ZN3DHTC1Ehh>
ChainableLED leds(A4, A5, 1);
   d42c4:	462b      	mov	r3, r5
   d42c6:	220e      	movs	r2, #14
   d42c8:	210f      	movs	r1, #15
   d42ca:	4620      	mov	r0, r4
   d42cc:	f000 f812 	bl	d42f4 <_ZN12ChainableLEDC1Ehhh>
   d42d0:	4620      	mov	r0, r4
   d42d2:	4a06      	ldr	r2, [pc, #24]	; (d42ec <_GLOBAL__sub_I_dht+0x40>)
   d42d4:	4906      	ldr	r1, [pc, #24]	; (d42f0 <_GLOBAL__sub_I_dht+0x44>)
  delay(1000);

  leds.setColorHSB(0, 0.0, 0.0, 0.0);

  return 1;
   d42d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#include "Particle.h"
#include "Grove_Temperature_And_Humidity_Sensor.h"
#include "Grove_ChainableLED.h"

DHT dht(D2);
ChainableLED leds(A4, A5, 1);
   d42da:	f001 bff1 	b.w	d62c0 <__aeabi_atexit>
   d42de:	bf00      	nop
   d42e0:	2003e49c 	.word	0x2003e49c
   d42e4:	2003e494 	.word	0x2003e494
   d42e8:	2003e4b4 	.word	0x2003e4b4
   d42ec:	2003e490 	.word	0x2003e490
   d42f0:	000d430f 	.word	0x000d430f

000d42f4 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d42f4:	b510      	push	{r4, lr}
   d42f6:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d42f8:	7001      	strb	r1, [r0, #0]
   d42fa:	7042      	strb	r2, [r0, #1]
   d42fc:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d42fe:	2101      	movs	r1, #1
   d4300:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d4304:	f002 ffa0 	bl	d7248 <calloc>
   d4308:	6060      	str	r0, [r4, #4]
}
   d430a:	4620      	mov	r0, r4
   d430c:	bd10      	pop	{r4, pc}

000d430e <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d430e:	b510      	push	{r4, lr}
   d4310:	4604      	mov	r4, r0
{
    free(_led_state);
   d4312:	6840      	ldr	r0, [r0, #4]
   d4314:	f000 fd6c 	bl	d4df0 <free>
}
   d4318:	4620      	mov	r0, r4
   d431a:	bd10      	pop	{r4, pc}

000d431c <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d431c:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d431e:	2100      	movs	r1, #0
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4320:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d4322:	7800      	ldrb	r0, [r0, #0]
   d4324:	f001 ff59 	bl	d61da <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4328:	2014      	movs	r0, #20
   d432a:	f000 fb85 	bl	d4a38 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d432e:	7820      	ldrb	r0, [r4, #0]
   d4330:	2101      	movs	r1, #1
   d4332:	f001 ff52 	bl	d61da <digitalWrite>
   d4336:	2014      	movs	r0, #20
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d4338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d433c:	f000 bb7c 	b.w	d4a38 <HAL_Delay_Microseconds>

000d4340 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d4340:	b570      	push	{r4, r5, r6, lr}
   d4342:	4606      	mov	r6, r0
   d4344:	460d      	mov	r5, r1
   d4346:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4348:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
   d434c:	bf14      	ite	ne
   d434e:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4350:	2100      	moveq	r1, #0
   d4352:	7870      	ldrb	r0, [r6, #1]
   d4354:	f001 ff41 	bl	d61da <digitalWrite>
   d4358:	3c01      	subs	r4, #1
        clk();
   d435a:	4630      	mov	r0, r6
   d435c:	f7ff ffde 	bl	d431c <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4360:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d4362:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
   d4366:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d4368:	d1ee      	bne.n	d4348 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
   d436a:	bd70      	pop	{r4, r5, r6, pc}

000d436c <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d436c:	f013 0f80 	tst.w	r3, #128	; 0x80
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4372:	460d      	mov	r5, r1
   d4374:	4616      	mov	r6, r2
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4376:	bf14      	ite	ne
   d4378:	21c0      	movne	r1, #192	; 0xc0
   d437a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d437c:	065a      	lsls	r2, r3, #25
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d437e:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4380:	bf58      	it	pl
   d4382:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4386:	0633      	lsls	r3, r6, #24
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4388:	4604      	mov	r4, r0
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d438a:	bf58      	it	pl
   d438c:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4390:	0670      	lsls	r0, r6, #25
   d4392:	bf58      	it	pl
   d4394:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4398:	062a      	lsls	r2, r5, #24
   d439a:	bf58      	it	pl
   d439c:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d43a0:	066b      	lsls	r3, r5, #25
   d43a2:	bf58      	it	pl
   d43a4:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d43a8:	4620      	mov	r0, r4
   d43aa:	f7ff ffc9 	bl	d4340 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d43ae:	4639      	mov	r1, r7
   d43b0:	4620      	mov	r0, r4
   d43b2:	f7ff ffc5 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d43b6:	4631      	mov	r1, r6
   d43b8:	4620      	mov	r0, r4
   d43ba:	f7ff ffc1 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d43be:	4629      	mov	r1, r5
   d43c0:	4620      	mov	r0, r4
}
   d43c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
   d43c6:	f7ff bfbb 	b.w	d4340 <_ZN12ChainableLED8sendByteEh>

000d43ca <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d43ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43ce:	4604      	mov	r4, r0
   d43d0:	460d      	mov	r5, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d43d2:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d43d4:	4691      	mov	r9, r2
   d43d6:	469a      	mov	sl, r3
   d43d8:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d43dc:	f7ff ffb0 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d43e0:	2100      	movs	r1, #0
   d43e2:	4620      	mov	r0, r4
   d43e4:	f7ff ffac 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d43e8:	2100      	movs	r1, #0
   d43ea:	4620      	mov	r0, r4
   d43ec:	f7ff ffa8 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d43f0:	2100      	movs	r1, #0
   d43f2:	4620      	mov	r0, r4
   d43f4:	f7ff ffa4 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   d43f8:	2703      	movs	r7, #3
            _led_state[i*3 + _CL_GREEN] = green;
   d43fa:	f04f 0801 	mov.w	r8, #1
{
    // Send data frame prefix (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d43fe:	2600      	movs	r6, #0
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
            _led_state[i*3 + _CL_GREEN] = green;
   d4400:	fb17 8805 	smlabb	r8, r7, r5, r8
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4404:	78a2      	ldrb	r2, [r4, #2]
   d4406:	b2f3      	uxtb	r3, r6
   d4408:	429a      	cmp	r2, r3
   d440a:	d91b      	bls.n	d4444 <_ZN12ChainableLED11setColorRGBEhhhh+0x7a>
    {
        if (i == led)
   d440c:	42ab      	cmp	r3, r5
   d440e:	d10d      	bne.n	d442c <_ZN12ChainableLED11setColorRGBEhhhh+0x62>
        {
            _led_state[i*3 + _CL_RED] = red;
   d4410:	6861      	ldr	r1, [r4, #4]
   d4412:	fb15 f207 	smulbb	r2, r5, r7
   d4416:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_GREEN] = green;
   d441a:	6862      	ldr	r2, [r4, #4]
   d441c:	f802 a008 	strb.w	sl, [r2, r8]
            _led_state[i*3 + _CL_BLUE] = blue;
   d4420:	2202      	movs	r2, #2
   d4422:	fb17 2205 	smlabb	r2, r7, r5, r2
   d4426:	6861      	ldr	r1, [r4, #4]
   d4428:	f801 b002 	strb.w	fp, [r1, r2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d442c:	6860      	ldr	r0, [r4, #4]
   d442e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   d4432:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
   d4434:	5c41      	ldrb	r1, [r0, r1]
   d4436:	7893      	ldrb	r3, [r2, #2]
   d4438:	7852      	ldrb	r2, [r2, #1]
   d443a:	4620      	mov	r0, r4
   d443c:	f7ff ff96 	bl	d436c <_ZN12ChainableLED9sendColorEhhh>
   d4440:	3601      	adds	r6, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4442:	e7df      	b.n	d4404 <_ZN12ChainableLED11setColorRGBEhhhh+0x3a>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d4444:	4620      	mov	r0, r4
   d4446:	2100      	movs	r1, #0
   d4448:	f7ff ff7a 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d444c:	4620      	mov	r0, r4
   d444e:	2100      	movs	r1, #0
   d4450:	f7ff ff76 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4454:	4620      	mov	r0, r4
   d4456:	2100      	movs	r1, #0
   d4458:	f7ff ff72 	bl	d4340 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d445c:	4620      	mov	r0, r4
   d445e:	2100      	movs	r1, #0
}
   d4460:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d4464:	f7ff bf6c 	b.w	d4340 <_ZN12ChainableLED8sendByteEh>

000d4468 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
   d4468:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d446a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d446c:	2101      	movs	r1, #1
   d446e:	7800      	ldrb	r0, [r0, #0]
   d4470:	f001 fea2 	bl	d61b8 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d4474:	2101      	movs	r1, #1
   d4476:	7860      	ldrb	r0, [r4, #1]
   d4478:	f001 fe9e 	bl	d61b8 <pinMode>
   d447c:	2500      	movs	r5, #0

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
   d447e:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d4480:	78a3      	ldrb	r3, [r4, #2]
   d4482:	b2e9      	uxtb	r1, r5
   d4484:	428b      	cmp	r3, r1
   d4486:	f105 0501 	add.w	r5, r5, #1
   d448a:	d906      	bls.n	d449a <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
   d448c:	2300      	movs	r3, #0
   d448e:	9600      	str	r6, [sp, #0]
   d4490:	461a      	mov	r2, r3
   d4492:	4620      	mov	r0, r4
   d4494:	f7ff ff99 	bl	d43ca <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d4498:	e7f2      	b.n	d4480 <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
   d449a:	b002      	add	sp, #8
   d449c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d44a0 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d44a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   d44a2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   d44a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d44aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d44ae:	ed2d 8b04 	vpush	{d8-d9}
   d44b2:	eef0 8a41 	vmov.f32	s17, s2
    if (t < 0.0)
        t += 1.0;
   d44b6:	bf48      	it	mi
   d44b8:	ee71 8a27 	vaddmi.f32	s17, s2, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d44bc:	eeb0 8a40 	vmov.f32	s16, s0
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
   d44c0:	eef4 8ae7 	vcmpe.f32	s17, s15
   d44c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   d44c8:	bfc4      	itt	gt
   d44ca:	eef7 7a00 	vmovgt.f32	s15, #112	; 0x3f800000  1.0
   d44ce:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d44d2:	eeb0 9a60 	vmov.f32	s18, s1
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
   d44d6:	ee18 0a90 	vmov	r0, s17
   d44da:	f002 f9a7 	bl	d682c <__aeabi_f2d>
   d44de:	a32f      	add	r3, pc, #188	; (adr r3, d459c <_Z7hue2rgbfff+0xfc>)
   d44e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44e4:	4604      	mov	r4, r0
   d44e6:	460d      	mov	r5, r1
   d44e8:	f002 fc66 	bl	d6db8 <__aeabi_dcmplt>
   d44ec:	b160      	cbz	r0, d4508 <_Z7hue2rgbfff+0x68>
        return p + (q - p) * 6.0 * t;
   d44ee:	ee79 7a48 	vsub.f32	s15, s18, s16
   d44f2:	ee17 0a90 	vmov	r0, s15
   d44f6:	f002 f999 	bl	d682c <__aeabi_f2d>
   d44fa:	2200      	movs	r2, #0
   d44fc:	4b26      	ldr	r3, [pc, #152]	; (d4598 <_Z7hue2rgbfff+0xf8>)
   d44fe:	f002 f9e9 	bl	d68d4 <__aeabi_dmul>
   d4502:	4622      	mov	r2, r4
   d4504:	462b      	mov	r3, r5
   d4506:	e025      	b.n	d4554 <_Z7hue2rgbfff+0xb4>
    if(t < 1.0/2.0)
   d4508:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d450c:	eef4 8ae7 	vcmpe.f32	s17, s15
   d4510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4514:	d42f      	bmi.n	d4576 <_Z7hue2rgbfff+0xd6>
        return q;
    if(t < 2.0/3.0)
   d4516:	a31e      	add	r3, pc, #120	; (adr r3, d4590 <_Z7hue2rgbfff+0xf0>)
   d4518:	e9d3 2300 	ldrd	r2, r3, [r3]
   d451c:	4620      	mov	r0, r4
   d451e:	4629      	mov	r1, r5
   d4520:	f002 fc4a 	bl	d6db8 <__aeabi_dcmplt>
   d4524:	b350      	cbz	r0, d457c <_Z7hue2rgbfff+0xdc>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   d4526:	ee79 7a48 	vsub.f32	s15, s18, s16
   d452a:	ee17 0a90 	vmov	r0, s15
   d452e:	f002 f97d 	bl	d682c <__aeabi_f2d>
   d4532:	4622      	mov	r2, r4
   d4534:	4606      	mov	r6, r0
   d4536:	460f      	mov	r7, r1
   d4538:	462b      	mov	r3, r5
   d453a:	a115      	add	r1, pc, #84	; (adr r1, d4590 <_Z7hue2rgbfff+0xf0>)
   d453c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4540:	f002 f814 	bl	d656c <__aeabi_dsub>
   d4544:	4602      	mov	r2, r0
   d4546:	460b      	mov	r3, r1
   d4548:	4630      	mov	r0, r6
   d454a:	4639      	mov	r1, r7
   d454c:	f002 f9c2 	bl	d68d4 <__aeabi_dmul>
   d4550:	4b11      	ldr	r3, [pc, #68]	; (d4598 <_Z7hue2rgbfff+0xf8>)
   d4552:	2200      	movs	r2, #0
   d4554:	f002 f9be 	bl	d68d4 <__aeabi_dmul>
   d4558:	4604      	mov	r4, r0
   d455a:	ee18 0a10 	vmov	r0, s16
   d455e:	460d      	mov	r5, r1
   d4560:	f002 f964 	bl	d682c <__aeabi_f2d>
   d4564:	4602      	mov	r2, r0
   d4566:	460b      	mov	r3, r1
   d4568:	4620      	mov	r0, r4
   d456a:	4629      	mov	r1, r5
   d456c:	f002 f800 	bl	d6570 <__adddf3>
   d4570:	f002 fc6a 	bl	d6e48 <__aeabi_d2f>
   d4574:	e004      	b.n	d4580 <_Z7hue2rgbfff+0xe0>
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
        return p + (q - p) * 6.0 * t;
    if(t < 1.0/2.0)
        return q;
   d4576:	ee19 0a10 	vmov	r0, s18
   d457a:	e001      	b.n	d4580 <_Z7hue2rgbfff+0xe0>
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;

    return p;
   d457c:	ee18 0a10 	vmov	r0, s16
}
   d4580:	ecbd 8b04 	vpop	{d8-d9}
   d4584:	ee00 0a10 	vmov	s0, r0
   d4588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d458a:	bf00      	nop
   d458c:	f3af 8000 	nop.w
   d4590:	55555555 	.word	0x55555555
   d4594:	3fe55555 	.word	0x3fe55555
   d4598:	40180000 	.word	0x40180000
   d459c:	55555555 	.word	0x55555555
   d45a0:	3fc55555 	.word	0x3fc55555
   d45a4:	00000000 	.word	0x00000000

000d45a8 <_ZN12ChainableLED11setColorHSBEhfff>:
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d45a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d45ac:	ed2d 8b04 	vpush	{d8-d9}

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d45b0:	eef5 0a40 	vcmp.f32	s1, #0.0
   d45b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d45b8:	b083      	sub	sp, #12
   d45ba:	4680      	mov	r8, r0
   d45bc:	4689      	mov	r9, r1
   d45be:	eef0 9a40 	vmov.f32	s19, s0
   d45c2:	eeb0 9a60 	vmov.f32	s18, s1
   d45c6:	eeb0 8a41 	vmov.f32	s16, s2

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d45ca:	d06e      	beq.n	d46aa <_ZN12ChainableLED11setColorHSBEhfff+0x102>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d45cc:	ee11 0a10 	vmov	r0, s2
   d45d0:	f002 f92c 	bl	d682c <__aeabi_f2d>
        r = g = b = brightness;
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   d45d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d45d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d45dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45e0:	4606      	mov	r6, r0
   d45e2:	460f      	mov	r7, r1
   d45e4:	d510      	bpl.n	d4608 <_ZN12ChainableLED11setColorHSBEhfff+0x60>
   d45e6:	ee19 0a10 	vmov	r0, s18
   d45ea:	f002 f91f 	bl	d682c <__aeabi_f2d>
   d45ee:	2200      	movs	r2, #0
   d45f0:	4b4d      	ldr	r3, [pc, #308]	; (d4728 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   d45f2:	f001 ffbd 	bl	d6570 <__adddf3>
   d45f6:	4632      	mov	r2, r6
   d45f8:	463b      	mov	r3, r7
   d45fa:	f002 f96b 	bl	d68d4 <__aeabi_dmul>
   d45fe:	f002 fc23 	bl	d6e48 <__aeabi_d2f>
   d4602:	ee08 0a90 	vmov	s17, r0
   d4606:	e003      	b.n	d4610 <_ZN12ChainableLED11setColorHSBEhfff+0x68>
   d4608:	ee79 8a08 	vadd.f32	s17, s18, s16
   d460c:	eee9 8a48 	vfms.f32	s17, s18, s16
   d4610:	ee19 0a90 	vmov	r0, s19
   d4614:	f002 f90a 	bl	d682c <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   d4618:	4632      	mov	r2, r6
   d461a:	463b      	mov	r3, r7
   d461c:	4604      	mov	r4, r0
   d461e:	460d      	mov	r5, r1
   d4620:	4630      	mov	r0, r6
   d4622:	4639      	mov	r1, r7
   d4624:	f001 ffa4 	bl	d6570 <__adddf3>
   d4628:	4606      	mov	r6, r0
   d462a:	ee18 0a90 	vmov	r0, s17
   d462e:	460f      	mov	r7, r1
   d4630:	f002 f8fc 	bl	d682c <__aeabi_f2d>
   d4634:	4602      	mov	r2, r0
   d4636:	460b      	mov	r3, r1
   d4638:	4630      	mov	r0, r6
   d463a:	4639      	mov	r1, r7
   d463c:	f001 ff96 	bl	d656c <__aeabi_dsub>
   d4640:	f002 fc02 	bl	d6e48 <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4644:	a334      	add	r3, pc, #208	; (adr r3, d4718 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4646:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
   d464a:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d464e:	4629      	mov	r1, r5
   d4650:	4620      	mov	r0, r4
   d4652:	f001 ff8d 	bl	d6570 <__adddf3>
   d4656:	f002 fbf7 	bl	d6e48 <__aeabi_d2f>
   d465a:	eef0 0a68 	vmov.f32	s1, s17
   d465e:	ee01 0a10 	vmov	s2, r0
   d4662:	eeb0 0a49 	vmov.f32	s0, s18
   d4666:	f7ff ff1b 	bl	d44a0 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   d466a:	eeb0 1a69 	vmov.f32	s2, s19
   d466e:	eef0 0a68 	vmov.f32	s1, s17
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d4672:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   d4676:	eeb0 0a49 	vmov.f32	s0, s18
   d467a:	f7ff ff11 	bl	d44a0 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d467e:	a326      	add	r3, pc, #152	; (adr r3, d4718 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d4680:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4684:	4620      	mov	r0, r4
   d4686:	4629      	mov	r1, r5
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
   d4688:	eef0 9a40 	vmov.f32	s19, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d468c:	f001 ff6e 	bl	d656c <__aeabi_dsub>
   d4690:	f002 fbda 	bl	d6e48 <__aeabi_d2f>
   d4694:	eef0 0a68 	vmov.f32	s1, s17
   d4698:	ee01 0a10 	vmov	s2, r0
   d469c:	eeb0 0a49 	vmov.f32	s0, s18
   d46a0:	f7ff fefe 	bl	d44a0 <_Z7hue2rgbfff>
   d46a4:	eef0 8a40 	vmov.f32	s17, s0
   d46a8:	e003      	b.n	d46b2 <_ZN12ChainableLED11setColorHSBEhfff+0x10a>
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
    {
        r = g = b = brightness;
   d46aa:	eef0 8a41 	vmov.f32	s17, s2
   d46ae:	eef0 9a41 	vmov.f32	s19, s2
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
        b = hue2rgb(p, q, hue - 1.0/3.0);
    }

    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   d46b2:	ee19 0a90 	vmov	r0, s19
   d46b6:	f002 f8b9 	bl	d682c <__aeabi_f2d>
   d46ba:	a319      	add	r3, pc, #100	; (adr r3, d4720 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d46bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46c0:	f002 f908 	bl	d68d4 <__aeabi_dmul>
   d46c4:	f002 fba0 	bl	d6e08 <__aeabi_d2uiz>
   d46c8:	b2c5      	uxtb	r5, r0
   d46ca:	ee18 0a10 	vmov	r0, s16
   d46ce:	f002 f8ad 	bl	d682c <__aeabi_f2d>
   d46d2:	a313      	add	r3, pc, #76	; (adr r3, d4720 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d46d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46d8:	f002 f8fc 	bl	d68d4 <__aeabi_dmul>
   d46dc:	f002 fb94 	bl	d6e08 <__aeabi_d2uiz>
   d46e0:	b2c4      	uxtb	r4, r0
   d46e2:	ee18 0a90 	vmov	r0, s17
   d46e6:	f002 f8a1 	bl	d682c <__aeabi_f2d>
   d46ea:	a30d      	add	r3, pc, #52	; (adr r3, d4720 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d46ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46f0:	f002 f8f0 	bl	d68d4 <__aeabi_dmul>
   d46f4:	f002 fb88 	bl	d6e08 <__aeabi_d2uiz>
   d46f8:	b2c0      	uxtb	r0, r0
   d46fa:	9000      	str	r0, [sp, #0]
   d46fc:	462b      	mov	r3, r5
   d46fe:	4622      	mov	r2, r4
   d4700:	4649      	mov	r1, r9
   d4702:	4640      	mov	r0, r8
   d4704:	f7ff fe61 	bl	d43ca <_ZN12ChainableLED11setColorRGBEhhhh>
}
   d4708:	b003      	add	sp, #12
   d470a:	ecbd 8b04 	vpop	{d8-d9}
   d470e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4712:	bf00      	nop
   d4714:	f3af 8000 	nop.w
   d4718:	55555555 	.word	0x55555555
   d471c:	3fd55555 	.word	0x3fd55555
   d4720:	00000000 	.word	0x00000000
   d4724:	406fe000 	.word	0x406fe000
   d4728:	3ff00000 	.word	0x3ff00000

000d472c <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
   d472c:	f000 b994 	b.w	d4a58 <HAL_Pin_Map>

000d4730 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4730:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4732:	6803      	ldr	r3, [r0, #0]
   d4734:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4736:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4738:	d904      	bls.n	d4744 <nrf_gpio_pin_port_decode+0x14>
   d473a:	4a07      	ldr	r2, [pc, #28]	; (d4758 <nrf_gpio_pin_port_decode+0x28>)
   d473c:	2100      	movs	r1, #0
   d473e:	200a      	movs	r0, #10
   d4740:	f000 faa2 	bl	d4c88 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4744:	6823      	ldr	r3, [r4, #0]
   d4746:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4748:	bf83      	ittte	hi
   d474a:	f003 031f 	andhi.w	r3, r3, #31
   d474e:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4750:	4802      	ldrhi	r0, [pc, #8]	; (d475c <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4752:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4756:	bd10      	pop	{r4, pc}
   d4758:	000d4a39 	.word	0x000d4a39
   d475c:	50000300 	.word	0x50000300

000d4760 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4760:	b507      	push	{r0, r1, r2, lr}
   d4762:	ab02      	add	r3, sp, #8
   d4764:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4768:	4618      	mov	r0, r3
   d476a:	f7ff ffe1 	bl	d4730 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d476e:	9a01      	ldr	r2, [sp, #4]
   d4770:	2301      	movs	r3, #1
   d4772:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4774:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4778:	b003      	add	sp, #12
   d477a:	f85d fb04 	ldr.w	pc, [sp], #4

000d477e <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d477e:	b507      	push	{r0, r1, r2, lr}
   d4780:	ab02      	add	r3, sp, #8
   d4782:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4786:	4618      	mov	r0, r3
   d4788:	f7ff ffd2 	bl	d4730 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d478c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4790:	9801      	ldr	r0, [sp, #4]
   d4792:	fa23 f000 	lsr.w	r0, r3, r0
}
   d4796:	f000 0001 	and.w	r0, r0, #1
   d479a:	b003      	add	sp, #12
   d479c:	f85d fb04 	ldr.w	pc, [sp], #4

000d47a0 <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d47a0:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d47a2:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d47a4:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d47a6:	7402      	strb	r2, [r0, #16]
}
   d47a8:	4770      	bx	lr
	...

000d47ac <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d47ac:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d47ae:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d47b0:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d47b2:	7980      	ldrb	r0, [r0, #6]
   d47b4:	f001 fd00 	bl	d61b8 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47b8:	4a07      	ldr	r2, [pc, #28]	; (d47d8 <_ZN3DHT5beginEv+0x2c>)
   d47ba:	79a3      	ldrb	r3, [r4, #6]
   d47bc:	6812      	ldr	r2, [r2, #0]
   d47be:	011b      	lsls	r3, r3, #4
   d47c0:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d47c2:	5cd0      	ldrb	r0, [r2, r3]
   d47c4:	784b      	ldrb	r3, [r1, #1]
   d47c6:	f003 031f 	and.w	r3, r3, #31
   d47ca:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d47ce:	f7ff ffc7 	bl	d4760 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d47d2:	2300      	movs	r3, #0
   d47d4:	60e3      	str	r3, [r4, #12]
   d47d6:	bd10      	pop	{r4, pc}
   d47d8:	2003e4c8 	.word	0x2003e4c8

000d47dc <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d47dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47e0:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d47e2:	f000 f931 	bl	d4a48 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d47e6:	68e3      	ldr	r3, [r4, #12]
   d47e8:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d47ea:	bf84      	itt	hi
   d47ec:	2300      	movhi	r3, #0
   d47ee:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d47f0:	7c23      	ldrb	r3, [r4, #16]
   d47f2:	b933      	cbnz	r3, d4802 <_ZN3DHT4readEv+0x26>
   d47f4:	68e3      	ldr	r3, [r4, #12]
   d47f6:	1ac0      	subs	r0, r0, r3
   d47f8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d47fc:	d201      	bcs.n	d4802 <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d47fe:	2001      	movs	r0, #1
   d4800:	e0a8      	b.n	d4954 <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4802:	2500      	movs	r5, #0

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4804:	4e55      	ldr	r6, [pc, #340]	; (d495c <_ZN3DHT4readEv+0x180>)
   d4806:	7425      	strb	r5, [r4, #16]
   d4808:	f000 f91e 	bl	d4a48 <HAL_Timer_Get_Milli_Seconds>
   d480c:	79a3      	ldrb	r3, [r4, #6]
   d480e:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d4810:	60e0      	str	r0, [r4, #12]
   d4812:	011b      	lsls	r3, r3, #4
   d4814:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4816:	7125      	strb	r5, [r4, #4]
   d4818:	70e5      	strb	r5, [r4, #3]
   d481a:	70a5      	strb	r5, [r4, #2]
   d481c:	7065      	strb	r5, [r4, #1]
   d481e:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4820:	5cd0      	ldrb	r0, [r2, r3]
   d4822:	784b      	ldrb	r3, [r1, #1]
   d4824:	f003 031f 	and.w	r3, r3, #31
   d4828:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d482c:	f7ff ff98 	bl	d4760 <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d4830:	20fa      	movs	r0, #250	; 0xfa
   d4832:	f000 fb4e 	bl	d4ed2 <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d4836:	2101      	movs	r1, #1
   d4838:	79a0      	ldrb	r0, [r4, #6]
   d483a:	f001 fcbd 	bl	d61b8 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d483e:	79a3      	ldrb	r3, [r4, #6]
   d4840:	6832      	ldr	r2, [r6, #0]
   d4842:	011b      	lsls	r3, r3, #4
   d4844:	18d1      	adds	r1, r2, r3
   d4846:	5cd2      	ldrb	r2, [r2, r3]
   d4848:	784b      	ldrb	r3, [r1, #1]
   d484a:	a802      	add	r0, sp, #8
   d484c:	f003 031f 	and.w	r3, r3, #31
   d4850:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4854:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4858:	f7ff ff6a 	bl	d4730 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d485c:	9b01      	ldr	r3, [sp, #4]
   d485e:	f04f 0801 	mov.w	r8, #1
   d4862:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4866:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d486a:	2014      	movs	r0, #20
   d486c:	f000 fb31 	bl	d4ed2 <delay>
	noInterrupts();
   d4870:	f000 fec2 	bl	d55f8 <_Z12noInterruptsv>

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4874:	79a3      	ldrb	r3, [r4, #6]
   d4876:	6832      	ldr	r2, [r6, #0]
   d4878:	011b      	lsls	r3, r3, #4
   d487a:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d487c:	5cd0      	ldrb	r0, [r2, r3]
   d487e:	784b      	ldrb	r3, [r1, #1]
   d4880:	f003 031f 	and.w	r3, r3, #31
   d4884:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4888:	f7ff ff6a 	bl	d4760 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d488c:	2028      	movs	r0, #40	; 0x28
   d488e:	f000 f8d3 	bl	d4a38 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4892:	4629      	mov	r1, r5
   d4894:	79a0      	ldrb	r0, [r4, #6]
   d4896:	f001 fc8f 	bl	d61b8 <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d489a:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d489c:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d48a0:	79a3      	ldrb	r3, [r4, #6]
   d48a2:	6832      	ldr	r2, [r6, #0]
   d48a4:	011b      	lsls	r3, r3, #4
   d48a6:	18d1      	adds	r1, r2, r3
   d48a8:	f812 a003 	ldrb.w	sl, [r2, r3]
   d48ac:	784b      	ldrb	r3, [r1, #1]
   d48ae:	f003 031f 	and.w	r3, r3, #31
   d48b2:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d48b6:	4650      	mov	r0, sl
   d48b8:	f7ff ff61 	bl	d477e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d48bc:	4650      	mov	r0, sl
   d48be:	f7ff ff5e 	bl	d477e <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d48c2:	4580      	cmp	r8, r0
   d48c4:	fa5f f98b 	uxtb.w	r9, fp
   d48c8:	d108      	bne.n	d48dc <_ZN3DHT4readEv+0x100>
   d48ca:	2001      	movs	r0, #1
   d48cc:	f10b 0b01 	add.w	fp, fp, #1
   d48d0:	f000 f8b2 	bl	d4a38 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d48d4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d48d8:	d1e2      	bne.n	d48a0 <_ZN3DHT4readEv+0xc4>
   d48da:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d48dc:	79a3      	ldrb	r3, [r4, #6]
   d48de:	6832      	ldr	r2, [r6, #0]
   d48e0:	011b      	lsls	r3, r3, #4
   d48e2:	18d1      	adds	r1, r2, r3
   d48e4:	f812 8003 	ldrb.w	r8, [r2, r3]
   d48e8:	784b      	ldrb	r3, [r1, #1]
   d48ea:	f003 031f 	and.w	r3, r3, #31
   d48ee:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d48f2:	4640      	mov	r0, r8
   d48f4:	f7ff ff43 	bl	d477e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d48f8:	4640      	mov	r0, r8
   d48fa:	f7ff ff40 	bl	d477e <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d48fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4902:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d4906:	d014      	beq.n	d4932 <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d4908:	2d03      	cmp	r5, #3
   d490a:	d90e      	bls.n	d492a <_ZN3DHT4readEv+0x14e>
   d490c:	07eb      	lsls	r3, r5, #31
   d490e:	d40c      	bmi.n	d492a <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4910:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4912:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4914:	5ca3      	ldrb	r3, [r4, r2]
   d4916:	005b      	lsls	r3, r3, #1
   d4918:	b2db      	uxtb	r3, r3
   d491a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d491c:	7a21      	ldrb	r1, [r4, #8]
   d491e:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4920:	bf3c      	itt	cc
   d4922:	f043 0301 	orrcc.w	r3, r3, #1
   d4926:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4928:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d492a:	3501      	adds	r5, #1
   d492c:	b2ed      	uxtb	r5, r5
   d492e:	2d55      	cmp	r5, #85	; 0x55
   d4930:	d1b4      	bne.n	d489c <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d4932:	f000 fe63 	bl	d55fc <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4936:	2f27      	cmp	r7, #39	; 0x27
   d4938:	d90b      	bls.n	d4952 <_ZN3DHT4readEv+0x176>
   d493a:	7822      	ldrb	r2, [r4, #0]
   d493c:	7863      	ldrb	r3, [r4, #1]
   d493e:	7921      	ldrb	r1, [r4, #4]
   d4940:	4413      	add	r3, r2
   d4942:	78a2      	ldrb	r2, [r4, #2]
   d4944:	4413      	add	r3, r2
   d4946:	78e2      	ldrb	r2, [r4, #3]
   d4948:	4413      	add	r3, r2
   d494a:	b2db      	uxtb	r3, r3
   d494c:	4299      	cmp	r1, r3
   d494e:	f43f af56 	beq.w	d47fe <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d4952:	2000      	movs	r0, #0

}
   d4954:	b003      	add	sp, #12
   d4956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d495a:	bf00      	nop
   d495c:	2003e4c8 	.word	0x2003e4c8

000d4960 <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d4960:	b510      	push	{r4, lr}
   d4962:	4604      	mov	r4, r0
	float f;

	if (read())
   d4964:	f7ff ff3a 	bl	d47dc <_ZN3DHT4readEv>
   d4968:	b128      	cbz	r0, d4976 <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d496a:	78a3      	ldrb	r3, [r4, #2]
   d496c:	ee00 3a10 	vmov	s0, r3
   d4970:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4974:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4976:	ed9f 0a01 	vldr	s0, [pc, #4]	; d497c <_ZN3DHT15readTemperatureEv+0x1c>
}
   d497a:	bd10      	pop	{r4, pc}
   d497c:	7fc00000 	.word	0x7fc00000

000d4980 <_ZN3DHT16getTempFarenheitEv>:
{
	return readTemperature();
}

float DHT::getTempFarenheit()
{
   d4980:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4982:	f7ff ffed 	bl	d4960 <_ZN3DHT15readTemperatureEv>
   d4986:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d498a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d498e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d4992:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4996:	eddf 7a02 	vldr	s15, [pc, #8]	; d49a0 <_ZN3DHT16getTempFarenheitEv+0x20>
   d499a:	ee30 0a27 	vadd.f32	s0, s0, s15
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	42000000 	.word	0x42000000

000d49a4 <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d49a4:	b510      	push	{r4, lr}
   d49a6:	4604      	mov	r4, r0
	float f;

	if (read())
   d49a8:	f7ff ff18 	bl	d47dc <_ZN3DHT4readEv>
   d49ac:	b128      	cbz	r0, d49ba <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d49ae:	7823      	ldrb	r3, [r4, #0]
   d49b0:	ee00 3a10 	vmov	s0, r3
   d49b4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d49b8:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d49ba:	ed9f 0a01 	vldr	s0, [pc, #4]	; d49c0 <_ZN3DHT12readHumidityEv+0x1c>
}
   d49be:	bd10      	pop	{r4, pc}
   d49c0:	7fc00000 	.word	0x7fc00000

000d49c4 <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d49c4:	f7ff bfee 	b.w	d49a4 <_ZN3DHT12readHumidityEv>

000d49c8 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d49c8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d49ca:	f000 f845 	bl	d4a58 <HAL_Pin_Map>
   d49ce:	4b01      	ldr	r3, [pc, #4]	; (d49d4 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d49d0:	6018      	str	r0, [r3, #0]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	2003e4c8 	.word	0x2003e4c8

000d49d8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <os_thread_is_current+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	689b      	ldr	r3, [r3, #8]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030248 	.word	0x00030248

000d49e8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <os_thread_join+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	691b      	ldr	r3, [r3, #16]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030248 	.word	0x00030248

000d49f8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <os_thread_cleanup+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	695b      	ldr	r3, [r3, #20]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030248 	.word	0x00030248

000d4a08 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <os_mutex_create+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030248 	.word	0x00030248

000d4a18 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <os_mutex_recursive_create+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030248 	.word	0x00030248

000d4a28 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <HAL_RNG_GetRandomNumber+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	685b      	ldr	r3, [r3, #4]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030218 	.word	0x00030218

000d4a38 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <HAL_Delay_Microseconds+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	68db      	ldr	r3, [r3, #12]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030218 	.word	0x00030218

000d4a48 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	695b      	ldr	r3, [r3, #20]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030218 	.word	0x00030218

000d4a58 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <HAL_Pin_Map+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	681b      	ldr	r3, [r3, #0]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	0003022c 	.word	0x0003022c

000d4a68 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <HAL_Validate_Pin_Function+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	685b      	ldr	r3, [r3, #4]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	0003022c 	.word	0x0003022c

000d4a78 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <HAL_Pin_Mode+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	689b      	ldr	r3, [r3, #8]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003022c 	.word	0x0003022c

000d4a88 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <HAL_Get_Pin_Mode+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	68db      	ldr	r3, [r3, #12]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	0003022c 	.word	0x0003022c

000d4a98 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <HAL_GPIO_Write+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	691b      	ldr	r3, [r3, #16]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	0003022c 	.word	0x0003022c

000d4aa8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <HAL_Interrupts_Enable_All+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6a1b      	ldr	r3, [r3, #32]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003022c 	.word	0x0003022c

000d4ab8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <HAL_Interrupts_Disable_All+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003022c 	.word	0x0003022c

000d4ac8 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <HAL_ADC_Read+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003022c 	.word	0x0003022c

000d4ad8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <HAL_I2C_Write_Data+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	6a1b      	ldr	r3, [r3, #32]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	00030228 	.word	0x00030228

000d4ae8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <HAL_I2C_Available_Data+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	00030228 	.word	0x00030228

000d4af8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <HAL_I2C_Read_Data+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	00030228 	.word	0x00030228

000d4b08 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <HAL_I2C_Peek_Data+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	00030228 	.word	0x00030228

000d4b18 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <HAL_I2C_Flush_Data+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	00030228 	.word	0x00030228

000d4b28 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <HAL_I2C_Is_Enabled+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	00030228 	.word	0x00030228

000d4b38 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <HAL_I2C_Init+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	00030228 	.word	0x00030228

000d4b48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <inet_inet_ntop+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	695b      	ldr	r3, [r3, #20]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	00030264 	.word	0x00030264

000d4b58 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <netdb_freeaddrinfo+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	689b      	ldr	r3, [r3, #8]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	00030268 	.word	0x00030268

000d4b68 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <netdb_getaddrinfo+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	68db      	ldr	r3, [r3, #12]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	00030268 	.word	0x00030268

000d4b78 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <HAL_SPI_Init+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	69db      	ldr	r3, [r3, #28]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	00030230 	.word	0x00030230

000d4b88 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <HAL_SPI_Is_Enabled+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	6a1b      	ldr	r3, [r3, #32]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030230 	.word	0x00030230

000d4b98 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <HAL_USART_Init+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	681b      	ldr	r3, [r3, #0]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	0003023c 	.word	0x0003023c

000d4ba8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <HAL_USART_Write_Data+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	68db      	ldr	r3, [r3, #12]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	0003023c 	.word	0x0003023c

000d4bb8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <HAL_USART_Available_Data+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	691b      	ldr	r3, [r3, #16]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	0003023c 	.word	0x0003023c

000d4bc8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <HAL_USART_Read_Data+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	695b      	ldr	r3, [r3, #20]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	0003023c 	.word	0x0003023c

000d4bd8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <HAL_USART_Peek_Data+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	699b      	ldr	r3, [r3, #24]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	0003023c 	.word	0x0003023c

000d4be8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <HAL_USART_Flush_Data+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	69db      	ldr	r3, [r3, #28]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	0003023c 	.word	0x0003023c

000d4bf8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <HAL_USART_Is_Enabled+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6a1b      	ldr	r3, [r3, #32]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	0003023c 	.word	0x0003023c

000d4c08 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <HAL_USART_Available_Data_For_Write+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	0003023c 	.word	0x0003023c

000d4c18 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <HAL_USB_USART_Init+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	681b      	ldr	r3, [r3, #0]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	0003024c 	.word	0x0003024c

000d4c28 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <HAL_USB_USART_Begin+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	685b      	ldr	r3, [r3, #4]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	0003024c 	.word	0x0003024c

000d4c38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <HAL_USB_USART_Available_Data+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	691b      	ldr	r3, [r3, #16]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	0003024c 	.word	0x0003024c

000d4c48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	695b      	ldr	r3, [r3, #20]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	0003024c 	.word	0x0003024c

000d4c58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <HAL_USB_USART_Receive_Data+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	699b      	ldr	r3, [r3, #24]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	0003024c 	.word	0x0003024c

000d4c68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <HAL_USB_USART_Send_Data+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	69db      	ldr	r3, [r3, #28]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	0003024c 	.word	0x0003024c

000d4c78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <HAL_USB_USART_Flush_Data+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	6a1b      	ldr	r3, [r3, #32]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	0003024c 	.word	0x0003024c

000d4c88 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <panic_+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030260 	.word	0x00030260

000d4c98 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <set_system_mode+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	685b      	ldr	r3, [r3, #4]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030220 	.word	0x00030220

000d4ca8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <system_delay_ms+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	695b      	ldr	r3, [r3, #20]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030220 	.word	0x00030220

000d4cb8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <application_thread_current+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030220 	.word	0x00030220

000d4cc8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <application_thread_invoke+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	00030220 	.word	0x00030220

000d4cd8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b03      	ldr	r3, [pc, #12]	; (d4ce8 <system_ctrl_set_app_request_handler+0x10>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ce2:	9301      	str	r3, [sp, #4]
   d4ce4:	bd08      	pop	{r3, pc}
   d4ce6:	0000      	.short	0x0000
   d4ce8:	00030220 	.word	0x00030220

000d4cec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b03      	ldr	r3, [pc, #12]	; (d4cfc <system_ctrl_set_result+0x10>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cf6:	9301      	str	r3, [sp, #4]
   d4cf8:	bd08      	pop	{r3, pc}
   d4cfa:	0000      	.short	0x0000
   d4cfc:	00030220 	.word	0x00030220

000d4d00 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <spark_variable+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	681b      	ldr	r3, [r3, #0]
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030244 	.word	0x00030244

000d4d10 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <spark_function+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	685b      	ldr	r3, [r3, #4]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030244 	.word	0x00030244

000d4d20 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <spark_send_event+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	6a1b      	ldr	r3, [r3, #32]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030244 	.word	0x00030244

000d4d30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030244 	.word	0x00030244

000d4d40 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <network_connect+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	685b      	ldr	r3, [r3, #4]
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	00030240 	.word	0x00030240

000d4d50 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <network_connecting+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	689b      	ldr	r3, [r3, #8]
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	00030240 	.word	0x00030240

000d4d60 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <network_disconnect+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	68db      	ldr	r3, [r3, #12]
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	00030240 	.word	0x00030240

000d4d70 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <network_ready+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	691b      	ldr	r3, [r3, #16]
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	00030240 	.word	0x00030240

000d4d80 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <network_on+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	695b      	ldr	r3, [r3, #20]
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	00030240 	.word	0x00030240

000d4d90 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <network_off+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	699b      	ldr	r3, [r3, #24]
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	00030240 	.word	0x00030240

000d4da0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <network_listen+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	69db      	ldr	r3, [r3, #28]
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	00030240 	.word	0x00030240

000d4db0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4db0:	b508      	push	{r3, lr}
   d4db2:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <network_listening+0xc>)
   d4db4:	681b      	ldr	r3, [r3, #0]
   d4db6:	6a1b      	ldr	r3, [r3, #32]
   d4db8:	9301      	str	r3, [sp, #4]
   d4dba:	bd08      	pop	{r3, pc}
   d4dbc:	00030240 	.word	0x00030240

000d4dc0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <network_set_listen_timeout+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	00030240 	.word	0x00030240

000d4dd0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <network_get_listen_timeout+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	00030240 	.word	0x00030240

000d4de0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <malloc+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	681b      	ldr	r3, [r3, #0]
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	0003021c 	.word	0x0003021c

000d4df0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <free+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	685b      	ldr	r3, [r3, #4]
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	0003021c 	.word	0x0003021c

000d4e00 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e00:	b508      	push	{r3, lr}
   d4e02:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <realloc+0xc>)
   d4e04:	681b      	ldr	r3, [r3, #0]
   d4e06:	689b      	ldr	r3, [r3, #8]
   d4e08:	9301      	str	r3, [sp, #4]
   d4e0a:	bd08      	pop	{r3, pc}
   d4e0c:	0003021c 	.word	0x0003021c

000d4e10 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b02      	ldr	r3, [pc, #8]	; (d4e1c <vsnprintf+0xc>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e18:	9301      	str	r3, [sp, #4]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	0003021c 	.word	0x0003021c

000d4e20 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e20:	b508      	push	{r3, lr}
   d4e22:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <abort+0xc>)
   d4e24:	681b      	ldr	r3, [r3, #0]
   d4e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e28:	9301      	str	r3, [sp, #4]
   d4e2a:	bd08      	pop	{r3, pc}
   d4e2c:	0003021c 	.word	0x0003021c

000d4e30 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4e30:	b508      	push	{r3, lr}
   d4e32:	4b02      	ldr	r3, [pc, #8]	; (d4e3c <_malloc_r+0xc>)
   d4e34:	681b      	ldr	r3, [r3, #0]
   d4e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e38:	9301      	str	r3, [sp, #4]
   d4e3a:	bd08      	pop	{r3, pc}
   d4e3c:	0003021c 	.word	0x0003021c

000d4e40 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d4e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e44:	ed2d 8b02 	vpush	{d8}
   d4e48:	eeb0 8a44 	vmov.f32	s16, s8
   d4e4c:	eef0 8a64 	vmov.f32	s17, s9
   d4e50:	ec55 4b11 	vmov	r4, r5, d1
   d4e54:	ec57 6b12 	vmov	r6, r7, d2
   d4e58:	b083      	sub	sp, #12
    if (fromEnd == fromStart) {
   d4e5a:	ee11 2a10 	vmov	r2, s2
   d4e5e:	462b      	mov	r3, r5
   d4e60:	ee12 0a10 	vmov	r0, s4
   d4e64:	4639      	mov	r1, r7
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   d4e66:	ed8d 0b00 	vstr	d0, [sp]
   d4e6a:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   d4e6e:	f001 ff99 	bl	d6da4 <__aeabi_dcmpeq>
   d4e72:	ed9d 0b00 	vldr	d0, [sp]
   d4e76:	bb38      	cbnz	r0, d4ec8 <_Z3mapddddd+0x88>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4e78:	ec51 0b10 	vmov	r0, r1, d0
   d4e7c:	4622      	mov	r2, r4
   d4e7e:	462b      	mov	r3, r5
   d4e80:	f001 fb74 	bl	d656c <__aeabi_dsub>
   d4e84:	4652      	mov	r2, sl
   d4e86:	4680      	mov	r8, r0
   d4e88:	4689      	mov	r9, r1
   d4e8a:	465b      	mov	r3, fp
   d4e8c:	ec51 0b18 	vmov	r0, r1, d8
   d4e90:	f001 fb6c 	bl	d656c <__aeabi_dsub>
   d4e94:	4602      	mov	r2, r0
   d4e96:	460b      	mov	r3, r1
   d4e98:	4640      	mov	r0, r8
   d4e9a:	4649      	mov	r1, r9
   d4e9c:	f001 fd1a 	bl	d68d4 <__aeabi_dmul>
   d4ea0:	4622      	mov	r2, r4
   d4ea2:	4680      	mov	r8, r0
   d4ea4:	4689      	mov	r9, r1
   d4ea6:	462b      	mov	r3, r5
   d4ea8:	4630      	mov	r0, r6
   d4eaa:	4639      	mov	r1, r7
   d4eac:	f001 fb5e 	bl	d656c <__aeabi_dsub>
   d4eb0:	4602      	mov	r2, r0
   d4eb2:	460b      	mov	r3, r1
   d4eb4:	4640      	mov	r0, r8
   d4eb6:	4649      	mov	r1, r9
   d4eb8:	f001 fe36 	bl	d6b28 <__aeabi_ddiv>
   d4ebc:	4652      	mov	r2, sl
   d4ebe:	465b      	mov	r3, fp
   d4ec0:	f001 fb56 	bl	d6570 <__adddf3>
   d4ec4:	ec41 0b10 	vmov	d0, r0, r1
}
   d4ec8:	b003      	add	sp, #12
   d4eca:	ecbd 8b02 	vpop	{d8}
   d4ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4ed2 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ed2:	2100      	movs	r1, #0
   d4ed4:	f7ff bee8 	b.w	d4ca8 <system_delay_ms>

000d4ed8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4ed8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4eda:	6883      	ldr	r3, [r0, #8]
   d4edc:	4604      	mov	r4, r0
   d4ede:	b90b      	cbnz	r3, d4ee4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4ee0:	f001 f9f5 	bl	d62ce <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ee4:	68c3      	ldr	r3, [r0, #12]
   d4ee6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4ee8:	68a3      	ldr	r3, [r4, #8]
   d4eea:	b11b      	cbz	r3, d4ef4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4eec:	2203      	movs	r2, #3
   d4eee:	4621      	mov	r1, r4
   d4ef0:	4620      	mov	r0, r4
   d4ef2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	2110      	movs	r1, #16
}
   d4ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4efc:	f001 b9e5 	b.w	d62ca <_ZdlPvj>

000d4f00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f00:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4f02:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f04:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4f06:	689b      	ldr	r3, [r3, #8]
   d4f08:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4f0a:	68a3      	ldr	r3, [r4, #8]
   d4f0c:	3b01      	subs	r3, #1
   d4f0e:	60a3      	str	r3, [r4, #8]
   d4f10:	b92b      	cbnz	r3, d4f1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105+0x1e>
            _M_destroy();
   d4f12:	6823      	ldr	r3, [r4, #0]
   d4f14:	4620      	mov	r0, r4
   d4f16:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4f1c:	4718      	bx	r3
   d4f1e:	bd10      	pop	{r4, pc}

000d4f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4f20:	b510      	push	{r4, lr}
   d4f22:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4f24:	6800      	ldr	r0, [r0, #0]
   d4f26:	b128      	cbz	r0, d4f34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4f28:	6843      	ldr	r3, [r0, #4]
   d4f2a:	3b01      	subs	r3, #1
   d4f2c:	6043      	str	r3, [r0, #4]
   d4f2e:	b90b      	cbnz	r3, d4f34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4f30:	f7ff ffe6 	bl	d4f00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4f34:	4620      	mov	r0, r4
   d4f36:	bd10      	pop	{r4, pc}

000d4f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4f38:	680b      	ldr	r3, [r1, #0]
   d4f3a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4f3c:	b113      	cbz	r3, d4f44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4f3e:	685a      	ldr	r2, [r3, #4]
   d4f40:	3201      	adds	r2, #1
   d4f42:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4f44:	4770      	bx	lr
	...

000d4f48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f48:	4802      	ldr	r0, [pc, #8]	; (d4f54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4f4a:	2300      	movs	r3, #0
   d4f4c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f4e:	f7ff bd63 	b.w	d4a18 <os_mutex_recursive_create>
   d4f52:	bf00      	nop
   d4f54:	2003e4cc 	.word	0x2003e4cc

000d4f58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f58:	4770      	bx	lr

000d4f5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4f5a:	2000      	movs	r0, #0
   d4f5c:	4770      	bx	lr

000d4f5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f5e:	b510      	push	{r4, lr}
   d4f60:	2110      	movs	r1, #16
   d4f62:	4604      	mov	r4, r0
   d4f64:	f001 f9b1 	bl	d62ca <_ZdlPvj>
   d4f68:	4620      	mov	r0, r4
   d4f6a:	bd10      	pop	{r4, pc}

000d4f6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4f6c:	b508      	push	{r3, lr}
      { delete this; }
   d4f6e:	b108      	cbz	r0, d4f74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4f70:	f7ff fff5 	bl	d4f5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4f74:	bd08      	pop	{r3, pc}

000d4f76 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f76:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f78:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f7a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4f7c:	b113      	cbz	r3, d4f84 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f7e:	2203      	movs	r2, #3
   d4f80:	4601      	mov	r1, r0
   d4f82:	4798      	blx	r3
    }
   d4f84:	4620      	mov	r0, r4
   d4f86:	bd10      	pop	{r4, pc}

000d4f88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4f88:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f8a:	68c4      	ldr	r4, [r0, #12]
   d4f8c:	b1ec      	cbz	r4, d4fca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4f8e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4f90:	2b02      	cmp	r3, #2
   d4f92:	d102      	bne.n	d4f9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4f94:	68e0      	ldr	r0, [r4, #12]
   d4f96:	f7ff ff2b 	bl	d4df0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4f9a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f9c:	b135      	cbz	r5, d4fac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f9e:	4628      	mov	r0, r5
   d4fa0:	f7ff ffe9 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>
   d4fa4:	2110      	movs	r1, #16
   d4fa6:	4628      	mov	r0, r5
   d4fa8:	f001 f98f 	bl	d62ca <_ZdlPvj>
   d4fac:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4fae:	b135      	cbz	r5, d4fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d4fb0:	4628      	mov	r0, r5
   d4fb2:	f7ff ffe0 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>
   d4fb6:	2110      	movs	r1, #16
   d4fb8:	4628      	mov	r0, r5
   d4fba:	f001 f986 	bl	d62ca <_ZdlPvj>
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	2114      	movs	r1, #20
   d4fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4fc6:	f001 b980 	b.w	d62ca <_ZdlPvj>
   d4fca:	bd38      	pop	{r3, r4, r5, pc}

000d4fcc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4fcc:	b510      	push	{r4, lr}
   d4fce:	b088      	sub	sp, #32
   d4fd0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4fd2:	4668      	mov	r0, sp
   d4fd4:	f000 fe5f 	bl	d5c96 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4fd8:	4669      	mov	r1, sp
   d4fda:	a804      	add	r0, sp, #16
   d4fdc:	f000 fe7d 	bl	d5cda <_ZN6StringC1ERKS_>
   d4fe0:	a804      	add	r0, sp, #16
   d4fe2:	47a0      	blx	r4
   d4fe4:	4604      	mov	r4, r0
   d4fe6:	a804      	add	r0, sp, #16
   d4fe8:	f000 fe0e 	bl	d5c08 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4fec:	4668      	mov	r0, sp
   d4fee:	f000 fe0b 	bl	d5c08 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	b008      	add	sp, #32
   d4ff6:	bd10      	pop	{r4, pc}

000d4ff8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4ffa:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4ffc:	b085      	sub	sp, #20
   d4ffe:	4607      	mov	r7, r0
   d5000:	460e      	mov	r6, r1
   d5002:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5004:	2100      	movs	r1, #0
   d5006:	4622      	mov	r2, r4
   d5008:	4668      	mov	r0, sp
   d500a:	f002 f93e 	bl	d728a <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d500e:	2200      	movs	r2, #0
   d5010:	4669      	mov	r1, sp
   d5012:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d5014:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d5018:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d501a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d501c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d501e:	f7ff fe77 	bl	d4d10 <spark_function>
}
   d5022:	b005      	add	sp, #20
   d5024:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5026 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5026:	b513      	push	{r0, r1, r4, lr}
   d5028:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d502a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d502e:	2300      	movs	r3, #0
   d5030:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5032:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5034:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5036:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5038:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d503a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d503c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d503e:	f7ff ff6f 	bl	d4f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5042:	4620      	mov	r0, r4
   d5044:	b002      	add	sp, #8
   d5046:	bd10      	pop	{r4, pc}

000d5048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d504a:	460c      	mov	r4, r1
   d504c:	ad02      	add	r5, sp, #8
   d504e:	f854 3b04 	ldr.w	r3, [r4], #4
   d5052:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5056:	4606      	mov	r6, r0
   d5058:	460f      	mov	r7, r1
   d505a:	a801      	add	r0, sp, #4
   d505c:	4621      	mov	r1, r4
   d505e:	f7ff ff6b 	bl	d4f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5062:	4629      	mov	r1, r5
   d5064:	4630      	mov	r0, r6
   d5066:	f7ff ffde 	bl	d5026 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d506a:	a801      	add	r0, sp, #4
   d506c:	f7ff ff58 	bl	d4f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5070:	4620      	mov	r0, r4
   d5072:	f7ff ff55 	bl	d4f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5076:	4638      	mov	r0, r7
   d5078:	2108      	movs	r1, #8
   d507a:	f001 f926 	bl	d62ca <_ZdlPvj>
        return p;
    }
   d507e:	4630      	mov	r0, r6
   d5080:	b003      	add	sp, #12
   d5082:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5084 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5084:	b513      	push	{r0, r1, r4, lr}
   d5086:	460b      	mov	r3, r1
   d5088:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d508a:	c803      	ldmia	r0, {r0, r1}
   d508c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5090:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5094:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5098:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d509c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d50a0:	b002      	add	sp, #8
   d50a2:	bd10      	pop	{r4, pc}

000d50a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d50a4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d50a6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d50a8:	b90a      	cbnz	r2, d50ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d50aa:	f001 f910 	bl	d62ce <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50ae:	68c3      	ldr	r3, [r0, #12]
    }
   d50b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50b4:	4718      	bx	r3

000d50b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d50b6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50b8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d50ba:	f100 0110 	add.w	r1, r0, #16
   d50be:	f7ff fff1 	bl	d50a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d50c2:	bd08      	pop	{r3, pc}

000d50c4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d50c4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d50c6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d50c8:	b90a      	cbnz	r2, d50ce <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d50ca:	f001 f900 	bl	d62ce <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50ce:	68c3      	ldr	r3, [r0, #12]
    }
   d50d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50d4:	4718      	bx	r3

000d50d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d50d6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50d8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d50da:	f100 0110 	add.w	r1, r0, #16
   d50de:	f7ff fff1 	bl	d50c4 <_ZNKSt8functionIFvRKbEEclES1_>
   d50e2:	bd08      	pop	{r3, pc}

000d50e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50e4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50e6:	2300      	movs	r3, #0
   d50e8:	6083      	str	r3, [r0, #8]
   d50ea:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50ec:	4604      	mov	r4, r0
   d50ee:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d50f0:	b12b      	cbz	r3, d50fe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d50f2:	2202      	movs	r2, #2
   d50f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d50f6:	68eb      	ldr	r3, [r5, #12]
   d50f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d50fa:	68ab      	ldr	r3, [r5, #8]
   d50fc:	60a3      	str	r3, [r4, #8]
	}
    }
   d50fe:	4620      	mov	r0, r4
   d5100:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5108:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d510c:	b086      	sub	sp, #24
   d510e:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5110:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5114:	808b      	strh	r3, [r1, #4]
   d5116:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5118:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d511a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d511e:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5120:	f04f 0002 	mov.w	r0, #2
   d5124:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5128:	4299      	cmp	r1, r3
   d512a:	d103      	bne.n	d5134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d512c:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5130:	2d00      	cmp	r5, #0
   d5132:	d1f7      	bne.n	d5124 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5134:	d002      	beq.n	d513c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d5136:	f88d 1000 	strb.w	r1, [sp]
   d513a:	e06b      	b.n	d5214 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d513c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5140:	bf1e      	ittt	ne
   d5142:	60e7      	strne	r7, [r4, #12]
   d5144:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5146:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5148:	2301      	movs	r3, #1
   d514a:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d514e:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5150:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5152:	f104 0308 	add.w	r3, r4, #8
   d5156:	f3bf 8f5f 	dmb	sy
   d515a:	e853 6f00 	ldrex	r6, [r3]
   d515e:	e843 0200 	strex	r2, r0, [r3]
   d5162:	2a00      	cmp	r2, #0
   d5164:	d1f9      	bne.n	d515a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d5166:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d516a:	2e00      	cmp	r6, #0
   d516c:	d052      	beq.n	d5214 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d516e:	f7ff fda3 	bl	d4cb8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5172:	b120      	cbz	r0, d517e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5174:	4629      	mov	r1, r5
   d5176:	4630      	mov	r0, r6
   d5178:	f7ff ff94 	bl	d50a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d517c:	e043      	b.n	d5206 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d517e:	4631      	mov	r1, r6
   d5180:	4668      	mov	r0, sp
   d5182:	f7ff ffaf 	bl	d50e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5186:	68e0      	ldr	r0, [r4, #12]
   d5188:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d518c:	b108      	cbz	r0, d5192 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d518e:	f002 f8bb 	bl	d7308 <strdup>
   d5192:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5194:	2010      	movs	r0, #16
   d5196:	f8ad 5014 	strh.w	r5, [sp, #20]
   d519a:	f7fe ff7c 	bl	d4096 <_Znwj>
   d519e:	4605      	mov	r5, r0
   d51a0:	b330      	cbz	r0, d51f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51a2:	f04f 0800 	mov.w	r8, #0
   d51a6:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51aa:	2018      	movs	r0, #24
   d51ac:	f7fe ff73 	bl	d4096 <_Znwj>
   d51b0:	4604      	mov	r4, r0
   d51b2:	b1c0      	cbz	r0, d51e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51b4:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d51b8:	4601      	mov	r1, r0
   d51ba:	4668      	mov	r0, sp
   d51bc:	f7ff ff62 	bl	d5084 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51c0:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d51c2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51c4:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51c6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d51c8:	9202      	str	r2, [sp, #8]
   d51ca:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d51cc:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d51ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d51d2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d51d4:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d51d8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d51dc:	9b04      	ldr	r3, [sp, #16]
   d51de:	9203      	str	r2, [sp, #12]
   d51e0:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d51e2:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d51e6:	4b0e      	ldr	r3, [pc, #56]	; (d5220 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d51e8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d51ea:	4b0e      	ldr	r3, [pc, #56]	; (d5224 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51ec:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d51ee:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d51f0:	9804      	ldr	r0, [sp, #16]
   d51f2:	f7ff fdfd 	bl	d4df0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51f6:	4668      	mov	r0, sp
   d51f8:	f7ff febd 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d51fc:	2200      	movs	r2, #0
   d51fe:	4629      	mov	r1, r5
   d5200:	4809      	ldr	r0, [pc, #36]	; (d5228 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5202:	f7ff fd61 	bl	d4cc8 <application_thread_invoke>
   d5206:	4630      	mov	r0, r6
   d5208:	f7ff feb5 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d520c:	2110      	movs	r1, #16
   d520e:	4630      	mov	r0, r6
   d5210:	f001 f85b 	bl	d62ca <_ZdlPvj>
   d5214:	4638      	mov	r0, r7
   d5216:	f7ff fdeb 	bl	d4df0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d521a:	b006      	add	sp, #24
   d521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5220:	000d50b7 	.word	0x000d50b7
   d5224:	000d5315 	.word	0x000d5315
   d5228:	000d4ed9 	.word	0x000d4ed9

000d522c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5230:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5232:	ad07      	add	r5, sp, #28
   d5234:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5238:	4606      	mov	r6, r0
   d523a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d523c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d523e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5240:	460f      	mov	r7, r1
   d5242:	4690      	mov	r8, r2
   d5244:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5248:	f8c5 b004 	str.w	fp, [r5, #4]
   d524c:	f8c5 b008 	str.w	fp, [r5, #8]
   d5250:	9307      	str	r3, [sp, #28]
   d5252:	f7fe ff20 	bl	d4096 <_Znwj>
   d5256:	4604      	mov	r4, r0
   d5258:	b138      	cbz	r0, d526a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d525a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d525e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5262:	f8c0 b004 	str.w	fp, [r0, #4]
   d5266:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d526a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d526c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d526e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5270:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5272:	f7fe ff10 	bl	d4096 <_Znwj>
   d5276:	b128      	cbz	r0, d5284 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5278:	2301      	movs	r3, #1
   d527a:	6043      	str	r3, [r0, #4]
   d527c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d527e:	4b23      	ldr	r3, [pc, #140]	; (d530c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5280:	6003      	str	r3, [r0, #0]
   d5282:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5284:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5286:	4b22      	ldr	r3, [pc, #136]	; (d5310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5288:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d528a:	2008      	movs	r0, #8
   d528c:	f7fe ff03 	bl	d4096 <_Znwj>
   d5290:	4604      	mov	r4, r0
   d5292:	b128      	cbz	r0, d52a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5294:	9b03      	ldr	r3, [sp, #12]
   d5296:	f840 3b04 	str.w	r3, [r0], #4
   d529a:	a904      	add	r1, sp, #16
   d529c:	f7ff fe4c 	bl	d4f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d52a0:	9500      	str	r5, [sp, #0]
   d52a2:	fa5f f38a 	uxtb.w	r3, sl
   d52a6:	464a      	mov	r2, r9
   d52a8:	4641      	mov	r1, r8
   d52aa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d52ac:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d52ae:	f7ff fd37 	bl	d4d20 <spark_send_event>
   d52b2:	b9b8      	cbnz	r0, d52e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d52b4:	9b03      	ldr	r3, [sp, #12]
   d52b6:	785b      	ldrb	r3, [r3, #1]
   d52b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d52bc:	b993      	cbnz	r3, d52e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d52be:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d52c2:	a905      	add	r1, sp, #20
   d52c4:	a803      	add	r0, sp, #12
   d52c6:	9205      	str	r2, [sp, #20]
   d52c8:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52cc:	f7ff ff1a 	bl	d5104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d52d0:	9805      	ldr	r0, [sp, #20]
   d52d2:	f7ff fd8d 	bl	d4df0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d52d6:	a805      	add	r0, sp, #20
   d52d8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d52da:	f7ff feb5 	bl	d5048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52de:	a806      	add	r0, sp, #24
   d52e0:	f7ff fe1e 	bl	d4f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52e4:	9b03      	ldr	r3, [sp, #12]
   d52e6:	9305      	str	r3, [sp, #20]
   d52e8:	a904      	add	r1, sp, #16
   d52ea:	a806      	add	r0, sp, #24
   d52ec:	f7ff fe24 	bl	d4f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d52f0:	a905      	add	r1, sp, #20
   d52f2:	4630      	mov	r0, r6
   d52f4:	f7ff fe97 	bl	d5026 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52f8:	a806      	add	r0, sp, #24
   d52fa:	f7ff fe11 	bl	d4f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52fe:	a804      	add	r0, sp, #16
   d5300:	f7ff fe0e 	bl	d4f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5304:	4630      	mov	r0, r6
   d5306:	b00b      	add	sp, #44	; 0x2c
   d5308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d530c:	000d73ac 	.word	0x000d73ac
   d5310:	000d5481 	.word	0x000d5481

000d5314 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5314:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5318:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d531a:	d006      	beq.n	d532a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d531c:	2a03      	cmp	r2, #3
   d531e:	d017      	beq.n	d5350 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5320:	2a01      	cmp	r2, #1
   d5322:	d121      	bne.n	d5368 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5324:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5326:	6003      	str	r3, [r0, #0]
	      break;
   d5328:	e01e      	b.n	d5368 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d532a:	2018      	movs	r0, #24
   d532c:	680e      	ldr	r6, [r1, #0]
   d532e:	f7fe feb2 	bl	d4096 <_Znwj>
   d5332:	4605      	mov	r5, r0
   d5334:	b150      	cbz	r0, d534c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5336:	4631      	mov	r1, r6
   d5338:	f7ff fed4 	bl	d50e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d533c:	6930      	ldr	r0, [r6, #16]
   d533e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5342:	b108      	cbz	r0, d5348 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5344:	f001 ffe0 	bl	d7308 <strdup>
   d5348:	6128      	str	r0, [r5, #16]
   d534a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d534c:	6025      	str	r5, [r4, #0]
   d534e:	e00b      	b.n	d5368 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5350:	6804      	ldr	r4, [r0, #0]
   d5352:	b14c      	cbz	r4, d5368 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5354:	6920      	ldr	r0, [r4, #16]
   d5356:	f7ff fd4b 	bl	d4df0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d535a:	4620      	mov	r0, r4
   d535c:	f7ff fe0b 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5360:	2118      	movs	r1, #24
   d5362:	4620      	mov	r0, r4
   d5364:	f000 ffb1 	bl	d62ca <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5368:	2000      	movs	r0, #0
   d536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d536c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d536c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d536e:	2300      	movs	r3, #0
   d5370:	6083      	str	r3, [r0, #8]
   d5372:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5374:	4604      	mov	r4, r0
   d5376:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5378:	b12b      	cbz	r3, d5386 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d537a:	2202      	movs	r2, #2
   d537c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d537e:	68eb      	ldr	r3, [r5, #12]
   d5380:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5382:	68ab      	ldr	r3, [r5, #8]
   d5384:	60a3      	str	r3, [r4, #8]
	}
    }
   d5386:	4620      	mov	r0, r4
   d5388:	bd38      	pop	{r3, r4, r5, pc}

000d538a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d538a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d538c:	b570      	push	{r4, r5, r6, lr}
   d538e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5390:	d006      	beq.n	d53a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5392:	2a03      	cmp	r2, #3
   d5394:	d011      	beq.n	d53ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5396:	2a01      	cmp	r2, #1
   d5398:	d118      	bne.n	d53cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d539a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d539c:	6003      	str	r3, [r0, #0]
	      break;
   d539e:	e015      	b.n	d53cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53a0:	2014      	movs	r0, #20
   d53a2:	680e      	ldr	r6, [r1, #0]
   d53a4:	f7fe fe77 	bl	d4096 <_Znwj>
   d53a8:	4605      	mov	r5, r0
   d53aa:	b120      	cbz	r0, d53b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d53ac:	4631      	mov	r1, r6
   d53ae:	f7ff ffdd 	bl	d536c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d53b2:	7c33      	ldrb	r3, [r6, #16]
   d53b4:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53b6:	6025      	str	r5, [r4, #0]
   d53b8:	e008      	b.n	d53cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53ba:	6804      	ldr	r4, [r0, #0]
   d53bc:	b134      	cbz	r4, d53cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53be:	4620      	mov	r0, r4
   d53c0:	f7ff fdd9 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53c4:	2114      	movs	r1, #20
   d53c6:	4620      	mov	r0, r4
   d53c8:	f000 ff7f 	bl	d62ca <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d53cc:	2000      	movs	r0, #0
   d53ce:	bd70      	pop	{r4, r5, r6, pc}

000d53d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d53d0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d53d2:	2300      	movs	r3, #0
   d53d4:	b087      	sub	sp, #28
   d53d6:	460c      	mov	r4, r1
   d53d8:	f3bf 8f5f 	dmb	sy
   d53dc:	e850 6f00 	ldrex	r6, [r0]
   d53e0:	e840 3200 	strex	r2, r3, [r0]
   d53e4:	2a00      	cmp	r2, #0
   d53e6:	d1f9      	bne.n	d53dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d53e8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d53ec:	2e00      	cmp	r6, #0
   d53ee:	d03f      	beq.n	d5470 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d53f0:	4618      	mov	r0, r3
   d53f2:	f7ff fc61 	bl	d4cb8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d53f6:	4607      	mov	r7, r0
   d53f8:	b120      	cbz	r0, d5404 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d53fa:	4621      	mov	r1, r4
   d53fc:	4630      	mov	r0, r6
   d53fe:	f7ff fe61 	bl	d50c4 <_ZNKSt8functionIFvRKbEEclES1_>
   d5402:	e02e      	b.n	d5462 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5404:	4631      	mov	r1, r6
   d5406:	a801      	add	r0, sp, #4
   d5408:	f7ff ffb0 	bl	d536c <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d540c:	7823      	ldrb	r3, [r4, #0]
   d540e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5412:	2010      	movs	r0, #16
   d5414:	f7fe fe3f 	bl	d4096 <_Znwj>
   d5418:	4605      	mov	r5, r0
   d541a:	b1d0      	cbz	r0, d5452 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d541c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d541e:	2014      	movs	r0, #20
   d5420:	f7fe fe39 	bl	d4096 <_Znwj>
   d5424:	4604      	mov	r4, r0
   d5426:	b178      	cbz	r0, d5448 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5428:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d542a:	4601      	mov	r1, r0
   d542c:	a801      	add	r0, sp, #4
   d542e:	f7ff fe29 	bl	d5084 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5432:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5434:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5436:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5438:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d543a:	9203      	str	r2, [sp, #12]
   d543c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d543e:	60e3      	str	r3, [r4, #12]
   d5440:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5444:	9204      	str	r2, [sp, #16]
   d5446:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5448:	4b0a      	ldr	r3, [pc, #40]	; (d5474 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d544a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d544c:	4b0a      	ldr	r3, [pc, #40]	; (d5478 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d544e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5450:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5452:	a801      	add	r0, sp, #4
   d5454:	f7ff fd8f 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5458:	2200      	movs	r2, #0
   d545a:	4629      	mov	r1, r5
   d545c:	4807      	ldr	r0, [pc, #28]	; (d547c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d545e:	f7ff fc33 	bl	d4cc8 <application_thread_invoke>
   d5462:	4630      	mov	r0, r6
   d5464:	f7ff fd87 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5468:	2110      	movs	r1, #16
   d546a:	4630      	mov	r0, r6
   d546c:	f000 ff2d 	bl	d62ca <_ZdlPvj>
        }
    }
   d5470:	b007      	add	sp, #28
   d5472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5474:	000d50d7 	.word	0x000d50d7
   d5478:	000d538b 	.word	0x000d538b
   d547c:	000d4ed9 	.word	0x000d4ed9

000d5480 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5480:	b530      	push	{r4, r5, lr}
   d5482:	b085      	sub	sp, #20
   d5484:	4604      	mov	r4, r0
   d5486:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5488:	4668      	mov	r0, sp
   d548a:	4611      	mov	r1, r2
   d548c:	f7ff fddc 	bl	d5048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5490:	b17c      	cbz	r4, d54b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5492:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5494:	4628      	mov	r0, r5
   d5496:	b10d      	cbz	r5, d549c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5498:	f001 ff36 	bl	d7308 <strdup>
   d549c:	9002      	str	r0, [sp, #8]
   d549e:	a902      	add	r1, sp, #8
   d54a0:	4668      	mov	r0, sp
   d54a2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d54a6:	f7ff fe2d 	bl	d5104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d54aa:	9802      	ldr	r0, [sp, #8]
   d54ac:	f7ff fca0 	bl	d4df0 <free>
   d54b0:	e01d      	b.n	d54ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d54b2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d54b4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d54b8:	f04f 0201 	mov.w	r2, #1
   d54bc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d54c0:	42a3      	cmp	r3, r4
   d54c2:	d103      	bne.n	d54cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d54c4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d54c8:	2900      	cmp	r1, #0
   d54ca:	d1f7      	bne.n	d54bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d54cc:	d002      	beq.n	d54d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d54ce:	f88d 3008 	strb.w	r3, [sp, #8]
   d54d2:	e00c      	b.n	d54ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d54d4:	f110 010c 	adds.w	r1, r0, #12
   d54d8:	f04f 0301 	mov.w	r3, #1
   d54dc:	bf18      	it	ne
   d54de:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d54e0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d54e4:	3004      	adds	r0, #4
   d54e6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d54ea:	f7ff ff71 	bl	d53d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d54ee:	a801      	add	r0, sp, #4
   d54f0:	f7ff fd16 	bl	d4f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d54f4:	b005      	add	sp, #20
   d54f6:	bd30      	pop	{r4, r5, pc}

000d54f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54f8:	2200      	movs	r2, #0
   d54fa:	4611      	mov	r1, r2
   d54fc:	6840      	ldr	r0, [r0, #4]
   d54fe:	f7ff bc57 	b.w	d4db0 <network_listening>

000d5502 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5502:	2200      	movs	r2, #0
   d5504:	4611      	mov	r1, r2
   d5506:	6840      	ldr	r0, [r0, #4]
   d5508:	f7ff bc62 	b.w	d4dd0 <network_get_listen_timeout>

000d550c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d550c:	2200      	movs	r2, #0
   d550e:	6840      	ldr	r0, [r0, #4]
   d5510:	f7ff bc56 	b.w	d4dc0 <network_set_listen_timeout>

000d5514 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5514:	2200      	movs	r2, #0
   d5516:	f081 0101 	eor.w	r1, r1, #1
   d551a:	6840      	ldr	r0, [r0, #4]
   d551c:	f7ff bc40 	b.w	d4da0 <network_listen>

000d5520 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5520:	2300      	movs	r3, #0
   d5522:	461a      	mov	r2, r3
   d5524:	4619      	mov	r1, r3
   d5526:	6840      	ldr	r0, [r0, #4]
   d5528:	f7ff bc32 	b.w	d4d90 <network_off>

000d552c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d552c:	2300      	movs	r3, #0
   d552e:	461a      	mov	r2, r3
   d5530:	4619      	mov	r1, r3
   d5532:	6840      	ldr	r0, [r0, #4]
   d5534:	f7ff bc24 	b.w	d4d80 <network_on>

000d5538 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5538:	2200      	movs	r2, #0
   d553a:	4611      	mov	r1, r2
   d553c:	6840      	ldr	r0, [r0, #4]
   d553e:	f7ff bc17 	b.w	d4d70 <network_ready>

000d5542 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5542:	2200      	movs	r2, #0
   d5544:	4611      	mov	r1, r2
   d5546:	6840      	ldr	r0, [r0, #4]
   d5548:	f7ff bc02 	b.w	d4d50 <network_connecting>

000d554c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d554c:	2200      	movs	r2, #0
   d554e:	2102      	movs	r1, #2
   d5550:	6840      	ldr	r0, [r0, #4]
   d5552:	f7ff bc05 	b.w	d4d60 <network_disconnect>

000d5556 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5556:	2300      	movs	r3, #0
   d5558:	461a      	mov	r2, r3
   d555a:	6840      	ldr	r0, [r0, #4]
   d555c:	f7ff bbf0 	b.w	d4d40 <network_connect>

000d5560 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5560:	4b02      	ldr	r3, [pc, #8]	; (d556c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5562:	2203      	movs	r2, #3
   d5564:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5566:	4a02      	ldr	r2, [pc, #8]	; (d5570 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5568:	601a      	str	r2, [r3, #0]
   d556a:	4770      	bx	lr
   d556c:	2003e4d0 	.word	0x2003e4d0
   d5570:	000d73c8 	.word	0x000d73c8

000d5574 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5574:	4770      	bx	lr

000d5576 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5578:	4606      	mov	r6, r0
   d557a:	4615      	mov	r5, r2
   d557c:	460c      	mov	r4, r1
   d557e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5580:	42bc      	cmp	r4, r7
   d5582:	d006      	beq.n	d5592 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5584:	6833      	ldr	r3, [r6, #0]
   d5586:	f814 1b01 	ldrb.w	r1, [r4], #1
   d558a:	689b      	ldr	r3, [r3, #8]
   d558c:	4630      	mov	r0, r6
   d558e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5590:	e7f6      	b.n	d5580 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5592:	4628      	mov	r0, r5
   d5594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5596 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5596:	2200      	movs	r2, #0
   d5598:	7c00      	ldrb	r0, [r0, #16]
   d559a:	f7ff ba9d 	b.w	d4ad8 <HAL_I2C_Write_Data>

000d559e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d559e:	2100      	movs	r1, #0
   d55a0:	7c00      	ldrb	r0, [r0, #16]
   d55a2:	f7ff baa1 	b.w	d4ae8 <HAL_I2C_Available_Data>

000d55a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d55a6:	2100      	movs	r1, #0
   d55a8:	7c00      	ldrb	r0, [r0, #16]
   d55aa:	f7ff baa5 	b.w	d4af8 <HAL_I2C_Read_Data>

000d55ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d55ae:	2100      	movs	r1, #0
   d55b0:	7c00      	ldrb	r0, [r0, #16]
   d55b2:	f7ff baa9 	b.w	d4b08 <HAL_I2C_Peek_Data>

000d55b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d55b6:	2100      	movs	r1, #0
   d55b8:	7c00      	ldrb	r0, [r0, #16]
   d55ba:	f7ff baad 	b.w	d4b18 <HAL_I2C_Flush_Data>

000d55be <_ZN7TwoWireD0Ev>:
   d55be:	b510      	push	{r4, lr}
   d55c0:	2114      	movs	r1, #20
   d55c2:	4604      	mov	r4, r0
   d55c4:	f000 fe81 	bl	d62ca <_ZdlPvj>
   d55c8:	4620      	mov	r0, r4
   d55ca:	bd10      	pop	{r4, pc}

000d55cc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d55cc:	b510      	push	{r4, lr}
   d55ce:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55d4:	4608      	mov	r0, r1
   d55d6:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55d8:	2100      	movs	r1, #0
   d55da:	4b04      	ldr	r3, [pc, #16]	; (d55ec <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d55dc:	7420      	strb	r0, [r4, #16]
   d55de:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d55e0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d55e2:	f7ff faa9 	bl	d4b38 <HAL_I2C_Init>

}
   d55e6:	4620      	mov	r0, r4
   d55e8:	bd10      	pop	{r4, pc}
   d55ea:	bf00      	nop
   d55ec:	000d73fc 	.word	0x000d73fc

000d55f0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d55f0:	2100      	movs	r1, #0
   d55f2:	7c00      	ldrb	r0, [r0, #16]
   d55f4:	f7ff ba98 	b.w	d4b28 <HAL_I2C_Is_Enabled>

000d55f8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d55f8:	f7ff ba5e 	b.w	d4ab8 <HAL_Interrupts_Disable_All>

000d55fc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d55fc:	f7ff ba54 	b.w	d4aa8 <HAL_Interrupts_Enable_All>

000d5600 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5600:	4770      	bx	lr

000d5602 <_ZN9IPAddressD0Ev>:
   d5602:	b510      	push	{r4, lr}
   d5604:	2118      	movs	r1, #24
   d5606:	4604      	mov	r4, r0
   d5608:	f000 fe5f 	bl	d62ca <_ZdlPvj>
   d560c:	4620      	mov	r0, r4
   d560e:	bd10      	pop	{r4, pc}

000d5610 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5610:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5612:	7d03      	ldrb	r3, [r0, #20]
   d5614:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5616:	b08d      	sub	sp, #52	; 0x34
   d5618:	460e      	mov	r6, r1
   d561a:	f100 0704 	add.w	r7, r0, #4
   d561e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5622:	d002      	beq.n	d562a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5624:	f100 0508 	add.w	r5, r0, #8
   d5628:	e018      	b.n	d565c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d562a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d562c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d562e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5632:	232f      	movs	r3, #47	; 0x2f
   d5634:	462a      	mov	r2, r5
   d5636:	200a      	movs	r0, #10
   d5638:	f7ff fa86 	bl	d4b48 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d563c:	4628      	mov	r0, r5
   d563e:	f001 fe7e 	bl	d733e <strlen>
   d5642:	6833      	ldr	r3, [r6, #0]
   d5644:	4602      	mov	r2, r0
   d5646:	68db      	ldr	r3, [r3, #12]
   d5648:	4629      	mov	r1, r5
   d564a:	4630      	mov	r0, r6
   d564c:	4798      	blx	r3
   d564e:	e00f      	b.n	d5670 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5650:	b124      	cbz	r4, d565c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5652:	212e      	movs	r1, #46	; 0x2e
   d5654:	4630      	mov	r0, r6
   d5656:	f000 f9c7 	bl	d59e8 <_ZN5Print5printEc>
   d565a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d565c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5660:	220a      	movs	r2, #10
   d5662:	4630      	mov	r0, r6
   d5664:	f000 f9fc 	bl	d5a60 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5668:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d566a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d566c:	d1f0      	bne.n	d5650 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d566e:	4620      	mov	r0, r4
    }
    return n;
}
   d5670:	b00d      	add	sp, #52	; 0x34
   d5672:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5674 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5674:	b510      	push	{r4, lr}
   d5676:	4b05      	ldr	r3, [pc, #20]	; (d568c <_ZN9IPAddressC1Ev+0x18>)
   d5678:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d567a:	2211      	movs	r2, #17
   d567c:	f840 3b04 	str.w	r3, [r0], #4
   d5680:	2100      	movs	r1, #0
   d5682:	f001 fe02 	bl	d728a <memset>
{
    clear();
}
   d5686:	4620      	mov	r0, r4
   d5688:	bd10      	pop	{r4, pc}
   d568a:	bf00      	nop
   d568c:	000d7424 	.word	0x000d7424

000d5690 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5690:	4603      	mov	r3, r0
   d5692:	4a07      	ldr	r2, [pc, #28]	; (d56b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5694:	b510      	push	{r4, lr}
   d5696:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d569a:	f101 0210 	add.w	r2, r1, #16
   d569e:	f851 4b04 	ldr.w	r4, [r1], #4
   d56a2:	f843 4b04 	str.w	r4, [r3], #4
   d56a6:	4291      	cmp	r1, r2
   d56a8:	d1f9      	bne.n	d569e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d56aa:	780a      	ldrb	r2, [r1, #0]
   d56ac:	701a      	strb	r2, [r3, #0]
}
   d56ae:	bd10      	pop	{r4, pc}
   d56b0:	000d7424 	.word	0x000d7424

000d56b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d56b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d56b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d56c6:	2304      	movs	r3, #4
   d56c8:	6041      	str	r1, [r0, #4]
   d56ca:	7503      	strb	r3, [r0, #20]
   d56cc:	bd10      	pop	{r4, pc}

000d56ce <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d56ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56d0:	780d      	ldrb	r5, [r1, #0]
   d56d2:	788b      	ldrb	r3, [r1, #2]
   d56d4:	784a      	ldrb	r2, [r1, #1]
   d56d6:	78c9      	ldrb	r1, [r1, #3]
   d56d8:	9100      	str	r1, [sp, #0]
   d56da:	4629      	mov	r1, r5
   d56dc:	f7ff ffea 	bl	d56b4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d56e0:	b003      	add	sp, #12
   d56e2:	bd30      	pop	{r4, r5, pc}

000d56e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d56e4:	4b01      	ldr	r3, [pc, #4]	; (d56ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d56e6:	4a02      	ldr	r2, [pc, #8]	; (d56f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d56e8:	601a      	str	r2, [r3, #0]
   d56ea:	4770      	bx	lr
   d56ec:	2003e4d8 	.word	0x2003e4d8
   d56f0:	000d74e6 	.word	0x000d74e6

000d56f4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56f4:	2200      	movs	r2, #0
   d56f6:	4611      	mov	r1, r2
   d56f8:	6840      	ldr	r0, [r0, #4]
   d56fa:	f7ff bb59 	b.w	d4db0 <network_listening>

000d56fe <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56fe:	2200      	movs	r2, #0
   d5700:	4611      	mov	r1, r2
   d5702:	6840      	ldr	r0, [r0, #4]
   d5704:	f7ff bb64 	b.w	d4dd0 <network_get_listen_timeout>

000d5708 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5708:	2200      	movs	r2, #0
   d570a:	6840      	ldr	r0, [r0, #4]
   d570c:	f7ff bb58 	b.w	d4dc0 <network_set_listen_timeout>

000d5710 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5710:	2200      	movs	r2, #0
   d5712:	f081 0101 	eor.w	r1, r1, #1
   d5716:	6840      	ldr	r0, [r0, #4]
   d5718:	f7ff bb42 	b.w	d4da0 <network_listen>

000d571c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d571c:	2300      	movs	r3, #0
   d571e:	461a      	mov	r2, r3
   d5720:	4619      	mov	r1, r3
   d5722:	6840      	ldr	r0, [r0, #4]
   d5724:	f7ff bb34 	b.w	d4d90 <network_off>

000d5728 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5728:	2300      	movs	r3, #0
   d572a:	461a      	mov	r2, r3
   d572c:	4619      	mov	r1, r3
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	f7ff bb26 	b.w	d4d80 <network_on>

000d5734 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5734:	2200      	movs	r2, #0
   d5736:	4611      	mov	r1, r2
   d5738:	6840      	ldr	r0, [r0, #4]
   d573a:	f7ff bb19 	b.w	d4d70 <network_ready>

000d573e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d573e:	2200      	movs	r2, #0
   d5740:	4611      	mov	r1, r2
   d5742:	6840      	ldr	r0, [r0, #4]
   d5744:	f7ff bb04 	b.w	d4d50 <network_connecting>

000d5748 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5748:	2200      	movs	r2, #0
   d574a:	2102      	movs	r1, #2
   d574c:	6840      	ldr	r0, [r0, #4]
   d574e:	f7ff bb07 	b.w	d4d60 <network_disconnect>

000d5752 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5752:	2300      	movs	r3, #0
   d5754:	461a      	mov	r2, r3
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	f7ff baf2 	b.w	d4d40 <network_connect>

000d575c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d575c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d575e:	4605      	mov	r5, r0
   d5760:	b188      	cbz	r0, d5786 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5762:	6804      	ldr	r4, [r0, #0]
   d5764:	b14c      	cbz	r4, d577a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5766:	68a3      	ldr	r3, [r4, #8]
   d5768:	b11b      	cbz	r3, d5772 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d576a:	2203      	movs	r2, #3
   d576c:	4621      	mov	r1, r4
   d576e:	4620      	mov	r0, r4
   d5770:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5772:	2110      	movs	r1, #16
   d5774:	4620      	mov	r0, r4
   d5776:	f000 fda8 	bl	d62ca <_ZdlPvj>
   d577a:	4628      	mov	r0, r5
   d577c:	2114      	movs	r1, #20
      }
   d577e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5782:	f000 bda2 	b.w	d62ca <_ZdlPvj>
   d5786:	bd38      	pop	{r3, r4, r5, pc}

000d5788 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5788:	b110      	cbz	r0, d5790 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d578a:	6803      	ldr	r3, [r0, #0]
   d578c:	685b      	ldr	r3, [r3, #4]
   d578e:	4718      	bx	r3
   d5790:	4770      	bx	lr

000d5792 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5792:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5794:	6803      	ldr	r3, [r0, #0]
   d5796:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5798:	b1bb      	cbz	r3, d57ca <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d579a:	6858      	ldr	r0, [r3, #4]
   d579c:	f7ff f91c 	bl	d49d8 <os_thread_is_current>
   d57a0:	b978      	cbnz	r0, d57c2 <_ZN6ThreadD1Ev+0x30>
   d57a2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d57a4:	7c5a      	ldrb	r2, [r3, #17]
   d57a6:	b912      	cbnz	r2, d57ae <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d57a8:	6858      	ldr	r0, [r3, #4]
   d57aa:	f7ff f91d 	bl	d49e8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d57ae:	6823      	ldr	r3, [r4, #0]
   d57b0:	6858      	ldr	r0, [r3, #4]
   d57b2:	f7ff f921 	bl	d49f8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57b6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d57b8:	2300      	movs	r3, #0
   d57ba:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d57bc:	b128      	cbz	r0, d57ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d57be:	f7ff ffcd 	bl	d575c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57c2:	6820      	ldr	r0, [r4, #0]
   d57c4:	b108      	cbz	r0, d57ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d57c6:	f7ff ffc9 	bl	d575c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d57ca:	4620      	mov	r0, r4
   d57cc:	bd10      	pop	{r4, pc}
	...

000d57d0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d57d0:	b538      	push	{r3, r4, r5, lr}
   d57d2:	4b0c      	ldr	r3, [pc, #48]	; (d5804 <_ZN5spark9MeshClassD1Ev+0x34>)
   d57d4:	6003      	str	r3, [r0, #0]
   d57d6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57d8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d57dc:	b108      	cbz	r0, d57e2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d57de:	f7fe fc5e 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57e2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d57e6:	b135      	cbz	r5, d57f6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57e8:	4628      	mov	r0, r5
   d57ea:	f7ff ffd2 	bl	d5792 <_ZN6ThreadD1Ev>
   d57ee:	2104      	movs	r1, #4
   d57f0:	4628      	mov	r0, r5
   d57f2:	f000 fd6a 	bl	d62ca <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57f6:	68a0      	ldr	r0, [r4, #8]
   d57f8:	b108      	cbz	r0, d57fe <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d57fa:	f7ff ffc5 	bl	d5788 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d57fe:	4620      	mov	r0, r4
   d5800:	bd38      	pop	{r3, r4, r5, pc}
   d5802:	bf00      	nop
   d5804:	000d7518 	.word	0x000d7518

000d5808 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5808:	b538      	push	{r3, r4, r5, lr}
   d580a:	4c0d      	ldr	r4, [pc, #52]	; (d5840 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d580c:	4b0d      	ldr	r3, [pc, #52]	; (d5844 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d580e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5810:	2500      	movs	r5, #0
   d5812:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5814:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5818:	6063      	str	r3, [r4, #4]
   d581a:	60a5      	str	r5, [r4, #8]
   d581c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5820:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5824:	f7ff f8f8 	bl	d4a18 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5828:	4b07      	ldr	r3, [pc, #28]	; (d5848 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d582a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d582e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5830:	4620      	mov	r0, r4
   d5832:	4a06      	ldr	r2, [pc, #24]	; (d584c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5834:	4906      	ldr	r1, [pc, #24]	; (d5850 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d583a:	f000 bd41 	b.w	d62c0 <__aeabi_atexit>
   d583e:	bf00      	nop
   d5840:	2003e4dc 	.word	0x2003e4dc
   d5844:	000d754c 	.word	0x000d754c
   d5848:	000d7518 	.word	0x000d7518
   d584c:	2003e490 	.word	0x2003e490
   d5850:	000d57d1 	.word	0x000d57d1

000d5854 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5854:	2300      	movs	r3, #0
   d5856:	461a      	mov	r2, r3
   d5858:	6840      	ldr	r0, [r0, #4]
   d585a:	f7ff ba71 	b.w	d4d40 <network_connect>

000d585e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d585e:	2200      	movs	r2, #0
   d5860:	2102      	movs	r1, #2
   d5862:	6840      	ldr	r0, [r0, #4]
   d5864:	f7ff ba7c 	b.w	d4d60 <network_disconnect>

000d5868 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5868:	2200      	movs	r2, #0
   d586a:	4611      	mov	r1, r2
   d586c:	6840      	ldr	r0, [r0, #4]
   d586e:	f7ff ba6f 	b.w	d4d50 <network_connecting>

000d5872 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5872:	2200      	movs	r2, #0
   d5874:	4611      	mov	r1, r2
   d5876:	6840      	ldr	r0, [r0, #4]
   d5878:	f7ff ba7a 	b.w	d4d70 <network_ready>

000d587c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d587c:	2300      	movs	r3, #0
   d587e:	461a      	mov	r2, r3
   d5880:	4619      	mov	r1, r3
   d5882:	6840      	ldr	r0, [r0, #4]
   d5884:	f7ff ba7c 	b.w	d4d80 <network_on>

000d5888 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5888:	2300      	movs	r3, #0
   d588a:	461a      	mov	r2, r3
   d588c:	4619      	mov	r1, r3
   d588e:	6840      	ldr	r0, [r0, #4]
   d5890:	f7ff ba7e 	b.w	d4d90 <network_off>

000d5894 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5894:	2200      	movs	r2, #0
   d5896:	f081 0101 	eor.w	r1, r1, #1
   d589a:	6840      	ldr	r0, [r0, #4]
   d589c:	f7ff ba80 	b.w	d4da0 <network_listen>

000d58a0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d58a0:	2200      	movs	r2, #0
   d58a2:	6840      	ldr	r0, [r0, #4]
   d58a4:	f7ff ba8c 	b.w	d4dc0 <network_set_listen_timeout>

000d58a8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d58a8:	2200      	movs	r2, #0
   d58aa:	4611      	mov	r1, r2
   d58ac:	6840      	ldr	r0, [r0, #4]
   d58ae:	f7ff ba8f 	b.w	d4dd0 <network_get_listen_timeout>

000d58b2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d58b2:	2200      	movs	r2, #0
   d58b4:	4611      	mov	r1, r2
   d58b6:	6840      	ldr	r0, [r0, #4]
   d58b8:	f7ff ba7a 	b.w	d4db0 <network_listening>

000d58bc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d58bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d58c0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d58c2:	b095      	sub	sp, #84	; 0x54
   d58c4:	4616      	mov	r6, r2
   d58c6:	460d      	mov	r5, r1
   d58c8:	4607      	mov	r7, r0
    IPAddress addr;
   d58ca:	f7ff fed3 	bl	d5674 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d58ce:	4621      	mov	r1, r4
   d58d0:	2220      	movs	r2, #32
   d58d2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d58d4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d58d6:	f001 fcd8 	bl	d728a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d58da:	2340      	movs	r3, #64	; 0x40
   d58dc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d58de:	4621      	mov	r1, r4
   d58e0:	466b      	mov	r3, sp
   d58e2:	aa0c      	add	r2, sp, #48	; 0x30
   d58e4:	4630      	mov	r0, r6
   d58e6:	f7ff f93f 	bl	d4b68 <netdb_getaddrinfo>
    if (!r) {
   d58ea:	4604      	mov	r4, r0
   d58ec:	2800      	cmp	r0, #0
   d58ee:	d144      	bne.n	d597a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58f0:	4602      	mov	r2, r0
   d58f2:	2101      	movs	r1, #1
   d58f4:	6868      	ldr	r0, [r5, #4]
   d58f6:	f7ff fa3b 	bl	d4d70 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58fa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58fc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58fe:	4622      	mov	r2, r4
   d5900:	6868      	ldr	r0, [r5, #4]
   d5902:	f7ff fa35 	bl	d4d70 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5906:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5908:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d590a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d590c:	2e00      	cmp	r6, #0
   d590e:	d034      	beq.n	d597a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5910:	2900      	cmp	r1, #0
   d5912:	d132      	bne.n	d597a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5914:	6873      	ldr	r3, [r6, #4]
   d5916:	2b02      	cmp	r3, #2
   d5918:	d002      	beq.n	d5920 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d591a:	2b0a      	cmp	r3, #10
   d591c:	d009      	beq.n	d5932 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d591e:	e02a      	b.n	d5976 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5920:	f1b8 0f00 	cmp.w	r8, #0
   d5924:	d027      	beq.n	d5976 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5926:	6971      	ldr	r1, [r6, #20]
   d5928:	4638      	mov	r0, r7
   d592a:	3104      	adds	r1, #4
   d592c:	f7ff fecf 	bl	d56ce <_ZN9IPAddressaSEPKh>
   d5930:	e020      	b.n	d5974 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5932:	f1b9 0f00 	cmp.w	r9, #0
   d5936:	d01e      	beq.n	d5976 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5938:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d593a:	2211      	movs	r2, #17
   d593c:	a801      	add	r0, sp, #4
   d593e:	f001 fca4 	bl	d728a <memset>
                    a.v = 6;
   d5942:	2306      	movs	r3, #6
   d5944:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5948:	ad01      	add	r5, sp, #4
   d594a:	f104 0308 	add.w	r3, r4, #8
   d594e:	3418      	adds	r4, #24
   d5950:	6818      	ldr	r0, [r3, #0]
   d5952:	6859      	ldr	r1, [r3, #4]
   d5954:	462a      	mov	r2, r5
   d5956:	c203      	stmia	r2!, {r0, r1}
   d5958:	3308      	adds	r3, #8
   d595a:	42a3      	cmp	r3, r4
   d595c:	4615      	mov	r5, r2
   d595e:	d1f7      	bne.n	d5950 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5960:	a901      	add	r1, sp, #4
   d5962:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5964:	ad07      	add	r5, sp, #28
   d5966:	f7ff fe93 	bl	d5690 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d596a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d596c:	1d3c      	adds	r4, r7, #4
   d596e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5970:	682b      	ldr	r3, [r5, #0]
   d5972:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5974:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5976:	69f6      	ldr	r6, [r6, #28]
   d5978:	e7c8      	b.n	d590c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d597a:	9800      	ldr	r0, [sp, #0]
   d597c:	f7ff f8ec 	bl	d4b58 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5980:	4638      	mov	r0, r7
   d5982:	b015      	add	sp, #84	; 0x54
   d5984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5988 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5988:	4b02      	ldr	r3, [pc, #8]	; (d5994 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d598a:	4a03      	ldr	r2, [pc, #12]	; (d5998 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d598c:	601a      	str	r2, [r3, #0]
   d598e:	2200      	movs	r2, #0
   d5990:	605a      	str	r2, [r3, #4]
   d5992:	4770      	bx	lr
   d5994:	2003e6ac 	.word	0x2003e6ac
   d5998:	000d754c 	.word	0x000d754c

000d599c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d599e:	4606      	mov	r6, r0
   d59a0:	460d      	mov	r5, r1
   d59a2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d59a4:	2400      	movs	r4, #0
  while (size--) {
   d59a6:	42bd      	cmp	r5, r7
   d59a8:	d00c      	beq.n	d59c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d59aa:	6833      	ldr	r3, [r6, #0]
   d59ac:	f815 1b01 	ldrb.w	r1, [r5], #1
   d59b0:	689b      	ldr	r3, [r3, #8]
   d59b2:	4630      	mov	r0, r6
   d59b4:	4798      	blx	r3
     if (chunk>=0)
   d59b6:	2800      	cmp	r0, #0
   d59b8:	db01      	blt.n	d59be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d59ba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d59bc:	e7f3      	b.n	d59a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d59be:	2c00      	cmp	r4, #0
   d59c0:	bf08      	it	eq
   d59c2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d59c4:	4620      	mov	r0, r4
   d59c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d59c8:	b570      	push	{r4, r5, r6, lr}
   d59ca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d59cc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d59ce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d59d0:	b149      	cbz	r1, d59e6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d59d2:	f001 fcb4 	bl	d733e <strlen>
   d59d6:	682b      	ldr	r3, [r5, #0]
   d59d8:	4602      	mov	r2, r0
   d59da:	4621      	mov	r1, r4
   d59dc:	4628      	mov	r0, r5
   d59de:	68db      	ldr	r3, [r3, #12]
    }
   d59e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d59e4:	4718      	bx	r3
    }
   d59e6:	bd70      	pop	{r4, r5, r6, pc}

000d59e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d59e8:	6803      	ldr	r3, [r0, #0]
   d59ea:	689b      	ldr	r3, [r3, #8]
   d59ec:	4718      	bx	r3

000d59ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d59ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d59f0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d59f2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d59f4:	f7ff fff8 	bl	d59e8 <_ZN5Print5printEc>
  n += print('\n');
   d59f8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d59fa:	4604      	mov	r4, r0
  n += print('\n');
   d59fc:	4628      	mov	r0, r5
   d59fe:	f7ff fff3 	bl	d59e8 <_ZN5Print5printEc>
  return n;
}
   d5a02:	4420      	add	r0, r4
   d5a04:	bd38      	pop	{r3, r4, r5, pc}

000d5a06 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5a06:	b530      	push	{r4, r5, lr}
   d5a08:	b08b      	sub	sp, #44	; 0x2c
   d5a0a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5a0c:	2100      	movs	r1, #0
   d5a0e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5a12:	2a01      	cmp	r2, #1
   d5a14:	bf98      	it	ls
   d5a16:	220a      	movls	r2, #10
   d5a18:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5a1c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5a20:	fb05 3312 	mls	r3, r5, r2, r3
   d5a24:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5a28:	2b09      	cmp	r3, #9
   d5a2a:	bf94      	ite	ls
   d5a2c:	3330      	addls	r3, #48	; 0x30
   d5a2e:	3337      	addhi	r3, #55	; 0x37
   d5a30:	b2db      	uxtb	r3, r3
   d5a32:	4621      	mov	r1, r4
   d5a34:	f804 3901 	strb.w	r3, [r4], #-1
   d5a38:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5a3a:	2d00      	cmp	r5, #0
   d5a3c:	d1ee      	bne.n	d5a1c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5a3e:	f7ff ffc3 	bl	d59c8 <_ZN5Print5writeEPKc>
}
   d5a42:	b00b      	add	sp, #44	; 0x2c
   d5a44:	bd30      	pop	{r4, r5, pc}

000d5a46 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5a46:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5a48:	b92a      	cbnz	r2, d5a56 <_ZN5Print5printEmi+0x10>
   d5a4a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5a50:	689b      	ldr	r3, [r3, #8]
   d5a52:	b2c9      	uxtb	r1, r1
   d5a54:	4718      	bx	r3
  else return printNumber(n, base);
   d5a56:	b2d2      	uxtb	r2, r2
}
   d5a58:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5a5c:	f7ff bfd3 	b.w	d5a06 <_ZN5Print11printNumberEmh>

000d5a60 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5a60:	f7ff bff1 	b.w	d5a46 <_ZN5Print5printEmi>

000d5a64 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5a64:	b40c      	push	{r2, r3}
   d5a66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a6a:	b087      	sub	sp, #28
   d5a6c:	af00      	add	r7, sp, #0
   d5a6e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5a72:	4605      	mov	r5, r0
   d5a74:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5a78:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5a7a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5a7c:	4623      	mov	r3, r4
   d5a7e:	464a      	mov	r2, r9
   d5a80:	2114      	movs	r1, #20
   d5a82:	1d38      	adds	r0, r7, #4
   d5a84:	f7ff f9c4 	bl	d4e10 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5a88:	2813      	cmp	r0, #19
   d5a8a:	d805      	bhi.n	d5a98 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5a8c:	1d39      	adds	r1, r7, #4
   d5a8e:	4628      	mov	r0, r5
   d5a90:	f7ff ff9a 	bl	d59c8 <_ZN5Print5writeEPKc>
   d5a94:	4604      	mov	r4, r0
   d5a96:	e013      	b.n	d5ac0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5a98:	f100 0308 	add.w	r3, r0, #8
   d5a9c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5aa0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5aa2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5aa6:	1c41      	adds	r1, r0, #1
   d5aa8:	4623      	mov	r3, r4
   d5aaa:	464a      	mov	r2, r9
   d5aac:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5aae:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5ab0:	f7ff f9ae 	bl	d4e10 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5ab4:	4669      	mov	r1, sp
   d5ab6:	4628      	mov	r0, r5
   d5ab8:	f7ff ff86 	bl	d59c8 <_ZN5Print5writeEPKc>
   d5abc:	4604      	mov	r4, r0
   d5abe:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5ac0:	b11e      	cbz	r6, d5aca <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5ac2:	4628      	mov	r0, r5
   d5ac4:	f7ff ff93 	bl	d59ee <_ZN5Print7printlnEv>
   d5ac8:	4404      	add	r4, r0
    return n;
}
   d5aca:	4620      	mov	r0, r4
   d5acc:	371c      	adds	r7, #28
   d5ace:	46bd      	mov	sp, r7
   d5ad0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ad4:	b002      	add	sp, #8
   d5ad6:	4770      	bx	lr

000d5ad8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5ad8:	b510      	push	{r4, lr}
   d5ada:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5adc:	f7ff fa4b 	bl	d4f76 <_ZNSt14_Function_baseD1Ev>
   d5ae0:	4620      	mov	r0, r4
   d5ae2:	bd10      	pop	{r4, pc}

000d5ae4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ae4:	4803      	ldr	r0, [pc, #12]	; (d5af4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ae6:	4a04      	ldr	r2, [pc, #16]	; (d5af8 <_GLOBAL__sub_I_RGB+0x14>)
   d5ae8:	4904      	ldr	r1, [pc, #16]	; (d5afc <_GLOBAL__sub_I_RGB+0x18>)
   d5aea:	2300      	movs	r3, #0
   d5aec:	6083      	str	r3, [r0, #8]
   d5aee:	f000 bbe7 	b.w	d62c0 <__aeabi_atexit>
   d5af2:	bf00      	nop
   d5af4:	2003e6b4 	.word	0x2003e6b4
   d5af8:	2003e490 	.word	0x2003e490
   d5afc:	000d5ad9 	.word	0x000d5ad9

000d5b00 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5b00:	4770      	bx	lr

000d5b02 <_ZN8SPIClassD0Ev>:
   d5b02:	b510      	push	{r4, lr}
   d5b04:	2110      	movs	r1, #16
   d5b06:	4604      	mov	r4, r0
   d5b08:	f000 fbdf 	bl	d62ca <_ZdlPvj>
   d5b0c:	4620      	mov	r0, r4
   d5b0e:	bd10      	pop	{r4, pc}

000d5b10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5b10:	b570      	push	{r4, r5, r6, lr}
   d5b12:	4b08      	ldr	r3, [pc, #32]	; (d5b34 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5b14:	6003      	str	r3, [r0, #0]
   d5b16:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5b18:	2500      	movs	r5, #0
   d5b1a:	460e      	mov	r6, r1
   d5b1c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5b20:	f7fe ff72 	bl	d4a08 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5b24:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5b26:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5b28:	f7ff f826 	bl	d4b78 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5b2c:	60a5      	str	r5, [r4, #8]
}
   d5b2e:	4620      	mov	r0, r4
   d5b30:	bd70      	pop	{r4, r5, r6, pc}
   d5b32:	bf00      	nop
   d5b34:	000d7580 	.word	0x000d7580

000d5b38 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5b38:	7900      	ldrb	r0, [r0, #4]
   d5b3a:	f7ff b825 	b.w	d4b88 <HAL_SPI_Is_Enabled>
	...

000d5b40 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5b40:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b44:	ec59 8b10 	vmov	r8, r9, d0
   d5b48:	4607      	mov	r7, r0
   d5b4a:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d5b4c:	2200      	movs	r2, #0
   d5b4e:	2300      	movs	r3, #0
   d5b50:	ee10 0a10 	vmov	r0, s0
   d5b54:	4649      	mov	r1, r9
   d5b56:	f001 f92f 	bl	d6db8 <__aeabi_dcmplt>
   d5b5a:	b128      	cbz	r0, d5b68 <_Z4dtoadhPc+0x28>
        val = -val;
   d5b5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d5b60:	4699      	mov	r9, r3
        *sout++ = '-';
   d5b62:	232d      	movs	r3, #45	; 0x2d
   d5b64:	7033      	strb	r3, [r6, #0]
   d5b66:	3601      	adds	r6, #1
   d5b68:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5b6a:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5b6c:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5b6e:	b2d9      	uxtb	r1, r3
   d5b70:	428f      	cmp	r7, r1
   d5b72:	d902      	bls.n	d5b7a <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d5b74:	4354      	muls	r4, r2
   d5b76:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5b78:	e7f9      	b.n	d5b6e <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	f000 fe44 	bl	d6808 <__aeabi_i2d>
   d5b80:	4642      	mov	r2, r8
   d5b82:	464b      	mov	r3, r9
   d5b84:	f000 fea6 	bl	d68d4 <__aeabi_dmul>
   d5b88:	4682      	mov	sl, r0
   d5b8a:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d5b8c:	f001 f9c4 	bl	d6f18 <__aeabi_d2ulz>
   d5b90:	4680      	mov	r8, r0
   d5b92:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5b94:	f000 fe68 	bl	d6868 <__aeabi_ul2d>
   d5b98:	4602      	mov	r2, r0
   d5b9a:	460b      	mov	r3, r1
   d5b9c:	4650      	mov	r0, sl
   d5b9e:	4659      	mov	r1, fp
   d5ba0:	f000 fce4 	bl	d656c <__aeabi_dsub>
   d5ba4:	2200      	movs	r2, #0
   d5ba6:	4b17      	ldr	r3, [pc, #92]	; (d5c04 <_Z4dtoadhPc+0xc4>)
   d5ba8:	f001 f91a 	bl	d6de0 <__aeabi_dcmpge>
   d5bac:	b118      	cbz	r0, d5bb6 <_Z4dtoadhPc+0x76>
        fixed++;
   d5bae:	f118 0801 	adds.w	r8, r8, #1
   d5bb2:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5bb6:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5bb8:	4622      	mov	r2, r4
   d5bba:	462b      	mov	r3, r5
   d5bbc:	4640      	mov	r0, r8
   d5bbe:	4649      	mov	r1, r9
   d5bc0:	f001 f992 	bl	d6ee8 <__aeabi_uldivmod>
   d5bc4:	2301      	movs	r3, #1
   d5bc6:	220a      	movs	r2, #10
   d5bc8:	4631      	mov	r1, r6
   d5bca:	f000 fa3e 	bl	d604a <ultoa>
    if (prec) {
   d5bce:	b1af      	cbz	r7, d5bfc <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d5bd0:	4630      	mov	r0, r6
   d5bd2:	f001 fbb4 	bl	d733e <strlen>
        *sout++ = '.';
   d5bd6:	232e      	movs	r3, #46	; 0x2e
   d5bd8:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d5bda:	3001      	adds	r0, #1
   d5bdc:	4406      	add	r6, r0
   d5bde:	4622      	mov	r2, r4
   d5be0:	462b      	mov	r3, r5
   d5be2:	4640      	mov	r0, r8
   d5be4:	4649      	mov	r1, r9
   d5be6:	f001 f97f 	bl	d6ee8 <__aeabi_uldivmod>
   d5bea:	463b      	mov	r3, r7
   d5bec:	4610      	mov	r0, r2
   d5bee:	4631      	mov	r1, r6
   d5bf0:	220a      	movs	r2, #10
    }
}
   d5bf2:	b001      	add	sp, #4
   d5bf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d5bf8:	f000 ba27 	b.w	d604a <ultoa>
    }
}
   d5bfc:	b001      	add	sp, #4
   d5bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c02:	bf00      	nop
   d5c04:	3fe00000 	.word	0x3fe00000

000d5c08 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5c08:	b510      	push	{r4, lr}
   d5c0a:	4604      	mov	r4, r0
{
	free(buffer);
   d5c0c:	6800      	ldr	r0, [r0, #0]
   d5c0e:	f7ff f8ef 	bl	d4df0 <free>
}
   d5c12:	4620      	mov	r0, r4
   d5c14:	bd10      	pop	{r4, pc}

000d5c16 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5c16:	b510      	push	{r4, lr}
   d5c18:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5c1a:	6800      	ldr	r0, [r0, #0]
   d5c1c:	b108      	cbz	r0, d5c22 <_ZN6String10invalidateEv+0xc>
   d5c1e:	f7ff f8e7 	bl	d4df0 <free>
	buffer = NULL;
   d5c22:	2300      	movs	r3, #0
   d5c24:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5c26:	60a3      	str	r3, [r4, #8]
   d5c28:	6063      	str	r3, [r4, #4]
   d5c2a:	bd10      	pop	{r4, pc}

000d5c2c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5c2c:	b538      	push	{r3, r4, r5, lr}
   d5c2e:	4604      	mov	r4, r0
   d5c30:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5c32:	6800      	ldr	r0, [r0, #0]
   d5c34:	3101      	adds	r1, #1
   d5c36:	f7ff f8e3 	bl	d4e00 <realloc>
	if (newbuffer) {
   d5c3a:	b110      	cbz	r0, d5c42 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5c3c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5c40:	2001      	movs	r0, #1
	}
	return 0;
}
   d5c42:	bd38      	pop	{r3, r4, r5, pc}

000d5c44 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5c44:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5c46:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5c48:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5c4a:	b113      	cbz	r3, d5c52 <_ZN6String7reserveEj+0xe>
   d5c4c:	6843      	ldr	r3, [r0, #4]
   d5c4e:	428b      	cmp	r3, r1
   d5c50:	d207      	bcs.n	d5c62 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5c52:	4620      	mov	r0, r4
   d5c54:	f7ff ffea 	bl	d5c2c <_ZN6String12changeBufferEj>
   d5c58:	b120      	cbz	r0, d5c64 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5c5a:	68a3      	ldr	r3, [r4, #8]
   d5c5c:	b90b      	cbnz	r3, d5c62 <_ZN6String7reserveEj+0x1e>
   d5c5e:	6822      	ldr	r2, [r4, #0]
   d5c60:	7013      	strb	r3, [r2, #0]
   d5c62:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5c64:	bd10      	pop	{r4, pc}

000d5c66 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5c66:	b570      	push	{r4, r5, r6, lr}
   d5c68:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5c6a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5c6c:	4604      	mov	r4, r0
   d5c6e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5c70:	f7ff ffe8 	bl	d5c44 <_ZN6String7reserveEj>
   d5c74:	b918      	cbnz	r0, d5c7e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5c76:	4620      	mov	r0, r4
   d5c78:	f7ff ffcd 	bl	d5c16 <_ZN6String10invalidateEv>
		return *this;
   d5c7c:	e009      	b.n	d5c92 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5c7e:	462a      	mov	r2, r5
   d5c80:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5c82:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5c84:	6820      	ldr	r0, [r4, #0]
   d5c86:	f001 faf5 	bl	d7274 <memcpy>
	buffer[len] = 0;
   d5c8a:	6822      	ldr	r2, [r4, #0]
   d5c8c:	68a3      	ldr	r3, [r4, #8]
   d5c8e:	2100      	movs	r1, #0
   d5c90:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5c92:	4620      	mov	r0, r4
   d5c94:	bd70      	pop	{r4, r5, r6, pc}

000d5c96 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5c96:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c98:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5c9a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c9c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5c9e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ca0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ca2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5ca4:	460d      	mov	r5, r1
   d5ca6:	b139      	cbz	r1, d5cb8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5ca8:	4608      	mov	r0, r1
   d5caa:	f001 fb48 	bl	d733e <strlen>
   d5cae:	4629      	mov	r1, r5
   d5cb0:	4602      	mov	r2, r0
   d5cb2:	4620      	mov	r0, r4
   d5cb4:	f7ff ffd7 	bl	d5c66 <_ZN6String4copyEPKcj>
}
   d5cb8:	4620      	mov	r0, r4
   d5cba:	bd38      	pop	{r3, r4, r5, pc}

000d5cbc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5cbc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5cbe:	b510      	push	{r4, lr}
   d5cc0:	460b      	mov	r3, r1
   d5cc2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5cc4:	d007      	beq.n	d5cd6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5cc6:	6809      	ldr	r1, [r1, #0]
   d5cc8:	b119      	cbz	r1, d5cd2 <_ZN6StringaSERKS_+0x16>
   d5cca:	689a      	ldr	r2, [r3, #8]
   d5ccc:	f7ff ffcb 	bl	d5c66 <_ZN6String4copyEPKcj>
   d5cd0:	e001      	b.n	d5cd6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5cd2:	f7ff ffa0 	bl	d5c16 <_ZN6String10invalidateEv>

	return *this;
}
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	bd10      	pop	{r4, pc}

000d5cda <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5cda:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cdc:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5cde:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ce0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5ce2:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ce4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ce6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5ce8:	f7ff ffe8 	bl	d5cbc <_ZN6StringaSERKS_>
}
   d5cec:	4620      	mov	r0, r4
   d5cee:	bd10      	pop	{r4, pc}

000d5cf0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5cf0:	b538      	push	{r3, r4, r5, lr}
   d5cf2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5cf4:	460c      	mov	r4, r1
   d5cf6:	b141      	cbz	r1, d5d0a <_ZN6StringaSEPKc+0x1a>
   d5cf8:	4608      	mov	r0, r1
   d5cfa:	f001 fb20 	bl	d733e <strlen>
   d5cfe:	4621      	mov	r1, r4
   d5d00:	4602      	mov	r2, r0
   d5d02:	4628      	mov	r0, r5
   d5d04:	f7ff ffaf 	bl	d5c66 <_ZN6String4copyEPKcj>
   d5d08:	e001      	b.n	d5d0e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5d0a:	f7ff ff84 	bl	d5c16 <_ZN6String10invalidateEv>

	return *this;
}
   d5d0e:	4628      	mov	r0, r5
   d5d10:	bd38      	pop	{r3, r4, r5, pc}

000d5d12 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d5d12:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5d14:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d5d16:	b08a      	sub	sp, #40	; 0x28
   d5d18:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5d1a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5d1c:	6043      	str	r3, [r0, #4]
	len = 0;
   d5d1e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5d20:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d5d22:	b2c8      	uxtb	r0, r1
   d5d24:	a901      	add	r1, sp, #4
   d5d26:	f7ff ff0b 	bl	d5b40 <_Z4dtoadhPc>
        *this = buf;
   d5d2a:	a901      	add	r1, sp, #4
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	f7ff ffdf 	bl	d5cf0 <_ZN6StringaSEPKc>
}
   d5d32:	4620      	mov	r0, r4
   d5d34:	b00a      	add	sp, #40	; 0x28
   d5d36:	bd10      	pop	{r4, pc}

000d5d38 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5d38:	4b04      	ldr	r3, [pc, #16]	; (d5d4c <_GLOBAL__sub_I_System+0x14>)
   d5d3a:	2000      	movs	r0, #0
   d5d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5d40:	7018      	strb	r0, [r3, #0]
   d5d42:	8058      	strh	r0, [r3, #2]
   d5d44:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5d46:	f7fe bfa7 	b.w	d4c98 <set_system_mode>
   d5d4a:	bf00      	nop
   d5d4c:	2003e6c4 	.word	0x2003e6c4

000d5d50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d50:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d56:	601a      	str	r2, [r3, #0]
   d5d58:	4770      	bx	lr
   d5d5a:	bf00      	nop
   d5d5c:	2003e428 	.word	0x2003e428
   d5d60:	2003e6cc 	.word	0x2003e6cc

000d5d64 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5d64:	4770      	bx	lr

000d5d66 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d66:	7441      	strb	r1, [r0, #17]
   d5d68:	4770      	bx	lr

000d5d6a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5d6a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5d6c:	7c00      	ldrb	r0, [r0, #16]
   d5d6e:	f7fe ff4b 	bl	d4c08 <HAL_USART_Available_Data_For_Write>
}
   d5d72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d76:	bd08      	pop	{r3, pc}

000d5d78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5d78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5d7a:	7c00      	ldrb	r0, [r0, #16]
   d5d7c:	f7fe ff1c 	bl	d4bb8 <HAL_USART_Available_Data>
}
   d5d80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d84:	bd08      	pop	{r3, pc}

000d5d86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5d86:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5d88:	7c00      	ldrb	r0, [r0, #16]
   d5d8a:	f7fe ff25 	bl	d4bd8 <HAL_USART_Peek_Data>
}
   d5d8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d92:	bf28      	it	cs
   d5d94:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d98:	bd08      	pop	{r3, pc}

000d5d9a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5d9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5d9c:	7c00      	ldrb	r0, [r0, #16]
   d5d9e:	f7fe ff13 	bl	d4bc8 <HAL_USART_Read_Data>
}
   d5da2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5da6:	bf28      	it	cs
   d5da8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5dac:	bd08      	pop	{r3, pc}

000d5dae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5dae:	7c00      	ldrb	r0, [r0, #16]
   d5db0:	f7fe bf1a 	b.w	d4be8 <HAL_USART_Flush_Data>

000d5db4 <_ZN11USARTSerialD0Ev>:
   d5db4:	b510      	push	{r4, lr}
   d5db6:	2114      	movs	r1, #20
   d5db8:	4604      	mov	r4, r0
   d5dba:	f000 fa86 	bl	d62ca <_ZdlPvj>
   d5dbe:	4620      	mov	r0, r4
   d5dc0:	bd10      	pop	{r4, pc}

000d5dc2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5dc2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5dc4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5dc6:	4604      	mov	r4, r0
   d5dc8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5dca:	b925      	cbnz	r5, d5dd6 <_ZN11USARTSerial5writeEh+0x14>
   d5dcc:	7c00      	ldrb	r0, [r0, #16]
   d5dce:	f7fe ff1b 	bl	d4c08 <HAL_USART_Available_Data_For_Write>
   d5dd2:	2800      	cmp	r0, #0
   d5dd4:	dd05      	ble.n	d5de2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5dd6:	4631      	mov	r1, r6
   d5dd8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5dde:	f7fe bee3 	b.w	d4ba8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5de2:	4628      	mov	r0, r5
   d5de4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5de8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5de8:	b510      	push	{r4, lr}
   d5dea:	4604      	mov	r4, r0
   d5dec:	4608      	mov	r0, r1
   d5dee:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5df0:	2200      	movs	r2, #0
   d5df2:	6062      	str	r2, [r4, #4]
   d5df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5df8:	60a2      	str	r2, [r4, #8]
   d5dfa:	4a05      	ldr	r2, [pc, #20]	; (d5e10 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5dfc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5dfe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5e00:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5e02:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5e04:	461a      	mov	r2, r3
   d5e06:	f7fe fec7 	bl	d4b98 <HAL_USART_Init>
}
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	bd10      	pop	{r4, pc}
   d5e0e:	bf00      	nop
   d5e10:	000d75bc 	.word	0x000d75bc

000d5e14 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5e14:	7c00      	ldrb	r0, [r0, #16]
   d5e16:	f7fe beef 	b.w	d4bf8 <HAL_USART_Is_Enabled>
	...

000d5e1c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5e1e:	4c19      	ldr	r4, [pc, #100]	; (d5e84 <_Z22__fetch_global_Serial1v+0x68>)
   d5e20:	6825      	ldr	r5, [r4, #0]
   d5e22:	b94d      	cbnz	r5, d5e38 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d5e24:	2084      	movs	r0, #132	; 0x84
   d5e26:	f7fe f936 	bl	d4096 <_Znwj>
   d5e2a:	4606      	mov	r6, r0
   d5e2c:	b118      	cbz	r0, d5e36 <_Z22__fetch_global_Serial1v+0x1a>
   d5e2e:	2284      	movs	r2, #132	; 0x84
   d5e30:	4629      	mov	r1, r5
   d5e32:	f001 fa2a 	bl	d728a <memset>
   d5e36:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5e38:	4d13      	ldr	r5, [pc, #76]	; (d5e88 <_Z22__fetch_global_Serial1v+0x6c>)
   d5e3a:	682e      	ldr	r6, [r5, #0]
   d5e3c:	b94e      	cbnz	r6, d5e52 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5e3e:	2084      	movs	r0, #132	; 0x84
   d5e40:	f7fe f929 	bl	d4096 <_Znwj>
   d5e44:	4607      	mov	r7, r0
   d5e46:	b118      	cbz	r0, d5e50 <_Z22__fetch_global_Serial1v+0x34>
   d5e48:	2284      	movs	r2, #132	; 0x84
   d5e4a:	4631      	mov	r1, r6
   d5e4c:	f001 fa1d 	bl	d728a <memset>
   d5e50:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5e52:	4f0e      	ldr	r7, [pc, #56]	; (d5e8c <_Z22__fetch_global_Serial1v+0x70>)
   d5e54:	6839      	ldr	r1, [r7, #0]
   d5e56:	f011 0601 	ands.w	r6, r1, #1
   d5e5a:	d111      	bne.n	d5e80 <_Z22__fetch_global_Serial1v+0x64>
   d5e5c:	4638      	mov	r0, r7
   d5e5e:	f7fe f920 	bl	d40a2 <__cxa_guard_acquire>
   d5e62:	b168      	cbz	r0, d5e80 <_Z22__fetch_global_Serial1v+0x64>
   d5e64:	6822      	ldr	r2, [r4, #0]
   d5e66:	682b      	ldr	r3, [r5, #0]
   d5e68:	4809      	ldr	r0, [pc, #36]	; (d5e90 <_Z22__fetch_global_Serial1v+0x74>)
   d5e6a:	4631      	mov	r1, r6
   d5e6c:	f7ff ffbc 	bl	d5de8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5e70:	4638      	mov	r0, r7
   d5e72:	f7fe f91b 	bl	d40ac <__cxa_guard_release>
   d5e76:	4a07      	ldr	r2, [pc, #28]	; (d5e94 <_Z22__fetch_global_Serial1v+0x78>)
   d5e78:	4907      	ldr	r1, [pc, #28]	; (d5e98 <_Z22__fetch_global_Serial1v+0x7c>)
   d5e7a:	4805      	ldr	r0, [pc, #20]	; (d5e90 <_Z22__fetch_global_Serial1v+0x74>)
   d5e7c:	f000 fa20 	bl	d62c0 <__aeabi_atexit>
#endif
	return serial1;
}
   d5e80:	4803      	ldr	r0, [pc, #12]	; (d5e90 <_Z22__fetch_global_Serial1v+0x74>)
   d5e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5e84:	2003e6ec 	.word	0x2003e6ec
   d5e88:	2003e6e4 	.word	0x2003e6e4
   d5e8c:	2003e6e8 	.word	0x2003e6e8
   d5e90:	2003e6d0 	.word	0x2003e6d0
   d5e94:	2003e490 	.word	0x2003e490
   d5e98:	000d5d65 	.word	0x000d5d65

000d5e9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e9c:	7441      	strb	r1, [r0, #17]
   d5e9e:	4770      	bx	lr

000d5ea0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ea0:	4770      	bx	lr

000d5ea2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5ea2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5ea4:	2100      	movs	r1, #0
   d5ea6:	7c00      	ldrb	r0, [r0, #16]
   d5ea8:	f7fe fed6 	bl	d4c58 <HAL_USB_USART_Receive_Data>
}
   d5eac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5eb0:	bf28      	it	cs
   d5eb2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5eb6:	bd08      	pop	{r3, pc}

000d5eb8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5eb8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5eba:	2101      	movs	r1, #1
   d5ebc:	7c00      	ldrb	r0, [r0, #16]
   d5ebe:	f7fe fecb 	bl	d4c58 <HAL_USB_USART_Receive_Data>
}
   d5ec2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ec6:	bf28      	it	cs
   d5ec8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5ecc:	bd08      	pop	{r3, pc}

000d5ece <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5ece:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5ed0:	7c00      	ldrb	r0, [r0, #16]
   d5ed2:	f7fe feb9 	bl	d4c48 <HAL_USB_USART_Available_Data_For_Write>
}
   d5ed6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5eda:	bd08      	pop	{r3, pc}

000d5edc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5edc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5ede:	7c00      	ldrb	r0, [r0, #16]
   d5ee0:	f7fe feaa 	bl	d4c38 <HAL_USB_USART_Available_Data>
}
   d5ee4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ee8:	bd08      	pop	{r3, pc}

000d5eea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5eea:	7c00      	ldrb	r0, [r0, #16]
   d5eec:	f7fe bec4 	b.w	d4c78 <HAL_USB_USART_Flush_Data>

000d5ef0 <_ZN9USBSerialD0Ev>:
   d5ef0:	b510      	push	{r4, lr}
   d5ef2:	2114      	movs	r1, #20
   d5ef4:	4604      	mov	r4, r0
   d5ef6:	f000 f9e8 	bl	d62ca <_ZdlPvj>
   d5efa:	4620      	mov	r0, r4
   d5efc:	bd10      	pop	{r4, pc}

000d5efe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5efe:	b538      	push	{r3, r4, r5, lr}
   d5f00:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f02:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f04:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f06:	f7fe fe9f 	bl	d4c48 <HAL_USB_USART_Available_Data_For_Write>
   d5f0a:	2800      	cmp	r0, #0
   d5f0c:	dc01      	bgt.n	d5f12 <_ZN9USBSerial5writeEh+0x14>
   d5f0e:	7c60      	ldrb	r0, [r4, #17]
   d5f10:	b128      	cbz	r0, d5f1e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f12:	4629      	mov	r1, r5
   d5f14:	7c20      	ldrb	r0, [r4, #16]
   d5f16:	f7fe fea7 	bl	d4c68 <HAL_USB_USART_Send_Data>
   d5f1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5f1e:	bd38      	pop	{r3, r4, r5, pc}

000d5f20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f20:	b510      	push	{r4, lr}
   d5f22:	4604      	mov	r4, r0
   d5f24:	2300      	movs	r3, #0
   d5f26:	6063      	str	r3, [r4, #4]
   d5f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f2c:	60a3      	str	r3, [r4, #8]
   d5f2e:	4b05      	ldr	r3, [pc, #20]	; (d5f44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f30:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5f32:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f34:	4608      	mov	r0, r1
{
  _serial = serial;
   d5f36:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5f38:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5f3a:	4611      	mov	r1, r2
   d5f3c:	f7fe fe6c 	bl	d4c18 <HAL_USB_USART_Init>
}
   d5f40:	4620      	mov	r0, r4
   d5f42:	bd10      	pop	{r4, pc}
   d5f44:	000d75ec 	.word	0x000d75ec

000d5f48 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5f48:	2200      	movs	r2, #0
   d5f4a:	7c00      	ldrb	r0, [r0, #16]
   d5f4c:	f7fe be6c 	b.w	d4c28 <HAL_USB_USART_Begin>

000d5f50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f52:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f54:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f56:	2100      	movs	r1, #0
   d5f58:	f001 f997 	bl	d728a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	bd10      	pop	{r4, pc}

000d5f60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f60:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f62:	4d0e      	ldr	r5, [pc, #56]	; (d5f9c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5f64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f66:	a801      	add	r0, sp, #4
   d5f68:	f7ff fff2 	bl	d5f50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f6c:	6829      	ldr	r1, [r5, #0]
   d5f6e:	f011 0401 	ands.w	r4, r1, #1
   d5f72:	d110      	bne.n	d5f96 <_Z16_fetch_usbserialv+0x36>
   d5f74:	4628      	mov	r0, r5
   d5f76:	f7fe f894 	bl	d40a2 <__cxa_guard_acquire>
   d5f7a:	b160      	cbz	r0, d5f96 <_Z16_fetch_usbserialv+0x36>
   d5f7c:	aa01      	add	r2, sp, #4
   d5f7e:	4621      	mov	r1, r4
   d5f80:	4807      	ldr	r0, [pc, #28]	; (d5fa0 <_Z16_fetch_usbserialv+0x40>)
   d5f82:	f7ff ffcd 	bl	d5f20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f86:	4628      	mov	r0, r5
   d5f88:	f7fe f890 	bl	d40ac <__cxa_guard_release>
   d5f8c:	4a05      	ldr	r2, [pc, #20]	; (d5fa4 <_Z16_fetch_usbserialv+0x44>)
   d5f8e:	4906      	ldr	r1, [pc, #24]	; (d5fa8 <_Z16_fetch_usbserialv+0x48>)
   d5f90:	4803      	ldr	r0, [pc, #12]	; (d5fa0 <_Z16_fetch_usbserialv+0x40>)
   d5f92:	f000 f995 	bl	d62c0 <__aeabi_atexit>
	return _usbserial;
}
   d5f96:	4802      	ldr	r0, [pc, #8]	; (d5fa0 <_Z16_fetch_usbserialv+0x40>)
   d5f98:	b007      	add	sp, #28
   d5f9a:	bd30      	pop	{r4, r5, pc}
   d5f9c:	2003e6f0 	.word	0x2003e6f0
   d5fa0:	2003e6f4 	.word	0x2003e6f4
   d5fa4:	2003e490 	.word	0x2003e490
   d5fa8:	000d5ea1 	.word	0x000d5ea1

000d5fac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5fac:	2200      	movs	r2, #0
   d5fae:	4611      	mov	r1, r2
   d5fb0:	6840      	ldr	r0, [r0, #4]
   d5fb2:	f7fe bedd 	b.w	d4d70 <network_ready>

000d5fb6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fb6:	2200      	movs	r2, #0
   d5fb8:	4611      	mov	r1, r2
   d5fba:	6840      	ldr	r0, [r0, #4]
   d5fbc:	f7fe bef8 	b.w	d4db0 <network_listening>

000d5fc0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fc0:	2200      	movs	r2, #0
   d5fc2:	4611      	mov	r1, r2
   d5fc4:	6840      	ldr	r0, [r0, #4]
   d5fc6:	f7fe bf03 	b.w	d4dd0 <network_get_listen_timeout>

000d5fca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fca:	2200      	movs	r2, #0
   d5fcc:	6840      	ldr	r0, [r0, #4]
   d5fce:	f7fe bef7 	b.w	d4dc0 <network_set_listen_timeout>

000d5fd2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fd2:	2200      	movs	r2, #0
   d5fd4:	f081 0101 	eor.w	r1, r1, #1
   d5fd8:	6840      	ldr	r0, [r0, #4]
   d5fda:	f7fe bee1 	b.w	d4da0 <network_listen>

000d5fde <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5fde:	2300      	movs	r3, #0
   d5fe0:	461a      	mov	r2, r3
   d5fe2:	4619      	mov	r1, r3
   d5fe4:	6840      	ldr	r0, [r0, #4]
   d5fe6:	f7fe bed3 	b.w	d4d90 <network_off>

000d5fea <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5fea:	2300      	movs	r3, #0
   d5fec:	461a      	mov	r2, r3
   d5fee:	4619      	mov	r1, r3
   d5ff0:	6840      	ldr	r0, [r0, #4]
   d5ff2:	f7fe bec5 	b.w	d4d80 <network_on>

000d5ff6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ff6:	2200      	movs	r2, #0
   d5ff8:	4611      	mov	r1, r2
   d5ffa:	6840      	ldr	r0, [r0, #4]
   d5ffc:	f7fe bea8 	b.w	d4d50 <network_connecting>

000d6000 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6000:	2200      	movs	r2, #0
   d6002:	2102      	movs	r1, #2
   d6004:	6840      	ldr	r0, [r0, #4]
   d6006:	f7fe beab 	b.w	d4d60 <network_disconnect>

000d600a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d600a:	2300      	movs	r3, #0
   d600c:	461a      	mov	r2, r3
   d600e:	6840      	ldr	r0, [r0, #4]
   d6010:	f7fe be96 	b.w	d4d40 <network_connect>

000d6014 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6014:	4b02      	ldr	r3, [pc, #8]	; (d6020 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6016:	2204      	movs	r2, #4
   d6018:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d601a:	4a02      	ldr	r2, [pc, #8]	; (d6024 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d601c:	601a      	str	r2, [r3, #0]
   d601e:	4770      	bx	lr
   d6020:	2003e708 	.word	0x2003e708
   d6024:	000d761c 	.word	0x000d761c

000d6028 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6028:	b510      	push	{r4, lr}
   d602a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d602c:	f001 f987 	bl	d733e <strlen>
   d6030:	3801      	subs	r0, #1
   d6032:	1823      	adds	r3, r4, r0
   d6034:	4620      	mov	r0, r4
	while(i<j){
   d6036:	4298      	cmp	r0, r3
   d6038:	d206      	bcs.n	d6048 <_Z11str_reversePc+0x20>
		c = *i;
   d603a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d603c:	7819      	ldrb	r1, [r3, #0]
   d603e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6042:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d6046:	e7f6      	b.n	d6036 <_Z11str_reversePc+0xe>
   d6048:	bd10      	pop	{r4, pc}

000d604a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d604a:	b570      	push	{r4, r5, r6, lr}
   d604c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d604e:	1e91      	subs	r1, r2, #2
   d6050:	2922      	cmp	r1, #34	; 0x22
   d6052:	d820      	bhi.n	d6096 <ultoa+0x4c>
   d6054:	4625      	mov	r5, r4
   d6056:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6058:	b910      	cbnz	r0, d6060 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d605a:	4423      	add	r3, r4
            *ptr++ = '0';
   d605c:	2230      	movs	r2, #48	; 0x30
   d605e:	e00e      	b.n	d607e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6060:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6064:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d6068:	b2c1      	uxtb	r1, r0
   d606a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d606e:	2809      	cmp	r0, #9
                *ptr += '0';
   d6070:	bf94      	ite	ls
   d6072:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6074:	3157      	addhi	r1, #87	; 0x57
   d6076:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d607a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d607c:	e7eb      	b.n	d6056 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d607e:	4299      	cmp	r1, r3
   d6080:	d202      	bcs.n	d6088 <ultoa+0x3e>
            *ptr++ = '0';
   d6082:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6086:	e7fa      	b.n	d607e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6088:	2300      	movs	r3, #0
	str_reverse(buffer);
   d608a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d608c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d608e:	f7ff ffcb 	bl	d6028 <_Z11str_reversePc>
	return buffer;
   d6092:	4620      	mov	r0, r4
   d6094:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6096:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6098:	bd70      	pop	{r4, r5, r6, pc}
	...

000d609c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d609c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d609e:	4b0c      	ldr	r3, [pc, #48]	; (d60d0 <serialEventRun+0x34>)
   d60a0:	b133      	cbz	r3, d60b0 <serialEventRun+0x14>
   d60a2:	f7ff ff5d 	bl	d5f60 <_Z16_fetch_usbserialv>
   d60a6:	6803      	ldr	r3, [r0, #0]
   d60a8:	691b      	ldr	r3, [r3, #16]
   d60aa:	4798      	blx	r3
   d60ac:	2800      	cmp	r0, #0
   d60ae:	dc09      	bgt.n	d60c4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d60b0:	4b08      	ldr	r3, [pc, #32]	; (d60d4 <serialEventRun+0x38>)
   d60b2:	b163      	cbz	r3, d60ce <serialEventRun+0x32>
   d60b4:	f7ff feb2 	bl	d5e1c <_Z22__fetch_global_Serial1v>
   d60b8:	6803      	ldr	r3, [r0, #0]
   d60ba:	691b      	ldr	r3, [r3, #16]
   d60bc:	4798      	blx	r3
   d60be:	2800      	cmp	r0, #0
   d60c0:	dc03      	bgt.n	d60ca <serialEventRun+0x2e>
   d60c2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d60c4:	f3af 8000 	nop.w
   d60c8:	e7f2      	b.n	d60b0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d60ca:	f3af 8000 	nop.w
   d60ce:	bd08      	pop	{r3, pc}
	...

000d60d8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d60d8:	b508      	push	{r3, lr}
	serialEventRun();
   d60da:	f7ff ffdf 	bl	d609c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d60de:	f7fe fcb3 	bl	d4a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d60e2:	4b01      	ldr	r3, [pc, #4]	; (d60e8 <_post_loop+0x10>)
   d60e4:	6018      	str	r0, [r3, #0]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	2003e714 	.word	0x2003e714

000d60ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d60ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d60ee:	2300      	movs	r3, #0
   d60f0:	9300      	str	r3, [sp, #0]
   d60f2:	461a      	mov	r2, r3
   d60f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d60f8:	f7fe fdf8 	bl	d4cec <system_ctrl_set_result>
}
   d60fc:	b003      	add	sp, #12
   d60fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6104 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6104:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6106:	8843      	ldrh	r3, [r0, #2]
   d6108:	2b0a      	cmp	r3, #10
   d610a:	d008      	beq.n	d611e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d610c:	2b50      	cmp	r3, #80	; 0x50
   d610e:	d109      	bne.n	d6124 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6110:	4b09      	ldr	r3, [pc, #36]	; (d6138 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6112:	681b      	ldr	r3, [r3, #0]
   d6114:	b13b      	cbz	r3, d6126 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6116:	b003      	add	sp, #12
   d6118:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d611c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d611e:	f7ff ffe5 	bl	d60ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6122:	e006      	b.n	d6132 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6124:	2300      	movs	r3, #0
   d6126:	9300      	str	r3, [sp, #0]
   d6128:	461a      	mov	r2, r3
   d612a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d612e:	f7fe fddd 	bl	d4cec <system_ctrl_set_result>
        break;
    }
}
   d6132:	b003      	add	sp, #12
   d6134:	f85d fb04 	ldr.w	pc, [sp], #4
   d6138:	2003e710 	.word	0x2003e710

000d613c <module_user_init_hook>:

void module_user_init_hook()
{
   d613c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d613e:	f7fe fc73 	bl	d4a28 <HAL_RNG_GetRandomNumber>
   d6142:	4604      	mov	r4, r0
    srand(seed);
   d6144:	f001 f8b8 	bl	d72b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6148:	4b07      	ldr	r3, [pc, #28]	; (d6168 <module_user_init_hook+0x2c>)
   d614a:	b113      	cbz	r3, d6152 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d614c:	4620      	mov	r0, r4
   d614e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6152:	2100      	movs	r1, #0
   d6154:	4804      	ldr	r0, [pc, #16]	; (d6168 <module_user_init_hook+0x2c>)
   d6156:	f7fe fdeb 	bl	d4d30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d615a:	2100      	movs	r1, #0
   d615c:	4803      	ldr	r0, [pc, #12]	; (d616c <module_user_init_hook+0x30>)
}
   d615e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6162:	f7fe bdb9 	b.w	d4cd8 <system_ctrl_set_app_request_handler>
   d6166:	bf00      	nop
   d6168:	00000000 	.word	0x00000000
   d616c:	000d6105 	.word	0x000d6105

000d6170 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6170:	b510      	push	{r4, lr}
   d6172:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6174:	480f      	ldr	r0, [pc, #60]	; (d61b4 <pinAvailable+0x44>)
   d6176:	f7ff fcdf 	bl	d5b38 <_ZN8SPIClass9isEnabledEv>
   d617a:	b128      	cbz	r0, d6188 <pinAvailable+0x18>
   d617c:	f1a4 030b 	sub.w	r3, r4, #11
   d6180:	2b02      	cmp	r3, #2
   d6182:	d801      	bhi.n	d6188 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6184:	2000      	movs	r0, #0
   d6186:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6188:	f000 f858 	bl	d623c <_Z19__fetch_global_Wirev>
   d618c:	f7ff fa30 	bl	d55f0 <_ZN7TwoWire9isEnabledEv>
   d6190:	b108      	cbz	r0, d6196 <pinAvailable+0x26>
   d6192:	2c01      	cmp	r4, #1
   d6194:	d9f6      	bls.n	d6184 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6196:	f7ff fe41 	bl	d5e1c <_Z22__fetch_global_Serial1v>
   d619a:	f7ff fe3b 	bl	d5e14 <_ZN11USARTSerial9isEnabledEv>
   d619e:	b118      	cbz	r0, d61a8 <pinAvailable+0x38>
   d61a0:	f1a4 0309 	sub.w	r3, r4, #9
   d61a4:	2b01      	cmp	r3, #1
   d61a6:	d9ed      	bls.n	d6184 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d61a8:	2c23      	cmp	r4, #35	; 0x23
   d61aa:	bf8c      	ite	hi
   d61ac:	2000      	movhi	r0, #0
   d61ae:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d61b0:	bd10      	pop	{r4, pc}
   d61b2:	bf00      	nop
   d61b4:	2003e730 	.word	0x2003e730

000d61b8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d61b8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d61ba:	b538      	push	{r3, r4, r5, lr}
   d61bc:	4604      	mov	r4, r0
   d61be:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d61c0:	d80a      	bhi.n	d61d8 <pinMode+0x20>
   d61c2:	29ff      	cmp	r1, #255	; 0xff
   d61c4:	d008      	beq.n	d61d8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d61c6:	f7ff ffd3 	bl	d6170 <pinAvailable>
   d61ca:	b128      	cbz	r0, d61d8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d61cc:	4629      	mov	r1, r5
   d61ce:	4620      	mov	r0, r4
}
   d61d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d61d4:	f7fe bc50 	b.w	d4a78 <HAL_Pin_Mode>
   d61d8:	bd38      	pop	{r3, r4, r5, pc}

000d61da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d61da:	b538      	push	{r3, r4, r5, lr}
   d61dc:	4604      	mov	r4, r0
   d61de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d61e0:	f7fe fc52 	bl	d4a88 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d61e4:	28ff      	cmp	r0, #255	; 0xff
   d61e6:	d010      	beq.n	d620a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d61e8:	2806      	cmp	r0, #6
   d61ea:	d804      	bhi.n	d61f6 <digitalWrite+0x1c>
   d61ec:	234d      	movs	r3, #77	; 0x4d
   d61ee:	fa23 f000 	lsr.w	r0, r3, r0
   d61f2:	07c3      	lsls	r3, r0, #31
   d61f4:	d409      	bmi.n	d620a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d61f6:	4620      	mov	r0, r4
   d61f8:	f7ff ffba 	bl	d6170 <pinAvailable>
   d61fc:	b128      	cbz	r0, d620a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d61fe:	4629      	mov	r1, r5
   d6200:	4620      	mov	r0, r4
}
   d6202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6206:	f7fe bc47 	b.w	d4a98 <HAL_GPIO_Write>
   d620a:	bd38      	pop	{r3, r4, r5, pc}

000d620c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d620c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d620e:	b510      	push	{r4, lr}
   d6210:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6212:	bf9c      	itt	ls
   d6214:	340e      	addls	r4, #14
   d6216:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6218:	4620      	mov	r0, r4
   d621a:	f7ff ffa9 	bl	d6170 <pinAvailable>
   d621e:	b150      	cbz	r0, d6236 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6220:	2103      	movs	r1, #3
   d6222:	4620      	mov	r0, r4
   d6224:	f7fe fc20 	bl	d4a68 <HAL_Validate_Pin_Function>
   d6228:	2803      	cmp	r0, #3
   d622a:	d104      	bne.n	d6236 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d622c:	4620      	mov	r0, r4
}
   d622e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6232:	f7fe bc49 	b.w	d4ac8 <HAL_ADC_Read>
}
   d6236:	2000      	movs	r0, #0
   d6238:	bd10      	pop	{r4, pc}
	...

000d623c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d623c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d623e:	4d0b      	ldr	r5, [pc, #44]	; (d626c <_Z19__fetch_global_Wirev+0x30>)
   d6240:	6829      	ldr	r1, [r5, #0]
   d6242:	f011 0401 	ands.w	r4, r1, #1
   d6246:	d10f      	bne.n	d6268 <_Z19__fetch_global_Wirev+0x2c>
   d6248:	4628      	mov	r0, r5
   d624a:	f7fd ff2a 	bl	d40a2 <__cxa_guard_acquire>
   d624e:	b158      	cbz	r0, d6268 <_Z19__fetch_global_Wirev+0x2c>
   d6250:	4621      	mov	r1, r4
   d6252:	4807      	ldr	r0, [pc, #28]	; (d6270 <_Z19__fetch_global_Wirev+0x34>)
   d6254:	f7ff f9ba 	bl	d55cc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6258:	4628      	mov	r0, r5
   d625a:	f7fd ff27 	bl	d40ac <__cxa_guard_release>
   d625e:	4a05      	ldr	r2, [pc, #20]	; (d6274 <_Z19__fetch_global_Wirev+0x38>)
   d6260:	4905      	ldr	r1, [pc, #20]	; (d6278 <_Z19__fetch_global_Wirev+0x3c>)
   d6262:	4803      	ldr	r0, [pc, #12]	; (d6270 <_Z19__fetch_global_Wirev+0x34>)
   d6264:	f000 f82c 	bl	d62c0 <__aeabi_atexit>
	return wire;
}
   d6268:	4801      	ldr	r0, [pc, #4]	; (d6270 <_Z19__fetch_global_Wirev+0x34>)
   d626a:	bd38      	pop	{r3, r4, r5, pc}
   d626c:	2003e718 	.word	0x2003e718
   d6270:	2003e71c 	.word	0x2003e71c
   d6274:	2003e490 	.word	0x2003e490
   d6278:	000d5575 	.word	0x000d5575

000d627c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d627c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d627e:	4c0c      	ldr	r4, [pc, #48]	; (d62b0 <_GLOBAL__sub_I_SPI+0x34>)
   d6280:	4e0c      	ldr	r6, [pc, #48]	; (d62b4 <_GLOBAL__sub_I_SPI+0x38>)
   d6282:	4d0d      	ldr	r5, [pc, #52]	; (d62b8 <_GLOBAL__sub_I_SPI+0x3c>)
   d6284:	2100      	movs	r1, #0
   d6286:	4620      	mov	r0, r4
   d6288:	f7ff fc42 	bl	d5b10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d628c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d628e:	4c0b      	ldr	r4, [pc, #44]	; (d62bc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6290:	4632      	mov	r2, r6
   d6292:	4629      	mov	r1, r5
   d6294:	f000 f814 	bl	d62c0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6298:	2101      	movs	r1, #1
   d629a:	4620      	mov	r0, r4
   d629c:	f7ff fc38 	bl	d5b10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d62a0:	4632      	mov	r2, r6
   d62a2:	4629      	mov	r1, r5
   d62a4:	4620      	mov	r0, r4
   d62a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d62aa:	f000 b809 	b.w	d62c0 <__aeabi_atexit>
   d62ae:	bf00      	nop
   d62b0:	2003e730 	.word	0x2003e730
   d62b4:	2003e490 	.word	0x2003e490
   d62b8:	000d5b01 	.word	0x000d5b01
   d62bc:	2003e740 	.word	0x2003e740

000d62c0 <__aeabi_atexit>:
   d62c0:	460b      	mov	r3, r1
   d62c2:	4601      	mov	r1, r0
   d62c4:	4618      	mov	r0, r3
   d62c6:	f000 bfc7 	b.w	d7258 <__cxa_atexit>

000d62ca <_ZdlPvj>:
   d62ca:	f7fd bee6 	b.w	d409a <_ZdlPv>

000d62ce <_ZSt25__throw_bad_function_callv>:
   d62ce:	b508      	push	{r3, lr}
   d62d0:	f7fe fda6 	bl	d4e20 <abort>

000d62d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d62d4:	4b24      	ldr	r3, [pc, #144]	; (d6368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d0      	lsls	r0, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4b22      	ldr	r3, [pc, #136]	; (d636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d62e2:	681a      	ldr	r2, [r3, #0]
   d62e4:	07d1      	lsls	r1, r2, #31
   d62e6:	bf5c      	itt	pl
   d62e8:	2201      	movpl	r2, #1
   d62ea:	601a      	strpl	r2, [r3, #0]
   d62ec:	4b20      	ldr	r3, [pc, #128]	; (d6370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d62ee:	681a      	ldr	r2, [r3, #0]
   d62f0:	07d2      	lsls	r2, r2, #31
   d62f2:	bf5c      	itt	pl
   d62f4:	2201      	movpl	r2, #1
   d62f6:	601a      	strpl	r2, [r3, #0]
   d62f8:	4b1e      	ldr	r3, [pc, #120]	; (d6374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d62fa:	681a      	ldr	r2, [r3, #0]
   d62fc:	07d0      	lsls	r0, r2, #31
   d62fe:	bf5c      	itt	pl
   d6300:	2201      	movpl	r2, #1
   d6302:	601a      	strpl	r2, [r3, #0]
   d6304:	4b1c      	ldr	r3, [pc, #112]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6306:	681a      	ldr	r2, [r3, #0]
   d6308:	07d1      	lsls	r1, r2, #31
   d630a:	bf5c      	itt	pl
   d630c:	2201      	movpl	r2, #1
   d630e:	601a      	strpl	r2, [r3, #0]
   d6310:	4b1a      	ldr	r3, [pc, #104]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6312:	681a      	ldr	r2, [r3, #0]
   d6314:	07d2      	lsls	r2, r2, #31
   d6316:	bf5c      	itt	pl
   d6318:	2201      	movpl	r2, #1
   d631a:	601a      	strpl	r2, [r3, #0]
   d631c:	4b18      	ldr	r3, [pc, #96]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d631e:	681a      	ldr	r2, [r3, #0]
   d6320:	07d0      	lsls	r0, r2, #31
   d6322:	bf5c      	itt	pl
   d6324:	2201      	movpl	r2, #1
   d6326:	601a      	strpl	r2, [r3, #0]
   d6328:	4b16      	ldr	r3, [pc, #88]	; (d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d632a:	681a      	ldr	r2, [r3, #0]
   d632c:	07d1      	lsls	r1, r2, #31
   d632e:	bf5c      	itt	pl
   d6330:	2201      	movpl	r2, #1
   d6332:	601a      	strpl	r2, [r3, #0]
   d6334:	4b14      	ldr	r3, [pc, #80]	; (d6388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6336:	681a      	ldr	r2, [r3, #0]
   d6338:	07d2      	lsls	r2, r2, #31
   d633a:	bf5c      	itt	pl
   d633c:	2201      	movpl	r2, #1
   d633e:	601a      	strpl	r2, [r3, #0]
   d6340:	4b12      	ldr	r3, [pc, #72]	; (d638c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6342:	681a      	ldr	r2, [r3, #0]
   d6344:	07d0      	lsls	r0, r2, #31
   d6346:	bf5c      	itt	pl
   d6348:	2201      	movpl	r2, #1
   d634a:	601a      	strpl	r2, [r3, #0]
   d634c:	4b10      	ldr	r3, [pc, #64]	; (d6390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d634e:	681a      	ldr	r2, [r3, #0]
   d6350:	07d1      	lsls	r1, r2, #31
   d6352:	bf5c      	itt	pl
   d6354:	2201      	movpl	r2, #1
   d6356:	601a      	strpl	r2, [r3, #0]
   d6358:	4b0e      	ldr	r3, [pc, #56]	; (d6394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d635a:	681a      	ldr	r2, [r3, #0]
   d635c:	07d2      	lsls	r2, r2, #31
   d635e:	bf5c      	itt	pl
   d6360:	2201      	movpl	r2, #1
   d6362:	601a      	strpl	r2, [r3, #0]
   d6364:	4770      	bx	lr
   d6366:	bf00      	nop
   d6368:	2003e77c 	.word	0x2003e77c
   d636c:	2003e778 	.word	0x2003e778
   d6370:	2003e774 	.word	0x2003e774
   d6374:	2003e770 	.word	0x2003e770
   d6378:	2003e76c 	.word	0x2003e76c
   d637c:	2003e768 	.word	0x2003e768
   d6380:	2003e764 	.word	0x2003e764
   d6384:	2003e760 	.word	0x2003e760
   d6388:	2003e75c 	.word	0x2003e75c
   d638c:	2003e758 	.word	0x2003e758
   d6390:	2003e754 	.word	0x2003e754
   d6394:	2003e750 	.word	0x2003e750

000d6398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6398:	4b18      	ldr	r3, [pc, #96]	; (d63fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d639a:	681a      	ldr	r2, [r3, #0]
   d639c:	07d1      	lsls	r1, r2, #31
   d639e:	bf5c      	itt	pl
   d63a0:	2201      	movpl	r2, #1
   d63a2:	601a      	strpl	r2, [r3, #0]
   d63a4:	4b16      	ldr	r3, [pc, #88]	; (d6400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	07d2      	lsls	r2, r2, #31
   d63aa:	bf5c      	itt	pl
   d63ac:	2201      	movpl	r2, #1
   d63ae:	601a      	strpl	r2, [r3, #0]
   d63b0:	4b14      	ldr	r3, [pc, #80]	; (d6404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d63b2:	681a      	ldr	r2, [r3, #0]
   d63b4:	07d0      	lsls	r0, r2, #31
   d63b6:	bf5c      	itt	pl
   d63b8:	2201      	movpl	r2, #1
   d63ba:	601a      	strpl	r2, [r3, #0]
   d63bc:	4b12      	ldr	r3, [pc, #72]	; (d6408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63be:	681a      	ldr	r2, [r3, #0]
   d63c0:	07d1      	lsls	r1, r2, #31
   d63c2:	bf5c      	itt	pl
   d63c4:	2201      	movpl	r2, #1
   d63c6:	601a      	strpl	r2, [r3, #0]
   d63c8:	4b10      	ldr	r3, [pc, #64]	; (d640c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63ca:	681a      	ldr	r2, [r3, #0]
   d63cc:	07d2      	lsls	r2, r2, #31
   d63ce:	bf5c      	itt	pl
   d63d0:	2201      	movpl	r2, #1
   d63d2:	601a      	strpl	r2, [r3, #0]
   d63d4:	4b0e      	ldr	r3, [pc, #56]	; (d6410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63d6:	681a      	ldr	r2, [r3, #0]
   d63d8:	07d0      	lsls	r0, r2, #31
   d63da:	bf5c      	itt	pl
   d63dc:	2201      	movpl	r2, #1
   d63de:	601a      	strpl	r2, [r3, #0]
   d63e0:	4b0c      	ldr	r3, [pc, #48]	; (d6414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63e2:	681a      	ldr	r2, [r3, #0]
   d63e4:	07d1      	lsls	r1, r2, #31
   d63e6:	bf5c      	itt	pl
   d63e8:	2201      	movpl	r2, #1
   d63ea:	601a      	strpl	r2, [r3, #0]
   d63ec:	4b0a      	ldr	r3, [pc, #40]	; (d6418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63ee:	681a      	ldr	r2, [r3, #0]
   d63f0:	07d2      	lsls	r2, r2, #31
   d63f2:	bf5c      	itt	pl
   d63f4:	2201      	movpl	r2, #1
   d63f6:	601a      	strpl	r2, [r3, #0]
   d63f8:	4770      	bx	lr
   d63fa:	bf00      	nop
   d63fc:	2003e79c 	.word	0x2003e79c
   d6400:	2003e798 	.word	0x2003e798
   d6404:	2003e794 	.word	0x2003e794
   d6408:	2003e790 	.word	0x2003e790
   d640c:	2003e78c 	.word	0x2003e78c
   d6410:	2003e788 	.word	0x2003e788
   d6414:	2003e784 	.word	0x2003e784
   d6418:	2003e780 	.word	0x2003e780

000d641c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d641c:	4b18      	ldr	r3, [pc, #96]	; (d6480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d641e:	681a      	ldr	r2, [r3, #0]
   d6420:	07d1      	lsls	r1, r2, #31
   d6422:	bf5c      	itt	pl
   d6424:	2201      	movpl	r2, #1
   d6426:	601a      	strpl	r2, [r3, #0]
   d6428:	4b16      	ldr	r3, [pc, #88]	; (d6484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d642a:	681a      	ldr	r2, [r3, #0]
   d642c:	07d2      	lsls	r2, r2, #31
   d642e:	bf5c      	itt	pl
   d6430:	2201      	movpl	r2, #1
   d6432:	601a      	strpl	r2, [r3, #0]
   d6434:	4b14      	ldr	r3, [pc, #80]	; (d6488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6436:	681a      	ldr	r2, [r3, #0]
   d6438:	07d0      	lsls	r0, r2, #31
   d643a:	bf5c      	itt	pl
   d643c:	2201      	movpl	r2, #1
   d643e:	601a      	strpl	r2, [r3, #0]
   d6440:	4b12      	ldr	r3, [pc, #72]	; (d648c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6442:	681a      	ldr	r2, [r3, #0]
   d6444:	07d1      	lsls	r1, r2, #31
   d6446:	bf5c      	itt	pl
   d6448:	2201      	movpl	r2, #1
   d644a:	601a      	strpl	r2, [r3, #0]
   d644c:	4b10      	ldr	r3, [pc, #64]	; (d6490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d644e:	681a      	ldr	r2, [r3, #0]
   d6450:	07d2      	lsls	r2, r2, #31
   d6452:	bf5c      	itt	pl
   d6454:	2201      	movpl	r2, #1
   d6456:	601a      	strpl	r2, [r3, #0]
   d6458:	4b0e      	ldr	r3, [pc, #56]	; (d6494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d645a:	681a      	ldr	r2, [r3, #0]
   d645c:	07d0      	lsls	r0, r2, #31
   d645e:	bf5c      	itt	pl
   d6460:	2201      	movpl	r2, #1
   d6462:	601a      	strpl	r2, [r3, #0]
   d6464:	4b0c      	ldr	r3, [pc, #48]	; (d6498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6466:	681a      	ldr	r2, [r3, #0]
   d6468:	07d1      	lsls	r1, r2, #31
   d646a:	bf5c      	itt	pl
   d646c:	2201      	movpl	r2, #1
   d646e:	601a      	strpl	r2, [r3, #0]
   d6470:	4b0a      	ldr	r3, [pc, #40]	; (d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6472:	681a      	ldr	r2, [r3, #0]
   d6474:	07d2      	lsls	r2, r2, #31
   d6476:	bf5c      	itt	pl
   d6478:	2201      	movpl	r2, #1
   d647a:	601a      	strpl	r2, [r3, #0]
   d647c:	4770      	bx	lr
   d647e:	bf00      	nop
   d6480:	2003e7bc 	.word	0x2003e7bc
   d6484:	2003e7b8 	.word	0x2003e7b8
   d6488:	2003e7b4 	.word	0x2003e7b4
   d648c:	2003e7b0 	.word	0x2003e7b0
   d6490:	2003e7ac 	.word	0x2003e7ac
   d6494:	2003e7a8 	.word	0x2003e7a8
   d6498:	2003e7a4 	.word	0x2003e7a4
   d649c:	2003e7a0 	.word	0x2003e7a0

000d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d64a0:	4b24      	ldr	r3, [pc, #144]	; (d6534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d64a2:	681a      	ldr	r2, [r3, #0]
   d64a4:	07d0      	lsls	r0, r2, #31
   d64a6:	bf5c      	itt	pl
   d64a8:	2201      	movpl	r2, #1
   d64aa:	601a      	strpl	r2, [r3, #0]
   d64ac:	4b22      	ldr	r3, [pc, #136]	; (d6538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d64ae:	681a      	ldr	r2, [r3, #0]
   d64b0:	07d1      	lsls	r1, r2, #31
   d64b2:	bf5c      	itt	pl
   d64b4:	2201      	movpl	r2, #1
   d64b6:	601a      	strpl	r2, [r3, #0]
   d64b8:	4b20      	ldr	r3, [pc, #128]	; (d653c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d64ba:	681a      	ldr	r2, [r3, #0]
   d64bc:	07d2      	lsls	r2, r2, #31
   d64be:	bf5c      	itt	pl
   d64c0:	2201      	movpl	r2, #1
   d64c2:	601a      	strpl	r2, [r3, #0]
   d64c4:	4b1e      	ldr	r3, [pc, #120]	; (d6540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d64c6:	681a      	ldr	r2, [r3, #0]
   d64c8:	07d0      	lsls	r0, r2, #31
   d64ca:	bf5c      	itt	pl
   d64cc:	2201      	movpl	r2, #1
   d64ce:	601a      	strpl	r2, [r3, #0]
   d64d0:	4b1c      	ldr	r3, [pc, #112]	; (d6544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d64d2:	681a      	ldr	r2, [r3, #0]
   d64d4:	07d1      	lsls	r1, r2, #31
   d64d6:	bf5c      	itt	pl
   d64d8:	2201      	movpl	r2, #1
   d64da:	601a      	strpl	r2, [r3, #0]
   d64dc:	4b1a      	ldr	r3, [pc, #104]	; (d6548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d64de:	681a      	ldr	r2, [r3, #0]
   d64e0:	07d2      	lsls	r2, r2, #31
   d64e2:	bf5c      	itt	pl
   d64e4:	2201      	movpl	r2, #1
   d64e6:	601a      	strpl	r2, [r3, #0]
   d64e8:	4b18      	ldr	r3, [pc, #96]	; (d654c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d64ea:	681a      	ldr	r2, [r3, #0]
   d64ec:	07d0      	lsls	r0, r2, #31
   d64ee:	bf5c      	itt	pl
   d64f0:	2201      	movpl	r2, #1
   d64f2:	601a      	strpl	r2, [r3, #0]
   d64f4:	4b16      	ldr	r3, [pc, #88]	; (d6550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d64f6:	681a      	ldr	r2, [r3, #0]
   d64f8:	07d1      	lsls	r1, r2, #31
   d64fa:	bf5c      	itt	pl
   d64fc:	2201      	movpl	r2, #1
   d64fe:	601a      	strpl	r2, [r3, #0]
   d6500:	4b14      	ldr	r3, [pc, #80]	; (d6554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6502:	681a      	ldr	r2, [r3, #0]
   d6504:	07d2      	lsls	r2, r2, #31
   d6506:	bf5c      	itt	pl
   d6508:	2201      	movpl	r2, #1
   d650a:	601a      	strpl	r2, [r3, #0]
   d650c:	4b12      	ldr	r3, [pc, #72]	; (d6558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d650e:	681a      	ldr	r2, [r3, #0]
   d6510:	07d0      	lsls	r0, r2, #31
   d6512:	bf5c      	itt	pl
   d6514:	2201      	movpl	r2, #1
   d6516:	601a      	strpl	r2, [r3, #0]
   d6518:	4b10      	ldr	r3, [pc, #64]	; (d655c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d651a:	681a      	ldr	r2, [r3, #0]
   d651c:	07d1      	lsls	r1, r2, #31
   d651e:	bf5c      	itt	pl
   d6520:	2201      	movpl	r2, #1
   d6522:	601a      	strpl	r2, [r3, #0]
   d6524:	4b0e      	ldr	r3, [pc, #56]	; (d6560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6526:	681a      	ldr	r2, [r3, #0]
   d6528:	07d2      	lsls	r2, r2, #31
   d652a:	bf5c      	itt	pl
   d652c:	2201      	movpl	r2, #1
   d652e:	601a      	strpl	r2, [r3, #0]
   d6530:	4770      	bx	lr
   d6532:	bf00      	nop
   d6534:	2003e7ec 	.word	0x2003e7ec
   d6538:	2003e7e8 	.word	0x2003e7e8
   d653c:	2003e7e4 	.word	0x2003e7e4
   d6540:	2003e7e0 	.word	0x2003e7e0
   d6544:	2003e7dc 	.word	0x2003e7dc
   d6548:	2003e7d8 	.word	0x2003e7d8
   d654c:	2003e7d4 	.word	0x2003e7d4
   d6550:	2003e7d0 	.word	0x2003e7d0
   d6554:	2003e7cc 	.word	0x2003e7cc
   d6558:	2003e7c8 	.word	0x2003e7c8
   d655c:	2003e7c4 	.word	0x2003e7c4
   d6560:	2003e7c0 	.word	0x2003e7c0

000d6564 <__aeabi_drsub>:
   d6564:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6568:	e002      	b.n	d6570 <__adddf3>
   d656a:	bf00      	nop

000d656c <__aeabi_dsub>:
   d656c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6570 <__adddf3>:
   d6570:	b530      	push	{r4, r5, lr}
   d6572:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6576:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d657a:	ea94 0f05 	teq	r4, r5
   d657e:	bf08      	it	eq
   d6580:	ea90 0f02 	teqeq	r0, r2
   d6584:	bf1f      	itttt	ne
   d6586:	ea54 0c00 	orrsne.w	ip, r4, r0
   d658a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d658e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6592:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6596:	f000 80e2 	beq.w	d675e <__adddf3+0x1ee>
   d659a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d659e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d65a2:	bfb8      	it	lt
   d65a4:	426d      	neglt	r5, r5
   d65a6:	dd0c      	ble.n	d65c2 <__adddf3+0x52>
   d65a8:	442c      	add	r4, r5
   d65aa:	ea80 0202 	eor.w	r2, r0, r2
   d65ae:	ea81 0303 	eor.w	r3, r1, r3
   d65b2:	ea82 0000 	eor.w	r0, r2, r0
   d65b6:	ea83 0101 	eor.w	r1, r3, r1
   d65ba:	ea80 0202 	eor.w	r2, r0, r2
   d65be:	ea81 0303 	eor.w	r3, r1, r3
   d65c2:	2d36      	cmp	r5, #54	; 0x36
   d65c4:	bf88      	it	hi
   d65c6:	bd30      	pophi	{r4, r5, pc}
   d65c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d65cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d65d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d65d8:	d002      	beq.n	d65e0 <__adddf3+0x70>
   d65da:	4240      	negs	r0, r0
   d65dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d65e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d65e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d65ec:	d002      	beq.n	d65f4 <__adddf3+0x84>
   d65ee:	4252      	negs	r2, r2
   d65f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d65f4:	ea94 0f05 	teq	r4, r5
   d65f8:	f000 80a7 	beq.w	d674a <__adddf3+0x1da>
   d65fc:	f1a4 0401 	sub.w	r4, r4, #1
   d6600:	f1d5 0e20 	rsbs	lr, r5, #32
   d6604:	db0d      	blt.n	d6622 <__adddf3+0xb2>
   d6606:	fa02 fc0e 	lsl.w	ip, r2, lr
   d660a:	fa22 f205 	lsr.w	r2, r2, r5
   d660e:	1880      	adds	r0, r0, r2
   d6610:	f141 0100 	adc.w	r1, r1, #0
   d6614:	fa03 f20e 	lsl.w	r2, r3, lr
   d6618:	1880      	adds	r0, r0, r2
   d661a:	fa43 f305 	asr.w	r3, r3, r5
   d661e:	4159      	adcs	r1, r3
   d6620:	e00e      	b.n	d6640 <__adddf3+0xd0>
   d6622:	f1a5 0520 	sub.w	r5, r5, #32
   d6626:	f10e 0e20 	add.w	lr, lr, #32
   d662a:	2a01      	cmp	r2, #1
   d662c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6630:	bf28      	it	cs
   d6632:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6636:	fa43 f305 	asr.w	r3, r3, r5
   d663a:	18c0      	adds	r0, r0, r3
   d663c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6644:	d507      	bpl.n	d6656 <__adddf3+0xe6>
   d6646:	f04f 0e00 	mov.w	lr, #0
   d664a:	f1dc 0c00 	rsbs	ip, ip, #0
   d664e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6652:	eb6e 0101 	sbc.w	r1, lr, r1
   d6656:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d665a:	d31b      	bcc.n	d6694 <__adddf3+0x124>
   d665c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6660:	d30c      	bcc.n	d667c <__adddf3+0x10c>
   d6662:	0849      	lsrs	r1, r1, #1
   d6664:	ea5f 0030 	movs.w	r0, r0, rrx
   d6668:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d666c:	f104 0401 	add.w	r4, r4, #1
   d6670:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6674:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6678:	f080 809a 	bcs.w	d67b0 <__adddf3+0x240>
   d667c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6680:	bf08      	it	eq
   d6682:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6686:	f150 0000 	adcs.w	r0, r0, #0
   d668a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d668e:	ea41 0105 	orr.w	r1, r1, r5
   d6692:	bd30      	pop	{r4, r5, pc}
   d6694:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6698:	4140      	adcs	r0, r0
   d669a:	eb41 0101 	adc.w	r1, r1, r1
   d669e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66a2:	f1a4 0401 	sub.w	r4, r4, #1
   d66a6:	d1e9      	bne.n	d667c <__adddf3+0x10c>
   d66a8:	f091 0f00 	teq	r1, #0
   d66ac:	bf04      	itt	eq
   d66ae:	4601      	moveq	r1, r0
   d66b0:	2000      	moveq	r0, #0
   d66b2:	fab1 f381 	clz	r3, r1
   d66b6:	bf08      	it	eq
   d66b8:	3320      	addeq	r3, #32
   d66ba:	f1a3 030b 	sub.w	r3, r3, #11
   d66be:	f1b3 0220 	subs.w	r2, r3, #32
   d66c2:	da0c      	bge.n	d66de <__adddf3+0x16e>
   d66c4:	320c      	adds	r2, #12
   d66c6:	dd08      	ble.n	d66da <__adddf3+0x16a>
   d66c8:	f102 0c14 	add.w	ip, r2, #20
   d66cc:	f1c2 020c 	rsb	r2, r2, #12
   d66d0:	fa01 f00c 	lsl.w	r0, r1, ip
   d66d4:	fa21 f102 	lsr.w	r1, r1, r2
   d66d8:	e00c      	b.n	d66f4 <__adddf3+0x184>
   d66da:	f102 0214 	add.w	r2, r2, #20
   d66de:	bfd8      	it	le
   d66e0:	f1c2 0c20 	rsble	ip, r2, #32
   d66e4:	fa01 f102 	lsl.w	r1, r1, r2
   d66e8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d66ec:	bfdc      	itt	le
   d66ee:	ea41 010c 	orrle.w	r1, r1, ip
   d66f2:	4090      	lslle	r0, r2
   d66f4:	1ae4      	subs	r4, r4, r3
   d66f6:	bfa2      	ittt	ge
   d66f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d66fc:	4329      	orrge	r1, r5
   d66fe:	bd30      	popge	{r4, r5, pc}
   d6700:	ea6f 0404 	mvn.w	r4, r4
   d6704:	3c1f      	subs	r4, #31
   d6706:	da1c      	bge.n	d6742 <__adddf3+0x1d2>
   d6708:	340c      	adds	r4, #12
   d670a:	dc0e      	bgt.n	d672a <__adddf3+0x1ba>
   d670c:	f104 0414 	add.w	r4, r4, #20
   d6710:	f1c4 0220 	rsb	r2, r4, #32
   d6714:	fa20 f004 	lsr.w	r0, r0, r4
   d6718:	fa01 f302 	lsl.w	r3, r1, r2
   d671c:	ea40 0003 	orr.w	r0, r0, r3
   d6720:	fa21 f304 	lsr.w	r3, r1, r4
   d6724:	ea45 0103 	orr.w	r1, r5, r3
   d6728:	bd30      	pop	{r4, r5, pc}
   d672a:	f1c4 040c 	rsb	r4, r4, #12
   d672e:	f1c4 0220 	rsb	r2, r4, #32
   d6732:	fa20 f002 	lsr.w	r0, r0, r2
   d6736:	fa01 f304 	lsl.w	r3, r1, r4
   d673a:	ea40 0003 	orr.w	r0, r0, r3
   d673e:	4629      	mov	r1, r5
   d6740:	bd30      	pop	{r4, r5, pc}
   d6742:	fa21 f004 	lsr.w	r0, r1, r4
   d6746:	4629      	mov	r1, r5
   d6748:	bd30      	pop	{r4, r5, pc}
   d674a:	f094 0f00 	teq	r4, #0
   d674e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6752:	bf06      	itte	eq
   d6754:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6758:	3401      	addeq	r4, #1
   d675a:	3d01      	subne	r5, #1
   d675c:	e74e      	b.n	d65fc <__adddf3+0x8c>
   d675e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6762:	bf18      	it	ne
   d6764:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6768:	d029      	beq.n	d67be <__adddf3+0x24e>
   d676a:	ea94 0f05 	teq	r4, r5
   d676e:	bf08      	it	eq
   d6770:	ea90 0f02 	teqeq	r0, r2
   d6774:	d005      	beq.n	d6782 <__adddf3+0x212>
   d6776:	ea54 0c00 	orrs.w	ip, r4, r0
   d677a:	bf04      	itt	eq
   d677c:	4619      	moveq	r1, r3
   d677e:	4610      	moveq	r0, r2
   d6780:	bd30      	pop	{r4, r5, pc}
   d6782:	ea91 0f03 	teq	r1, r3
   d6786:	bf1e      	ittt	ne
   d6788:	2100      	movne	r1, #0
   d678a:	2000      	movne	r0, #0
   d678c:	bd30      	popne	{r4, r5, pc}
   d678e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6792:	d105      	bne.n	d67a0 <__adddf3+0x230>
   d6794:	0040      	lsls	r0, r0, #1
   d6796:	4149      	adcs	r1, r1
   d6798:	bf28      	it	cs
   d679a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d679e:	bd30      	pop	{r4, r5, pc}
   d67a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d67a4:	bf3c      	itt	cc
   d67a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d67aa:	bd30      	popcc	{r4, r5, pc}
   d67ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d67b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d67b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d67b8:	f04f 0000 	mov.w	r0, #0
   d67bc:	bd30      	pop	{r4, r5, pc}
   d67be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d67c2:	bf1a      	itte	ne
   d67c4:	4619      	movne	r1, r3
   d67c6:	4610      	movne	r0, r2
   d67c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d67cc:	bf1c      	itt	ne
   d67ce:	460b      	movne	r3, r1
   d67d0:	4602      	movne	r2, r0
   d67d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d67d6:	bf06      	itte	eq
   d67d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d67dc:	ea91 0f03 	teqeq	r1, r3
   d67e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d67e4:	bd30      	pop	{r4, r5, pc}
   d67e6:	bf00      	nop

000d67e8 <__aeabi_ui2d>:
   d67e8:	f090 0f00 	teq	r0, #0
   d67ec:	bf04      	itt	eq
   d67ee:	2100      	moveq	r1, #0
   d67f0:	4770      	bxeq	lr
   d67f2:	b530      	push	{r4, r5, lr}
   d67f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67fc:	f04f 0500 	mov.w	r5, #0
   d6800:	f04f 0100 	mov.w	r1, #0
   d6804:	e750      	b.n	d66a8 <__adddf3+0x138>
   d6806:	bf00      	nop

000d6808 <__aeabi_i2d>:
   d6808:	f090 0f00 	teq	r0, #0
   d680c:	bf04      	itt	eq
   d680e:	2100      	moveq	r1, #0
   d6810:	4770      	bxeq	lr
   d6812:	b530      	push	{r4, r5, lr}
   d6814:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6818:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d681c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6820:	bf48      	it	mi
   d6822:	4240      	negmi	r0, r0
   d6824:	f04f 0100 	mov.w	r1, #0
   d6828:	e73e      	b.n	d66a8 <__adddf3+0x138>
   d682a:	bf00      	nop

000d682c <__aeabi_f2d>:
   d682c:	0042      	lsls	r2, r0, #1
   d682e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6832:	ea4f 0131 	mov.w	r1, r1, rrx
   d6836:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d683a:	bf1f      	itttt	ne
   d683c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6840:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6844:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6848:	4770      	bxne	lr
   d684a:	f092 0f00 	teq	r2, #0
   d684e:	bf14      	ite	ne
   d6850:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6854:	4770      	bxeq	lr
   d6856:	b530      	push	{r4, r5, lr}
   d6858:	f44f 7460 	mov.w	r4, #896	; 0x380
   d685c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6860:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6864:	e720      	b.n	d66a8 <__adddf3+0x138>
   d6866:	bf00      	nop

000d6868 <__aeabi_ul2d>:
   d6868:	ea50 0201 	orrs.w	r2, r0, r1
   d686c:	bf08      	it	eq
   d686e:	4770      	bxeq	lr
   d6870:	b530      	push	{r4, r5, lr}
   d6872:	f04f 0500 	mov.w	r5, #0
   d6876:	e00a      	b.n	d688e <__aeabi_l2d+0x16>

000d6878 <__aeabi_l2d>:
   d6878:	ea50 0201 	orrs.w	r2, r0, r1
   d687c:	bf08      	it	eq
   d687e:	4770      	bxeq	lr
   d6880:	b530      	push	{r4, r5, lr}
   d6882:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6886:	d502      	bpl.n	d688e <__aeabi_l2d+0x16>
   d6888:	4240      	negs	r0, r0
   d688a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d688e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6892:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6896:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d689a:	f43f aedc 	beq.w	d6656 <__adddf3+0xe6>
   d689e:	f04f 0203 	mov.w	r2, #3
   d68a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d68a6:	bf18      	it	ne
   d68a8:	3203      	addne	r2, #3
   d68aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d68ae:	bf18      	it	ne
   d68b0:	3203      	addne	r2, #3
   d68b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d68b6:	f1c2 0320 	rsb	r3, r2, #32
   d68ba:	fa00 fc03 	lsl.w	ip, r0, r3
   d68be:	fa20 f002 	lsr.w	r0, r0, r2
   d68c2:	fa01 fe03 	lsl.w	lr, r1, r3
   d68c6:	ea40 000e 	orr.w	r0, r0, lr
   d68ca:	fa21 f102 	lsr.w	r1, r1, r2
   d68ce:	4414      	add	r4, r2
   d68d0:	e6c1      	b.n	d6656 <__adddf3+0xe6>
   d68d2:	bf00      	nop

000d68d4 <__aeabi_dmul>:
   d68d4:	b570      	push	{r4, r5, r6, lr}
   d68d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68e2:	bf1d      	ittte	ne
   d68e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68e8:	ea94 0f0c 	teqne	r4, ip
   d68ec:	ea95 0f0c 	teqne	r5, ip
   d68f0:	f000 f8de 	bleq	d6ab0 <__aeabi_dmul+0x1dc>
   d68f4:	442c      	add	r4, r5
   d68f6:	ea81 0603 	eor.w	r6, r1, r3
   d68fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d68fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6902:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6906:	bf18      	it	ne
   d6908:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d690c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6914:	d038      	beq.n	d6988 <__aeabi_dmul+0xb4>
   d6916:	fba0 ce02 	umull	ip, lr, r0, r2
   d691a:	f04f 0500 	mov.w	r5, #0
   d691e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6922:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6926:	fbe0 e503 	umlal	lr, r5, r0, r3
   d692a:	f04f 0600 	mov.w	r6, #0
   d692e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6932:	f09c 0f00 	teq	ip, #0
   d6936:	bf18      	it	ne
   d6938:	f04e 0e01 	orrne.w	lr, lr, #1
   d693c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6940:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6944:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6948:	d204      	bcs.n	d6954 <__aeabi_dmul+0x80>
   d694a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d694e:	416d      	adcs	r5, r5
   d6950:	eb46 0606 	adc.w	r6, r6, r6
   d6954:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6958:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d695c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6960:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6964:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6968:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d696c:	bf88      	it	hi
   d696e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6972:	d81e      	bhi.n	d69b2 <__aeabi_dmul+0xde>
   d6974:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6978:	bf08      	it	eq
   d697a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d697e:	f150 0000 	adcs.w	r0, r0, #0
   d6982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6986:	bd70      	pop	{r4, r5, r6, pc}
   d6988:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d698c:	ea46 0101 	orr.w	r1, r6, r1
   d6990:	ea40 0002 	orr.w	r0, r0, r2
   d6994:	ea81 0103 	eor.w	r1, r1, r3
   d6998:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d699c:	bfc2      	ittt	gt
   d699e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d69a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d69a6:	bd70      	popgt	{r4, r5, r6, pc}
   d69a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d69ac:	f04f 0e00 	mov.w	lr, #0
   d69b0:	3c01      	subs	r4, #1
   d69b2:	f300 80ab 	bgt.w	d6b0c <__aeabi_dmul+0x238>
   d69b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d69ba:	bfde      	ittt	le
   d69bc:	2000      	movle	r0, #0
   d69be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d69c2:	bd70      	pople	{r4, r5, r6, pc}
   d69c4:	f1c4 0400 	rsb	r4, r4, #0
   d69c8:	3c20      	subs	r4, #32
   d69ca:	da35      	bge.n	d6a38 <__aeabi_dmul+0x164>
   d69cc:	340c      	adds	r4, #12
   d69ce:	dc1b      	bgt.n	d6a08 <__aeabi_dmul+0x134>
   d69d0:	f104 0414 	add.w	r4, r4, #20
   d69d4:	f1c4 0520 	rsb	r5, r4, #32
   d69d8:	fa00 f305 	lsl.w	r3, r0, r5
   d69dc:	fa20 f004 	lsr.w	r0, r0, r4
   d69e0:	fa01 f205 	lsl.w	r2, r1, r5
   d69e4:	ea40 0002 	orr.w	r0, r0, r2
   d69e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d69ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69f4:	fa21 f604 	lsr.w	r6, r1, r4
   d69f8:	eb42 0106 	adc.w	r1, r2, r6
   d69fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a00:	bf08      	it	eq
   d6a02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a06:	bd70      	pop	{r4, r5, r6, pc}
   d6a08:	f1c4 040c 	rsb	r4, r4, #12
   d6a0c:	f1c4 0520 	rsb	r5, r4, #32
   d6a10:	fa00 f304 	lsl.w	r3, r0, r4
   d6a14:	fa20 f005 	lsr.w	r0, r0, r5
   d6a18:	fa01 f204 	lsl.w	r2, r1, r4
   d6a1c:	ea40 0002 	orr.w	r0, r0, r2
   d6a20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a28:	f141 0100 	adc.w	r1, r1, #0
   d6a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a30:	bf08      	it	eq
   d6a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a36:	bd70      	pop	{r4, r5, r6, pc}
   d6a38:	f1c4 0520 	rsb	r5, r4, #32
   d6a3c:	fa00 f205 	lsl.w	r2, r0, r5
   d6a40:	ea4e 0e02 	orr.w	lr, lr, r2
   d6a44:	fa20 f304 	lsr.w	r3, r0, r4
   d6a48:	fa01 f205 	lsl.w	r2, r1, r5
   d6a4c:	ea43 0302 	orr.w	r3, r3, r2
   d6a50:	fa21 f004 	lsr.w	r0, r1, r4
   d6a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a58:	fa21 f204 	lsr.w	r2, r1, r4
   d6a5c:	ea20 0002 	bic.w	r0, r0, r2
   d6a60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a68:	bf08      	it	eq
   d6a6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a6e:	bd70      	pop	{r4, r5, r6, pc}
   d6a70:	f094 0f00 	teq	r4, #0
   d6a74:	d10f      	bne.n	d6a96 <__aeabi_dmul+0x1c2>
   d6a76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6a7a:	0040      	lsls	r0, r0, #1
   d6a7c:	eb41 0101 	adc.w	r1, r1, r1
   d6a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a84:	bf08      	it	eq
   d6a86:	3c01      	subeq	r4, #1
   d6a88:	d0f7      	beq.n	d6a7a <__aeabi_dmul+0x1a6>
   d6a8a:	ea41 0106 	orr.w	r1, r1, r6
   d6a8e:	f095 0f00 	teq	r5, #0
   d6a92:	bf18      	it	ne
   d6a94:	4770      	bxne	lr
   d6a96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6a9a:	0052      	lsls	r2, r2, #1
   d6a9c:	eb43 0303 	adc.w	r3, r3, r3
   d6aa0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6aa4:	bf08      	it	eq
   d6aa6:	3d01      	subeq	r5, #1
   d6aa8:	d0f7      	beq.n	d6a9a <__aeabi_dmul+0x1c6>
   d6aaa:	ea43 0306 	orr.w	r3, r3, r6
   d6aae:	4770      	bx	lr
   d6ab0:	ea94 0f0c 	teq	r4, ip
   d6ab4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ab8:	bf18      	it	ne
   d6aba:	ea95 0f0c 	teqne	r5, ip
   d6abe:	d00c      	beq.n	d6ada <__aeabi_dmul+0x206>
   d6ac0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ac4:	bf18      	it	ne
   d6ac6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6aca:	d1d1      	bne.n	d6a70 <__aeabi_dmul+0x19c>
   d6acc:	ea81 0103 	eor.w	r1, r1, r3
   d6ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ad4:	f04f 0000 	mov.w	r0, #0
   d6ad8:	bd70      	pop	{r4, r5, r6, pc}
   d6ada:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ade:	bf06      	itte	eq
   d6ae0:	4610      	moveq	r0, r2
   d6ae2:	4619      	moveq	r1, r3
   d6ae4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ae8:	d019      	beq.n	d6b1e <__aeabi_dmul+0x24a>
   d6aea:	ea94 0f0c 	teq	r4, ip
   d6aee:	d102      	bne.n	d6af6 <__aeabi_dmul+0x222>
   d6af0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6af4:	d113      	bne.n	d6b1e <__aeabi_dmul+0x24a>
   d6af6:	ea95 0f0c 	teq	r5, ip
   d6afa:	d105      	bne.n	d6b08 <__aeabi_dmul+0x234>
   d6afc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6b00:	bf1c      	itt	ne
   d6b02:	4610      	movne	r0, r2
   d6b04:	4619      	movne	r1, r3
   d6b06:	d10a      	bne.n	d6b1e <__aeabi_dmul+0x24a>
   d6b08:	ea81 0103 	eor.w	r1, r1, r3
   d6b0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b18:	f04f 0000 	mov.w	r0, #0
   d6b1c:	bd70      	pop	{r4, r5, r6, pc}
   d6b1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6b26:	bd70      	pop	{r4, r5, r6, pc}

000d6b28 <__aeabi_ddiv>:
   d6b28:	b570      	push	{r4, r5, r6, lr}
   d6b2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b36:	bf1d      	ittte	ne
   d6b38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b3c:	ea94 0f0c 	teqne	r4, ip
   d6b40:	ea95 0f0c 	teqne	r5, ip
   d6b44:	f000 f8a7 	bleq	d6c96 <__aeabi_ddiv+0x16e>
   d6b48:	eba4 0405 	sub.w	r4, r4, r5
   d6b4c:	ea81 0e03 	eor.w	lr, r1, r3
   d6b50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b58:	f000 8088 	beq.w	d6c6c <__aeabi_ddiv+0x144>
   d6b5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6b70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6b74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6b78:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6b7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6b80:	429d      	cmp	r5, r3
   d6b82:	bf08      	it	eq
   d6b84:	4296      	cmpeq	r6, r2
   d6b86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6b8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6b8e:	d202      	bcs.n	d6b96 <__aeabi_ddiv+0x6e>
   d6b90:	085b      	lsrs	r3, r3, #1
   d6b92:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b96:	1ab6      	subs	r6, r6, r2
   d6b98:	eb65 0503 	sbc.w	r5, r5, r3
   d6b9c:	085b      	lsrs	r3, r3, #1
   d6b9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ba2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6ba6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6baa:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bb2:	bf22      	ittt	cs
   d6bb4:	1ab6      	subcs	r6, r6, r2
   d6bb6:	4675      	movcs	r5, lr
   d6bb8:	ea40 000c 	orrcs.w	r0, r0, ip
   d6bbc:	085b      	lsrs	r3, r3, #1
   d6bbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bc2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bca:	bf22      	ittt	cs
   d6bcc:	1ab6      	subcs	r6, r6, r2
   d6bce:	4675      	movcs	r5, lr
   d6bd0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6bd4:	085b      	lsrs	r3, r3, #1
   d6bd6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bda:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bde:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6be2:	bf22      	ittt	cs
   d6be4:	1ab6      	subcs	r6, r6, r2
   d6be6:	4675      	movcs	r5, lr
   d6be8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6bec:	085b      	lsrs	r3, r3, #1
   d6bee:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bf2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bf6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bfa:	bf22      	ittt	cs
   d6bfc:	1ab6      	subcs	r6, r6, r2
   d6bfe:	4675      	movcs	r5, lr
   d6c00:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6c04:	ea55 0e06 	orrs.w	lr, r5, r6
   d6c08:	d018      	beq.n	d6c3c <__aeabi_ddiv+0x114>
   d6c0a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6c0e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6c12:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6c16:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6c1a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6c1e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6c22:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6c26:	d1c0      	bne.n	d6baa <__aeabi_ddiv+0x82>
   d6c28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c2c:	d10b      	bne.n	d6c46 <__aeabi_ddiv+0x11e>
   d6c2e:	ea41 0100 	orr.w	r1, r1, r0
   d6c32:	f04f 0000 	mov.w	r0, #0
   d6c36:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6c3a:	e7b6      	b.n	d6baa <__aeabi_ddiv+0x82>
   d6c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c40:	bf04      	itt	eq
   d6c42:	4301      	orreq	r1, r0
   d6c44:	2000      	moveq	r0, #0
   d6c46:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6c4a:	bf88      	it	hi
   d6c4c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6c50:	f63f aeaf 	bhi.w	d69b2 <__aeabi_dmul+0xde>
   d6c54:	ebb5 0c03 	subs.w	ip, r5, r3
   d6c58:	bf04      	itt	eq
   d6c5a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6c5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c62:	f150 0000 	adcs.w	r0, r0, #0
   d6c66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c6a:	bd70      	pop	{r4, r5, r6, pc}
   d6c6c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6c70:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6c74:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6c78:	bfc2      	ittt	gt
   d6c7a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c82:	bd70      	popgt	{r4, r5, r6, pc}
   d6c84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c88:	f04f 0e00 	mov.w	lr, #0
   d6c8c:	3c01      	subs	r4, #1
   d6c8e:	e690      	b.n	d69b2 <__aeabi_dmul+0xde>
   d6c90:	ea45 0e06 	orr.w	lr, r5, r6
   d6c94:	e68d      	b.n	d69b2 <__aeabi_dmul+0xde>
   d6c96:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c9a:	ea94 0f0c 	teq	r4, ip
   d6c9e:	bf08      	it	eq
   d6ca0:	ea95 0f0c 	teqeq	r5, ip
   d6ca4:	f43f af3b 	beq.w	d6b1e <__aeabi_dmul+0x24a>
   d6ca8:	ea94 0f0c 	teq	r4, ip
   d6cac:	d10a      	bne.n	d6cc4 <__aeabi_ddiv+0x19c>
   d6cae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6cb2:	f47f af34 	bne.w	d6b1e <__aeabi_dmul+0x24a>
   d6cb6:	ea95 0f0c 	teq	r5, ip
   d6cba:	f47f af25 	bne.w	d6b08 <__aeabi_dmul+0x234>
   d6cbe:	4610      	mov	r0, r2
   d6cc0:	4619      	mov	r1, r3
   d6cc2:	e72c      	b.n	d6b1e <__aeabi_dmul+0x24a>
   d6cc4:	ea95 0f0c 	teq	r5, ip
   d6cc8:	d106      	bne.n	d6cd8 <__aeabi_ddiv+0x1b0>
   d6cca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6cce:	f43f aefd 	beq.w	d6acc <__aeabi_dmul+0x1f8>
   d6cd2:	4610      	mov	r0, r2
   d6cd4:	4619      	mov	r1, r3
   d6cd6:	e722      	b.n	d6b1e <__aeabi_dmul+0x24a>
   d6cd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cdc:	bf18      	it	ne
   d6cde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ce2:	f47f aec5 	bne.w	d6a70 <__aeabi_dmul+0x19c>
   d6ce6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6cea:	f47f af0d 	bne.w	d6b08 <__aeabi_dmul+0x234>
   d6cee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6cf2:	f47f aeeb 	bne.w	d6acc <__aeabi_dmul+0x1f8>
   d6cf6:	e712      	b.n	d6b1e <__aeabi_dmul+0x24a>

000d6cf8 <__gedf2>:
   d6cf8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6cfc:	e006      	b.n	d6d0c <__cmpdf2+0x4>
   d6cfe:	bf00      	nop

000d6d00 <__ledf2>:
   d6d00:	f04f 0c01 	mov.w	ip, #1
   d6d04:	e002      	b.n	d6d0c <__cmpdf2+0x4>
   d6d06:	bf00      	nop

000d6d08 <__cmpdf2>:
   d6d08:	f04f 0c01 	mov.w	ip, #1
   d6d0c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6d10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d1c:	bf18      	it	ne
   d6d1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6d22:	d01b      	beq.n	d6d5c <__cmpdf2+0x54>
   d6d24:	b001      	add	sp, #4
   d6d26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6d2a:	bf0c      	ite	eq
   d6d2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6d30:	ea91 0f03 	teqne	r1, r3
   d6d34:	bf02      	ittt	eq
   d6d36:	ea90 0f02 	teqeq	r0, r2
   d6d3a:	2000      	moveq	r0, #0
   d6d3c:	4770      	bxeq	lr
   d6d3e:	f110 0f00 	cmn.w	r0, #0
   d6d42:	ea91 0f03 	teq	r1, r3
   d6d46:	bf58      	it	pl
   d6d48:	4299      	cmppl	r1, r3
   d6d4a:	bf08      	it	eq
   d6d4c:	4290      	cmpeq	r0, r2
   d6d4e:	bf2c      	ite	cs
   d6d50:	17d8      	asrcs	r0, r3, #31
   d6d52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6d56:	f040 0001 	orr.w	r0, r0, #1
   d6d5a:	4770      	bx	lr
   d6d5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d64:	d102      	bne.n	d6d6c <__cmpdf2+0x64>
   d6d66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6d6a:	d107      	bne.n	d6d7c <__cmpdf2+0x74>
   d6d6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d74:	d1d6      	bne.n	d6d24 <__cmpdf2+0x1c>
   d6d76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6d7a:	d0d3      	beq.n	d6d24 <__cmpdf2+0x1c>
   d6d7c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6d80:	4770      	bx	lr
   d6d82:	bf00      	nop

000d6d84 <__aeabi_cdrcmple>:
   d6d84:	4684      	mov	ip, r0
   d6d86:	4610      	mov	r0, r2
   d6d88:	4662      	mov	r2, ip
   d6d8a:	468c      	mov	ip, r1
   d6d8c:	4619      	mov	r1, r3
   d6d8e:	4663      	mov	r3, ip
   d6d90:	e000      	b.n	d6d94 <__aeabi_cdcmpeq>
   d6d92:	bf00      	nop

000d6d94 <__aeabi_cdcmpeq>:
   d6d94:	b501      	push	{r0, lr}
   d6d96:	f7ff ffb7 	bl	d6d08 <__cmpdf2>
   d6d9a:	2800      	cmp	r0, #0
   d6d9c:	bf48      	it	mi
   d6d9e:	f110 0f00 	cmnmi.w	r0, #0
   d6da2:	bd01      	pop	{r0, pc}

000d6da4 <__aeabi_dcmpeq>:
   d6da4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6da8:	f7ff fff4 	bl	d6d94 <__aeabi_cdcmpeq>
   d6dac:	bf0c      	ite	eq
   d6dae:	2001      	moveq	r0, #1
   d6db0:	2000      	movne	r0, #0
   d6db2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6db6:	bf00      	nop

000d6db8 <__aeabi_dcmplt>:
   d6db8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dbc:	f7ff ffea 	bl	d6d94 <__aeabi_cdcmpeq>
   d6dc0:	bf34      	ite	cc
   d6dc2:	2001      	movcc	r0, #1
   d6dc4:	2000      	movcs	r0, #0
   d6dc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6dca:	bf00      	nop

000d6dcc <__aeabi_dcmple>:
   d6dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dd0:	f7ff ffe0 	bl	d6d94 <__aeabi_cdcmpeq>
   d6dd4:	bf94      	ite	ls
   d6dd6:	2001      	movls	r0, #1
   d6dd8:	2000      	movhi	r0, #0
   d6dda:	f85d fb08 	ldr.w	pc, [sp], #8
   d6dde:	bf00      	nop

000d6de0 <__aeabi_dcmpge>:
   d6de0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6de4:	f7ff ffce 	bl	d6d84 <__aeabi_cdrcmple>
   d6de8:	bf94      	ite	ls
   d6dea:	2001      	movls	r0, #1
   d6dec:	2000      	movhi	r0, #0
   d6dee:	f85d fb08 	ldr.w	pc, [sp], #8
   d6df2:	bf00      	nop

000d6df4 <__aeabi_dcmpgt>:
   d6df4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6df8:	f7ff ffc4 	bl	d6d84 <__aeabi_cdrcmple>
   d6dfc:	bf34      	ite	cc
   d6dfe:	2001      	movcc	r0, #1
   d6e00:	2000      	movcs	r0, #0
   d6e02:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e06:	bf00      	nop

000d6e08 <__aeabi_d2uiz>:
   d6e08:	004a      	lsls	r2, r1, #1
   d6e0a:	d211      	bcs.n	d6e30 <__aeabi_d2uiz+0x28>
   d6e0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e10:	d211      	bcs.n	d6e36 <__aeabi_d2uiz+0x2e>
   d6e12:	d50d      	bpl.n	d6e30 <__aeabi_d2uiz+0x28>
   d6e14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e1c:	d40e      	bmi.n	d6e3c <__aeabi_d2uiz+0x34>
   d6e1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e2a:	fa23 f002 	lsr.w	r0, r3, r2
   d6e2e:	4770      	bx	lr
   d6e30:	f04f 0000 	mov.w	r0, #0
   d6e34:	4770      	bx	lr
   d6e36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e3a:	d102      	bne.n	d6e42 <__aeabi_d2uiz+0x3a>
   d6e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6e40:	4770      	bx	lr
   d6e42:	f04f 0000 	mov.w	r0, #0
   d6e46:	4770      	bx	lr

000d6e48 <__aeabi_d2f>:
   d6e48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6e4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6e50:	bf24      	itt	cs
   d6e52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6e56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6e5a:	d90d      	bls.n	d6e78 <__aeabi_d2f+0x30>
   d6e5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6e60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6e64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6e68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6e6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6e70:	bf08      	it	eq
   d6e72:	f020 0001 	biceq.w	r0, r0, #1
   d6e76:	4770      	bx	lr
   d6e78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6e7c:	d121      	bne.n	d6ec2 <__aeabi_d2f+0x7a>
   d6e7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6e82:	bfbc      	itt	lt
   d6e84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6e88:	4770      	bxlt	lr
   d6e8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6e92:	f1c2 0218 	rsb	r2, r2, #24
   d6e96:	f1c2 0c20 	rsb	ip, r2, #32
   d6e9a:	fa10 f30c 	lsls.w	r3, r0, ip
   d6e9e:	fa20 f002 	lsr.w	r0, r0, r2
   d6ea2:	bf18      	it	ne
   d6ea4:	f040 0001 	orrne.w	r0, r0, #1
   d6ea8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6eac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6eb0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6eb4:	ea40 000c 	orr.w	r0, r0, ip
   d6eb8:	fa23 f302 	lsr.w	r3, r3, r2
   d6ebc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6ec0:	e7cc      	b.n	d6e5c <__aeabi_d2f+0x14>
   d6ec2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6ec6:	d107      	bne.n	d6ed8 <__aeabi_d2f+0x90>
   d6ec8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6ecc:	bf1e      	ittt	ne
   d6ece:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6ed2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6ed6:	4770      	bxne	lr
   d6ed8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6edc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6ee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6ee4:	4770      	bx	lr
   d6ee6:	bf00      	nop

000d6ee8 <__aeabi_uldivmod>:
   d6ee8:	b953      	cbnz	r3, d6f00 <__aeabi_uldivmod+0x18>
   d6eea:	b94a      	cbnz	r2, d6f00 <__aeabi_uldivmod+0x18>
   d6eec:	2900      	cmp	r1, #0
   d6eee:	bf08      	it	eq
   d6ef0:	2800      	cmpeq	r0, #0
   d6ef2:	bf1c      	itt	ne
   d6ef4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6ef8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6efc:	f000 b9a2 	b.w	d7244 <__aeabi_idiv0>
   d6f00:	f1ad 0c08 	sub.w	ip, sp, #8
   d6f04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6f08:	f000 f82a 	bl	d6f60 <__udivmoddi4>
   d6f0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6f14:	b004      	add	sp, #16
   d6f16:	4770      	bx	lr

000d6f18 <__aeabi_d2ulz>:
   d6f18:	b5d0      	push	{r4, r6, r7, lr}
   d6f1a:	2200      	movs	r2, #0
   d6f1c:	4b0e      	ldr	r3, [pc, #56]	; (d6f58 <__aeabi_d2ulz+0x40>)
   d6f1e:	4606      	mov	r6, r0
   d6f20:	460f      	mov	r7, r1
   d6f22:	f7ff fcd7 	bl	d68d4 <__aeabi_dmul>
   d6f26:	f7ff ff6f 	bl	d6e08 <__aeabi_d2uiz>
   d6f2a:	4604      	mov	r4, r0
   d6f2c:	f7ff fc5c 	bl	d67e8 <__aeabi_ui2d>
   d6f30:	2200      	movs	r2, #0
   d6f32:	4b0a      	ldr	r3, [pc, #40]	; (d6f5c <__aeabi_d2ulz+0x44>)
   d6f34:	f7ff fcce 	bl	d68d4 <__aeabi_dmul>
   d6f38:	4602      	mov	r2, r0
   d6f3a:	460b      	mov	r3, r1
   d6f3c:	4630      	mov	r0, r6
   d6f3e:	4639      	mov	r1, r7
   d6f40:	f7ff fb14 	bl	d656c <__aeabi_dsub>
   d6f44:	f7ff ff60 	bl	d6e08 <__aeabi_d2uiz>
   d6f48:	4623      	mov	r3, r4
   d6f4a:	2200      	movs	r2, #0
   d6f4c:	ea42 0200 	orr.w	r2, r2, r0
   d6f50:	4610      	mov	r0, r2
   d6f52:	4619      	mov	r1, r3
   d6f54:	bdd0      	pop	{r4, r6, r7, pc}
   d6f56:	bf00      	nop
   d6f58:	3df00000 	.word	0x3df00000
   d6f5c:	41f00000 	.word	0x41f00000

000d6f60 <__udivmoddi4>:
   d6f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f64:	468c      	mov	ip, r1
   d6f66:	460e      	mov	r6, r1
   d6f68:	4604      	mov	r4, r0
   d6f6a:	9d08      	ldr	r5, [sp, #32]
   d6f6c:	2b00      	cmp	r3, #0
   d6f6e:	d150      	bne.n	d7012 <__udivmoddi4+0xb2>
   d6f70:	428a      	cmp	r2, r1
   d6f72:	4617      	mov	r7, r2
   d6f74:	d96c      	bls.n	d7050 <__udivmoddi4+0xf0>
   d6f76:	fab2 fe82 	clz	lr, r2
   d6f7a:	f1be 0f00 	cmp.w	lr, #0
   d6f7e:	d00b      	beq.n	d6f98 <__udivmoddi4+0x38>
   d6f80:	f1ce 0420 	rsb	r4, lr, #32
   d6f84:	fa20 f404 	lsr.w	r4, r0, r4
   d6f88:	fa01 f60e 	lsl.w	r6, r1, lr
   d6f8c:	ea44 0c06 	orr.w	ip, r4, r6
   d6f90:	fa02 f70e 	lsl.w	r7, r2, lr
   d6f94:	fa00 f40e 	lsl.w	r4, r0, lr
   d6f98:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d6f9c:	0c22      	lsrs	r2, r4, #16
   d6f9e:	fbbc f0f9 	udiv	r0, ip, r9
   d6fa2:	fa1f f887 	uxth.w	r8, r7
   d6fa6:	fb09 c610 	mls	r6, r9, r0, ip
   d6faa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6fae:	fb00 f308 	mul.w	r3, r0, r8
   d6fb2:	42b3      	cmp	r3, r6
   d6fb4:	d909      	bls.n	d6fca <__udivmoddi4+0x6a>
   d6fb6:	19f6      	adds	r6, r6, r7
   d6fb8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6fbc:	f080 8122 	bcs.w	d7204 <__udivmoddi4+0x2a4>
   d6fc0:	42b3      	cmp	r3, r6
   d6fc2:	f240 811f 	bls.w	d7204 <__udivmoddi4+0x2a4>
   d6fc6:	3802      	subs	r0, #2
   d6fc8:	443e      	add	r6, r7
   d6fca:	1af6      	subs	r6, r6, r3
   d6fcc:	b2a2      	uxth	r2, r4
   d6fce:	fbb6 f3f9 	udiv	r3, r6, r9
   d6fd2:	fb09 6613 	mls	r6, r9, r3, r6
   d6fd6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6fda:	fb03 f808 	mul.w	r8, r3, r8
   d6fde:	45a0      	cmp	r8, r4
   d6fe0:	d909      	bls.n	d6ff6 <__udivmoddi4+0x96>
   d6fe2:	19e4      	adds	r4, r4, r7
   d6fe4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6fe8:	f080 810a 	bcs.w	d7200 <__udivmoddi4+0x2a0>
   d6fec:	45a0      	cmp	r8, r4
   d6fee:	f240 8107 	bls.w	d7200 <__udivmoddi4+0x2a0>
   d6ff2:	3b02      	subs	r3, #2
   d6ff4:	443c      	add	r4, r7
   d6ff6:	ebc8 0404 	rsb	r4, r8, r4
   d6ffa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6ffe:	2100      	movs	r1, #0
   d7000:	2d00      	cmp	r5, #0
   d7002:	d062      	beq.n	d70ca <__udivmoddi4+0x16a>
   d7004:	fa24 f40e 	lsr.w	r4, r4, lr
   d7008:	2300      	movs	r3, #0
   d700a:	602c      	str	r4, [r5, #0]
   d700c:	606b      	str	r3, [r5, #4]
   d700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7012:	428b      	cmp	r3, r1
   d7014:	d907      	bls.n	d7026 <__udivmoddi4+0xc6>
   d7016:	2d00      	cmp	r5, #0
   d7018:	d055      	beq.n	d70c6 <__udivmoddi4+0x166>
   d701a:	2100      	movs	r1, #0
   d701c:	e885 0041 	stmia.w	r5, {r0, r6}
   d7020:	4608      	mov	r0, r1
   d7022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7026:	fab3 f183 	clz	r1, r3
   d702a:	2900      	cmp	r1, #0
   d702c:	f040 8090 	bne.w	d7150 <__udivmoddi4+0x1f0>
   d7030:	42b3      	cmp	r3, r6
   d7032:	d302      	bcc.n	d703a <__udivmoddi4+0xda>
   d7034:	4282      	cmp	r2, r0
   d7036:	f200 80f8 	bhi.w	d722a <__udivmoddi4+0x2ca>
   d703a:	1a84      	subs	r4, r0, r2
   d703c:	eb66 0603 	sbc.w	r6, r6, r3
   d7040:	2001      	movs	r0, #1
   d7042:	46b4      	mov	ip, r6
   d7044:	2d00      	cmp	r5, #0
   d7046:	d040      	beq.n	d70ca <__udivmoddi4+0x16a>
   d7048:	e885 1010 	stmia.w	r5, {r4, ip}
   d704c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7050:	b912      	cbnz	r2, d7058 <__udivmoddi4+0xf8>
   d7052:	2701      	movs	r7, #1
   d7054:	fbb7 f7f2 	udiv	r7, r7, r2
   d7058:	fab7 fe87 	clz	lr, r7
   d705c:	f1be 0f00 	cmp.w	lr, #0
   d7060:	d135      	bne.n	d70ce <__udivmoddi4+0x16e>
   d7062:	1bf3      	subs	r3, r6, r7
   d7064:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7068:	fa1f fc87 	uxth.w	ip, r7
   d706c:	2101      	movs	r1, #1
   d706e:	fbb3 f0f8 	udiv	r0, r3, r8
   d7072:	0c22      	lsrs	r2, r4, #16
   d7074:	fb08 3610 	mls	r6, r8, r0, r3
   d7078:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d707c:	fb0c f300 	mul.w	r3, ip, r0
   d7080:	42b3      	cmp	r3, r6
   d7082:	d907      	bls.n	d7094 <__udivmoddi4+0x134>
   d7084:	19f6      	adds	r6, r6, r7
   d7086:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d708a:	d202      	bcs.n	d7092 <__udivmoddi4+0x132>
   d708c:	42b3      	cmp	r3, r6
   d708e:	f200 80ce 	bhi.w	d722e <__udivmoddi4+0x2ce>
   d7092:	4610      	mov	r0, r2
   d7094:	1af6      	subs	r6, r6, r3
   d7096:	b2a2      	uxth	r2, r4
   d7098:	fbb6 f3f8 	udiv	r3, r6, r8
   d709c:	fb08 6613 	mls	r6, r8, r3, r6
   d70a0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d70a4:	fb0c fc03 	mul.w	ip, ip, r3
   d70a8:	45a4      	cmp	ip, r4
   d70aa:	d907      	bls.n	d70bc <__udivmoddi4+0x15c>
   d70ac:	19e4      	adds	r4, r4, r7
   d70ae:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d70b2:	d202      	bcs.n	d70ba <__udivmoddi4+0x15a>
   d70b4:	45a4      	cmp	ip, r4
   d70b6:	f200 80b5 	bhi.w	d7224 <__udivmoddi4+0x2c4>
   d70ba:	4613      	mov	r3, r2
   d70bc:	ebcc 0404 	rsb	r4, ip, r4
   d70c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d70c4:	e79c      	b.n	d7000 <__udivmoddi4+0xa0>
   d70c6:	4629      	mov	r1, r5
   d70c8:	4628      	mov	r0, r5
   d70ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d70ce:	f1ce 0120 	rsb	r1, lr, #32
   d70d2:	fa06 f30e 	lsl.w	r3, r6, lr
   d70d6:	fa07 f70e 	lsl.w	r7, r7, lr
   d70da:	fa20 f901 	lsr.w	r9, r0, r1
   d70de:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d70e2:	40ce      	lsrs	r6, r1
   d70e4:	ea49 0903 	orr.w	r9, r9, r3
   d70e8:	fbb6 faf8 	udiv	sl, r6, r8
   d70ec:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d70f0:	fb08 661a 	mls	r6, r8, sl, r6
   d70f4:	fa1f fc87 	uxth.w	ip, r7
   d70f8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d70fc:	fb0a f20c 	mul.w	r2, sl, ip
   d7100:	429a      	cmp	r2, r3
   d7102:	fa00 f40e 	lsl.w	r4, r0, lr
   d7106:	d90a      	bls.n	d711e <__udivmoddi4+0x1be>
   d7108:	19db      	adds	r3, r3, r7
   d710a:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d710e:	f080 8087 	bcs.w	d7220 <__udivmoddi4+0x2c0>
   d7112:	429a      	cmp	r2, r3
   d7114:	f240 8084 	bls.w	d7220 <__udivmoddi4+0x2c0>
   d7118:	f1aa 0a02 	sub.w	sl, sl, #2
   d711c:	443b      	add	r3, r7
   d711e:	1a9b      	subs	r3, r3, r2
   d7120:	fa1f f989 	uxth.w	r9, r9
   d7124:	fbb3 f1f8 	udiv	r1, r3, r8
   d7128:	fb08 3311 	mls	r3, r8, r1, r3
   d712c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7130:	fb01 f60c 	mul.w	r6, r1, ip
   d7134:	429e      	cmp	r6, r3
   d7136:	d907      	bls.n	d7148 <__udivmoddi4+0x1e8>
   d7138:	19db      	adds	r3, r3, r7
   d713a:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d713e:	d26b      	bcs.n	d7218 <__udivmoddi4+0x2b8>
   d7140:	429e      	cmp	r6, r3
   d7142:	d969      	bls.n	d7218 <__udivmoddi4+0x2b8>
   d7144:	3902      	subs	r1, #2
   d7146:	443b      	add	r3, r7
   d7148:	1b9b      	subs	r3, r3, r6
   d714a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d714e:	e78e      	b.n	d706e <__udivmoddi4+0x10e>
   d7150:	f1c1 0e20 	rsb	lr, r1, #32
   d7154:	fa22 f40e 	lsr.w	r4, r2, lr
   d7158:	408b      	lsls	r3, r1
   d715a:	4323      	orrs	r3, r4
   d715c:	fa20 f70e 	lsr.w	r7, r0, lr
   d7160:	fa06 f401 	lsl.w	r4, r6, r1
   d7164:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d7168:	fa26 f60e 	lsr.w	r6, r6, lr
   d716c:	433c      	orrs	r4, r7
   d716e:	fbb6 f9fc 	udiv	r9, r6, ip
   d7172:	0c27      	lsrs	r7, r4, #16
   d7174:	fb0c 6619 	mls	r6, ip, r9, r6
   d7178:	fa1f f883 	uxth.w	r8, r3
   d717c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d7180:	fb09 f708 	mul.w	r7, r9, r8
   d7184:	42b7      	cmp	r7, r6
   d7186:	fa02 f201 	lsl.w	r2, r2, r1
   d718a:	fa00 fa01 	lsl.w	sl, r0, r1
   d718e:	d908      	bls.n	d71a2 <__udivmoddi4+0x242>
   d7190:	18f6      	adds	r6, r6, r3
   d7192:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7196:	d241      	bcs.n	d721c <__udivmoddi4+0x2bc>
   d7198:	42b7      	cmp	r7, r6
   d719a:	d93f      	bls.n	d721c <__udivmoddi4+0x2bc>
   d719c:	f1a9 0902 	sub.w	r9, r9, #2
   d71a0:	441e      	add	r6, r3
   d71a2:	1bf6      	subs	r6, r6, r7
   d71a4:	b2a0      	uxth	r0, r4
   d71a6:	fbb6 f4fc 	udiv	r4, r6, ip
   d71aa:	fb0c 6614 	mls	r6, ip, r4, r6
   d71ae:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d71b2:	fb04 f808 	mul.w	r8, r4, r8
   d71b6:	45b8      	cmp	r8, r7
   d71b8:	d907      	bls.n	d71ca <__udivmoddi4+0x26a>
   d71ba:	18ff      	adds	r7, r7, r3
   d71bc:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d71c0:	d228      	bcs.n	d7214 <__udivmoddi4+0x2b4>
   d71c2:	45b8      	cmp	r8, r7
   d71c4:	d926      	bls.n	d7214 <__udivmoddi4+0x2b4>
   d71c6:	3c02      	subs	r4, #2
   d71c8:	441f      	add	r7, r3
   d71ca:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d71ce:	ebc8 0707 	rsb	r7, r8, r7
   d71d2:	fba0 8902 	umull	r8, r9, r0, r2
   d71d6:	454f      	cmp	r7, r9
   d71d8:	4644      	mov	r4, r8
   d71da:	464e      	mov	r6, r9
   d71dc:	d314      	bcc.n	d7208 <__udivmoddi4+0x2a8>
   d71de:	d029      	beq.n	d7234 <__udivmoddi4+0x2d4>
   d71e0:	b365      	cbz	r5, d723c <__udivmoddi4+0x2dc>
   d71e2:	ebba 0304 	subs.w	r3, sl, r4
   d71e6:	eb67 0706 	sbc.w	r7, r7, r6
   d71ea:	fa07 fe0e 	lsl.w	lr, r7, lr
   d71ee:	40cb      	lsrs	r3, r1
   d71f0:	40cf      	lsrs	r7, r1
   d71f2:	ea4e 0303 	orr.w	r3, lr, r3
   d71f6:	e885 0088 	stmia.w	r5, {r3, r7}
   d71fa:	2100      	movs	r1, #0
   d71fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7200:	4613      	mov	r3, r2
   d7202:	e6f8      	b.n	d6ff6 <__udivmoddi4+0x96>
   d7204:	4610      	mov	r0, r2
   d7206:	e6e0      	b.n	d6fca <__udivmoddi4+0x6a>
   d7208:	ebb8 0402 	subs.w	r4, r8, r2
   d720c:	eb69 0603 	sbc.w	r6, r9, r3
   d7210:	3801      	subs	r0, #1
   d7212:	e7e5      	b.n	d71e0 <__udivmoddi4+0x280>
   d7214:	4604      	mov	r4, r0
   d7216:	e7d8      	b.n	d71ca <__udivmoddi4+0x26a>
   d7218:	4611      	mov	r1, r2
   d721a:	e795      	b.n	d7148 <__udivmoddi4+0x1e8>
   d721c:	4681      	mov	r9, r0
   d721e:	e7c0      	b.n	d71a2 <__udivmoddi4+0x242>
   d7220:	468a      	mov	sl, r1
   d7222:	e77c      	b.n	d711e <__udivmoddi4+0x1be>
   d7224:	3b02      	subs	r3, #2
   d7226:	443c      	add	r4, r7
   d7228:	e748      	b.n	d70bc <__udivmoddi4+0x15c>
   d722a:	4608      	mov	r0, r1
   d722c:	e70a      	b.n	d7044 <__udivmoddi4+0xe4>
   d722e:	3802      	subs	r0, #2
   d7230:	443e      	add	r6, r7
   d7232:	e72f      	b.n	d7094 <__udivmoddi4+0x134>
   d7234:	45c2      	cmp	sl, r8
   d7236:	d3e7      	bcc.n	d7208 <__udivmoddi4+0x2a8>
   d7238:	463e      	mov	r6, r7
   d723a:	e7d1      	b.n	d71e0 <__udivmoddi4+0x280>
   d723c:	4629      	mov	r1, r5
   d723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7242:	bf00      	nop

000d7244 <__aeabi_idiv0>:
   d7244:	4770      	bx	lr
   d7246:	bf00      	nop

000d7248 <calloc>:
   d7248:	4b02      	ldr	r3, [pc, #8]	; (d7254 <calloc+0xc>)
   d724a:	460a      	mov	r2, r1
   d724c:	4601      	mov	r1, r0
   d724e:	6818      	ldr	r0, [r3, #0]
   d7250:	f000 b823 	b.w	d729a <_calloc_r>
   d7254:	2003e48c 	.word	0x2003e48c

000d7258 <__cxa_atexit>:
   d7258:	b510      	push	{r4, lr}
   d725a:	4c05      	ldr	r4, [pc, #20]	; (d7270 <__cxa_atexit+0x18>)
   d725c:	4613      	mov	r3, r2
   d725e:	b12c      	cbz	r4, d726c <__cxa_atexit+0x14>
   d7260:	460a      	mov	r2, r1
   d7262:	4601      	mov	r1, r0
   d7264:	2002      	movs	r0, #2
   d7266:	f3af 8000 	nop.w
   d726a:	bd10      	pop	{r4, pc}
   d726c:	4620      	mov	r0, r4
   d726e:	bd10      	pop	{r4, pc}
   d7270:	00000000 	.word	0x00000000

000d7274 <memcpy>:
   d7274:	b510      	push	{r4, lr}
   d7276:	1e43      	subs	r3, r0, #1
   d7278:	440a      	add	r2, r1
   d727a:	4291      	cmp	r1, r2
   d727c:	d004      	beq.n	d7288 <memcpy+0x14>
   d727e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7282:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7286:	e7f8      	b.n	d727a <memcpy+0x6>
   d7288:	bd10      	pop	{r4, pc}

000d728a <memset>:
   d728a:	4402      	add	r2, r0
   d728c:	4603      	mov	r3, r0
   d728e:	4293      	cmp	r3, r2
   d7290:	d002      	beq.n	d7298 <memset+0xe>
   d7292:	f803 1b01 	strb.w	r1, [r3], #1
   d7296:	e7fa      	b.n	d728e <memset+0x4>
   d7298:	4770      	bx	lr

000d729a <_calloc_r>:
   d729a:	b538      	push	{r3, r4, r5, lr}
   d729c:	fb02 f401 	mul.w	r4, r2, r1
   d72a0:	4621      	mov	r1, r4
   d72a2:	f7fd fdc5 	bl	d4e30 <_malloc_r>
   d72a6:	4605      	mov	r5, r0
   d72a8:	b118      	cbz	r0, d72b2 <_calloc_r+0x18>
   d72aa:	4622      	mov	r2, r4
   d72ac:	2100      	movs	r1, #0
   d72ae:	f7ff ffec 	bl	d728a <memset>
   d72b2:	4628      	mov	r0, r5
   d72b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d72b8 <srand>:
   d72b8:	b538      	push	{r3, r4, r5, lr}
   d72ba:	4b12      	ldr	r3, [pc, #72]	; (d7304 <srand+0x4c>)
   d72bc:	681c      	ldr	r4, [r3, #0]
   d72be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d72c0:	4605      	mov	r5, r0
   d72c2:	b9d3      	cbnz	r3, d72fa <srand+0x42>
   d72c4:	2018      	movs	r0, #24
   d72c6:	f7fd fd8b 	bl	d4de0 <malloc>
   d72ca:	f243 330e 	movw	r3, #13070	; 0x330e
   d72ce:	63a0      	str	r0, [r4, #56]	; 0x38
   d72d0:	8003      	strh	r3, [r0, #0]
   d72d2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d72d6:	8043      	strh	r3, [r0, #2]
   d72d8:	f241 2334 	movw	r3, #4660	; 0x1234
   d72dc:	8083      	strh	r3, [r0, #4]
   d72de:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d72e2:	80c3      	strh	r3, [r0, #6]
   d72e4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d72e8:	8103      	strh	r3, [r0, #8]
   d72ea:	2305      	movs	r3, #5
   d72ec:	8143      	strh	r3, [r0, #10]
   d72ee:	230b      	movs	r3, #11
   d72f0:	8183      	strh	r3, [r0, #12]
   d72f2:	2201      	movs	r2, #1
   d72f4:	2300      	movs	r3, #0
   d72f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d72fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d72fc:	2200      	movs	r2, #0
   d72fe:	611d      	str	r5, [r3, #16]
   d7300:	615a      	str	r2, [r3, #20]
   d7302:	bd38      	pop	{r3, r4, r5, pc}
   d7304:	2003e48c 	.word	0x2003e48c

000d7308 <strdup>:
   d7308:	4b02      	ldr	r3, [pc, #8]	; (d7314 <strdup+0xc>)
   d730a:	4601      	mov	r1, r0
   d730c:	6818      	ldr	r0, [r3, #0]
   d730e:	f000 b803 	b.w	d7318 <_strdup_r>
   d7312:	bf00      	nop
   d7314:	2003e48c 	.word	0x2003e48c

000d7318 <_strdup_r>:
   d7318:	b570      	push	{r4, r5, r6, lr}
   d731a:	4606      	mov	r6, r0
   d731c:	4608      	mov	r0, r1
   d731e:	460c      	mov	r4, r1
   d7320:	f000 f80d 	bl	d733e <strlen>
   d7324:	1c45      	adds	r5, r0, #1
   d7326:	4629      	mov	r1, r5
   d7328:	4630      	mov	r0, r6
   d732a:	f7fd fd81 	bl	d4e30 <_malloc_r>
   d732e:	4606      	mov	r6, r0
   d7330:	b118      	cbz	r0, d733a <_strdup_r+0x22>
   d7332:	462a      	mov	r2, r5
   d7334:	4621      	mov	r1, r4
   d7336:	f7ff ff9d 	bl	d7274 <memcpy>
   d733a:	4630      	mov	r0, r6
   d733c:	bd70      	pop	{r4, r5, r6, pc}

000d733e <strlen>:
   d733e:	4603      	mov	r3, r0
   d7340:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7344:	2a00      	cmp	r2, #0
   d7346:	d1fb      	bne.n	d7340 <strlen+0x2>
   d7348:	1a18      	subs	r0, r3, r0
   d734a:	3801      	subs	r0, #1
   d734c:	4770      	bx	lr

000d734e <link_code_end>:
	...

000d7350 <dynalib_user>:
   d7350:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7360:	0000 0000 6574 706d 6800 6d75 6469 7469     ....temp.humidit
   d7370:	0079 6f74 6767 656c 654c 0064 6554 706d     y.toggleLed.Temp
   d7380:	203a 6625 4800 6d75 6469 7469 3a79 2520     : %f.Humidity: %
   d7390:	0066 696c 6867 2d74 656d 6574 2f72 656c     f.light-meter/le
   d73a0:	6576 006c                                   vel.

000d73a4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d73ac:	4f59 000d 4f5f 000d 4f89 000d 4f6d 000d     YO.._O...O..mO..
   d73bc:	4f5b 000d                                   [O..

000d73c0 <_ZTVN5spark13EthernetClassE>:
	...
   d73c8:	5557 000d 554d 000d 5543 000d 5539 000d     WU..MU..CU..9U..
   d73d8:	552d 000d 5521 000d 5515 000d 550d 000d     -U..!U...U...U..
   d73e8:	5503 000d 54f9 000d 58bd 000d               .U...T...X..

000d73f4 <_ZTV7TwoWire>:
	...
   d73fc:	5575 000d 55bf 000d 5597 000d 5577 000d     uU...U...U..wU..
   d740c:	559f 000d 55a7 000d 55af 000d 55b7 000d     .U...U...U...U..

000d741c <_ZTV9IPAddress>:
	...
   d7424:	5611 000d 5601 000d 5603 000d 6e6c 6600     .V...V...V..ln.f
   d7434:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d7444:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d7454:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d7464:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
   d7474:	7561 0064 6553 6972 6c61 5300 7265 6169     aud.Serial.Seria
   d7484:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
   d7494:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
   d74a4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
   d74b4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
   d74c4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
   d74d4:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
   d74e4:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
   d74f4:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d7504:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d7510 <_ZTVN5spark9MeshClassE>:
	...
   d7518:	5753 000d 5749 000d 573f 000d 5735 000d     SW..IW..?W..5W..
   d7528:	5729 000d 571d 000d 5711 000d 5709 000d     )W...W...W...W..
   d7538:	56ff 000d 56f5 000d 58bd 000d               .V...V...X..

000d7544 <_ZTVN5spark12NetworkClassE>:
	...
   d754c:	5855 000d 585f 000d 5869 000d 5873 000d     UX.._X..iX..sX..
   d755c:	587d 000d 5889 000d 5895 000d 58a1 000d     }X...X...X...X..
   d756c:	58a9 000d 58b3 000d 58bd 000d               .X...X...X..

000d7578 <_ZTV8SPIClass>:
	...
   d7580:	5b01 000d 5b03 000d 005a 2b25 3330 3a64     .[...[..Z.%+03d:
   d7590:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d75a0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d75b0:	0000 0000                                   ....

000d75b4 <_ZTV11USARTSerial>:
	...
   d75bc:	5d65 000d 5db5 000d 5dc3 000d 599d 000d     e]...]...]...Y..
   d75cc:	5d79 000d 5d9b 000d 5d87 000d 5daf 000d     y]...]...]...]..
   d75dc:	5d67 000d 5d6b 000d                         g]..k]..

000d75e4 <_ZTV9USBSerial>:
	...
   d75ec:	5ea1 000d 5ef1 000d 5eff 000d 599d 000d     .^...^...^...Y..
   d75fc:	5edd 000d 5ea3 000d 5eb9 000d 5eeb 000d     .^...^...^...^..
   d760c:	5ecf 000d 5e9d 000d                         .^...^..

000d7614 <_ZTVN5spark9WiFiClassE>:
	...
   d761c:	600b 000d 6001 000d 5ff7 000d 5fad 000d     .`...`..._..._..
   d762c:	5feb 000d 5fdf 000d 5fd3 000d 5fcb 000d     ._..._..._..._..
   d763c:	5fc1 000d 5fb7 000d 58bd 000d               ._..._...X..

000d7648 <__sf_fake_stdin>:
	...

000d7668 <__sf_fake_stdout>:
	...

000d7688 <__sf_fake_stderr>:
	...
   d76a8:	0043                                        C.

000d76aa <link_const_variable_data_end>:
	...

000d76ac <link_constructors_location>:
   d76ac:	000d42ad 	.word	0x000d42ad
   d76b0:	000d472d 	.word	0x000d472d
   d76b4:	000d49c9 	.word	0x000d49c9
   d76b8:	000d4f49 	.word	0x000d4f49
   d76bc:	000d5561 	.word	0x000d5561
   d76c0:	000d56e5 	.word	0x000d56e5
   d76c4:	000d5809 	.word	0x000d5809
   d76c8:	000d5989 	.word	0x000d5989
   d76cc:	000d5ae5 	.word	0x000d5ae5
   d76d0:	000d5d39 	.word	0x000d5d39
   d76d4:	000d5d51 	.word	0x000d5d51
   d76d8:	000d6015 	.word	0x000d6015
   d76dc:	000d627d 	.word	0x000d627d
   d76e0:	000d62d5 	.word	0x000d62d5
   d76e4:	000d6399 	.word	0x000d6399
   d76e8:	000d641d 	.word	0x000d641d
   d76ec:	000d64a1 	.word	0x000d64a1
